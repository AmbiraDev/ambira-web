[
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/.eslintrc.react-query-rules.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/.prettierrc.mjs",
    "messages": [
      {
        "ruleId": "import/no-anonymous-default-export",
        "severity": 1,
        "message": "Assign object to a variable before exporting as module default",
        "line": 2,
        "column": 1,
        "nodeType": "ExportDefaultDeclaration",
        "endLine": 9,
        "endColumn": 2
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/** @type {import(\"prettier\").Config} */\nexport default {\n  semi: false,\n  singleQuote: true,\n  trailingComma: 'es5',\n  tabWidth: 2,\n  printWidth: 100,\n  arrowParens: 'always',\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/coverage/lcov-report/block-navigation.js",
    "messages": [
      {
        "ruleId": null,
        "message": "Unused eslint-disable directive (no problems were reported).",
        "line": 1,
        "column": 1,
        "severity": 1,
        "nodeType": null,
        "fix": { "range": [0, 20], "text": " " }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "/* eslint-disable */\nvar jumpToCode = (function init() {\n    // Classes of code we would like to highlight in the file view\n    var missingCoverageClasses = ['.cbranch-no', '.cstat-no', '.fstat-no'];\n\n    // Elements to highlight in the file listing view\n    var fileListingElements = ['td.pct.low'];\n\n    // We don't want to select elements that are direct descendants of another match\n    var notSelector = ':not(' + missingCoverageClasses.join('):not(') + ') > '; // becomes `:not(a):not(b) > `\n\n    // Selector that finds elements on the page to which we can jump\n    var selector =\n        fileListingElements.join(', ') +\n        ', ' +\n        notSelector +\n        missingCoverageClasses.join(', ' + notSelector); // becomes `:not(a):not(b) > a, :not(a):not(b) > b`\n\n    // The NodeList of matching elements\n    var missingCoverageElements = document.querySelectorAll(selector);\n\n    var currentIndex;\n\n    function toggleClass(index) {\n        missingCoverageElements\n            .item(currentIndex)\n            .classList.remove('highlighted');\n        missingCoverageElements.item(index).classList.add('highlighted');\n    }\n\n    function makeCurrent(index) {\n        toggleClass(index);\n        currentIndex = index;\n        missingCoverageElements.item(index).scrollIntoView({\n            behavior: 'smooth',\n            block: 'center',\n            inline: 'center'\n        });\n    }\n\n    function goToPrevious() {\n        var nextIndex = 0;\n        if (typeof currentIndex !== 'number' || currentIndex === 0) {\n            nextIndex = missingCoverageElements.length - 1;\n        } else if (missingCoverageElements.length > 1) {\n            nextIndex = currentIndex - 1;\n        }\n\n        makeCurrent(nextIndex);\n    }\n\n    function goToNext() {\n        var nextIndex = 0;\n\n        if (\n            typeof currentIndex === 'number' &&\n            currentIndex < missingCoverageElements.length - 1\n        ) {\n            nextIndex = currentIndex + 1;\n        }\n\n        makeCurrent(nextIndex);\n    }\n\n    return function jump(event) {\n        if (\n            document.getElementById('fileSearch') === document.activeElement &&\n            document.activeElement != null\n        ) {\n            // if we're currently focused on the search input, we don't want to navigate\n            return;\n        }\n\n        switch (event.which) {\n            case 78: // n\n            case 74: // j\n                goToNext();\n                break;\n            case 66: // b\n            case 75: // k\n            case 80: // p\n                goToPrevious();\n                break;\n        }\n    };\n})();\nwindow.addEventListener('keydown', jumpToCode);\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/coverage/lcov-report/prettify.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ae' is assigned a value but never used.",
        "line": 2,
        "column": 11414,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 11416,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'af' is assigned a value but never used.",
        "line": 2,
        "column": 11438,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 11440,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ag' is assigned a value but never used.",
        "line": 2,
        "column": 11471,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 11473,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ae' is assigned a value but never used.",
        "line": 2,
        "column": 14757,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 14759,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/coverage/lcov-report/sorter.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 36,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 23,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/e2e/fixtures/test-base.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/e2e/smoke/auth.spec.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/e2e/smoke/feed.spec.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/e2e/smoke/timer.spec.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/e2e/utils/accessibility.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/eslint.config.mjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/jest.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/jest.setup.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/next.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/playwright.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/postcss.config.mjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/public/sw.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/scripts/dev/cls-profiler.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'name' is defined but never used.",
        "line": 468,
        "column": 54,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 468,
        "endColumn": 58
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Comprehensive CLS (Cumulative Layout Shift) Profiler\n *\n * This script profiles layout shifts on a page and provides detailed analysis\n * of what elements are causing shifts and when they occur.\n */\n\nimport puppeteer from 'puppeteer';\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\n// ES module equivalent of __dirname\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nclass CLSProfiler {\n  constructor(url, options = {}) {\n    this.url = url;\n    this.options = {\n      headless: false,\n      slowMo: 0,\n      viewport: { width: 1920, height: 1080 },\n      waitTime: 10000, // Time to wait for page to fully load\n      screenshots: true,\n      ...options\n    };\n    this.results = {\n      url,\n      timestamp: new Date().toISOString(),\n      layoutShifts: [],\n      totalCLS: 0,\n      maxCLS: 0,\n      scenarios: {}\n    };\n  }\n\n  /**\n   * Initialize browser and page with performance monitoring\n   */\n  async initialize() {\n    this.browser = await puppeteer.launch({\n      headless: this.options.headless,\n      slowMo: this.options.slowMo,\n      args: ['--enable-precise-memory-info']\n    });\n\n    this.page = await this.browser.newPage();\n    await this.page.setViewport(this.options.viewport);\n\n    // Enable performance metrics\n    await this.page.evaluateOnNewDocument(() => {\n      window.layoutShifts = [];\n      window.performanceMetrics = {\n        navigationStart: 0,\n        fontLoadStart: 0,\n        fontLoadEnd: 0,\n        imageLoadStart: 0,\n        imageLoadEnd: 0\n      };\n    });\n  }\n\n  /**\n   * Inject CLS monitoring script into the page\n   */\n  async injectCLSMonitor() {\n    await this.page.evaluateOnNewDocument(() => {\n      // Track layout shifts with detailed information\n      const observer = new PerformanceObserver((list) => {\n        for (const entry of list.getEntries()) {\n          if (entry.entryType === 'layout-shift' && !entry.hadRecentInput) {\n            const shift = {\n              value: entry.value,\n              startTime: entry.startTime,\n              duration: entry.duration,\n              hadRecentInput: entry.hadRecentInput,\n              lastInputTime: entry.lastInputTime,\n              sources: entry.sources ? Array.from(entry.sources).map(source => ({\n                node: source.node ? {\n                  tagName: source.node.tagName,\n                  id: source.node.id,\n                  className: source.node.className,\n                  outerHTML: source.node.outerHTML ? source.node.outerHTML.substring(0, 200) : '',\n                  boundingRect: source.node.getBoundingClientRect ? {\n                    top: source.node.getBoundingClientRect().top,\n                    left: source.node.getBoundingClientRect().left,\n                    width: source.node.getBoundingClientRect().width,\n                    height: source.node.getBoundingClientRect().height\n                  } : null\n                } : null,\n                previousRect: source.previousRect ? {\n                  x: source.previousRect.x,\n                  y: source.previousRect.y,\n                  width: source.previousRect.width,\n                  height: source.previousRect.height\n                } : null,\n                currentRect: source.currentRect ? {\n                  x: source.currentRect.x,\n                  y: source.currentRect.y,\n                  width: source.currentRect.width,\n                  height: source.currentRect.height\n                } : null\n              })) : []\n            };\n\n            window.layoutShifts.push(shift);\n            console.log('Layout Shift Detected:', shift);\n          }\n        }\n      });\n\n      observer.observe({ type: 'layout-shift', buffered: true });\n\n      // Monitor font loading\n      if (document.fonts) {\n        window.performanceMetrics.fontLoadStart = performance.now();\n        document.fonts.ready.then(() => {\n          window.performanceMetrics.fontLoadEnd = performance.now();\n          console.log('Fonts loaded at:', window.performanceMetrics.fontLoadEnd);\n        });\n      }\n\n      // Monitor image loading\n      window.addEventListener('load', () => {\n        const images = document.querySelectorAll('img');\n        let loadedImages = 0;\n        const totalImages = images.length;\n\n        window.performanceMetrics.imageLoadStart = performance.now();\n\n        images.forEach(img => {\n          if (img.complete) {\n            loadedImages++;\n          } else {\n            img.addEventListener('load', () => {\n              loadedImages++;\n              if (loadedImages === totalImages) {\n                window.performanceMetrics.imageLoadEnd = performance.now();\n                console.log('All images loaded at:', window.performanceMetrics.imageLoadEnd);\n              }\n            });\n          }\n        });\n\n        if (loadedImages === totalImages) {\n          window.performanceMetrics.imageLoadEnd = performance.now();\n        }\n      });\n\n      // Track navigation start\n      window.performanceMetrics.navigationStart = performance.now();\n    });\n  }\n\n  /**\n   * Get Web Vitals metrics\n   */\n  async getWebVitals() {\n    return await this.page.evaluate(() => {\n      return new Promise((resolve) => {\n        const metrics = {\n          CLS: 0,\n          LCP: 0,\n          FID: 0,\n          FCP: 0,\n          TTFB: 0\n        };\n\n        // Get CLS\n        let clsValue = 0;\n        const clsObserver = new PerformanceObserver((list) => {\n          for (const entry of list.getEntries()) {\n            if (!entry.hadRecentInput) {\n              clsValue += entry.value;\n            }\n          }\n        });\n        clsObserver.observe({ type: 'layout-shift', buffered: true });\n        metrics.CLS = clsValue;\n\n        // Get LCP\n        const lcpObserver = new PerformanceObserver((list) => {\n          const entries = list.getEntries();\n          const lastEntry = entries[entries.length - 1];\n          metrics.LCP = lastEntry.renderTime || lastEntry.loadTime;\n        });\n        lcpObserver.observe({ type: 'largest-contentful-paint', buffered: true });\n\n        // Get FCP\n        const fcpObserver = new PerformanceObserver((list) => {\n          for (const entry of list.getEntries()) {\n            if (entry.name === 'first-contentful-paint') {\n              metrics.FCP = entry.startTime;\n            }\n          }\n        });\n        fcpObserver.observe({ type: 'paint', buffered: true });\n\n        // Get TTFB\n        const navigationTiming = performance.getEntriesByType('navigation')[0];\n        if (navigationTiming) {\n          metrics.TTFB = navigationTiming.responseStart - navigationTiming.requestStart;\n        }\n\n        setTimeout(() => resolve(metrics), 100);\n      });\n    });\n  }\n\n  /**\n   * Capture layout shifts during page load\n   */\n  async profileInitialLoad() {\n    console.log('\\n=== Profiling Initial Page Load ===\\n');\n\n    await this.injectCLSMonitor();\n\n    const startTime = Date.now();\n    await this.page.goto(this.url, { waitUntil: 'networkidle0', timeout: 30000 });\n\n    // Wait for additional time to catch late shifts\n    await new Promise(resolve => setTimeout(resolve, this.options.waitTime));\n\n    const loadTime = Date.now() - startTime;\n\n    // Get layout shifts\n    const layoutShifts = await this.page.evaluate(() => window.layoutShifts);\n    const performanceMetrics = await this.page.evaluate(() => window.performanceMetrics);\n    const webVitals = await this.getWebVitals();\n\n    // Calculate total CLS\n    const totalCLS = layoutShifts.reduce((sum, shift) => sum + shift.value, 0);\n\n    this.results.scenarios.initialLoad = {\n      loadTime,\n      layoutShifts,\n      totalCLS,\n      performanceMetrics,\n      webVitals,\n      shiftCount: layoutShifts.length\n    };\n\n    if (this.options.screenshots && layoutShifts.length > 0) {\n      await this.page.screenshot({\n        path: path.join(__dirname, 'cls-profile-initial-load.png'),\n        fullPage: true\n      });\n    }\n\n    console.log(`Initial Load CLS: ${totalCLS.toFixed(4)}`);\n    console.log(`Layout Shifts Detected: ${layoutShifts.length}`);\n    console.log(`Load Time: ${loadTime}ms`);\n  }\n\n  /**\n   * Profile during font loading\n   */\n  async profileFontLoading() {\n    console.log('\\n=== Profiling Font Loading ===\\n');\n\n    // Clear cache and disable font cache\n    await this.page.setCacheEnabled(false);\n\n    await this.page.goto(this.url, { waitUntil: 'domcontentloaded' });\n    await new Promise(resolve => setTimeout(resolve, 5000));\n\n    const layoutShifts = await this.page.evaluate(() => window.layoutShifts);\n    const fontMetrics = await this.page.evaluate(() => window.performanceMetrics);\n\n    // Filter shifts that occurred during font loading\n    const fontLoadShifts = layoutShifts.filter(shift => {\n      return shift.startTime >= fontMetrics.fontLoadStart &&\n             shift.startTime <= fontMetrics.fontLoadEnd;\n    });\n\n    this.results.scenarios.fontLoading = {\n      layoutShifts: fontLoadShifts,\n      totalCLS: fontLoadShifts.reduce((sum, shift) => sum + shift.value, 0),\n      fontLoadTime: fontMetrics.fontLoadEnd - fontMetrics.fontLoadStart,\n      shiftCount: fontLoadShifts.length\n    };\n\n    console.log(`Font Loading CLS: ${this.results.scenarios.fontLoading.totalCLS.toFixed(4)}`);\n    console.log(`Font Load Time: ${this.results.scenarios.fontLoading.fontLoadTime.toFixed(2)}ms`);\n  }\n\n  /**\n   * Profile during image loading with slow 3G network\n   */\n  async profileSlowImageLoading() {\n    console.log('\\n=== Profiling Image Loading (Slow 3G) ===\\n');\n\n    const client = await this.page.target().createCDPSession();\n\n    // Emulate slow 3G\n    await client.send('Network.emulateNetworkConditions', {\n      offline: false,\n      downloadThroughput: 500 * 1024 / 8, // 500kb/s\n      uploadThroughput: 500 * 1024 / 8,\n      latency: 400\n    });\n\n    await this.injectCLSMonitor();\n    await this.page.goto(this.url, { waitUntil: 'domcontentloaded' });\n    await new Promise(resolve => setTimeout(resolve, 15000)); // Wait longer for slow network\n\n    const layoutShifts = await this.page.evaluate(() => window.layoutShifts);\n    const imageMetrics = await this.page.evaluate(() => window.performanceMetrics);\n\n    this.results.scenarios.slowImageLoading = {\n      layoutShifts,\n      totalCLS: layoutShifts.reduce((sum, shift) => sum + shift.value, 0),\n      imageLoadTime: imageMetrics.imageLoadEnd - imageMetrics.imageLoadStart,\n      shiftCount: layoutShifts.length\n    };\n\n    // Reset network conditions\n    await client.send('Network.emulateNetworkConditions', {\n      offline: false,\n      downloadThroughput: -1,\n      uploadThroughput: -1,\n      latency: 0\n    });\n\n    console.log(`Slow Image Loading CLS: ${this.results.scenarios.slowImageLoading.totalCLS.toFixed(4)}`);\n  }\n\n  /**\n   * Profile during scroll and interaction\n   */\n  async profileScrollAndInteraction() {\n    console.log('\\n=== Profiling Scroll and Interaction ===\\n');\n\n    await this.page.goto(this.url, { waitUntil: 'networkidle0' });\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    // Clear previous shifts\n    await this.page.evaluate(() => { window.layoutShifts = []; });\n\n    // Scroll down the page\n    await this.page.evaluate(() => {\n      window.scrollTo({ top: document.body.scrollHeight / 2, behavior: 'smooth' });\n    });\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    await this.page.evaluate(() => {\n      window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });\n    });\n    await new Promise(resolve => setTimeout(resolve, 2000));\n\n    const layoutShifts = await this.page.evaluate(() => window.layoutShifts);\n\n    this.results.scenarios.scrollInteraction = {\n      layoutShifts,\n      totalCLS: layoutShifts.reduce((sum, shift) => sum + shift.value, 0),\n      shiftCount: layoutShifts.length\n    };\n\n    console.log(`Scroll Interaction CLS: ${this.results.scenarios.scrollInteraction.totalCLS.toFixed(4)}`);\n  }\n\n  /**\n   * Check for images without dimensions\n   */\n  async checkImagesWithoutDimensions() {\n    console.log('\\n=== Checking Images Without Dimensions ===\\n');\n\n    const imagesWithoutDimensions = await this.page.evaluate(() => {\n      const images = document.querySelectorAll('img');\n      const problematic = [];\n\n      images.forEach((img, index) => {\n        const hasWidth = img.hasAttribute('width') || img.style.width;\n        const hasHeight = img.hasAttribute('height') || img.style.height;\n        const hasAspectRatio = img.style.aspectRatio ||\n                               window.getComputedStyle(img).aspectRatio !== 'auto';\n\n        if (!hasWidth || !hasHeight) {\n          if (!hasAspectRatio) {\n            problematic.push({\n              index,\n              src: img.src,\n              alt: img.alt,\n              className: img.className,\n              id: img.id,\n              hasWidth,\n              hasHeight,\n              hasAspectRatio,\n              computedWidth: window.getComputedStyle(img).width,\n              computedHeight: window.getComputedStyle(img).height,\n              naturalWidth: img.naturalWidth,\n              naturalHeight: img.naturalHeight\n            });\n          }\n        }\n      });\n\n      return problematic;\n    });\n\n    this.results.imagesWithoutDimensions = imagesWithoutDimensions;\n    console.log(`Images without proper dimensions: ${imagesWithoutDimensions.length}`);\n  }\n\n  /**\n   * Analyze layout shift sources\n   */\n  analyzeShiftSources() {\n    console.log('\\n=== Analyzing Layout Shift Sources ===\\n');\n\n    const allShifts = [];\n    Object.values(this.results.scenarios).forEach(scenario => {\n      if (scenario.layoutShifts) {\n        allShifts.push(...scenario.layoutShifts);\n      }\n    });\n\n    // Group by element\n    const elementShifts = {};\n    allShifts.forEach(shift => {\n      shift.sources.forEach(source => {\n        if (source.node) {\n          const key = `${source.node.tagName}.${source.node.className || source.node.id || 'unknown'}`;\n          if (!elementShifts[key]) {\n            elementShifts[key] = {\n              element: source.node,\n              shifts: [],\n              totalScore: 0,\n              count: 0\n            };\n          }\n          elementShifts[key].shifts.push(shift);\n          elementShifts[key].totalScore += shift.value;\n          elementShifts[key].count++;\n        }\n      });\n    });\n\n    // Sort by impact\n    const sortedElements = Object.entries(elementShifts)\n      .sort(([, a], [, b]) => b.totalScore - a.totalScore);\n\n    this.results.topShiftingElements = sortedElements.slice(0, 10).map(([key, data]) => ({\n      element: key,\n      totalScore: data.totalScore,\n      shiftCount: data.count,\n      averageShift: data.totalScore / data.count,\n      elementDetails: data.element\n    }));\n\n    console.log('Top 5 shifting elements:');\n    this.results.topShiftingElements.slice(0, 5).forEach((item, i) => {\n      console.log(`${i + 1}. ${item.element} - CLS: ${item.totalScore.toFixed(4)} (${item.shiftCount} shifts)`);\n    });\n  }\n\n  /**\n   * Generate comprehensive report\n   */\n  generateReport() {\n    console.log('\\n=== CLS Profile Report ===\\n');\n\n    // Calculate overall metrics\n    let totalCLS = 0;\n    let totalShifts = 0;\n\n    Object.entries(this.results.scenarios).forEach(([name, scenario]) => {\n      totalCLS += scenario.totalCLS || 0;\n      totalShifts += scenario.shiftCount || 0;\n    });\n\n    this.results.summary = {\n      totalCLS,\n      totalShifts,\n      grade: totalCLS <= 0.1 ? 'Good' : totalCLS <= 0.25 ? 'Needs Improvement' : 'Poor',\n      timestamp: this.results.timestamp\n    };\n\n    console.log(`Total CLS Score: ${totalCLS.toFixed(4)}`);\n    console.log(`Grade: ${this.results.summary.grade}`);\n    console.log(`Total Layout Shifts: ${totalShifts}`);\n    console.log('\\nScenario Breakdown:');\n\n    Object.entries(this.results.scenarios).forEach(([name, scenario]) => {\n      console.log(`  ${name}: ${scenario.totalCLS.toFixed(4)} (${scenario.shiftCount} shifts)`);\n    });\n\n    return this.results;\n  }\n\n  /**\n   * Save report to file\n   */\n  async saveReport(filename = 'cls-profile-report.json') {\n    const reportPath = path.join(__dirname, filename);\n    fs.writeFileSync(reportPath, JSON.stringify(this.results, null, 2));\n    console.log(`\\nReport saved to: ${reportPath}`);\n\n    // Also save a human-readable markdown report\n    const mdReport = this.generateMarkdownReport();\n    const mdPath = path.join(__dirname, filename.replace('.json', '.md'));\n    fs.writeFileSync(mdPath, mdReport);\n    console.log(`Markdown report saved to: ${mdPath}`);\n  }\n\n  /**\n   * Generate markdown report\n   */\n  generateMarkdownReport() {\n    const { summary, scenarios, topShiftingElements, imagesWithoutDimensions } = this.results;\n\n    let md = `# CLS Profile Report\\n\\n`;\n    md += `**URL:** ${this.url}\\n`;\n    md += `**Timestamp:** ${summary.timestamp}\\n`;\n    md += `**Total CLS Score:** ${summary.totalCLS.toFixed(4)}\\n`;\n    md += `**Grade:** ${summary.grade}\\n`;\n    md += `**Total Layout Shifts:** ${summary.totalShifts}\\n\\n`;\n\n    md += `## Summary\\n\\n`;\n    md += `| Metric | Value | Status |\\n`;\n    md += `|--------|-------|--------|\\n`;\n    md += `| CLS Score | ${summary.totalCLS.toFixed(4)} | ${summary.grade} |\\n`;\n    md += `| Threshold (Good) | ≤ 0.1 | ${summary.totalCLS <= 0.1 ? '✅' : '❌'} |\\n`;\n    md += `| Threshold (Needs Improvement) | ≤ 0.25 | ${summary.totalCLS <= 0.25 ? '✅' : '❌'} |\\n\\n`;\n\n    md += `## Scenario Analysis\\n\\n`;\n    Object.entries(scenarios).forEach(([name, scenario]) => {\n      md += `### ${name}\\n\\n`;\n      md += `- **CLS Score:** ${scenario.totalCLS.toFixed(4)}\\n`;\n      md += `- **Shift Count:** ${scenario.shiftCount}\\n`;\n      if (scenario.loadTime) md += `- **Load Time:** ${scenario.loadTime}ms\\n`;\n      if (scenario.fontLoadTime) md += `- **Font Load Time:** ${scenario.fontLoadTime.toFixed(2)}ms\\n`;\n      if (scenario.imageLoadTime) md += `- **Image Load Time:** ${scenario.imageLoadTime.toFixed(2)}ms\\n`;\n      md += `\\n`;\n\n      if (scenario.webVitals) {\n        md += `**Web Vitals:**\\n`;\n        md += `- LCP: ${scenario.webVitals.LCP.toFixed(2)}ms\\n`;\n        md += `- FCP: ${scenario.webVitals.FCP.toFixed(2)}ms\\n`;\n        md += `- TTFB: ${scenario.webVitals.TTFB.toFixed(2)}ms\\n\\n`;\n      }\n    });\n\n    if (topShiftingElements && topShiftingElements.length > 0) {\n      md += `## Top Shifting Elements\\n\\n`;\n      md += `| Rank | Element | CLS Score | Shift Count | Avg Shift |\\n`;\n      md += `|------|---------|-----------|-------------|----------|\\n`;\n      topShiftingElements.forEach((item, i) => {\n        md += `| ${i + 1} | ${item.element} | ${item.totalScore.toFixed(4)} | ${item.shiftCount} | ${item.averageShift.toFixed(4)} |\\n`;\n      });\n      md += `\\n`;\n    }\n\n    if (imagesWithoutDimensions && imagesWithoutDimensions.length > 0) {\n      md += `## Images Without Proper Dimensions\\n\\n`;\n      md += `Found ${imagesWithoutDimensions.length} images without proper width/height or aspect-ratio:\\n\\n`;\n      imagesWithoutDimensions.forEach((img, i) => {\n        md += `${i + 1}. **${img.src}**\\n`;\n        md += `   - Class: ${img.className || 'none'}\\n`;\n        md += `   - ID: ${img.id || 'none'}\\n`;\n        md += `   - Natural Size: ${img.naturalWidth}x${img.naturalHeight}\\n`;\n        md += `   - Has Width: ${img.hasWidth ? '✅' : '❌'}\\n`;\n        md += `   - Has Height: ${img.hasHeight ? '✅' : '❌'}\\n`;\n        md += `   - Has Aspect Ratio: ${img.hasAspectRatio ? '✅' : '❌'}\\n\\n`;\n      });\n    }\n\n    md += `## Recommendations\\n\\n`;\n    if (summary.totalCLS <= 0.1) {\n      md += `✅ **Excellent!** Your CLS score is within the \"Good\" threshold.\\n\\n`;\n      md += `Continue to monitor for regressions and ensure:\\n`;\n      md += `- All images have explicit dimensions or aspect ratios\\n`;\n      md += `- Fonts are loaded with font-display: swap or optional\\n`;\n      md += `- Dynamic content has reserved space\\n`;\n    } else if (summary.totalCLS <= 0.25) {\n      md += `⚠️ **Needs Improvement** - Your CLS score needs optimization.\\n\\n`;\n      md += `Priority actions:\\n`;\n      md += `1. Review top shifting elements above\\n`;\n      md += `2. Add dimensions to images without them\\n`;\n      md += `3. Optimize font loading strategy\\n`;\n      md += `4. Reserve space for dynamic content\\n`;\n    } else {\n      md += `❌ **Poor** - Your CLS score requires immediate attention.\\n\\n`;\n      md += `Critical actions:\\n`;\n      md += `1. Fix all images without dimensions\\n`;\n      md += `2. Implement font loading optimization\\n`;\n      md += `3. Eliminate layout shifts from dynamic content\\n`;\n      md += `4. Review and fix top shifting elements\\n`;\n    }\n\n    return md;\n  }\n\n  /**\n   * Run complete profiling suite\n   */\n  async run() {\n    try {\n      await this.initialize();\n\n      await this.profileInitialLoad();\n      await this.checkImagesWithoutDimensions();\n      await this.profileFontLoading();\n      await this.profileSlowImageLoading();\n      await this.profileScrollAndInteraction();\n\n      this.analyzeShiftSources();\n      this.generateReport();\n      await this.saveReport();\n\n    } catch (error) {\n      console.error('Error during profiling:', error);\n      throw error;\n    } finally {\n      if (this.browser) {\n        await this.browser.close();\n      }\n    }\n  }\n}\n\n// Main execution\nconst url = process.argv[2] || 'http://localhost:3000/feed';\nconst profiler = new CLSProfiler(url, {\n  headless: true,\n  screenshots: true,\n  waitTime: 8000\n});\n\nprofiler.run().catch(console.error);\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/scripts/dev/create-feature.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/scripts/ops/deleteUser.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 362,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 362,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12866, 12869], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12866, 12869], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * User Deletion Script\n *\n * This script safely deletes a user and all their associated data from Firebase.\n * It handles all collections, subcollections, and references.\n *\n * REQUIRED FIREBASE IAM ROLES:\n * - roles/firebase.admin (or equivalent with these permissions)\n * - roles/firebasedatabase.admin (for Realtime Database, if applicable)\n * - roles/datastore.owner (for Firestore access)\n *\n * REQUIRED SERVICE ACCOUNT PERMISSIONS:\n * - firebase.auth.users.delete\n * - datastore.databases.update\n * - datastore.databases.get\n * - datastore.entities.delete\n * - datastore.entities.get\n * - datastore.entities.update\n *\n * VERIFICATION:\n * To verify your service account has required permissions, run:\n *   gcloud projects get-iam-policy PROJECT_ID --flatten=\"bindings[].members\" --format=\"table(bindings.role)\" --filter=\"bindings.members:serviceAccount:YOUR_SA@PROJECT_ID.iam.gserviceaccount.com\"\n *\n * Usage:\n *   npx ts-node scripts/ops/deleteUser.ts <userId> [--dry-run]\n *\n * Examples:\n *   npx ts-node scripts/ops/deleteUser.ts abc123xyz\n *   npx ts-node scripts/ops/deleteUser.ts abc123xyz --dry-run\n */\n\nimport { initializeApp, cert, ServiceAccount } from 'firebase-admin/app';\nimport { getFirestore, FieldValue, QueryDocumentSnapshot, DocumentData } from 'firebase-admin/firestore';\nimport { getAuth } from 'firebase-admin/auth';\nimport * as path from 'path';\nimport { fileURLToPath } from 'url';\nimport { readFileSync } from 'fs';\n\n// ES module equivalent of __dirname\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Initialize Firebase Admin\nconst serviceAccount = JSON.parse(\n  readFileSync(path.join(__dirname, '../serviceAccountKey.json'), 'utf-8')\n) as ServiceAccount;\n\ninitializeApp({\n  credential: cert(serviceAccount)\n});\n\nconst db = getFirestore();\nconst auth = getAuth();\n\ninterface DeletionStats {\n  user: boolean;\n  auth: boolean;\n  projects: number;\n  tasks: number;\n  sessions: number;\n  comments: number;\n  supports: number;\n  follows: number;\n  streaks: number;\n  challengeParticipants: number;\n  groupMembers: number;\n  notifications: number;\n  activeSession: number;\n}\n\ninterface DeletionOptions {\n  dryRun: boolean;\n}\n\nasync function deleteUser(userId: string, options: DeletionOptions): Promise<void> {\n  const dryRunPrefix = options.dryRun ? '[DRY RUN] ' : '';\n  console.log(`${dryRunPrefix}🚀 Starting deletion process for user: ${userId}\\n`);\n\n  const stats: DeletionStats = {\n    user: false,\n    auth: false,\n    projects: 0,\n    tasks: 0,\n    sessions: 0,\n    comments: 0,\n    supports: 0,\n    follows: 0,\n    streaks: 0,\n    challengeParticipants: 0,\n    groupMembers: 0,\n    notifications: 0,\n    activeSession: 0,\n  };\n\n  try {\n    // Get user document first to verify existence and get username\n    const userDoc = await db.collection('users').doc(userId).get();\n    if (!userDoc.exists) {\n      throw new Error(`User with ID ${userId} does not exist`);\n    }\n\n    const userData = userDoc.data();\n    const username = userData?.username || 'unknown';\n    console.log(`${dryRunPrefix}📋 User found: ${username} (${userId})`);\n    console.log(`   Followers: ${userData?.followerCount || 0}`);\n    console.log(`   Following: ${userData?.followingCount || 0}\\n`);\n\n    // Show dry run mode notice\n    if (options.dryRun) {\n      console.log('🔍 DRY RUN MODE - No changes will be made\\n');\n    }\n\n    // Confirm deletion\n    console.log(`${dryRunPrefix}⚠️  This will permanently delete:`);\n    console.log('   - User profile');\n    console.log('   - All projects and tasks');\n    console.log('   - All sessions');\n    console.log('   - All comments');\n    console.log('   - All supports (likes)');\n    console.log('   - All follow relationships');\n    console.log('   - Streak data');\n    console.log('   - Challenge participations');\n    console.log('   - Group memberships');\n    console.log('   - Notifications');\n    console.log('   - Firebase Authentication account\\n');\n\n    // In a real scenario, you'd want a confirmation prompt here\n    // For this script, we'll proceed automatically\n\n    // 1. Delete active session subcollection\n    console.log(`${dryRunPrefix}🔄 Deleting active session...`);\n    const activeSessionSnapshot = await db\n      .collection('users')\n      .doc(userId)\n      .collection('activeSession')\n      .get();\n\n    stats.activeSession = activeSessionSnapshot.docs.length;\n    if (!options.dryRun) {\n      const activeSessionBatch = db.batch();\n      activeSessionSnapshot.docs.forEach((doc: QueryDocumentSnapshot<DocumentData>) => {\n        activeSessionBatch.delete(doc.ref);\n      });\n      await activeSessionBatch.commit();\n    }\n    console.log(`   ✅ ${options.dryRun ? 'Would delete' : 'Deleted'} ${stats.activeSession} active session records\\n`);\n\n    // 2. Delete all projects and their tasks\n    console.log(`${dryRunPrefix}🔄 Deleting projects and tasks...`);\n    const projectsSnapshot = await db\n      .collection('projects')\n      .doc(userId)\n      .collection('userProjects')\n      .get();\n\n    for (const projectDoc of projectsSnapshot.docs) {\n      // Count tasks for this project\n      const tasksSnapshot = await projectDoc.ref.collection('tasks').get();\n      stats.tasks += tasksSnapshot.docs.length;\n\n      if (!options.dryRun) {\n        const taskBatch = db.batch();\n        tasksSnapshot.docs.forEach((taskDoc: QueryDocumentSnapshot<DocumentData>) => {\n          taskBatch.delete(taskDoc.ref);\n        });\n        await taskBatch.commit();\n\n        // Delete project\n        await projectDoc.ref.delete();\n      }\n      stats.projects++;\n    }\n\n    if (!options.dryRun) {\n      // Delete the projects document\n      await db.collection('projects').doc(userId).delete();\n    }\n    console.log(`   ✅ ${options.dryRun ? 'Would delete' : 'Deleted'} ${stats.projects} projects and ${stats.tasks} tasks\\n`);\n\n    // 3. Delete all sessions created by this user\n    console.log(`${dryRunPrefix}🔄 Deleting sessions...`);\n    const sessionsSnapshot = await db\n      .collection('sessions')\n      .where('userId', '==', userId)\n      .get();\n\n    stats.sessions = sessionsSnapshot.docs.length;\n    if (!options.dryRun) {\n      const sessionBatch = db.batch();\n      sessionsSnapshot.docs.forEach((doc: QueryDocumentSnapshot<DocumentData>) => {\n        sessionBatch.delete(doc.ref);\n      });\n      await sessionBatch.commit();\n    }\n    console.log(`   ✅ ${options.dryRun ? 'Would delete' : 'Deleted'} ${stats.sessions} sessions\\n`);\n\n    // 4. Delete all comments by this user\n    console.log(`${dryRunPrefix}🔄 Deleting comments...`);\n    const commentsSnapshot = await db\n      .collection('comments')\n      .where('userId', '==', userId)\n      .get();\n\n    stats.comments = commentsSnapshot.docs.length;\n    if (!options.dryRun) {\n      const commentBatch = db.batch();\n      commentsSnapshot.docs.forEach((doc: QueryDocumentSnapshot<DocumentData>) => {\n        commentBatch.delete(doc.ref);\n      });\n      await commentBatch.commit();\n    }\n    console.log(`   ✅ ${options.dryRun ? 'Would delete' : 'Deleted'} ${stats.comments} comments\\n`);\n\n    // 5. Delete all supports (likes) by this user\n    console.log(`${dryRunPrefix}🔄 Deleting supports...`);\n    const supportsSnapshot = await db\n      .collection('supports')\n      .where('userId', '==', userId)\n      .get();\n\n    stats.supports = supportsSnapshot.docs.length;\n    if (!options.dryRun) {\n      const supportBatch = db.batch();\n      supportsSnapshot.docs.forEach((doc: QueryDocumentSnapshot<DocumentData>) => {\n        supportBatch.delete(doc.ref);\n      });\n      await supportBatch.commit();\n    }\n    console.log(`   ✅ ${options.dryRun ? 'Would delete' : 'Deleted'} ${stats.supports} supports\\n`);\n\n    // 6. Delete follow relationships and update counts\n    console.log(`${dryRunPrefix}🔄 Deleting follow relationships...`);\n\n    // Delete where user is the follower\n    const followingSnapshot = await db\n      .collection('follows')\n      .where('followerId', '==', userId)\n      .get();\n\n    if (!options.dryRun && followingSnapshot.docs.length > 0) {\n      const followBatch1 = db.batch();\n      for (const doc of followingSnapshot.docs) {\n        const followData = doc.data();\n        // Decrement the following user's follower count\n        const followingUserRef = db.collection('users').doc(followData.followingId);\n        followBatch1.update(followingUserRef, {\n          followerCount: FieldValue.increment(-1)\n        });\n        followBatch1.delete(doc.ref);\n      }\n      await followBatch1.commit();\n    }\n    stats.follows += followingSnapshot.docs.length;\n\n    // Delete where user is being followed\n    const followersSnapshot = await db\n      .collection('follows')\n      .where('followingId', '==', userId)\n      .get();\n\n    if (!options.dryRun && followersSnapshot.docs.length > 0) {\n      const followBatch2 = db.batch();\n      for (const doc of followersSnapshot.docs) {\n        const followData = doc.data();\n        // Decrement the follower's following count\n        const followerUserRef = db.collection('users').doc(followData.followerId);\n        followBatch2.update(followerUserRef, {\n          followingCount: FieldValue.increment(-1)\n        });\n        followBatch2.delete(doc.ref);\n      }\n      await followBatch2.commit();\n    }\n    stats.follows += followersSnapshot.docs.length;\n    console.log(`   ✅ ${options.dryRun ? 'Would delete' : 'Deleted'} ${stats.follows} follow relationships\\n`);\n\n    // 7. Delete streak data\n    console.log(`${dryRunPrefix}🔄 Deleting streak data...`);\n    const streakRef = db.collection('streaks').doc(userId);\n    const streakDoc = await streakRef.get();\n    if (streakDoc.exists) {\n      if (!options.dryRun) {\n        await streakRef.delete();\n      }\n      stats.streaks = 1;\n    }\n    console.log(`   ✅ ${options.dryRun ? 'Would delete' : 'Deleted'} ${stats.streaks} streak records\\n`);\n\n    // 8. Delete challenge participations\n    console.log(`${dryRunPrefix}🔄 Deleting challenge participations...`);\n    const challengeParticipantsSnapshot = await db\n      .collection('challengeParticipants')\n      .where('userId', '==', userId)\n      .get();\n\n    stats.challengeParticipants = challengeParticipantsSnapshot.docs.length;\n    if (!options.dryRun && challengeParticipantsSnapshot.docs.length > 0) {\n      const challengeBatch = db.batch();\n      challengeParticipantsSnapshot.docs.forEach((doc: QueryDocumentSnapshot<DocumentData>) => {\n        challengeBatch.delete(doc.ref);\n      });\n      await challengeBatch.commit();\n    }\n    console.log(`   ✅ ${options.dryRun ? 'Would delete' : 'Deleted'} ${stats.challengeParticipants} challenge participations\\n`);\n\n    // 9. Remove from group members\n    console.log(`${dryRunPrefix}🔄 Removing from groups...`);\n    const groupsSnapshot = await db\n      .collection('groups')\n      .where('members', 'array-contains', userId)\n      .get();\n\n    stats.groupMembers = groupsSnapshot.docs.length;\n    if (!options.dryRun && groupsSnapshot.docs.length > 0) {\n      const groupBatch = db.batch();\n      groupsSnapshot.docs.forEach((doc: QueryDocumentSnapshot<DocumentData>) => {\n        groupBatch.update(doc.ref, {\n          members: FieldValue.arrayRemove(userId),\n          memberCount: FieldValue.increment(-1)\n        });\n      });\n      await groupBatch.commit();\n    }\n    console.log(`   ✅ ${options.dryRun ? 'Would remove' : 'Removed'} from ${stats.groupMembers} groups\\n`);\n\n    // 10. Delete notifications for this user\n    console.log(`${dryRunPrefix}🔄 Deleting notifications...`);\n    const notificationsSnapshot = await db\n      .collection('notifications')\n      .where('userId', '==', userId)\n      .get();\n\n    stats.notifications = notificationsSnapshot.docs.length;\n    if (!options.dryRun && notificationsSnapshot.docs.length > 0) {\n      const notificationBatch = db.batch();\n      notificationsSnapshot.docs.forEach((doc: QueryDocumentSnapshot<DocumentData>) => {\n        notificationBatch.delete(doc.ref);\n      });\n      await notificationBatch.commit();\n    }\n    console.log(`   ✅ ${options.dryRun ? 'Would delete' : 'Deleted'} ${stats.notifications} notifications\\n`);\n\n    // 11. Delete user document\n    if (!options.dryRun) {\n      console.log(`${dryRunPrefix}🔄 Deleting user document...`);\n      await db.collection('users').doc(userId).delete();\n      stats.user = true;\n      console.log('   ✅ User document deleted\\n');\n    } else {\n      console.log(`${dryRunPrefix}🔄 Would delete user document...`);\n      console.log('   ✅ Would delete\\n');\n      stats.user = true;\n    }\n\n    // 12. Delete Firebase Authentication account\n    if (!options.dryRun) {\n      console.log(`${dryRunPrefix}🔄 Deleting Firebase Auth account...`);\n      try {\n        await auth.deleteUser(userId);\n        stats.auth = true;\n        console.log('   ✅ Firebase Auth account deleted\\n');\n      } catch (error: any) {\n        if (error.code === 'auth/user-not-found') {\n          console.log('   ⚠️  Auth account not found (may have been deleted already)\\n');\n          stats.auth = true;\n        } else {\n          throw error;\n        }\n      }\n    } else {\n      console.log(`${dryRunPrefix}🔄 Would delete Firebase Auth account...`);\n      console.log('   ✅ Would delete\\n');\n      stats.auth = true;\n    }\n\n    // Print summary\n    const completionStatus = options.dryRun ? 'DRY RUN COMPLETE' : 'DELETION COMPLETE';\n    console.log(`✅ ${completionStatus}\\n`);\n    console.log('📊 Summary:');\n    console.log(`   User Document: ${stats.user ? '✅' : '❌'}`);\n    console.log(`   Auth Account: ${stats.auth ? '✅' : '❌'}`);\n    console.log(`   Projects: ${stats.projects}`);\n    console.log(`   Tasks: ${stats.tasks}`);\n    console.log(`   Sessions: ${stats.sessions}`);\n    console.log(`   Comments: ${stats.comments}`);\n    console.log(`   Supports: ${stats.supports}`);\n    console.log(`   Follows: ${stats.follows}`);\n    console.log(`   Streaks: ${stats.streaks}`);\n    console.log(`   Challenge Participations: ${stats.challengeParticipants}`);\n    console.log(`   Group Memberships: ${stats.groupMembers}`);\n    console.log(`   Notifications: ${stats.notifications}`);\n    console.log(`   Active Session Records: ${stats.activeSession}\\n`);\n\n    if (options.dryRun) {\n      console.log('To execute this deletion, run without the --dry-run flag.\\n');\n    }\n\n  } catch (error) {\n    console.error('❌ Error during deletion:', error);\n    throw error;\n  }\n}\n\n// Main execution\nconst userId = process.argv[2];\nconst dryRunFlag = process.argv.includes('--dry-run');\n\nif (!userId) {\n  console.error('❌ Error: User ID is required');\n  console.log('\\nUsage:');\n  console.log('  npx ts-node scripts/ops/deleteUser.ts <userId> [--dry-run]');\n  console.log('\\nExamples:');\n  console.log('  npx ts-node scripts/ops/deleteUser.ts abc123xyz');\n  console.log('  npx ts-node scripts/ops/deleteUser.ts abc123xyz --dry-run\\n');\n  process.exit(1);\n}\n\nconst options: DeletionOptions = {\n  dryRun: dryRunFlag\n};\n\ndeleteUser(userId, options)\n  .then(() => {\n    console.log('✅ Script completed successfully');\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error('❌ Script failed:', error);\n    process.exit(1);\n  });\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/scripts/ops/migrate-profile-visibility.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/sentry.edge.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/sentry.server.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/contract/api/challenges.contract.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/contract/api/notifications.contract.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/fixtures/mocks.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/helpers/firebaseMock.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/integration/auth/google-signin.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/integration/firebase/feed-images.test.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "jsx-a11y/alt-text",
        "severity": 1,
        "message": "img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",
        "line": 56,
        "column": 12,
        "nodeType": "JSXOpeningElement",
        "endLine": 56,
        "endColumn": 30,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/integration/firebase/image-storage.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/integration/firebase/session-images-firestore.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/integration/image-upload/upload-flow-simple.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/integration/image-upload/upload-flow.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/ActivityCard.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/ActivityList.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/CommentLikes.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/ImageGallery.test.tsx",
    "messages": [
      {
        "ruleId": "jsx-a11y/alt-text",
        "severity": 1,
        "message": "img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",
        "line": 11,
        "column": 12,
        "nodeType": "JSXOpeningElement",
        "endLine": 11,
        "endColumn": 33
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { ImageGallery } from '@/components/ImageGallery';\n\n// Mock Next.js Image component\njest.mock('next/image', () => ({\n  __esModule: true,\n  default: (props: any) => {\n    // Extract Next.js specific props to avoid passing them to img tag\n    const { fill, priority, quality, sizes, loading, ...imgProps } = props;\n    return <img {...imgProps} />;\n  },\n}));\n\ndescribe('ImageGallery', () => {\n  const mockImages = [\n    'https://example.com/image1.jpg',\n    'https://example.com/image2.jpg',\n    'https://example.com/image3.jpg',\n  ];\n\n  beforeEach(() => {\n    // Mock URL.createObjectURL for blob URLs\n    global.URL.createObjectURL = jest.fn(() => 'mock-blob-url');\n  });\n\n  it('should render nothing when images array is empty', () => {\n    const { container } = render(<ImageGallery images={[]} />);\n    expect(container.firstChild).toBeNull();\n  });\n\n  it('should render nothing when images is undefined', () => {\n    const { container } = render(<ImageGallery images={undefined as any} />);\n    expect(container.firstChild).toBeNull();\n  });\n\n  it('should render a single image without navigation', () => {\n    const firstImage = mockImages[0];\n    if (!firstImage) return;\n    render(<ImageGallery images={[firstImage]} />);\n\n    const image = screen.getByAltText('Image 1');\n    expect(image).toBeInTheDocument();\n    expect(image).toHaveAttribute('src', firstImage);\n\n    // Should not show navigation arrows for single image\n    expect(screen.queryByLabelText('Previous image')).not.toBeInTheDocument();\n    expect(screen.queryByLabelText('Next image')).not.toBeInTheDocument();\n  });\n\n  it('should render multiple images with first image visible', () => {\n    render(<ImageGallery images={mockImages} />);\n\n    const image = screen.getByAltText('Image 1');\n    expect(image).toHaveAttribute('src', mockImages[0]);\n  });\n\n  it('should show dot indicators for multiple images', () => {\n    render(<ImageGallery images={mockImages} />);\n\n    const dots = screen.getAllByRole('button', { name: /Go to image/i });\n    expect(dots).toHaveLength(3);\n  });\n\n  it('should not show dot indicators for single image', () => {\n    const firstImage = mockImages[0];\n    if (!firstImage) return;\n    render(<ImageGallery images={[firstImage]} />);\n\n    const dots = screen.queryAllByRole('button', { name: /Go to image/i });\n    expect(dots).toHaveLength(0);\n  });\n\n  it('should navigate to next image when next button is clicked', () => {\n    render(<ImageGallery images={mockImages} />);\n\n    const nextButton = screen.getByLabelText('Next image');\n    fireEvent.click(nextButton);\n\n    const image = screen.getByAltText('Image 2');\n    expect(image).toHaveAttribute('src', mockImages[1]);\n  });\n\n  it('should navigate to previous image when previous button is clicked', () => {\n    render(<ImageGallery images={mockImages} />);\n\n    // Go to second image first\n    const nextButton = screen.getByLabelText('Next image');\n    fireEvent.click(nextButton);\n\n    // Then go back\n    const prevButton = screen.getByLabelText('Previous image');\n    fireEvent.click(prevButton);\n\n    const image = screen.getByAltText('Image 1');\n    expect(image).toHaveAttribute('src', mockImages[0]);\n  });\n\n  it('should not show previous button on first image', () => {\n    render(<ImageGallery images={mockImages} />);\n\n    expect(screen.queryByLabelText('Previous image')).not.toBeInTheDocument();\n    expect(screen.getByLabelText('Next image')).toBeInTheDocument();\n  });\n\n  it('should not show next button on last image', () => {\n    render(<ImageGallery images={mockImages} />);\n\n    // Navigate to last image\n    const nextButton = screen.getByLabelText('Next image');\n    fireEvent.click(nextButton); // to image 2\n    fireEvent.click(nextButton); // to image 3\n\n    expect(screen.queryByLabelText('Next image')).not.toBeInTheDocument();\n    expect(screen.getByLabelText('Previous image')).toBeInTheDocument();\n  });\n\n  it('should navigate using dot indicators', () => {\n    render(<ImageGallery images={mockImages} />);\n\n    const dots = screen.getAllByRole('button', { name: /Go to image/i });\n    const thirdDot = dots[2];\n    if (!thirdDot) return;\n\n    // Click on third dot\n    fireEvent.click(thirdDot);\n\n    const image = screen.getByAltText('Image 3');\n    expect(image).toHaveAttribute('src', mockImages[2]);\n  });\n\n  it('should highlight the active dot indicator', () => {\n    const { container } = render(<ImageGallery images={mockImages} />);\n\n    const dots = screen.getAllByRole('button', { name: /Go to image/i });\n    const firstDot = dots[0];\n    const secondDot = dots[1];\n    if (!firstDot || !secondDot) return;\n\n    // First dot should be active (has bg-[#007AFF] class)\n    expect(firstDot).toHaveClass('bg-[#007AFF]');\n    expect(secondDot).toHaveClass('bg-gray-300');\n\n    // Click second dot\n    fireEvent.click(secondDot);\n\n    // Second dot should now be active\n    expect(secondDot).toHaveClass('bg-[#007AFF]');\n    expect(firstDot).toHaveClass('bg-gray-300');\n  });\n\n  it('should handle swipe gestures on touch devices', () => {\n    render(<ImageGallery images={mockImages} />);\n\n    const container = screen.getByAltText('Image 1').closest('div');\n\n    // Simulate swipe left (next image)\n    fireEvent.touchStart(container!, { targetTouches: [{ clientX: 200 }] });\n    fireEvent.touchMove(container!, { targetTouches: [{ clientX: 100 }] });\n    fireEvent.touchEnd(container!);\n\n    const image = screen.getByAltText('Image 2');\n    expect(image).toHaveAttribute('src', mockImages[1]);\n  });\n\n  it('should handle swipe right gesture', () => {\n    render(<ImageGallery images={mockImages} />);\n\n    const container = screen.getByAltText('Image 1').closest('div');\n\n    // Go to second image first\n    const nextButton = screen.getByLabelText('Next image');\n    fireEvent.click(nextButton);\n\n    // Simulate swipe right (previous image)\n    fireEvent.touchStart(container!, { targetTouches: [{ clientX: 100 }] });\n    fireEvent.touchMove(container!, { targetTouches: [{ clientX: 200 }] });\n    fireEvent.touchEnd(container!);\n\n    const image = screen.getByAltText('Image 1');\n    expect(image).toHaveAttribute('src', mockImages[0]);\n  });\n\n  it('should not swipe if distance is too small', () => {\n    render(<ImageGallery images={mockImages} />);\n\n    const container = screen.getByAltText('Image 1').closest('div');\n\n    // Simulate small swipe (less than minSwipeDistance of 50)\n    fireEvent.touchStart(container!, { targetTouches: [{ clientX: 100 }] });\n    fireEvent.touchMove(container!, { targetTouches: [{ clientX: 90 }] });\n    fireEvent.touchEnd(container!);\n\n    // Should still be on first image\n    const image = screen.getByAltText('Image 1');\n    expect(image).toHaveAttribute('src', mockImages[0]);\n  });\n\n  it('should not swipe past the first image', () => {\n    render(<ImageGallery images={mockImages} />);\n\n    const container = screen.getByAltText('Image 1').closest('div');\n\n    // Try to swipe right on first image\n    fireEvent.touchStart(container!, { targetTouches: [{ clientX: 100 }] });\n    fireEvent.touchMove(container!, { targetTouches: [{ clientX: 200 }] });\n    fireEvent.touchEnd(container!);\n\n    // Should still be on first image\n    const image = screen.getByAltText('Image 1');\n    expect(image).toHaveAttribute('src', mockImages[0]);\n  });\n\n  it('should not swipe past the last image', () => {\n    render(<ImageGallery images={mockImages} />);\n\n    const container = screen.getByAltText('Image 1').closest('div');\n\n    // Navigate to last image\n    const dots = screen.getAllByRole('button', { name: /Go to image/i });\n    const thirdDot = dots[2];\n    if (!thirdDot) return;\n    fireEvent.click(thirdDot);\n\n    // Try to swipe left on last image\n    fireEvent.touchStart(container!, { targetTouches: [{ clientX: 200 }] });\n    fireEvent.touchMove(container!, { targetTouches: [{ clientX: 100 }] });\n    fireEvent.touchEnd(container!);\n\n    // Should still be on last image\n    const image = screen.getByAltText('Image 3');\n    expect(image).toHaveAttribute('src', mockImages[2]);\n  });\n\n  it('should apply custom className', () => {\n    const { container } = render(\n      <ImageGallery images={mockImages} className=\"custom-class\" />\n    );\n\n    expect(container.firstChild).toHaveClass('custom-class');\n  });\n\n  it('should have proper aspect ratio', () => {\n    const { container } = render(<ImageGallery images={mockImages} />);\n\n    const imageContainer = container.querySelector('.aspect-\\\\[16\\\\/10\\\\]');\n    expect(imageContainer).toBeInTheDocument();\n  });\n\n  it('should pass priority prop to first image for Next.js optimization', () => {\n    render(<ImageGallery images={mockImages} />);\n\n    const image = screen.getByAltText('Image 1');\n    // In the real Next.js Image component, priority is handled internally\n    // Our mock renders it as a regular img tag, so we just verify image exists\n    expect(image).toBeInTheDocument();\n    expect(image).toHaveAttribute('src', mockImages[0]);\n  });\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/PostStats.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/ProtectedRoute.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/SessionCard-images.test.tsx",
    "messages": [
      {
        "ruleId": "jsx-a11y/alt-text",
        "severity": 1,
        "message": "img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",
        "line": 24,
        "column": 12,
        "nodeType": "JSXOpeningElement",
        "endLine": 24,
        "endColumn": 30
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { SessionCard } from '@/components/SessionCard';\nimport { SessionWithDetails } from '@/types';\n\n// Mock Firebase\njest.mock('@/lib/firebase', () => ({\n  auth: {\n    currentUser: { uid: 'test-user' },\n  },\n  db: {},\n  storage: {},\n}));\n\njest.mock('@/lib/api', () => ({\n  firebaseSessionApi: {},\n  firebaseCommentApi: {},\n}));\n\n// Mock Next.js components\njest.mock('next/image', () => ({\n  __esModule: true,\n  default: (props: any) => {\n    return <img {...props} />;\n  },\n}));\n\njest.mock('next/link', () => ({\n  __esModule: true,\n  default: ({ children, href }: any) => <a href={href}>{children}</a>,\n}));\n\n// Mock ImageGallery component\njest.mock('../ImageGallery', () => ({\n  ImageGallery: ({ images }: { images: string[] }) => (\n    <div data-testid=\"image-gallery\">\n      {images.map((img, idx) => (\n        <img key={idx} src={img} alt={`Gallery image ${idx + 1}`} />\n      ))}\n    </div>\n  ),\n}));\n\n// Mock CommentList to avoid Firebase dependencies\njest.mock('../CommentList', () => ({\n  __esModule: true,\n  default: () => <div data-testid=\"comment-list\">Comments</div>,\n}));\n\ndescribe('SessionCard - Image Display', () => {\n  const mockUser = {\n    id: 'user1',\n    email: 'test@example.com',\n    name: 'Test User',\n    username: 'testuser',\n    bio: 'Test bio',\n    profilePicture: 'https://example.com/avatar.jpg',\n    createdAt: new Date('2024-01-01'),\n    updatedAt: new Date('2024-01-01'),\n  };\n\n  const mockProject = {\n    id: 'proj1',\n    userId: 'user1',\n    name: 'Test Project',\n    description: 'Test description',\n    icon: '📝',\n    color: '#007AFF',\n    status: 'active' as const,\n    createdAt: new Date('2024-01-01'),\n    updatedAt: new Date('2024-01-01'),\n  };\n\n  const baseSession: SessionWithDetails = {\n    id: 'session1',\n    userId: 'user1',\n    activityId: 'proj1',\n    projectId: 'proj1',\n    title: 'Test Session',\n    description: 'Test description',\n    duration: 3600,\n    startTime: new Date('2024-01-01'),\n    tags: ['Work'],\n    visibility: 'everyone',\n    isArchived: false,\n    supportCount: 5,\n    commentCount: 3,\n    isSupported: false,\n    createdAt: new Date('2024-01-01'),\n    updatedAt: new Date('2024-01-01'),\n    user: mockUser,\n    activity: mockProject,\n    project: mockProject,\n    images: [],\n  };\n\n  const mockOnSupport = jest.fn();\n  const mockOnRemoveSupport = jest.fn();\n  const mockOnShare = jest.fn();\n  const mockOnDelete = jest.fn();\n  const mockOnEdit = jest.fn();\n\n  let consoleLogSpy: jest.SpyInstance;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // Mock console.log to avoid cluttering test output\n    consoleLogSpy = jest.spyOn(console, 'log').mockImplementation(() => {});\n  });\n\n  afterEach(() => {\n    consoleLogSpy.mockRestore();\n  });\n\n  it('should not render ImageGallery when images array is empty', () => {\n    render(\n      <SessionCard\n        session={baseSession}\n        onSupport={mockOnSupport}\n        onRemoveSupport={mockOnRemoveSupport}\n        onShare={mockOnShare}\n      />\n    );\n\n    expect(screen.queryByTestId('image-gallery')).not.toBeInTheDocument();\n  });\n\n  it('should not render ImageGallery when images is undefined', () => {\n    const sessionWithoutImages = { ...baseSession, images: undefined };\n\n    render(\n      <SessionCard\n        session={sessionWithoutImages}\n        onSupport={mockOnSupport}\n        onRemoveSupport={mockOnRemoveSupport}\n        onShare={mockOnShare}\n      />\n    );\n\n    expect(screen.queryByTestId('image-gallery')).not.toBeInTheDocument();\n  });\n\n  it('should render ImageGallery when session has images', () => {\n    const sessionWithImages = {\n      ...baseSession,\n      images: [\n        'https://example.com/image1.jpg',\n        'https://example.com/image2.jpg',\n      ],\n    };\n\n    render(\n      <SessionCard\n        session={sessionWithImages}\n        onSupport={mockOnSupport}\n        onRemoveSupport={mockOnRemoveSupport}\n        onShare={mockOnShare}\n      />\n    );\n\n    expect(screen.getByTestId('image-gallery')).toBeInTheDocument();\n  });\n\n  it('should pass correct images to ImageGallery', () => {\n    const images = [\n      'https://example.com/image1.jpg',\n      'https://example.com/image2.jpg',\n      'https://example.com/image3.jpg',\n    ];\n\n    const sessionWithImages = {\n      ...baseSession,\n      images,\n    };\n\n    render(\n      <SessionCard\n        session={sessionWithImages}\n        onSupport={mockOnSupport}\n        onRemoveSupport={mockOnRemoveSupport}\n        onShare={mockOnShare}\n      />\n    );\n\n    const galleryImages = screen.getAllByAltText(/Gallery image/);\n    expect(galleryImages).toHaveLength(3);\n    expect(galleryImages[0]).toHaveAttribute('src', images[0]);\n    expect(galleryImages[1]).toHaveAttribute('src', images[1]);\n    expect(galleryImages[2]).toHaveAttribute('src', images[2]);\n  });\n\n  it('should render ImageGallery between description and stats', () => {\n    const sessionWithImages = {\n      ...baseSession,\n      description: 'Test description',\n      images: ['https://example.com/image.jpg'],\n    };\n\n    const { container } = render(\n      <SessionCard\n        session={sessionWithImages}\n        onSupport={mockOnSupport}\n        onRemoveSupport={mockOnRemoveSupport}\n        onShare={mockOnShare}\n      />\n    );\n\n    // Find description and stats sections\n    const description = screen.getByText('Test description');\n    const gallery = screen.getByTestId('image-gallery');\n    const statsSection = screen.getByText('Time');\n\n    // Gallery should be after description and before stats\n    const descriptionParent = description.closest('div');\n    const galleryParent = gallery.closest('div');\n    const statsParent = statsSection.closest('div');\n\n    expect(descriptionParent).toBeInTheDocument();\n    expect(galleryParent).toBeInTheDocument();\n    expect(statsParent).toBeInTheDocument();\n  });\n\n  it('should display single image in gallery when session has one image', () => {\n    const sessionWithOneImage = {\n      ...baseSession,\n      images: ['https://example.com/single-image.jpg'],\n    };\n\n    render(\n      <SessionCard\n        session={sessionWithOneImage}\n        onSupport={mockOnSupport}\n        onRemoveSupport={mockOnRemoveSupport}\n        onShare={mockOnShare}\n      />\n    );\n\n    const gallery = screen.getByTestId('image-gallery');\n    expect(gallery).toBeInTheDocument();\n\n    const galleryImages = screen.getAllByAltText(/Gallery image/);\n    expect(galleryImages).toHaveLength(1);\n  });\n\n  it('should display all three images in gallery when session has maximum images', () => {\n    const sessionWithMaxImages = {\n      ...baseSession,\n      images: [\n        'https://example.com/image1.jpg',\n        'https://example.com/image2.jpg',\n        'https://example.com/image3.jpg',\n      ],\n    };\n\n    render(\n      <SessionCard\n        session={sessionWithMaxImages}\n        onSupport={mockOnSupport}\n        onRemoveSupport={mockOnRemoveSupport}\n        onShare={mockOnShare}\n      />\n    );\n\n    const galleryImages = screen.getAllByAltText(/Gallery image/);\n    expect(galleryImages).toHaveLength(3);\n  });\n\n  it('should log debug info when session has images', () => {\n    const consoleLogSpy = jest.spyOn(console, 'log');\n\n    const sessionWithImages = {\n      ...baseSession,\n      images: ['https://example.com/image.jpg'],\n    };\n\n    render(\n      <SessionCard\n        session={sessionWithImages}\n        onSupport={mockOnSupport}\n        onRemoveSupport={mockOnRemoveSupport}\n        onShare={mockOnShare}\n      />\n    );\n\n    expect(consoleLogSpy).toHaveBeenCalledWith(\n      'Session has images:',\n      'session1',\n      ['https://example.com/image.jpg']\n    );\n\n    consoleLogSpy.mockRestore();\n  });\n\n  it('should render all session content when images are not present', () => {\n    render(\n      <SessionCard\n        session={baseSession}\n        onSupport={mockOnSupport}\n        onRemoveSupport={mockOnRemoveSupport}\n        onShare={mockOnShare}\n      />\n    );\n\n    // Should still render all other parts\n    expect(screen.getByText('Test Session')).toBeInTheDocument();\n    expect(screen.getByText('Test description')).toBeInTheDocument();\n    expect(screen.getByText('Test Project')).toBeInTheDocument();\n    expect(screen.queryByTestId('image-gallery')).not.toBeInTheDocument();\n  });\n\n  it('should apply correct padding styles to gallery container when images are present', () => {\n    const sessionWithImages = {\n      ...baseSession,\n      images: ['https://example.com/image.jpg'],\n    };\n\n    const { container } = render(\n      <SessionCard\n        session={sessionWithImages}\n        onSupport={mockOnSupport}\n        onRemoveSupport={mockOnRemoveSupport}\n        onShare={mockOnShare}\n      />\n    );\n\n    // Check that gallery has correct padding classes\n    const galleryContainer = screen.getByTestId('image-gallery').parentElement;\n    expect(galleryContainer).toHaveClass('px-4', 'pb-4');\n  });\n\n  it('should allow user interactions when session has images', () => {\n    const sessionWithImages = {\n      ...baseSession,\n      images: ['https://example.com/image.jpg'],\n    };\n\n    render(\n      <SessionCard\n        session={sessionWithImages}\n        onSupport={mockOnSupport}\n        onRemoveSupport={mockOnRemoveSupport}\n        onShare={mockOnShare}\n        onDelete={mockOnDelete}\n        onEdit={mockOnEdit}\n      />\n    );\n\n    // Test that all interactive buttons are present\n    const buttons = screen.getAllByRole('button');\n    expect(buttons.length).toBeGreaterThan(0);\n\n    // Test support button (first in action bar)\n    const supportButton = buttons.find(btn => btn.textContent?.includes('5'));\n    if (supportButton) {\n      fireEvent.click(supportButton);\n      expect(mockOnSupport).toHaveBeenCalledWith('session1');\n    }\n  });\n\n  it('should render image gallery correctly when URLs are very long', () => {\n    const longUrl =\n      'https://firebasestorage.googleapis.com/v0/b/project-id.appspot.com/o/session-images%2Fuser-id%2F1234567890_abc123.jpg?alt=media&token=very-long-token-string-here';\n\n    const sessionWithImages = {\n      ...baseSession,\n      images: [longUrl],\n    };\n\n    render(\n      <SessionCard\n        session={sessionWithImages}\n        onSupport={mockOnSupport}\n        onRemoveSupport={mockOnRemoveSupport}\n        onShare={mockOnShare}\n      />\n    );\n\n    const galleryImage = screen.getByAltText('Gallery image 1');\n    expect(galleryImage).toHaveAttribute('src', longUrl);\n  });\n\n  it('should keep image gallery visible when expanding long description', () => {\n    const sessionWithImages = {\n      ...baseSession,\n      description: 'A'.repeat(300), // Long description\n      images: ['https://example.com/image.jpg'],\n    };\n\n    render(\n      <SessionCard\n        session={sessionWithImages}\n        onSupport={mockOnSupport}\n        onRemoveSupport={mockOnRemoveSupport}\n        onShare={mockOnShare}\n      />\n    );\n\n    // Description should be collapsed initially\n    const showMoreButton = screen.queryByText(/show more/i);\n    expect(showMoreButton).toBeInTheDocument();\n\n    // Image gallery should still be visible\n    expect(screen.getByTestId('image-gallery')).toBeInTheDocument();\n\n    // Expand description\n    if (showMoreButton) {\n      fireEvent.click(showMoreButton);\n    }\n\n    // Gallery should still be visible\n    expect(screen.getByTestId('image-gallery')).toBeInTheDocument();\n  });\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/accessibility/focus-states.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/accessibility/icon-buttons.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/accessibility/keyboard-navigation.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/analytics/analytics-accessibility.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/auth/LoginForm-simple.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/auth/LoginForm.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/auth/SignupForm-simple.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/auth/SignupForm.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/session/SessionTimerEnhanced-complete-cancel.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/session/SessionTimerEnhanced-display.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/session/SessionTimerEnhanced-image-upload.test.tsx",
    "messages": [
      {
        "ruleId": "jsx-a11y/alt-text",
        "severity": 1,
        "message": "img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",
        "line": 23,
        "column": 12,
        "nodeType": "JSXOpeningElement",
        "endLine": 23,
        "endColumn": 30
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { SessionTimerEnhanced } from '@/components/SessionTimerEnhanced';\nimport { useTimer } from '@/features/timer/hooks';\nimport { useActivities } from '@/hooks/useActivitiesQuery';\nimport { uploadImages } from '@/lib/imageUpload';\n\n// Mock the contexts and hooks\njest.mock('@/features/timer/hooks');\njest.mock('@/contexts/AuthContext', () => ({\n  useAuth: () => ({\n    user: { id: 'test-user' },\n    isAuthenticated: true,\n  }),\n}));\njest.mock('@/hooks/useActivitiesQuery');\njest.mock('@/lib/imageUpload');\n\n// Mock Next.js Image\njest.mock('next/image', () => ({\n  __esModule: true,\n  default: (props: any) => {\n    return <img {...props} />;\n  },\n}));\n\ndescribe('SessionTimerEnhanced - Image Upload', () => {\n  const mockStartTimer = jest.fn();\n  const mockPauseTimer = jest.fn();\n  const mockResumeTimer = jest.fn();\n  const mockFinishTimer = jest.fn();\n  const mockResetTimer = jest.fn();\n  const mockUpdateSelectedTasks = jest.fn();\n  const mockGetElapsedTime = jest.fn(() => 3600);\n  const mockGetFormattedTime = jest.fn((seconds: number) => '01:00:00');\n\n  const mockProjects = [\n    { id: 'proj1', name: 'Test Project', icon: '📝', color: '#007AFF' },\n  ];\n\n  const mockTasks = [\n    { id: 'task1', name: 'Test Task', projectId: 'proj1', status: 'active' },\n  ];\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    (useTimer as jest.Mock).mockReturnValue({\n      timerState: {\n        isRunning: true,\n        startTime: new Date(),\n        pausedDuration: 0,\n        currentProject: mockProjects[0],\n        selectedTasks: [],\n        activeTimerId: 'timer-123',\n        isConnected: true,\n        lastAutoSave: null,\n      },\n      startTimer: mockStartTimer,\n      pauseTimer: mockPauseTimer,\n      resumeTimer: mockResumeTimer,\n      finishTimer: mockFinishTimer,\n      resetTimer: mockResetTimer,\n      updateSelectedTasks: mockUpdateSelectedTasks,\n      getElapsedTime: mockGetElapsedTime,\n      getFormattedTime: mockGetFormattedTime,\n    });\n\n    (useActivities as jest.Mock).mockReturnValue({\n      data: mockProjects,\n      isLoading: false,\n      error: null,\n    });\n\n    (uploadImages as jest.Mock).mockResolvedValue([\n      { url: 'https://example.com/image1.jpg', path: 'path/to/image1.jpg' },\n      { url: 'https://example.com/image2.jpg', path: 'path/to/image2.jpg' },\n    ]);\n\n    // Mock URL.createObjectURL\n    global.URL.createObjectURL = jest.fn(() => 'blob:mock-url');\n    global.URL.revokeObjectURL = jest.fn();\n\n    // Mock localStorage\n    Storage.prototype.getItem = jest.fn();\n    Storage.prototype.setItem = jest.fn();\n  });\n\n  it('should show image upload button in finish modal', async () => {\n    render(<SessionTimerEnhanced projectId=\"proj1\" />);\n\n    // Click finish button to open modal\n    const finishButton = screen.getByRole('button', { name: /finish/i });\n    fireEvent.click(finishButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/add images/i)).toBeInTheDocument();\n    });\n  });\n\n  it('should allow selecting image files', async () => {\n    render(<SessionTimerEnhanced projectId=\"proj1\" />);\n\n    // Open finish modal\n    const finishButton = screen.getByRole('button', { name: /finish/i });\n    fireEvent.click(finishButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/add images/i)).toBeInTheDocument();\n    });\n\n    // Create mock file\n    const file = new File(['image content'], 'test-image.jpg', {\n      type: 'image/jpeg',\n    });\n\n    // Find file input and simulate file selection\n    const fileInput = screen\n      .getByLabelText(/add images/i)\n      .querySelector('input[type=\"file\"]') as HTMLInputElement;\n\n    Object.defineProperty(fileInput, 'files', {\n      value: [file],\n      writable: false,\n    });\n\n    fireEvent.change(fileInput);\n\n    await waitFor(() => {\n      expect(global.URL.createObjectURL).toHaveBeenCalledWith(file);\n    });\n  });\n\n  it('should show preview after selecting images', async () => {\n    render(<SessionTimerEnhanced projectId=\"proj1\" />);\n\n    const finishButton = screen.getByRole('button', { name: /finish/i });\n    fireEvent.click(finishButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/add images/i)).toBeInTheDocument();\n    });\n\n    const file = new File(['image'], 'test.jpg', { type: 'image/jpeg' });\n    const fileInput = screen\n      .getByLabelText(/add images/i)\n      .querySelector('input[type=\"file\"]') as HTMLInputElement;\n\n    Object.defineProperty(fileInput, 'files', {\n      value: [file],\n      writable: false,\n    });\n\n    fireEvent.change(fileInput);\n\n    await waitFor(() => {\n      const preview = screen.getByAltText(/preview 1/i);\n      expect(preview).toBeInTheDocument();\n      expect(preview).toHaveAttribute('src', 'blob:mock-url');\n    });\n  });\n\n  it('should limit to maximum 3 images', async () => {\n    // Mock window.alert\n    const alertMock = jest.spyOn(window, 'alert').mockImplementation(() => {});\n\n    render(<SessionTimerEnhanced projectId=\"proj1\" />);\n\n    const finishButton = screen.getByRole('button', { name: /finish/i });\n    fireEvent.click(finishButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/add images/i)).toBeInTheDocument();\n    });\n\n    const files = [\n      new File(['1'], '1.jpg', { type: 'image/jpeg' }),\n      new File(['2'], '2.jpg', { type: 'image/jpeg' }),\n      new File(['3'], '3.jpg', { type: 'image/jpeg' }),\n      new File(['4'], '4.jpg', { type: 'image/jpeg' }),\n    ];\n\n    const fileInput = screen\n      .getByLabelText(/add images/i)\n      .querySelector('input[type=\"file\"]') as HTMLInputElement;\n\n    Object.defineProperty(fileInput, 'files', {\n      value: files,\n      writable: false,\n    });\n\n    fireEvent.change(fileInput);\n\n    await waitFor(() => {\n      expect(alertMock).toHaveBeenCalledWith('Maximum 3 images allowed');\n    });\n\n    alertMock.mockRestore();\n  });\n\n  it('should reject files larger than 5MB', async () => {\n    const alertMock = jest.spyOn(window, 'alert').mockImplementation(() => {});\n\n    render(<SessionTimerEnhanced projectId=\"proj1\" />);\n\n    const finishButton = screen.getByRole('button', { name: /finish/i });\n    fireEvent.click(finishButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/add images/i)).toBeInTheDocument();\n    });\n\n    // Create a file larger than 5MB\n    const largeFile = new File(['x'.repeat(6 * 1024 * 1024)], 'large.jpg', {\n      type: 'image/jpeg',\n    });\n\n    const fileInput = screen\n      .getByLabelText(/add images/i)\n      .querySelector('input[type=\"file\"]') as HTMLInputElement;\n\n    Object.defineProperty(fileInput, 'files', {\n      value: [largeFile],\n      writable: false,\n    });\n\n    fireEvent.change(fileInput);\n\n    await waitFor(() => {\n      expect(alertMock).toHaveBeenCalledWith(\n        expect.stringContaining('too large')\n      );\n    });\n\n    alertMock.mockRestore();\n  });\n\n  it('should reject non-image files', async () => {\n    const alertMock = jest.spyOn(window, 'alert').mockImplementation(() => {});\n\n    render(<SessionTimerEnhanced projectId=\"proj1\" />);\n\n    const finishButton = screen.getByRole('button', { name: /finish/i });\n    fireEvent.click(finishButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/add images/i)).toBeInTheDocument();\n    });\n\n    const textFile = new File(['text'], 'file.txt', { type: 'text/plain' });\n\n    const fileInput = screen\n      .getByLabelText(/add images/i)\n      .querySelector('input[type=\"file\"]') as HTMLInputElement;\n\n    Object.defineProperty(fileInput, 'files', {\n      value: [textFile],\n      writable: false,\n    });\n\n    fireEvent.change(fileInput);\n\n    await waitFor(() => {\n      expect(alertMock).toHaveBeenCalledWith(\n        expect.stringContaining('not an image')\n      );\n    });\n\n    alertMock.mockRestore();\n  });\n\n  it('should allow removing selected images', async () => {\n    render(<SessionTimerEnhanced projectId=\"proj1\" />);\n\n    const finishButton = screen.getByRole('button', { name: /finish/i });\n    fireEvent.click(finishButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/add images/i)).toBeInTheDocument();\n    });\n\n    const file = new File(['image'], 'test.jpg', { type: 'image/jpeg' });\n    const fileInput = screen\n      .getByLabelText(/add images/i)\n      .querySelector('input[type=\"file\"]') as HTMLInputElement;\n\n    Object.defineProperty(fileInput, 'files', {\n      value: [file],\n      writable: false,\n    });\n\n    fireEvent.change(fileInput);\n\n    await waitFor(() => {\n      expect(screen.getByAltText(/preview 1/i)).toBeInTheDocument();\n    });\n\n    // Find and click remove button\n    const removeButtons = screen.getAllByRole('button');\n    const removeButton = removeButtons.find(btn => btn.querySelector('svg')); // XCircle icon\n\n    if (removeButton) {\n      fireEvent.click(removeButton);\n    }\n\n    await waitFor(() => {\n      expect(screen.queryByAltText(/preview 1/i)).not.toBeInTheDocument();\n      expect(global.URL.revokeObjectURL).toHaveBeenCalled();\n    });\n  });\n\n  it('should upload images when finishing session', async () => {\n    mockFinishTimer.mockResolvedValue({ id: 'session-123' });\n\n    render(<SessionTimerEnhanced projectId=\"proj1\" />);\n\n    const finishButton = screen.getByRole('button', { name: /finish/i });\n    fireEvent.click(finishButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/add images/i)).toBeInTheDocument();\n    });\n\n    // Add images\n    const files = [\n      new File(['1'], '1.jpg', { type: 'image/jpeg' }),\n      new File(['2'], '2.jpg', { type: 'image/jpeg' }),\n    ];\n\n    const fileInput = screen\n      .getByLabelText(/add images/i)\n      .querySelector('input[type=\"file\"]') as HTMLInputElement;\n\n    Object.defineProperty(fileInput, 'files', {\n      value: files,\n      writable: false,\n    });\n\n    fireEvent.change(fileInput);\n\n    await waitFor(() => {\n      expect(screen.getAllByAltText(/preview/i)).toHaveLength(2);\n    });\n\n    // Fill required fields\n    const titleInput = screen.getByPlaceholderText(/how did it go/i);\n    fireEvent.change(titleInput, { target: { value: 'Test Session' } });\n\n    // Find and click the save button (not finish timer button)\n    const saveButton = screen.getByRole('button', { name: /^save$/i });\n    fireEvent.click(saveButton);\n\n    await waitFor(() => {\n      expect(uploadImages).toHaveBeenCalledWith(files);\n      expect(mockFinishTimer).toHaveBeenCalledWith(\n        'Test Session',\n        expect.anything(),\n        expect.anything(),\n        expect.anything(),\n        expect.anything(),\n        expect.objectContaining({\n          images: [\n            'https://example.com/image1.jpg',\n            'https://example.com/image2.jpg',\n          ],\n        })\n      );\n    });\n  });\n\n  it('should handle image upload errors gracefully', async () => {\n    const alertMock = jest.spyOn(window, 'alert').mockImplementation(() => {});\n    const consoleErrorMock = jest\n      .spyOn(console, 'error')\n      .mockImplementation(() => {});\n\n    (uploadImages as jest.Mock).mockRejectedValue(new Error('Upload failed'));\n    mockFinishTimer.mockResolvedValue({ id: 'session-123' });\n\n    render(<SessionTimerEnhanced projectId=\"proj1\" />);\n\n    const finishButton = screen.getByRole('button', { name: /finish/i });\n    fireEvent.click(finishButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/add images/i)).toBeInTheDocument();\n    });\n\n    const file = new File(['image'], 'test.jpg', { type: 'image/jpeg' });\n    const fileInput = screen\n      .getByLabelText(/add images/i)\n      .querySelector('input[type=\"file\"]') as HTMLInputElement;\n\n    Object.defineProperty(fileInput, 'files', {\n      value: [file],\n      writable: false,\n    });\n\n    fireEvent.change(fileInput);\n\n    await waitFor(() => {\n      expect(screen.getByAltText(/preview 1/i)).toBeInTheDocument();\n    });\n\n    const titleInput = screen.getByPlaceholderText(/how did it go/i);\n    fireEvent.change(titleInput, { target: { value: 'Test Session' } });\n\n    const saveButton = screen.getByRole('button', { name: /^save$/i });\n    fireEvent.click(saveButton);\n\n    await waitFor(() => {\n      expect(alertMock).toHaveBeenCalledWith(\n        expect.stringContaining('Failed to upload images')\n      );\n      // Session should still be created without images\n      expect(mockFinishTimer).toHaveBeenCalled();\n    });\n\n    alertMock.mockRestore();\n    consoleErrorMock.mockRestore();\n  });\n\n  it('should update button text when more images can be added', async () => {\n    render(<SessionTimerEnhanced projectId=\"proj1\" />);\n\n    const finishButton = screen.getByRole('button', { name: /finish/i });\n    fireEvent.click(finishButton);\n\n    await waitFor(() => {\n      expect(screen.getByText('Add images')).toBeInTheDocument();\n    });\n\n    // Add one image\n    const file = new File(['image'], 'test.jpg', { type: 'image/jpeg' });\n    const fileInput = screen\n      .getByLabelText(/add images/i)\n      .querySelector('input[type=\"file\"]') as HTMLInputElement;\n\n    Object.defineProperty(fileInput, 'files', {\n      value: [file],\n      writable: false,\n    });\n\n    fireEvent.change(fileInput);\n\n    await waitFor(() => {\n      expect(screen.getByText('Add 2 more')).toBeInTheDocument();\n    });\n  });\n\n  it('should hide upload button when 3 images are selected', async () => {\n    render(<SessionTimerEnhanced projectId=\"proj1\" />);\n\n    const finishButton = screen.getByRole('button', { name: /finish/i });\n    fireEvent.click(finishButton);\n\n    await waitFor(() => {\n      expect(screen.getByText(/add images/i)).toBeInTheDocument();\n    });\n\n    const files = [\n      new File(['1'], '1.jpg', { type: 'image/jpeg' }),\n      new File(['2'], '2.jpg', { type: 'image/jpeg' }),\n      new File(['3'], '3.jpg', { type: 'image/jpeg' }),\n    ];\n\n    const fileInput = screen\n      .getByLabelText(/add images/i)\n      .querySelector('input[type=\"file\"]') as HTMLInputElement;\n\n    Object.defineProperty(fileInput, 'files', {\n      value: files,\n      writable: false,\n    });\n\n    fireEvent.change(fileInput);\n\n    await waitFor(() => {\n      expect(screen.getAllByAltText(/preview/i)).toHaveLength(3);\n      expect(screen.queryByText(/add/i)).not.toBeInTheDocument();\n    });\n  });\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/about/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/activities/[id]/edit/page.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'isLoading' and 'router'. Either include them or remove the dependency array.",
        "line": 311,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 311,
        "endColumn": 28,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [activityId, isLoading, projects, router]",
            "fix": {
              "range": [11667, 11689],
              "text": "[activityId, isLoading, projects, router]"
            }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport Header from '@/components/HeaderComponent';\nimport { UpdateActivityData } from '@/types';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useActivities, useUpdateActivity } from '@/hooks/useActivitiesQuery';\nimport { ProtectedRoute } from '@/components/ProtectedRoute';\nimport { IconSelector } from '@/components/IconSelector';\nimport { ColorSelector } from '@/components/ColorSelector';\nimport { Icon } from '@iconify/react';\n\n// Available icons from Iconify flat-color-icons\nconst AVAILABLE_ICONS = [\n  { name: 'briefcase', icon: 'flat-color-icons:briefcase', label: 'Work' },\n  { name: 'reading', icon: 'flat-color-icons:reading', label: 'Study' },\n  {\n    name: 'electronics',\n    icon: 'flat-color-icons:electronics',\n    label: 'Programming',\n  },\n  {\n    name: 'graduation-cap',\n    icon: 'flat-color-icons:graduation-cap',\n    label: 'Learning',\n  },\n  { name: 'idea', icon: 'flat-color-icons:idea', label: 'Ideas' },\n  { name: 'document', icon: 'flat-color-icons:document', label: 'Writing' },\n  { name: 'template', icon: 'flat-color-icons:template', label: 'Design' },\n  { name: 'gallery', icon: 'flat-color-icons:gallery', label: 'Gallery' },\n  { name: 'music', icon: 'flat-color-icons:music', label: 'Music' },\n  { name: 'video-file', icon: 'flat-color-icons:video-file', label: 'Video' },\n  { name: 'camera', icon: 'flat-color-icons:camera', label: 'Camera' },\n  {\n    name: 'sports-mode',\n    icon: 'flat-color-icons:sports-mode',\n    label: 'Sports',\n  },\n  { name: 'like', icon: 'flat-color-icons:like', label: 'Health' },\n  { name: 'binoculars', icon: 'flat-color-icons:binoculars', label: 'Explore' },\n  { name: 'timeline', icon: 'flat-color-icons:timeline', label: 'Timeline' },\n  { name: 'bullish', icon: 'flat-color-icons:bullish', label: 'Goals' },\n  { name: 'flash-on', icon: 'flat-color-icons:flash-on', label: 'Energy' },\n  {\n    name: 'advertising',\n    icon: 'flat-color-icons:advertising',\n    label: 'Marketing',\n  },\n  {\n    name: 'collaboration',\n    icon: 'flat-color-icons:collaboration',\n    label: 'Team',\n  },\n  {\n    name: 'positive-dynamic',\n    icon: 'flat-color-icons:positive-dynamic',\n    label: 'Growth',\n  },\n  { name: 'approval', icon: 'flat-color-icons:approval', label: 'Approval' },\n  { name: 'ratings', icon: 'flat-color-icons:ratings', label: 'Favorite' },\n  { name: 'calendar', icon: 'flat-color-icons:calendar', label: 'Calendar' },\n  { name: 'todo-list', icon: 'flat-color-icons:todo-list', label: 'Tasks' },\n  { name: 'ok', icon: 'flat-color-icons:ok', label: 'Complete' },\n  { name: 'globe', icon: 'flat-color-icons:globe', label: 'Globe' },\n  { name: 'headset', icon: 'flat-color-icons:headset', label: 'Audio' },\n  { name: 'video-call', icon: 'flat-color-icons:video-call', label: 'Call' },\n  {\n    name: 'smartphone-tablet',\n    icon: 'flat-color-icons:smartphone-tablet',\n    label: 'Mobile',\n  },\n  {\n    name: 'parallel-tasks',\n    icon: 'flat-color-icons:parallel-tasks',\n    label: 'Database',\n  },\n  { name: 'package', icon: 'flat-color-icons:package', label: 'Package' },\n  { name: 'workflow', icon: 'flat-color-icons:workflow', label: 'Workflow' },\n  { name: 'settings', icon: 'flat-color-icons:settings', label: 'Settings' },\n  { name: 'mind-map', icon: 'flat-color-icons:mind-map', label: 'Planning' },\n  {\n    name: 'business-contact',\n    icon: 'flat-color-icons:business-contact',\n    label: 'Contact',\n  },\n  {\n    name: 'calculator',\n    icon: 'flat-color-icons:calculator',\n    label: 'Calculator',\n  },\n  { name: 'puzzle', icon: 'flat-color-icons:puzzle', label: 'Puzzle' },\n  { name: 'support', icon: 'flat-color-icons:support', label: 'Support' },\n  { name: 'planner', icon: 'flat-color-icons:planner', label: 'Planner' },\n  { name: 'faq', icon: 'flat-color-icons:faq', label: 'FAQ' },\n  {\n    name: 'money-transfer',\n    icon: 'flat-color-icons:money-transfer',\n    label: 'Finance',\n  },\n  { name: 'survey', icon: 'flat-color-icons:survey', label: 'Survey' },\n  { name: 'data-sheet', icon: 'flat-color-icons:data-sheet', label: 'Data' },\n  {\n    name: 'filing-cabinet',\n    icon: 'flat-color-icons:filing-cabinet',\n    label: 'Files',\n  },\n  { name: 'key', icon: 'flat-color-icons:key', label: 'Security' },\n  { name: 'shop', icon: 'flat-color-icons:shop', label: 'Shop' },\n  { name: 'donate', icon: 'flat-color-icons:donate', label: 'Donate' },\n  { name: 'news', icon: 'flat-color-icons:news', label: 'News' },\n  { name: 'alarm-clock', icon: 'flat-color-icons:alarm-clock', label: 'Clock' },\n  {\n    name: 'tree-structure',\n    icon: 'flat-color-icons:tree-structure',\n    label: 'Structure',\n  },\n  {\n    name: 'organization',\n    icon: 'flat-color-icons:organization',\n    label: 'Organization',\n  },\n  {\n    name: 'bulleted-list',\n    icon: 'flat-color-icons:bulleted-list',\n    label: 'List',\n  },\n  {\n    name: 'voice-presentation',\n    icon: 'flat-color-icons:voice-presentation',\n    label: 'Present',\n  },\n  { name: 'bar-chart', icon: 'flat-color-icons:bar-chart', label: 'Chart' },\n  { name: 'overtime', icon: 'flat-color-icons:overtime', label: 'Overtime' },\n  {\n    name: 'multiple-inputs',\n    icon: 'flat-color-icons:multiple-inputs',\n    label: 'Input',\n  },\n  { name: 'rules', icon: 'flat-color-icons:rules', label: 'Rules' },\n  {\n    name: 'podium-with-speaker',\n    icon: 'flat-color-icons:podium-with-speaker',\n    label: 'Speaker',\n  },\n  { name: 'database', icon: 'flat-color-icons:database', label: 'Database' },\n  { name: 'cloud', icon: 'flat-color-icons:cloud', label: 'Cloud' },\n  { name: 'linux', icon: 'flat-color-icons:linux', label: 'Linux' },\n  { name: 'android-os', icon: 'flat-color-icons:android-os', label: 'Android' },\n  { name: 'apple', icon: 'flat-color-icons:iphone', label: 'iOS' },\n  { name: 'diploma', icon: 'flat-color-icons:diploma', label: 'Diploma' },\n  { name: 'manager', icon: 'flat-color-icons:manager', label: 'Manager' },\n  { name: 'business', icon: 'flat-color-icons:business', label: 'Business' },\n  {\n    name: 'engineering',\n    icon: 'flat-color-icons:engineering',\n    label: 'Engineering',\n  },\n  { name: 'home', icon: 'flat-color-icons:home', label: 'Home' },\n  { name: 'services', icon: 'flat-color-icons:services', label: 'Services' },\n  { name: 'library', icon: 'flat-color-icons:library', label: 'Library' },\n  { name: 'landscape', icon: 'flat-color-icons:landscape', label: 'Nature' },\n  {\n    name: 'basketball',\n    icon: 'flat-color-icons:basketball',\n    label: 'Basketball',\n  },\n  {\n    name: 'automotive',\n    icon: 'flat-color-icons:automotive',\n    label: 'Automotive',\n  },\n  { name: 'shipped', icon: 'flat-color-icons:shipped', label: 'Shipping' },\n  { name: 'factory', icon: 'flat-color-icons:factory', label: 'Factory' },\n  { name: 'about', icon: 'flat-color-icons:about', label: 'About' },\n  { name: 'light', icon: 'flat-color-icons:light', label: 'Light' },\n  { name: 'search', icon: 'flat-color-icons:search', label: 'Search' },\n  { name: 'add-image', icon: 'flat-color-icons:add-image', label: 'Add Image' },\n  { name: 'film-reel', icon: 'flat-color-icons:film-reel', label: 'Film' },\n  {\n    name: 'stack-of-photos',\n    icon: 'flat-color-icons:stack-of-photos',\n    label: 'Photos',\n  },\n  {\n    name: 'self-service-kiosk',\n    icon: 'flat-color-icons:self-service-kiosk',\n    label: 'Kiosk',\n  },\n  {\n    name: 'inspection',\n    icon: 'flat-color-icons:inspection',\n    label: 'Inspection',\n  },\n  {\n    name: 'briefcase-2',\n    icon: 'flat-color-icons:business-contact',\n    label: 'Business Contact',\n  },\n  {\n    name: 'conference-call',\n    icon: 'flat-color-icons:conference-call',\n    label: 'Conference',\n  },\n  { name: 'cursor', icon: 'flat-color-icons:cursor', label: 'Cursor' },\n  { name: 'display', icon: 'flat-color-icons:display', label: 'Display' },\n  { name: 'feedback', icon: 'flat-color-icons:feedback', label: 'Feedback' },\n  {\n    name: 'self-destruct-button',\n    icon: 'flat-color-icons:delete-database',\n    label: 'Delete',\n  },\n  {\n    name: 'idea-sharing',\n    icon: 'flat-color-icons:idea-sharing',\n    label: 'Ideas Sharing',\n  },\n  { name: 'sports', icon: 'flat-color-icons:sports-mode', label: 'Sports' },\n  { name: 'grid', icon: 'flat-color-icons:grid', label: 'Grid' },\n  { name: 'puzzle-2', icon: 'flat-color-icons:puzzle', label: 'Puzzle' },\n];\n\n// Color options\nconst AVAILABLE_COLORS = [\n  // Warm Colors\n  { name: 'red', hex: '#ef4444', label: 'Red' },\n  { name: 'rose', hex: '#f43f5e', label: 'Rose' },\n  { name: 'pink', hex: '#ec4899', label: 'Pink' },\n  { name: 'fuchsia', hex: '#d946ef', label: 'Fuchsia' },\n  { name: 'orange', hex: '#f97316', label: 'Orange' },\n  { name: 'amber', hex: '#f59e0b', label: 'Amber' },\n  { name: 'yellow', hex: '#eab308', label: 'Yellow' },\n  { name: 'lime', hex: '#84cc16', label: 'Lime' },\n\n  // Cool Colors\n  { name: 'green', hex: '#22c55e', label: 'Green' },\n  { name: 'emerald', hex: '#10b981', label: 'Emerald' },\n  { name: 'teal', hex: '#14b8a6', label: 'Teal' },\n  { name: 'cyan', hex: '#06b6d4', label: 'Cyan' },\n  { name: 'sky', hex: '#0ea5e9', label: 'Sky' },\n  { name: 'blue', hex: '#3b82f6', label: 'Blue' },\n  { name: 'indigo', hex: '#6366f1', label: 'Indigo' },\n  { name: 'violet', hex: '#8b5cf6', label: 'Violet' },\n  { name: 'purple', hex: '#a855f7', label: 'Purple' },\n\n  // Neutrals\n  { name: 'slate', hex: '#64748b', label: 'Slate' },\n  { name: 'gray', hex: '#6b7280', label: 'Gray' },\n  { name: 'zinc', hex: '#71717a', label: 'Zinc' },\n  { name: 'neutral', hex: '#737373', label: 'Neutral' },\n  { name: 'stone', hex: '#78716c', label: 'Stone' },\n\n  // Additional vibrant colors\n  { name: 'coral', hex: '#ff6b6b', label: 'Coral' },\n  { name: 'peach', hex: '#ffb088', label: 'Peach' },\n  { name: 'mint', hex: '#7bed9f', label: 'Mint' },\n  { name: 'lavender', hex: '#c29dff', label: 'Lavender' },\n  { name: 'turquoise', hex: '#06d6a0', label: 'Turquoise' },\n  { name: 'navy', hex: '#1e3a8a', label: 'Navy' },\n  { name: 'burgundy', hex: '#9f1239', label: 'Burgundy' },\n  { name: 'olive', hex: '#84a98c', label: 'Olive' },\n  { name: 'mustard', hex: '#d4a373', label: 'Mustard' },\n  { name: 'salmon', hex: '#fa8072', label: 'Salmon' },\n  { name: 'crimson', hex: '#dc143c', label: 'Crimson' },\n  { name: 'forest', hex: '#2d6a4f', label: 'Forest' },\n];\n\ninterface EditActivityPageProps {\n  params: Promise<{\n    id: string;\n  }>;\n}\n\nfunction EditActivityContent({ activityId }: { activityId: string }) {\n  const router = useRouter();\n  const { user } = useAuth();\n  const { data: projects = [] } = useActivities(user?.id);\n  const updateProject = useUpdateActivity();\n  const [isLoading, setIsLoading] = useState(true);\n  const [formData, setFormData] = useState<UpdateActivityData>({\n    name: '',\n    description: '',\n    icon: 'briefcase',\n    color: 'orange',\n    weeklyTarget: undefined,\n    totalTarget: undefined,\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [errors, setErrors] = useState<\n    Partial<Record<keyof UpdateActivityData, string>>\n  >({});\n  const [successMessage, setSuccessMessage] = useState('');\n\n  // Load activity data\n  useEffect(() => {\n    const activity = projects?.find(p => p.id === activityId);\n    if (activity) {\n      setFormData({\n        name: activity.name,\n        description: activity.description || '',\n        icon: activity.icon,\n        color: activity.color,\n        weeklyTarget: activity.weeklyTarget,\n        totalTarget: activity.totalTarget,\n      });\n      setIsLoading(false);\n    } else if (!isLoading) {\n      // If activity not found and projects are loaded, redirect\n      router.push('/activities');\n    }\n  }, [activityId, projects]);\n\n  const validateForm = (): boolean => {\n    const newErrors: Partial<Record<keyof UpdateActivityData, string>> = {};\n\n    if (!formData.name?.trim()) {\n      newErrors.name = 'Activity name is required';\n    } else if (formData.name.length > 50) {\n      newErrors.name = 'Activity name must be less than 50 characters';\n    }\n\n    if (formData.description && formData.description.length > 200) {\n      newErrors.description = 'Description must be less than 200 characters';\n    }\n\n    if (\n      formData.weeklyTarget &&\n      (formData.weeklyTarget < 0 || formData.weeklyTarget > 168)\n    ) {\n      newErrors.weeklyTarget = 'Weekly target must be between 0 and 168 hours';\n    }\n\n    if (\n      formData.totalTarget &&\n      (formData.totalTarget < 0 || formData.totalTarget > 10000)\n    ) {\n      newErrors.totalTarget = 'Total target must be between 0 and 10,000 hours';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    try {\n      setIsSubmitting(true);\n      setSuccessMessage('');\n\n      if (!updateProject) {\n        throw new Error('Update project function is not available');\n      }\n\n      // Convert icon name to full Iconify string and color name to hex\n      const selectedIcon = AVAILABLE_ICONS.find(i => i.name === formData.icon);\n      const selectedColor = AVAILABLE_COLORS.find(\n        c => c.name === formData.color\n      );\n\n      await updateProject.mutateAsync({\n        id: activityId,\n        data: {\n          ...formData,\n          name: formData.name?.trim(),\n          description: formData.description?.trim(),\n          icon: selectedIcon?.icon || formData.icon,\n          color: selectedColor?.hex || formData.color,\n          weeklyTarget: formData.weeklyTarget || undefined,\n          totalTarget: formData.totalTarget || undefined,\n        },\n      });\n\n      setSuccessMessage('Activity updated successfully!');\n\n      setTimeout(() => {\n        router.push(`/activities/${activityId}`);\n      }, 1500);\n    } catch (error) {\n      console.error('Failed to update activity:', error);\n      const errorMessage =\n        error instanceof Error\n          ? error.message\n          : 'Failed to update activity. Please try again.';\n      setErrors({ name: errorMessage });\n      setSuccessMessage('');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleInputChange = (\n    field: keyof UpdateActivityData,\n    value: string | number | undefined\n  ) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: undefined }));\n    }\n    if (successMessage) {\n      setSuccessMessage('');\n    }\n  };\n\n  // Get current icon string - always has a fallback to first icon\n  const iconData =\n    AVAILABLE_ICONS.find(i => i.icon === formData.icon) ||\n    AVAILABLE_ICONS.find(i => i.name === formData.icon) ||\n    AVAILABLE_ICONS[0]!;\n\n  // Get current color - always has a fallback to first color\n  const colorData =\n    AVAILABLE_COLORS.find(\n      c => c.name === formData.color || c.hex === formData.color\n    ) || AVAILABLE_COLORS[0]!;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"max-w-2xl mx-auto px-4 py-8\">\n          <div className=\"bg-white rounded-lg shadow-md p-6 md:p-8\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n              <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n              <div className=\"h-24 bg-gray-200 rounded\"></div>\n              <div className=\"space-y-4\">\n                <div className=\"h-12 bg-gray-200 rounded\"></div>\n                <div className=\"h-12 bg-gray-200 rounded\"></div>\n                <div className=\"h-12 bg-gray-200 rounded\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n\n      <div className=\"max-w-2xl mx-auto px-4 py-8\">\n        <div className=\"bg-white rounded-lg shadow-md p-6 md:p-8\">\n          {/* Header */}\n          <div className=\"mb-6\">\n            <h1 className=\"text-3xl font-bold text-gray-900\">Edit Activity</h1>\n            <p className=\"text-gray-600 mt-2\">\n              Update your activity settings and goals\n            </p>\n          </div>\n\n          {/* Success Message */}\n          {successMessage && (\n            <div className=\"mb-6 p-4 bg-green-50 border border-green-200 rounded-lg flex items-center gap-3\">\n              <svg\n                className=\"w-5 h-5 text-green-600 flex-shrink-0\"\n                fill=\"currentColor\"\n                viewBox=\"0 0 20 20\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n              <p className=\"text-sm font-medium text-green-800\">\n                {successMessage}\n              </p>\n            </div>\n          )}\n\n          {/* Preview Card */}\n          <div className=\"mb-8 p-6 bg-gradient-to-br from-gray-50 to-gray-100 rounded-xl border border-gray-200\">\n            <div className=\"flex items-center gap-4\">\n              <div\n                className=\"w-16 h-16 rounded-xl flex items-center justify-center shadow-lg p-2\"\n                style={{ backgroundColor: colorData?.hex }}\n              >\n                <Icon icon={iconData?.icon} width={48} height={48} />\n              </div>\n              <div className=\"flex-1\">\n                <h2 className=\"text-xl font-bold text-gray-900\">\n                  {formData.name || 'Activity Name'}\n                </h2>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  {formData.description || 'Activity description'}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Activity Name */}\n            <div>\n              <label\n                htmlFor=\"name\"\n                className=\"block text-sm font-semibold text-gray-900 mb-2\"\n              >\n                Activity Name *\n              </label>\n              <input\n                type=\"text\"\n                id=\"name\"\n                value={formData.name}\n                onChange={e => handleInputChange('name', e.target.value)}\n                className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] transition-colors ${\n                  errors.name ? 'border-red-500' : 'border-gray-300'\n                }`}\n                placeholder=\"Enter activity name\"\n                maxLength={50}\n              />\n              {errors.name && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.name}</p>\n              )}\n            </div>\n\n            {/* Description */}\n            <div>\n              <label\n                htmlFor=\"description\"\n                className=\"block text-sm font-semibold text-gray-900 mb-2\"\n              >\n                Description\n              </label>\n              <textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={e => handleInputChange('description', e.target.value)}\n                className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] resize-none transition-colors ${\n                  errors.description ? 'border-red-500' : 'border-gray-300'\n                }`}\n                placeholder=\"Describe your activity (optional)\"\n                rows={3}\n                maxLength={200}\n              />\n              {errors.description && (\n                <p className=\"mt-1 text-sm text-red-600\">\n                  {errors.description}\n                </p>\n              )}\n              <p className=\"mt-1 text-xs text-gray-500\">\n                {(formData.description || '').length}/200 characters\n              </p>\n            </div>\n\n            {/* Icon Selector */}\n            <div>\n              <label\n                htmlFor=\"icon\"\n                className=\"block text-sm font-semibold text-gray-900 mb-2\"\n              >\n                Icon\n              </label>\n              <IconSelector\n                icons={AVAILABLE_ICONS}\n                value={formData.icon || 'briefcase'}\n                onChange={iconName => handleInputChange('icon', iconName)}\n              />\n              <p className=\"mt-1 text-xs text-gray-500\">\n                Choose an icon that represents this activity\n              </p>\n            </div>\n\n            {/* Color Selector */}\n            <div>\n              <label\n                htmlFor=\"color\"\n                className=\"block text-sm font-semibold text-gray-900 mb-2\"\n              >\n                Color\n              </label>\n              <ColorSelector\n                colors={AVAILABLE_COLORS}\n                value={formData.color || 'orange'}\n                onChange={colorName => handleInputChange('color', colorName)}\n              />\n              <p className=\"mt-1 text-xs text-gray-500\">\n                Pick a color to identify this activity\n              </p>\n            </div>\n\n            {/* Weekly Target */}\n            <div>\n              <label\n                htmlFor=\"weeklyTarget\"\n                className=\"block text-sm font-semibold text-gray-900 mb-2\"\n              >\n                Weekly Target (hours)\n              </label>\n              <input\n                type=\"number\"\n                id=\"weeklyTarget\"\n                value={formData.weeklyTarget || ''}\n                onChange={e =>\n                  handleInputChange(\n                    'weeklyTarget',\n                    e.target.value ? Number(e.target.value) : undefined\n                  )\n                }\n                className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] transition-colors ${\n                  errors.weeklyTarget ? 'border-red-500' : 'border-gray-300'\n                }`}\n                placeholder=\"Optional\"\n                min=\"0\"\n                max=\"168\"\n                step=\"0.5\"\n              />\n              {errors.weeklyTarget && (\n                <p className=\"mt-1 text-sm text-red-600\">\n                  {errors.weeklyTarget}\n                </p>\n              )}\n              <p className=\"mt-1 text-xs text-gray-500\">\n                Set a weekly goal for this activity\n              </p>\n            </div>\n\n            {/* Total Target */}\n            <div>\n              <label\n                htmlFor=\"totalTarget\"\n                className=\"block text-sm font-semibold text-gray-900 mb-2\"\n              >\n                Total Target (hours)\n              </label>\n              <input\n                type=\"number\"\n                id=\"totalTarget\"\n                value={formData.totalTarget || ''}\n                onChange={e =>\n                  handleInputChange(\n                    'totalTarget',\n                    e.target.value ? Number(e.target.value) : undefined\n                  )\n                }\n                className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] transition-colors ${\n                  errors.totalTarget ? 'border-red-500' : 'border-gray-300'\n                }`}\n                placeholder=\"Optional\"\n                min=\"0\"\n                max=\"10000\"\n                step=\"1\"\n              />\n              {errors.totalTarget && (\n                <p className=\"mt-1 text-sm text-red-600\">\n                  {errors.totalTarget}\n                </p>\n              )}\n              <p className=\"mt-1 text-xs text-gray-500\">\n                Set an overall activity goal\n              </p>\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex flex-col sm:flex-row gap-3 pt-6 border-t border-gray-200\">\n              <button\n                type=\"button\"\n                onClick={() => router.push(`/activities/${activityId}`)}\n                className=\"flex-1 px-6 py-3 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors font-medium\"\n                disabled={isSubmitting}\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"flex-1 px-6 py-3 bg-[#007AFF] text-white rounded-lg hover:bg-[#0056D6] transition-colors disabled:opacity-50 disabled:cursor-not-allowed font-medium shadow-md\"\n              >\n                {isSubmitting ? 'Saving...' : 'Save Changes'}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function EditActivityPageWrapper({\n  params,\n}: EditActivityPageProps) {\n  const [activityId, setActivityId] = React.useState<string>('');\n\n  React.useEffect(() => {\n    params.then(({ id }) => setActivityId(id));\n  }, [params]);\n\n  return (\n    <ProtectedRoute>\n      {!activityId ? (\n        <div className=\"min-h-screen bg-gray-50\">\n          <Header />\n          <div className=\"max-w-2xl mx-auto px-4 py-8\">\n            <div className=\"bg-white rounded-lg shadow-md p-6 md:p-8\">\n              <div className=\"animate-pulse space-y-6\">\n                <div className=\"h-8 bg-gray-200 rounded w-1/3\"></div>\n                <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <EditActivityContent activityId={activityId} />\n      )}\n    </ProtectedRoute>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/activities/[id]/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ActivityStats' is defined but never used.",
        "line": 11,
        "column": 20,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 33
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Link' is defined but never used.",
        "line": 12,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 12,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Calendar' is defined but never used.",
        "line": 16,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'TrendingUp' is defined but never used.",
        "line": 17,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Play' is defined but never used.",
        "line": 20,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'LineChart' is defined but never used.",
        "line": 25,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Line' is defined but never used.",
        "line": 26,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'api' is defined but never used.",
        "line": 35,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 35,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isLoadingStats' is assigned a value but never used.",
        "line": 57,
        "column": 35,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 57,
        "endColumn": 49
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'showTimePeriodDropdown' is assigned a value but never used.",
        "line": 66,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setShowTimePeriodDropdown' is assigned a value but never used.",
        "line": 66,
        "column": 34,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 59
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'formatTime' is assigned a value but never used.",
        "line": 283,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 283,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'formatDate' is assigned a value but never used.",
        "line": 292,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 292,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'sessionId' is defined but never used.",
        "line": 312,
        "column": 32,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 312,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'sessionId' is defined but never used.",
        "line": 316,
        "column": 38,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 316,
        "endColumn": 47
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'weeklyProgress' is assigned a value but never used.",
        "line": 452,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 452,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'totalProgress' is assigned a value but never used.",
        "line": 456,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 456,
        "endColumn": 22
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadProjectData'. Either include it or remove the dependency array.",
        "line": 88,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 88,
        "endColumn": 27,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadProjectData, projectId, projects]",
            "fix": {
              "range": [2709, 2730],
              "text": "[loadProjectData, projectId, projects]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'processChartData'. Either include it or remove the dependency array.",
        "line": 93,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 93,
        "endColumn": 28,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [processChartData, sessions, timePeriod]",
            "fix": {
              "range": [2843, 2865],
              "text": "[processChartData, sessions, timePeriod]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 17,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { ProtectedRoute } from '@/components/ProtectedRoute';\nimport Header from '@/components/HeaderComponent';\nimport { IconRenderer } from '@/components/IconRenderer';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useActivities, useActivityStats } from '@/hooks/useActivitiesQuery';\nimport { firebaseApi } from '@/lib/api';\nimport { Activity, ActivityStats, SessionWithDetails } from '@/types';\nimport Link from 'next/link';\nimport {\n  ArrowLeft,\n  Clock,\n  Calendar,\n  TrendingUp,\n  Settings,\n  ChevronDown,\n  Play,\n} from 'lucide-react';\nimport {\n  BarChart,\n  Bar,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  Tooltip,\n  ComposedChart,\n  Area,\n} from 'recharts';\nimport { SessionCard } from '@/components/SessionCard';\nimport { firebaseApi as api } from '@/lib/api';\n\ninterface ProjectDetailPageProps {\n  params: Promise<{\n    id: string;\n  }>;\n}\n\ntype ActivityTab = 'sessions' | 'analytics';\ntype TimePeriod = '7D' | '2W' | '4W' | '3M' | '1Y';\n\ninterface ChartDataPoint {\n  name: string;\n  hours: number;\n  sessions: number;\n  avgDuration: number;\n}\n\nfunction ProjectDetailContent({ projectId }: { projectId: string }) {\n  const router = useRouter();\n  const { user } = useAuth();\n  const { data: projects = [] } = useActivities(user?.id);\n  const { data: stats, isLoading: isLoadingStats } =\n    useActivityStats(projectId);\n\n  const [project, setProject] = useState<Activity | null>(null);\n  const [sessions, setSessions] = useState<SessionWithDetails[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isLoadingSessions, setIsLoadingSessions] = useState(true);\n  const [activeTab, setActiveTab] = useState<ActivityTab>('analytics');\n  const [timePeriod, setTimePeriod] = useState<TimePeriod>('7D');\n  const [showTimePeriodDropdown, setShowTimePeriodDropdown] = useState(false);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>([]);\n  const [chartType, setChartType] = useState<'bar' | 'line'>(() => {\n    // Load chart type from localStorage\n    if (typeof window !== 'undefined') {\n      const saved = localStorage.getItem('analyticsChartType');\n      return saved === 'bar' || saved === 'line' ? saved : 'bar';\n    }\n    return 'bar';\n  });\n  const [showChartTypeDropdown, setShowChartTypeDropdown] = useState(false);\n\n  // Save chart type to localStorage when it changes\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('analyticsChartType', chartType);\n    }\n  }, [chartType]);\n\n  useEffect(() => {\n    loadProjectData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [projectId, projects]);\n\n  useEffect(() => {\n    processChartData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sessions, timePeriod]);\n\n  const loadProjectData = async () => {\n    try {\n      setIsLoading(true);\n\n      // Find project in context\n      const foundProject = projects?.find(p => p.id === projectId);\n      if (foundProject) {\n        setProject(foundProject);\n      }\n\n      // Load sessions\n      setIsLoadingSessions(true);\n      try {\n        if (user?.id) {\n          const userSessions = await firebaseApi.session.getUserSessions(\n            user.id,\n            50,\n            true\n          );\n          // Filter sessions for this project\n          const projectSessions = userSessions.filter(\n            s => s.activityId === projectId || s.projectId === projectId\n          );\n          setSessions(projectSessions as SessionWithDetails[]);\n        }\n      } catch (error) {\n        console.error('Error loading sessions:', error);\n      } finally {\n        setIsLoadingSessions(false);\n      }\n    } catch (error) {\n      console.error('Error loading project data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const processChartData = () => {\n    const now = new Date();\n    const data: ChartDataPoint[] = [];\n\n    if (timePeriod === '7D') {\n      const dayNames = [\n        'Sun',\n        'Mon',\n        'Tue',\n        'Wed',\n        'Thu',\n        'Fri',\n        'Sat',\n      ] as const;\n      for (let i = 6; i >= 0; i--) {\n        const day = new Date(now);\n        day.setDate(day.getDate() - i);\n        const dayIndex = day.getDay();\n        const dayName = (dayNames[dayIndex] || 'Day') as string;\n        const daySessions = sessions.filter(\n          s => new Date(s.createdAt).toDateString() === day.toDateString()\n        );\n        const hoursWorked = daySessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          daySessions.length > 0\n            ? daySessions.reduce((sum, s) => sum + s.duration, 0) /\n              daySessions.length /\n              60\n            : 0;\n        data.push({\n          name: `${dayName.slice(0, 3)} ${day.getDate()}`,\n          hours: Number(hoursWorked.toFixed(2)),\n          sessions: daySessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    } else if (timePeriod === '2W') {\n      const dayNames = [\n        'Sun',\n        'Mon',\n        'Tue',\n        'Wed',\n        'Thu',\n        'Fri',\n        'Sat',\n      ] as const;\n      for (let i = 13; i >= 0; i--) {\n        const day = new Date(now);\n        day.setDate(day.getDate() - i);\n        const dayIndex = day.getDay();\n        const dayName = (dayNames[dayIndex] || 'Day') as string;\n        const daySessions = sessions.filter(\n          s => new Date(s.createdAt).toDateString() === day.toDateString()\n        );\n        const hoursWorked = daySessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          daySessions.length > 0\n            ? daySessions.reduce((sum, s) => sum + s.duration, 0) /\n              daySessions.length /\n              60\n            : 0;\n        data.push({\n          name: `${dayName.slice(0, 3)} ${day.getDate()}`,\n          hours: Number(hoursWorked.toFixed(2)),\n          sessions: daySessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    } else if (timePeriod === '4W') {\n      for (let i = 3; i >= 0; i--) {\n        const weekStart = new Date(now);\n        weekStart.setDate(weekStart.getDate() - (i * 7 + 6));\n        const weekEnd = new Date(now);\n        weekEnd.setDate(weekEnd.getDate() - i * 7);\n        const weekSessions = sessions.filter(s => {\n          const sessionDate = new Date(s.createdAt);\n          return sessionDate >= weekStart && sessionDate <= weekEnd;\n        });\n        const hoursWorked = weekSessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          weekSessions.length > 0\n            ? weekSessions.reduce((sum, s) => sum + s.duration, 0) /\n              weekSessions.length /\n              60\n            : 0;\n        data.push({\n          name: `Week ${4 - i}`,\n          hours: Number(hoursWorked.toFixed(2)),\n          sessions: weekSessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    } else if (timePeriod === '3M' || timePeriod === '1Y') {\n      const monthNames = [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec',\n      ] as const;\n      const monthsBack = timePeriod === '3M' ? 2 : 11;\n      for (let i = monthsBack; i >= 0; i--) {\n        const month = new Date(now);\n        month.setMonth(month.getMonth() - i);\n        const monthIndex = month.getMonth();\n        const monthName = (monthNames[monthIndex] || 'Month') as string;\n        const monthSessions = sessions.filter(s => {\n          const sessionDate = new Date(s.createdAt);\n          return (\n            sessionDate.getMonth() === month.getMonth() &&\n            sessionDate.getFullYear() === month.getFullYear()\n          );\n        });\n        const hoursWorked = monthSessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          monthSessions.length > 0\n            ? monthSessions.reduce((sum, s) => sum + s.duration, 0) /\n              monthSessions.length /\n              60\n            : 0;\n        data.push({\n          name: monthName,\n          hours: Number(hoursWorked.toFixed(2)),\n          sessions: monthSessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    }\n\n    setChartData(data);\n  };\n\n  const formatTime = (seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    }\n    return `${minutes}m`;\n  };\n\n  const formatDate = (date: Date): string => {\n    const today = new Date();\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    if (date.toDateString() === today.toDateString()) {\n      return `Today at ${date.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' })}`;\n    } else if (date.toDateString() === yesterday.toDateString()) {\n      return `Yesterday at ${date.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' })}`;\n    } else {\n      return date.toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: '2-digit',\n      });\n    }\n  };\n\n  // Session handlers for SessionCard\n  const handleSupport = async (sessionId: string) => {\n    // TODO: Re-implement when API is fixed\n  };\n\n  const handleRemoveSupport = async (sessionId: string) => {\n    // TODO: Re-implement when API is fixed\n  };\n\n  const handleShare = async (sessionId: string) => {\n    const session = sessions.find(s => s.id === sessionId);\n    if (!session) return;\n\n    const shareData = {\n      title: session.title || 'Focus Session',\n      text: session.description || 'Check out my focus session on Ambira!',\n      url: `${window.location.origin}/sessions/${sessionId}`,\n    };\n\n    if (navigator.share) {\n      try {\n        await navigator.share(shareData);\n      } catch (error) {\n        console.error('Error sharing:', error);\n      }\n    } else {\n      // Fallback to clipboard\n      try {\n        await navigator.clipboard.writeText(shareData.url);\n        alert('Link copied to clipboard!');\n      } catch (error) {\n        console.error('Error copying to clipboard:', error);\n      }\n    }\n  };\n\n  // Custom tooltip formatter\n  interface TooltipPayload {\n    color: string;\n    name: string;\n    value: number;\n  }\n\n  interface CustomTooltipProps {\n    active?: boolean;\n    payload?: TooltipPayload[];\n    label?: string;\n  }\n\n  const CustomTooltip = ({ active, payload, label }: CustomTooltipProps) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white border border-gray-200 rounded-lg shadow-lg p-3\">\n          <p className=\"text-sm font-medium text-gray-900 mb-2\">{label}</p>\n          {payload.map((entry, index) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              <span className=\"font-semibold\">{entry.name}</span>: {entry.value}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const calculatedStats = React.useMemo(() => {\n    const now = new Date();\n\n    // Helper to get date range based on time period\n    const getDateRange = (period: TimePeriod) => {\n      const end = new Date(now);\n      const start = new Date(now);\n\n      switch (period) {\n        case '7D':\n          start.setDate(now.getDate() - 7);\n          break;\n        case '2W':\n          start.setDate(now.getDate() - 14);\n          break;\n        case '4W':\n          start.setDate(now.getDate() - 28);\n          break;\n        case '3M':\n          start.setMonth(now.getMonth() - 3);\n          break;\n        case '1Y':\n          start.setFullYear(now.getFullYear() - 1);\n          break;\n      }\n\n      return { start, end };\n    };\n\n    const currentRange = getDateRange(timePeriod);\n    const periodSessions = sessions.filter(s => {\n      const sessionDate = new Date(s.createdAt);\n      return (\n        sessionDate >= currentRange.start && sessionDate <= currentRange.end\n      );\n    });\n\n    const totalHours = periodSessions.reduce(\n      (sum, s) => sum + s.duration / 3600,\n      0\n    );\n    const sessionCount = periodSessions.length;\n    const avgDuration =\n      sessionCount > 0\n        ? periodSessions.reduce((sum, s) => sum + s.duration, 0) /\n          sessionCount /\n          60\n        : 0;\n\n    const activeDays = new Set(\n      periodSessions.map(s => new Date(s.createdAt).toDateString())\n    ).size;\n\n    return {\n      totalHours,\n      sessions: sessionCount,\n      avgDuration: Math.round(avgDuration),\n      activeDays,\n    };\n  }, [sessions, timePeriod]);\n\n  if (isLoading || !project) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"max-w-7xl mx-auto px-4 py-6\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-32 bg-gray-200 rounded-lg mb-6\"></div>\n            <div className=\"h-12 bg-gray-200 rounded mb-6\"></div>\n            <div className=\"h-96 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const weeklyProgress =\n    project.weeklyTarget && stats\n      ? (stats.weeklyHours / project.weeklyTarget) * 100\n      : 0;\n  const totalProgress =\n    project.totalTarget && stats\n      ? (stats.totalHours / project.totalTarget) * 100\n      : 0;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Back Button */}\n        <button\n          onClick={() => router.push('/activities')}\n          className=\"flex items-center gap-2 text-gray-600 hover:text-gray-900 mb-6 transition-colors\"\n        >\n          <ArrowLeft className=\"w-5 h-5\" />\n          <span>Back to Activities</span>\n        </button>\n\n        {/* Main Content */}\n        <div className=\"flex-1\">\n          {/* Activity Header */}\n          <div className=\"mb-6\">\n            <div className=\"flex items-start gap-4\">\n              {/* Activity Icon */}\n              <div className=\"w-32 h-32 rounded-2xl flex items-center justify-center flex-shrink-0 shadow-md bg-gray-100\">\n                <IconRenderer iconName={project.icon} size={64} />\n              </div>\n\n              <div className=\"flex-1 min-w-0\">\n                {/* Activity Name and Settings Icon */}\n                <div className=\"flex items-center gap-3 mb-2\">\n                  <h1 className=\"text-3xl font-bold text-gray-900\">\n                    {project.name}\n                  </h1>\n                  <button\n                    onClick={() => router.push(`/activities/${projectId}/edit`)}\n                    className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n                    aria-label=\"Edit activity\"\n                  >\n                    <Settings className=\"w-5 h-5 text-gray-600\" />\n                  </button>\n                </div>\n\n                {/* Description */}\n                {project.description && (\n                  <p className=\"text-gray-700 mb-4 whitespace-pre-line max-h-24 overflow-y-auto\">\n                    {project.description}\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Tabs */}\n          <div className=\"border-b border-gray-200 mb-6\">\n            <nav className=\"flex gap-8\" aria-label=\"Activity tabs\">\n              <button\n                onClick={() => setActiveTab('analytics')}\n                className={`pb-3 px-1 text-sm font-medium border-b-2 transition-colors ${\n                  activeTab === 'analytics'\n                    ? 'border-gray-900 text-gray-900'\n                    : 'border-transparent text-gray-600 hover:text-gray-900'\n                }`}\n              >\n                Analytics\n              </button>\n              <button\n                onClick={() => setActiveTab('sessions')}\n                className={`pb-3 px-1 text-sm font-medium border-b-2 transition-colors ${\n                  activeTab === 'sessions'\n                    ? 'border-gray-900 text-gray-900'\n                    : 'border-transparent text-gray-600 hover:text-gray-900'\n                }`}\n              >\n                Sessions\n              </button>\n            </nav>\n          </div>\n\n          {/* Tab Content */}\n          <div>\n            {activeTab === 'analytics' && (\n              <div className=\"max-w-5xl mx-auto\">\n                {/* Header with controls */}\n                <div className=\"flex items-center justify-end gap-2 mb-6\">\n                  {/* Time Period Buttons */}\n                  {(['7D', '2W', '4W', '3M', '1Y'] as TimePeriod[]).map(\n                    period => (\n                      <button\n                        key={period}\n                        onClick={() => setTimePeriod(period)}\n                        className={`px-4 py-2 text-sm font-medium rounded-lg transition-colors ${\n                          timePeriod === period\n                            ? 'bg-gray-900 text-white'\n                            : 'bg-white text-gray-700 hover:bg-gray-100 border border-gray-300'\n                        }`}\n                      >\n                        {period}\n                      </button>\n                    )\n                  )}\n\n                  {/* Chart Type Selector */}\n                  <div className=\"relative\">\n                    <button\n                      onClick={() =>\n                        setShowChartTypeDropdown(!showChartTypeDropdown)\n                      }\n                      className=\"flex items-center gap-2 px-3 py-2 text-sm font-medium border border-gray-300 rounded-lg hover:bg-gray-50 bg-white\"\n                    >\n                      <svg\n                        className=\"w-4 h-4\"\n                        viewBox=\"0 0 16 16\"\n                        fill=\"currentColor\"\n                      >\n                        {chartType === 'bar' ? (\n                          <>\n                            <rect x=\"2\" y=\"8\" width=\"3\" height=\"6\" rx=\"0.5\" />\n                            <rect\n                              x=\"6.5\"\n                              y=\"4\"\n                              width=\"3\"\n                              height=\"10\"\n                              rx=\"0.5\"\n                            />\n                            <rect x=\"11\" y=\"6\" width=\"3\" height=\"8\" rx=\"0.5\" />\n                          </>\n                        ) : (\n                          <path\n                            d=\"M2 12 L5 8 L8 10 L11 4 L14 6\"\n                            stroke=\"currentColor\"\n                            strokeWidth=\"1.5\"\n                            fill=\"none\"\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                          />\n                        )}\n                      </svg>\n                      <span className=\"capitalize\">{chartType}</span>\n                      <ChevronDown className=\"w-4 h-4\" />\n                    </button>\n                    {showChartTypeDropdown && (\n                      <>\n                        <div\n                          className=\"fixed inset-0 z-40\"\n                          onClick={() => setShowChartTypeDropdown(false)}\n                        />\n                        <div className=\"absolute right-0 top-full mt-2 w-32 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50\">\n                          <button\n                            onClick={() => {\n                              setChartType('bar');\n                              setShowChartTypeDropdown(false);\n                            }}\n                            className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 flex items-center gap-2 ${chartType === 'bar' ? 'bg-blue-50 text-blue-600' : ''}`}\n                          >\n                            <svg\n                              className=\"w-4 h-4\"\n                              viewBox=\"0 0 16 16\"\n                              fill=\"currentColor\"\n                            >\n                              <rect x=\"2\" y=\"8\" width=\"3\" height=\"6\" rx=\"0.5\" />\n                              <rect\n                                x=\"6.5\"\n                                y=\"4\"\n                                width=\"3\"\n                                height=\"10\"\n                                rx=\"0.5\"\n                              />\n                              <rect\n                                x=\"11\"\n                                y=\"6\"\n                                width=\"3\"\n                                height=\"8\"\n                                rx=\"0.5\"\n                              />\n                            </svg>\n                            Bar\n                          </button>\n                          <button\n                            onClick={() => {\n                              setChartType('line');\n                              setShowChartTypeDropdown(false);\n                            }}\n                            className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 flex items-center gap-2 ${chartType === 'line' ? 'bg-blue-50 text-blue-600' : ''}`}\n                          >\n                            <svg\n                              className=\"w-4 h-4\"\n                              viewBox=\"0 0 16 16\"\n                              fill=\"none\"\n                              stroke=\"currentColor\"\n                            >\n                              <path\n                                d=\"M2 12 L5 8 L8 10 L11 4 L14 6\"\n                                strokeWidth=\"1.5\"\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                              />\n                            </svg>\n                            Line\n                          </button>\n                        </div>\n                      </>\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {/* Main Chart */}\n                  <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                    <div className=\"mb-4\">\n                      <h3 className=\"font-semibold text-gray-900\">\n                        Hours completed\n                      </h3>\n                    </div>\n                    <div className=\"h-72\">\n                      {isLoadingSessions ? (\n                        <div className=\"h-full bg-gray-50 rounded animate-pulse\" />\n                      ) : (\n                        <ResponsiveContainer width=\"100%\" height=\"100%\">\n                          {chartType === 'bar' ? (\n                            <BarChart\n                              data={chartData}\n                              margin={{\n                                top: 10,\n                                right: 10,\n                                left: -20,\n                                bottom: 0,\n                              }}\n                            >\n                              <XAxis\n                                dataKey=\"name\"\n                                tick={{ fontSize: 12, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                              />\n                              <YAxis\n                                tick={{ fontSize: 12, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                                width={40}\n                              />\n                              <Tooltip content={<CustomTooltip />} />\n                              <Bar\n                                dataKey=\"hours\"\n                                fill=\"#1D9BF0\"\n                                radius={[4, 4, 0, 0]}\n                                name=\"Hours\"\n                              />\n                            </BarChart>\n                          ) : (\n                            <ComposedChart\n                              data={chartData}\n                              margin={{\n                                top: 10,\n                                right: 10,\n                                left: -20,\n                                bottom: 0,\n                              }}\n                            >\n                              <defs>\n                                <linearGradient\n                                  id=\"colorHours\"\n                                  x1=\"0\"\n                                  y1=\"0\"\n                                  x2=\"0\"\n                                  y2=\"1\"\n                                >\n                                  <stop\n                                    offset=\"5%\"\n                                    stopColor=\"#1D9BF0\"\n                                    stopOpacity={0.3}\n                                  />\n                                  <stop\n                                    offset=\"95%\"\n                                    stopColor=\"#1D9BF0\"\n                                    stopOpacity={0}\n                                  />\n                                </linearGradient>\n                              </defs>\n                              <XAxis\n                                dataKey=\"name\"\n                                tick={{ fontSize: 12, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                              />\n                              <YAxis\n                                tick={{ fontSize: 12, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                                width={40}\n                              />\n                              <Tooltip content={<CustomTooltip />} />\n                              <Area\n                                type=\"monotone\"\n                                dataKey=\"hours\"\n                                stroke=\"#1D9BF0\"\n                                strokeWidth={2}\n                                fill=\"url(#colorHours)\"\n                                name=\"Hours\"\n                              />\n                            </ComposedChart>\n                          )}\n                        </ResponsiveContainer>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Second Row - Two Charts */}\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                    {/* Average Session Duration */}\n                    <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                      <div className=\"mb-4\">\n                        <h3 className=\"font-semibold text-gray-900\">\n                          Average session duration\n                        </h3>\n                      </div>\n                      <div className=\"h-48\">\n                        <ResponsiveContainer width=\"100%\" height=\"100%\">\n                          {chartType === 'bar' ? (\n                            <BarChart\n                              data={chartData}\n                              margin={{\n                                top: 5,\n                                right: 5,\n                                left: -30,\n                                bottom: 0,\n                              }}\n                            >\n                              <XAxis\n                                dataKey=\"name\"\n                                tick={{ fontSize: 11, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                              />\n                              <YAxis\n                                tick={{ fontSize: 11, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                              />\n                              <Tooltip content={<CustomTooltip />} />\n                              <Bar\n                                dataKey=\"avgDuration\"\n                                fill=\"#00BA7C\"\n                                radius={[4, 4, 0, 0]}\n                                name=\"Minutes\"\n                              />\n                            </BarChart>\n                          ) : (\n                            <ComposedChart\n                              data={chartData}\n                              margin={{\n                                top: 5,\n                                right: 5,\n                                left: -30,\n                                bottom: 0,\n                              }}\n                            >\n                              <defs>\n                                <linearGradient\n                                  id=\"colorAvgDuration\"\n                                  x1=\"0\"\n                                  y1=\"0\"\n                                  x2=\"0\"\n                                  y2=\"1\"\n                                >\n                                  <stop\n                                    offset=\"5%\"\n                                    stopColor=\"#00BA7C\"\n                                    stopOpacity={0.3}\n                                  />\n                                  <stop\n                                    offset=\"95%\"\n                                    stopColor=\"#00BA7C\"\n                                    stopOpacity={0}\n                                  />\n                                </linearGradient>\n                              </defs>\n                              <XAxis\n                                dataKey=\"name\"\n                                tick={{ fontSize: 11, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                              />\n                              <YAxis\n                                tick={{ fontSize: 11, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                              />\n                              <Tooltip content={<CustomTooltip />} />\n                              <Area\n                                type=\"monotone\"\n                                dataKey=\"avgDuration\"\n                                stroke=\"#00BA7C\"\n                                strokeWidth={2}\n                                fill=\"url(#colorAvgDuration)\"\n                                name=\"Minutes\"\n                              />\n                            </ComposedChart>\n                          )}\n                        </ResponsiveContainer>\n                      </div>\n                    </div>\n\n                    {/* Sessions completed */}\n                    <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                      <div className=\"mb-4\">\n                        <h3 className=\"font-semibold text-gray-900\">\n                          Sessions completed\n                        </h3>\n                      </div>\n                      <div className=\"h-48\">\n                        <ResponsiveContainer width=\"100%\" height=\"100%\">\n                          {chartType === 'bar' ? (\n                            <BarChart\n                              data={chartData}\n                              margin={{\n                                top: 5,\n                                right: 5,\n                                left: -30,\n                                bottom: 0,\n                              }}\n                            >\n                              <XAxis\n                                dataKey=\"name\"\n                                tick={{ fontSize: 11, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                              />\n                              <YAxis\n                                tick={{ fontSize: 11, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                              />\n                              <Tooltip content={<CustomTooltip />} />\n                              <Bar\n                                dataKey=\"sessions\"\n                                fill=\"#00BA7C\"\n                                radius={[4, 4, 0, 0]}\n                                name=\"Sessions\"\n                              />\n                            </BarChart>\n                          ) : (\n                            <ComposedChart\n                              data={chartData}\n                              margin={{\n                                top: 5,\n                                right: 5,\n                                left: -30,\n                                bottom: 0,\n                              }}\n                            >\n                              <defs>\n                                <linearGradient\n                                  id=\"colorSessionsSmall\"\n                                  x1=\"0\"\n                                  y1=\"0\"\n                                  x2=\"0\"\n                                  y2=\"1\"\n                                >\n                                  <stop\n                                    offset=\"5%\"\n                                    stopColor=\"#00BA7C\"\n                                    stopOpacity={0.3}\n                                  />\n                                  <stop\n                                    offset=\"95%\"\n                                    stopColor=\"#00BA7C\"\n                                    stopOpacity={0}\n                                  />\n                                </linearGradient>\n                              </defs>\n                              <XAxis\n                                dataKey=\"name\"\n                                tick={{ fontSize: 11, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                              />\n                              <YAxis\n                                tick={{ fontSize: 11, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                              />\n                              <Tooltip content={<CustomTooltip />} />\n                              <Area\n                                type=\"monotone\"\n                                dataKey=\"sessions\"\n                                stroke=\"#00BA7C\"\n                                strokeWidth={2}\n                                fill=\"url(#colorSessionsSmall)\"\n                                name=\"Sessions\"\n                              />\n                            </ComposedChart>\n                          )}\n                        </ResponsiveContainer>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Stats Grid - 4 columns */}\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                    <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                      <div className=\"text-sm text-gray-600 mb-2\">\n                        Total Hours\n                      </div>\n                      <div className=\"text-2xl font-bold mb-1\">\n                        {calculatedStats.totalHours.toFixed(1)}\n                      </div>\n                    </div>\n\n                    <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                      <div className=\"text-sm text-gray-600 mb-2\">\n                        Avg Duration\n                      </div>\n                      <div className=\"text-2xl font-bold mb-1\">\n                        {calculatedStats.avgDuration}m\n                      </div>\n                    </div>\n\n                    <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                      <div className=\"text-sm text-gray-600 mb-2\">Sessions</div>\n                      <div className=\"text-2xl font-bold mb-1\">\n                        {calculatedStats.sessions}\n                      </div>\n                    </div>\n\n                    <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                      <div className=\"text-sm text-gray-600 mb-2\">\n                        Active Days\n                      </div>\n                      <div className=\"text-2xl font-bold mb-1\">\n                        {calculatedStats.activeDays}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {activeTab === 'sessions' && (\n              <div className=\"max-w-3xl mx-auto\">\n                {isLoadingSessions ? (\n                  <div className=\"space-y-4\">\n                    {[1, 2, 3].map(i => (\n                      <div\n                        key={i}\n                        className=\"bg-white rounded-lg border border-gray-200 p-4 animate-pulse\"\n                      >\n                        <div className=\"h-20 bg-gray-100 rounded\"></div>\n                      </div>\n                    ))}\n                  </div>\n                ) : sessions.length === 0 ? (\n                  <div className=\"bg-white rounded-xl border border-gray-200 p-12 text-center\">\n                    <div className=\"text-gray-400 mb-2\">\n                      <Clock className=\"w-12 h-12 mx-auto mb-4\" />\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                      No sessions yet\n                    </h3>\n                    <p className=\"text-gray-600\">\n                      Start tracking time on this activity to see sessions here.\n                    </p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-0\">\n                    {sessions.map(session => (\n                      <SessionCard\n                        key={session.id}\n                        session={session}\n                        onSupport={handleSupport}\n                        onRemoveSupport={handleRemoveSupport}\n                        onShare={handleShare}\n                      />\n                    ))}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function ProjectDetailPageWrapper({\n  params,\n}: ProjectDetailPageProps) {\n  const [projectId, setProjectId] = React.useState<string>('');\n\n  React.useEffect(() => {\n    params.then(({ id }) => setProjectId(id));\n  }, [params]);\n\n  return (\n    <ProtectedRoute>\n      {!projectId ? (\n        <div className=\"min-h-screen bg-gray-50\">\n          <Header />\n          <div className=\"max-w-[1400px] mx-auto px-4 py-6\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-8 bg-gray-200 rounded w-48 mb-4\"></div>\n              <div className=\"h-4 bg-gray-200 rounded w-64 mb-8\"></div>\n              <div className=\"h-64 bg-gray-200 rounded\"></div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <ProjectDetailContent projectId={projectId} />\n      )}\n    </ProtectedRoute>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/activities/__tests__/page.test.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'waitFor' is defined but never used.",
        "line": 2,
        "column": 26,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 33
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'container' is assigned a value but never used.",
        "line": 171,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 171,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'container' is assigned a value but never used.",
        "line": 179,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 179,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'container' is assigned a value but never used.",
        "line": 186,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 186,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ErrorBoundaryMock' is assigned a value but never used.",
        "line": 230,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 230,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-require-imports",
        "severity": 1,
        "message": "A `require()` style import is forbidden.",
        "line": 254,
        "column": 27,
        "nodeType": "CallExpression",
        "messageId": "noRequireImports",
        "endLine": 254,
        "endColumn": 60
      },
      {
        "ruleId": "@typescript-eslint/no-require-imports",
        "severity": 1,
        "message": "A `require()` style import is forbidden.",
        "line": 266,
        "column": 27,
        "nodeType": "CallExpression",
        "messageId": "noRequireImports",
        "endLine": 266,
        "endColumn": 60
      },
      {
        "ruleId": "@typescript-eslint/no-require-imports",
        "severity": 1,
        "message": "A `require()` style import is forbidden.",
        "line": 320,
        "column": 31,
        "nodeType": "CallExpression",
        "messageId": "noRequireImports",
        "endLine": 320,
        "endColumn": 68
      },
      {
        "ruleId": "@typescript-eslint/no-require-imports",
        "severity": 1,
        "message": "A `require()` style import is forbidden.",
        "line": 338,
        "column": 31,
        "nodeType": "CallExpression",
        "messageId": "noRequireImports",
        "endLine": 338,
        "endColumn": 68
      },
      {
        "ruleId": "@typescript-eslint/no-require-imports",
        "severity": 1,
        "message": "A `require()` style import is forbidden.",
        "line": 384,
        "column": 29,
        "nodeType": "CallExpression",
        "messageId": "noRequireImports",
        "endLine": 384,
        "endColumn": 55
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'container' is assigned a value but never used.",
        "line": 403,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 403,
        "endColumn": 24
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 11,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { render, screen, waitFor } from '@testing-library/react';\nimport ActivitiesPage from '../page';\nimport { Activity } from '@/types';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useProjects } from '@/contexts/ProjectsContext';\nimport { useRouter } from 'next/navigation';\nimport * as ErrorBoundaryModule from '@/components/ErrorBoundary';\n\n/**\n * Integration tests for Activities Page\n *\n * Coverage:\n * - Page rendering with all layout components\n * - Error boundary integration\n * - Loading states with Suspense\n * - Protected route authentication\n * - Edit handler navigation\n * - Desktop and mobile layouts\n */\n\n// Mock all dependencies\njest.mock('@/contexts/AuthContext', () => ({\n  useAuth: jest.fn(),\n}));\n\njest.mock('@/contexts/ProjectsContext', () => ({\n  useProjects: jest.fn(),\n}));\n\njest.mock('@/contexts/ToastContext', () => ({\n  useToast: () => ({\n    success: jest.fn(),\n    error: jest.fn(),\n  }),\n}));\n\njest.mock('next/navigation', () => ({\n  useRouter: jest.fn(),\n}));\n\njest.mock('@/components/ProtectedRoute', () => ({\n  ProtectedRoute: ({ children }: { children: React.ReactNode }) => <div data-testid=\"protected-route\">{children}</div>,\n}));\n\njest.mock('@/components/ErrorBoundary', () => ({\n  ErrorBoundary: ({ children }: { children: React.ReactNode; onError?: (error: Error, errorInfo: React.ErrorInfo) => void }) => (\n    <div data-testid=\"error-boundary\">{children}</div>\n  ),\n}));\n\njest.mock('@/components/HeaderComponent', () => {\n  return function MockHeader() {\n    return <div data-testid=\"desktop-header\">Desktop Header</div>;\n  };\n});\n\njest.mock('@/components/MobileHeader', () => {\n  return function MockMobileHeader({ title }: { title: string }) {\n    return <div data-testid=\"mobile-header\">{title}</div>;\n  };\n});\n\njest.mock('@/components/BottomNavigation', () => {\n  return function MockBottomNavigation() {\n    return <div data-testid=\"bottom-navigation\">Bottom Navigation</div>;\n  };\n});\n\njest.mock('@/components/ActivityList', () => ({\n  ActivityList: ({ onEditActivity }: { onEditActivity?: (activity: Activity) => void }) => (\n    <div data-testid=\"activity-list\">\n      <button onClick={() => onEditActivity?.({ id: 'test-activity' } as Activity)}>Edit Test Activity</button>\n    </div>\n  ),\n}));\n\nconst mockActivities: Activity[] = [\n  {\n    id: 'activity-1',\n    userId: 'user-1',\n    name: 'Writing',\n    description: 'Daily writing practice',\n    color: 'blue',\n    icon: 'Pen',\n    status: 'active',\n    weeklyTarget: 10,\n    totalTarget: 100,\n    createdAt: new Date('2024-01-01'),\n    updatedAt: new Date('2024-01-01'),\n  },\n];\n\ndescribe('Activities Page Integration', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    (useAuth as jest.Mock).mockReturnValue({\n      user: {\n        id: 'test-user',\n        email: 'test@example.com',\n        displayName: 'Test User',\n      },\n    });\n\n    (useProjects as jest.Mock).mockReturnValue({\n      projects: mockActivities,\n      isLoading: false,\n      error: null,\n      deleteProject: jest.fn(),\n      archiveProject: jest.fn(),\n    });\n\n    (useRouter as jest.Mock).mockReturnValue({\n      push: jest.fn(),\n    });\n  });\n\n  describe('Page Rendering', () => {\n    it('should render the complete page structure', () => {\n      render(<ActivitiesPage />);\n\n      expect(screen.getByTestId('protected-route')).toBeInTheDocument();\n      expect(screen.getByTestId('error-boundary')).toBeInTheDocument();\n      expect(screen.getByTestId('activity-list')).toBeInTheDocument();\n    });\n\n    it('should render within ProtectedRoute', () => {\n      render(<ActivitiesPage />);\n\n      const protectedRoute = screen.getByTestId('protected-route');\n      expect(protectedRoute).toBeInTheDocument();\n    });\n\n    it('should render within ErrorBoundary', () => {\n      render(<ActivitiesPage />);\n\n      const errorBoundary = screen.getByTestId('error-boundary');\n      expect(errorBoundary).toBeInTheDocument();\n    });\n\n    it('should render ActivityList component', () => {\n      render(<ActivitiesPage />);\n\n      expect(screen.getByTestId('activity-list')).toBeInTheDocument();\n    });\n  });\n\n  describe('Layout Components', () => {\n    it('should render desktop header', () => {\n      render(<ActivitiesPage />);\n\n      expect(screen.getByTestId('desktop-header')).toBeInTheDocument();\n    });\n\n    it('should render mobile header with correct title', () => {\n      render(<ActivitiesPage />);\n\n      const mobileHeader = screen.getByTestId('mobile-header');\n      expect(mobileHeader).toBeInTheDocument();\n      expect(mobileHeader).toHaveTextContent('Activities');\n    });\n\n    it('should render bottom navigation for mobile', () => {\n      render(<ActivitiesPage />);\n\n      expect(screen.getByTestId('bottom-navigation')).toBeInTheDocument();\n    });\n\n    it('should hide desktop header on mobile using CSS classes', () => {\n      const { container } = render(<ActivitiesPage />);\n\n      const desktopHeaderContainer = screen.getByTestId('desktop-header').parentElement;\n      expect(desktopHeaderContainer).toHaveClass('hidden');\n      expect(desktopHeaderContainer).toHaveClass('md:block');\n    });\n\n    it('should hide mobile header on desktop using CSS classes', () => {\n      const { container } = render(<ActivitiesPage />);\n\n      const mobileHeaderContainer = screen.getByTestId('mobile-header').parentElement;\n      expect(mobileHeaderContainer).toHaveClass('md:hidden');\n    });\n\n    it('should hide bottom navigation on desktop using CSS classes', () => {\n      const { container } = render(<ActivitiesPage />);\n\n      const bottomNavContainer = screen.getByTestId('bottom-navigation').parentElement;\n      expect(bottomNavContainer).toHaveClass('md:hidden');\n    });\n  });\n\n  describe('Edit Handler Integration', () => {\n    it('should navigate to edit page when handleEditActivity is called', () => {\n      const mockPush = jest.fn();\n      (useRouter as jest.Mock).mockReturnValue({\n        push: mockPush,\n      });\n\n      render(<ActivitiesPage />);\n\n      const editButton = screen.getByText('Edit Test Activity');\n      editButton.click();\n\n      expect(mockPush).toHaveBeenCalledWith('/activities/test-activity/edit');\n    });\n\n    it('should construct correct edit URL with activity ID', () => {\n      const mockPush = jest.fn();\n      (useRouter as jest.Mock).mockReturnValue({\n        push: mockPush,\n      });\n\n      render(<ActivitiesPage />);\n\n      const editButton = screen.getByText('Edit Test Activity');\n      editButton.click();\n\n      const callArgs = mockPush.mock.calls[0][0];\n      expect(callArgs).toContain('test-activity');\n      expect(callArgs).toContain('/edit');\n    });\n  });\n\n  describe('Error Boundary Integration', () => {\n    it('should provide error handler to ErrorBoundary', () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n\n      // We need to access ErrorBoundary mock to verify it's called correctly\n      const ErrorBoundaryMock = ErrorBoundaryModule.ErrorBoundary;\n      const mockOnError = jest.fn();\n\n      // Temporarily override the mock to capture onError\n      jest.spyOn(ErrorBoundaryModule, 'ErrorBoundary').mockImplementation(\n        ({ children, onError }: { children: React.ReactNode; onError?: (error: Error, errorInfo: React.ErrorInfo) => void }) => {\n          if (onError) {\n            mockOnError.mockImplementation(onError);\n          }\n          return <div data-testid=\"error-boundary\">{children}</div>;\n        }\n      );\n\n      render(<ActivitiesPage />);\n\n      // Verify ErrorBoundary was rendered\n      expect(screen.getByTestId('error-boundary')).toBeInTheDocument();\n\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('Authentication States', () => {\n    it('should not render content when user is not authenticated', () => {\n      const { useAuth } = require('@/contexts/AuthContext');\n      useAuth.mockReturnValue({\n        user: null,\n      });\n\n      render(<ActivitiesPage />);\n\n      // ProtectedRoute should still render (it handles the auth check)\n      expect(screen.getByTestId('protected-route')).toBeInTheDocument();\n    });\n\n    it('should render full content when user is authenticated', () => {\n      const { useAuth } = require('@/contexts/AuthContext');\n      useAuth.mockReturnValue({\n        user: {\n          id: 'test-user',\n          email: 'test@example.com',\n        },\n      });\n\n      render(<ActivitiesPage />);\n\n      expect(screen.getByTestId('activity-list')).toBeInTheDocument();\n      expect(screen.getByTestId('desktop-header')).toBeInTheDocument();\n      expect(screen.getByTestId('mobile-header')).toBeInTheDocument();\n    });\n  });\n\n  describe('Responsive Layout', () => {\n    it('should apply correct background colors for desktop and mobile', () => {\n      const { container } = render(<ActivitiesPage />);\n\n      const mainContent = container.querySelector('.min-h-screen');\n      expect(mainContent).toHaveClass('bg-white');\n      expect(mainContent).toHaveClass('md:bg-gray-50');\n    });\n\n    it('should apply correct padding for mobile and desktop', () => {\n      const { container } = render(<ActivitiesPage />);\n\n      const contentArea = container.querySelector('.pb-32');\n      expect(contentArea).toHaveClass('pb-32'); // Mobile bottom padding\n      expect(contentArea).toHaveClass('md:pb-8'); // Desktop bottom padding\n    });\n\n    it('should have max-width container for content', () => {\n      const { container } = render(<ActivitiesPage />);\n\n      const contentContainer = container.querySelector('.max-w-5xl');\n      expect(contentContainer).toBeInTheDocument();\n      expect(contentContainer).toHaveClass('mx-auto'); // Centered\n    });\n\n    it('should have responsive horizontal padding', () => {\n      const { container } = render(<ActivitiesPage />);\n\n      const contentContainer = container.querySelector('.max-w-5xl');\n      expect(contentContainer).toHaveClass('px-4');\n      expect(contentContainer).toHaveClass('md:px-6');\n    });\n  });\n\n  describe('Suspense and Loading States', () => {\n    it('should wrap ActivityList in Suspense', () => {\n      // This test verifies that the Suspense wrapper exists by checking\n      // that the page can handle loading states gracefully\n      const { useProjects } = require('@/contexts/ProjectsContext');\n      useProjects.mockReturnValue({\n        projects: null,\n        isLoading: true,\n        error: null,\n        deleteProject: jest.fn(),\n        archiveProject: jest.fn(),\n      });\n\n      render(<ActivitiesPage />);\n\n      // Page should still render without crashing during loading\n      expect(screen.getByTestId('protected-route')).toBeInTheDocument();\n    });\n  });\n\n  describe('Error State Handling', () => {\n    it('should handle error state from ProjectsContext', () => {\n      const { useProjects } = require('@/contexts/ProjectsContext');\n      useProjects.mockReturnValue({\n        projects: null,\n        isLoading: false,\n        error: 'Failed to load activities',\n        deleteProject: jest.fn(),\n        archiveProject: jest.fn(),\n      });\n\n      // Should render without crashing\n      render(<ActivitiesPage />);\n\n      expect(screen.getByTestId('error-boundary')).toBeInTheDocument();\n    });\n\n    it('should log errors to console via ErrorBoundary onError handler', () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n\n      render(<ActivitiesPage />);\n\n      // The page sets up an error handler that logs to console\n      expect(screen.getByTestId('error-boundary')).toBeInTheDocument();\n\n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('Page Accessibility', () => {\n    it('should have proper page structure with main content area', () => {\n      const { container } = render(<ActivitiesPage />);\n\n      // Should have a min-h-screen container for full viewport height\n      const pageContainer = container.querySelector('.min-h-screen');\n      expect(pageContainer).toBeInTheDocument();\n    });\n\n    it('should have proper spacing for content readability', () => {\n      const { container } = render(<ActivitiesPage />);\n\n      const contentArea = container.querySelector('.py-4');\n      expect(contentArea).toBeInTheDocument();\n    });\n  });\n\n  describe('Component Integration', () => {\n    it('should pass onEditActivity handler to ActivityList', () => {\n      const { useRouter } = require('next/navigation');\n      const mockPush = jest.fn();\n      useRouter.mockReturnValue({\n        push: mockPush,\n      });\n\n      render(<ActivitiesPage />);\n\n      // The ActivityList mock has a button that triggers onEditActivity\n      const editButton = screen.getByText('Edit Test Activity');\n      expect(editButton).toBeInTheDocument();\n\n      editButton.click();\n\n      // Handler should navigate to edit page\n      expect(mockPush).toHaveBeenCalled();\n    });\n\n    it('should integrate all layout components in correct hierarchy', () => {\n      const { container } = render(<ActivitiesPage />);\n\n      // Check that all major components are present\n      expect(screen.getByTestId('protected-route')).toBeInTheDocument();\n      expect(screen.getByTestId('desktop-header')).toBeInTheDocument();\n      expect(screen.getByTestId('mobile-header')).toBeInTheDocument();\n      expect(screen.getByTestId('activity-list')).toBeInTheDocument();\n      expect(screen.getByTestId('bottom-navigation')).toBeInTheDocument();\n    });\n  });\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/activities/new/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'activity' is assigned a value but never used.",
        "line": 352,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 352,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 382,
        "column": 70,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 382,
        "endColumn": 73,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13794, 13797], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13794, 13797], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport Link from 'next/link';\nimport Header from '@/components/HeaderComponent';\nimport { CreateActivityData } from '@/types';\nimport { useCreateActivity } from '@/hooks/useActivitiesQuery';\nimport { ProtectedRoute } from '@/components/ProtectedRoute';\nimport { IconSelector } from '@/components/IconSelector';\nimport { ColorSelector } from '@/components/ColorSelector';\nimport { Icon } from '@iconify/react';\nimport { ArrowLeft } from 'lucide-react';\n\n// Available icons from Iconify flat-color-icons\nconst AVAILABLE_ICONS = [\n  { name: 'briefcase', icon: 'flat-color-icons:briefcase', label: 'Work' },\n  { name: 'reading', icon: 'flat-color-icons:reading', label: 'Study' },\n  {\n    name: 'electronics',\n    icon: 'flat-color-icons:electronics',\n    label: 'Programming',\n  },\n  {\n    name: 'graduation-cap',\n    icon: 'flat-color-icons:graduation-cap',\n    label: 'Learning',\n  },\n  { name: 'idea', icon: 'flat-color-icons:idea', label: 'Ideas' },\n  { name: 'document', icon: 'flat-color-icons:document', label: 'Writing' },\n  { name: 'template', icon: 'flat-color-icons:template', label: 'Design' },\n  { name: 'gallery', icon: 'flat-color-icons:gallery', label: 'Gallery' },\n  { name: 'music', icon: 'flat-color-icons:music', label: 'Music' },\n  { name: 'video-file', icon: 'flat-color-icons:video-file', label: 'Video' },\n  { name: 'camera', icon: 'flat-color-icons:camera', label: 'Camera' },\n  {\n    name: 'sports-mode',\n    icon: 'flat-color-icons:sports-mode',\n    label: 'Sports',\n  },\n  { name: 'like', icon: 'flat-color-icons:like', label: 'Health' },\n  { name: 'binoculars', icon: 'flat-color-icons:binoculars', label: 'Explore' },\n  { name: 'timeline', icon: 'flat-color-icons:timeline', label: 'Timeline' },\n  { name: 'bullish', icon: 'flat-color-icons:bullish', label: 'Goals' },\n  { name: 'flash-on', icon: 'flat-color-icons:flash-on', label: 'Energy' },\n  {\n    name: 'advertising',\n    icon: 'flat-color-icons:advertising',\n    label: 'Marketing',\n  },\n  {\n    name: 'collaboration',\n    icon: 'flat-color-icons:collaboration',\n    label: 'Team',\n  },\n  {\n    name: 'positive-dynamic',\n    icon: 'flat-color-icons:positive-dynamic',\n    label: 'Growth',\n  },\n  { name: 'approval', icon: 'flat-color-icons:approval', label: 'Approval' },\n  { name: 'ratings', icon: 'flat-color-icons:ratings', label: 'Favorite' },\n  { name: 'calendar', icon: 'flat-color-icons:calendar', label: 'Calendar' },\n  { name: 'todo-list', icon: 'flat-color-icons:todo-list', label: 'Tasks' },\n  { name: 'ok', icon: 'flat-color-icons:ok', label: 'Complete' },\n  { name: 'globe', icon: 'flat-color-icons:globe', label: 'Globe' },\n  { name: 'headset', icon: 'flat-color-icons:headset', label: 'Audio' },\n  { name: 'video-call', icon: 'flat-color-icons:video-call', label: 'Call' },\n  {\n    name: 'smartphone-tablet',\n    icon: 'flat-color-icons:smartphone-tablet',\n    label: 'Mobile',\n  },\n  {\n    name: 'parallel-tasks',\n    icon: 'flat-color-icons:parallel-tasks',\n    label: 'Database',\n  },\n  { name: 'package', icon: 'flat-color-icons:package', label: 'Package' },\n  { name: 'workflow', icon: 'flat-color-icons:workflow', label: 'Workflow' },\n  { name: 'settings', icon: 'flat-color-icons:settings', label: 'Settings' },\n  { name: 'mind-map', icon: 'flat-color-icons:mind-map', label: 'Planning' },\n  {\n    name: 'business-contact',\n    icon: 'flat-color-icons:business-contact',\n    label: 'Contact',\n  },\n  {\n    name: 'calculator',\n    icon: 'flat-color-icons:calculator',\n    label: 'Calculator',\n  },\n  { name: 'puzzle', icon: 'flat-color-icons:puzzle', label: 'Puzzle' },\n  { name: 'support', icon: 'flat-color-icons:support', label: 'Support' },\n  { name: 'planner', icon: 'flat-color-icons:planner', label: 'Planner' },\n  { name: 'faq', icon: 'flat-color-icons:faq', label: 'FAQ' },\n  {\n    name: 'money-transfer',\n    icon: 'flat-color-icons:money-transfer',\n    label: 'Finance',\n  },\n  { name: 'survey', icon: 'flat-color-icons:survey', label: 'Survey' },\n  { name: 'data-sheet', icon: 'flat-color-icons:data-sheet', label: 'Data' },\n  {\n    name: 'filing-cabinet',\n    icon: 'flat-color-icons:filing-cabinet',\n    label: 'Files',\n  },\n  { name: 'key', icon: 'flat-color-icons:key', label: 'Security' },\n  { name: 'shop', icon: 'flat-color-icons:shop', label: 'Shop' },\n  { name: 'donate', icon: 'flat-color-icons:donate', label: 'Donate' },\n  { name: 'news', icon: 'flat-color-icons:news', label: 'News' },\n  { name: 'alarm-clock', icon: 'flat-color-icons:alarm-clock', label: 'Clock' },\n  {\n    name: 'tree-structure',\n    icon: 'flat-color-icons:tree-structure',\n    label: 'Structure',\n  },\n  {\n    name: 'organization',\n    icon: 'flat-color-icons:organization',\n    label: 'Organization',\n  },\n  {\n    name: 'bulleted-list',\n    icon: 'flat-color-icons:bulleted-list',\n    label: 'List',\n  },\n  {\n    name: 'voice-presentation',\n    icon: 'flat-color-icons:voice-presentation',\n    label: 'Present',\n  },\n  { name: 'bar-chart', icon: 'flat-color-icons:bar-chart', label: 'Chart' },\n  { name: 'overtime', icon: 'flat-color-icons:overtime', label: 'Overtime' },\n  {\n    name: 'multiple-inputs',\n    icon: 'flat-color-icons:multiple-inputs',\n    label: 'Input',\n  },\n  { name: 'rules', icon: 'flat-color-icons:rules', label: 'Rules' },\n  {\n    name: 'podium-with-speaker',\n    icon: 'flat-color-icons:podium-with-speaker',\n    label: 'Speaker',\n  },\n  { name: 'database', icon: 'flat-color-icons:database', label: 'Database' },\n  { name: 'cloud', icon: 'flat-color-icons:cloud', label: 'Cloud' },\n  { name: 'linux', icon: 'flat-color-icons:linux', label: 'Linux' },\n  { name: 'android-os', icon: 'flat-color-icons:android-os', label: 'Android' },\n  { name: 'apple', icon: 'flat-color-icons:iphone', label: 'iOS' },\n  { name: 'diploma', icon: 'flat-color-icons:diploma', label: 'Diploma' },\n  { name: 'manager', icon: 'flat-color-icons:manager', label: 'Manager' },\n  { name: 'business', icon: 'flat-color-icons:business', label: 'Business' },\n  {\n    name: 'engineering',\n    icon: 'flat-color-icons:engineering',\n    label: 'Engineering',\n  },\n  { name: 'home', icon: 'flat-color-icons:home', label: 'Home' },\n  { name: 'services', icon: 'flat-color-icons:services', label: 'Services' },\n  { name: 'library', icon: 'flat-color-icons:library', label: 'Library' },\n  { name: 'landscape', icon: 'flat-color-icons:landscape', label: 'Nature' },\n  {\n    name: 'basketball',\n    icon: 'flat-color-icons:basketball',\n    label: 'Basketball',\n  },\n  {\n    name: 'automotive',\n    icon: 'flat-color-icons:automotive',\n    label: 'Automotive',\n  },\n  { name: 'shipped', icon: 'flat-color-icons:shipped', label: 'Shipping' },\n  { name: 'factory', icon: 'flat-color-icons:factory', label: 'Factory' },\n  { name: 'about', icon: 'flat-color-icons:about', label: 'About' },\n  { name: 'light', icon: 'flat-color-icons:light', label: 'Light' },\n  { name: 'search', icon: 'flat-color-icons:search', label: 'Search' },\n  { name: 'add-image', icon: 'flat-color-icons:add-image', label: 'Add Image' },\n  { name: 'film-reel', icon: 'flat-color-icons:film-reel', label: 'Film' },\n  {\n    name: 'stack-of-photos',\n    icon: 'flat-color-icons:stack-of-photos',\n    label: 'Photos',\n  },\n  {\n    name: 'self-service-kiosk',\n    icon: 'flat-color-icons:self-service-kiosk',\n    label: 'Kiosk',\n  },\n  {\n    name: 'inspection',\n    icon: 'flat-color-icons:inspection',\n    label: 'Inspection',\n  },\n  {\n    name: 'briefcase-2',\n    icon: 'flat-color-icons:business-contact',\n    label: 'Business Contact',\n  },\n  {\n    name: 'conference-call',\n    icon: 'flat-color-icons:conference-call',\n    label: 'Conference',\n  },\n  { name: 'cursor', icon: 'flat-color-icons:cursor', label: 'Cursor' },\n  { name: 'display', icon: 'flat-color-icons:display', label: 'Display' },\n  { name: 'feedback', icon: 'flat-color-icons:feedback', label: 'Feedback' },\n  {\n    name: 'self-destruct-button',\n    icon: 'flat-color-icons:delete-database',\n    label: 'Delete',\n  },\n  {\n    name: 'idea-sharing',\n    icon: 'flat-color-icons:idea-sharing',\n    label: 'Ideas Sharing',\n  },\n  { name: 'sports', icon: 'flat-color-icons:sports-mode', label: 'Sports' },\n  { name: 'grid', icon: 'flat-color-icons:grid', label: 'Grid' },\n  { name: 'puzzle-2', icon: 'flat-color-icons:puzzle', label: 'Puzzle' },\n];\n\n// Color options\nconst AVAILABLE_COLORS = [\n  // Warm Colors\n  { name: 'red', hex: '#ef4444', label: 'Red' },\n  { name: 'rose', hex: '#f43f5e', label: 'Rose' },\n  { name: 'pink', hex: '#ec4899', label: 'Pink' },\n  { name: 'fuchsia', hex: '#d946ef', label: 'Fuchsia' },\n  { name: 'orange', hex: '#f97316', label: 'Orange' },\n  { name: 'amber', hex: '#f59e0b', label: 'Amber' },\n  { name: 'yellow', hex: '#eab308', label: 'Yellow' },\n  { name: 'lime', hex: '#84cc16', label: 'Lime' },\n\n  // Cool Colors\n  { name: 'green', hex: '#22c55e', label: 'Green' },\n  { name: 'emerald', hex: '#10b981', label: 'Emerald' },\n  { name: 'teal', hex: '#14b8a6', label: 'Teal' },\n  { name: 'cyan', hex: '#06b6d4', label: 'Cyan' },\n  { name: 'sky', hex: '#0ea5e9', label: 'Sky' },\n  { name: 'blue', hex: '#3b82f6', label: 'Blue' },\n  { name: 'indigo', hex: '#6366f1', label: 'Indigo' },\n  { name: 'violet', hex: '#8b5cf6', label: 'Violet' },\n  { name: 'purple', hex: '#a855f7', label: 'Purple' },\n\n  // Neutrals\n  { name: 'slate', hex: '#64748b', label: 'Slate' },\n  { name: 'gray', hex: '#6b7280', label: 'Gray' },\n  { name: 'zinc', hex: '#71717a', label: 'Zinc' },\n  { name: 'neutral', hex: '#737373', label: 'Neutral' },\n  { name: 'stone', hex: '#78716c', label: 'Stone' },\n\n  // Additional vibrant colors\n  { name: 'coral', hex: '#ff6b6b', label: 'Coral' },\n  { name: 'peach', hex: '#ffb088', label: 'Peach' },\n  { name: 'mint', hex: '#7bed9f', label: 'Mint' },\n  { name: 'lavender', hex: '#c29dff', label: 'Lavender' },\n  { name: 'turquoise', hex: '#06d6a0', label: 'Turquoise' },\n  { name: 'navy', hex: '#1e3a8a', label: 'Navy' },\n  { name: 'burgundy', hex: '#9f1239', label: 'Burgundy' },\n  { name: 'olive', hex: '#84a98c', label: 'Olive' },\n  { name: 'mustard', hex: '#d4a373', label: 'Mustard' },\n  { name: 'salmon', hex: '#fa8072', label: 'Salmon' },\n  { name: 'crimson', hex: '#dc143c', label: 'Crimson' },\n  { name: 'forest', hex: '#2d6a4f', label: 'Forest' },\n];\n\nfunction CreateActivityContent() {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const redirectPath = searchParams.get('redirect');\n  const createActivity = useCreateActivity();\n  const [formData, setFormData] = useState<CreateActivityData>({\n    name: '',\n    description: '',\n    icon: 'briefcase',\n    color: 'orange',\n    weeklyTarget: undefined,\n    totalTarget: undefined,\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [errors, setErrors] = useState<\n    Partial<Record<keyof CreateActivityData, string>>\n  >({});\n  const [successMessage, setSuccessMessage] = useState('');\n\n  const validateForm = (): boolean => {\n    const newErrors: Partial<Record<keyof CreateActivityData, string>> = {};\n\n    if (!formData.name.trim()) {\n      newErrors.name = 'Activity name is required';\n    } else if (formData.name.length > 50) {\n      newErrors.name = 'Activity name must be less than 50 characters';\n    }\n\n    if (formData.description.trim() && formData.description.length > 200) {\n      newErrors.description = 'Description must be less than 200 characters';\n    }\n\n    if (\n      formData.weeklyTarget &&\n      (formData.weeklyTarget < 0 || formData.weeklyTarget > 168)\n    ) {\n      newErrors.weeklyTarget = 'Weekly target must be between 0 and 168 hours';\n    }\n\n    if (\n      formData.totalTarget &&\n      (formData.totalTarget < 0 || formData.totalTarget > 10000)\n    ) {\n      newErrors.totalTarget = 'Total target must be between 0 and 10,000 hours';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const resetForm = () => {\n    setFormData({\n      name: '',\n      description: '',\n      icon: 'briefcase',\n      color: 'orange',\n      weeklyTarget: undefined,\n      totalTarget: undefined,\n    });\n    setErrors({});\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    try {\n      setIsSubmitting(true);\n      setSuccessMessage('');\n\n      // Convert icon name to full Iconify string and color name to hex\n      const selectedIcon = AVAILABLE_ICONS.find(i => i.name === formData.icon);\n      const selectedColor = AVAILABLE_COLORS.find(\n        c => c.name === formData.color\n      );\n\n      if (!createActivity) {\n        throw new Error('Create activity function is not available');\n      }\n\n      const activity = await createActivity.mutateAsync({\n        ...formData,\n        name: formData.name.trim(),\n        description: formData.description.trim(),\n        icon: selectedIcon?.icon || 'flat-color-icons:briefcase',\n        color: selectedColor?.hex || '#f97316',\n        weeklyTarget: formData.weeklyTarget || undefined,\n        totalTarget: formData.totalTarget || undefined,\n      });\n\n      setSuccessMessage('Activity created successfully!');\n      resetForm();\n\n      setTimeout(() => {\n        // Redirect to the specified path or default to /activities\n        router.push(redirectPath || '/activities');\n      }, 1500);\n    } catch (error) {\n      console.error('Failed to create activity:', error);\n      const errorMessage =\n        error instanceof Error\n          ? error.message\n          : 'Failed to create activity. Please try again.';\n      setErrors({ name: errorMessage });\n      setSuccessMessage('');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleInputChange = (field: keyof CreateActivityData, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: undefined }));\n    }\n    if (successMessage) {\n      setSuccessMessage('');\n    }\n  };\n\n  // Get current icon string - always has a fallback to first icon\n  const iconData =\n    AVAILABLE_ICONS.find(i => i.name === formData.icon) || AVAILABLE_ICONS[0]!;\n\n  // Get current color - always has a fallback to first color\n  const colorData =\n    AVAILABLE_COLORS.find(c => c.name === formData.color) ||\n    AVAILABLE_COLORS[0]!;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Desktop Header */}\n      <div className=\"hidden md:block\">\n        <Header />\n      </div>\n\n      {/* Mobile Header */}\n      <div className=\"md:hidden bg-white border-b border-gray-200 px-4 py-3 sticky top-0 z-40\">\n        <div className=\"flex items-center gap-3\">\n          <Link\n            href={redirectPath || '/timer'}\n            className=\"flex items-center justify-center w-10 h-10 -ml-2 hover:bg-gray-100 rounded-full transition-colors\"\n          >\n            <ArrowLeft className=\"w-6 h-6 text-gray-700\" />\n          </Link>\n          <h1 className=\"text-lg font-bold text-gray-900\">New Activity</h1>\n        </div>\n      </div>\n\n      <div className=\"max-w-2xl mx-auto px-4 py-4 md:py-8\">\n        <div className=\"bg-white md:rounded-lg md:shadow-md p-4 md:p-8\">\n          {/* Desktop Header - Only show on desktop */}\n          <div className=\"hidden md:block mb-6\">\n            <h1 className=\"text-3xl font-bold text-gray-900\">\n              Create New Activity\n            </h1>\n            <p className=\"text-gray-600 mt-2\">\n              {redirectPath\n                ? 'Create your first activity to start tracking your time'\n                : 'Set up a new activity to track your productivity'}\n            </p>\n          </div>\n\n          {/* Success Message */}\n          {successMessage && (\n            <div className=\"mb-6 p-4 bg-green-50 border border-green-200 rounded-lg flex items-center gap-3\">\n              <svg\n                className=\"w-5 h-5 text-green-600 flex-shrink-0\"\n                fill=\"currentColor\"\n                viewBox=\"0 0 20 20\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\"\n                  clipRule=\"evenodd\"\n                />\n              </svg>\n              <p className=\"text-sm font-medium text-green-800\">\n                {successMessage}\n              </p>\n            </div>\n          )}\n\n          {/* Preview Card */}\n          <div className=\"mb-6 md:mb-8 p-4 md:p-6 bg-gradient-to-br from-gray-50 to-gray-100 rounded-xl border border-gray-200\">\n            <div className=\"flex items-center gap-3 md:gap-4\">\n              <div\n                className=\"w-14 h-14 md:w-16 md:h-16 rounded-xl flex items-center justify-center shadow-lg p-2\"\n                style={{ backgroundColor: colorData?.hex }}\n              >\n                <Icon\n                  icon={iconData?.icon}\n                  width={40}\n                  height={40}\n                  className=\"md:w-12 md:h-12\"\n                />\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <h2 className=\"text-lg md:text-xl font-bold text-gray-900 truncate\">\n                  {formData.name || 'Activity Name'}\n                </h2>\n                <p className=\"text-sm text-gray-600 mt-1 line-clamp-2\">\n                  {formData.description || 'Activity description'}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-4 md:space-y-6\">\n            {/* Activity Name */}\n            <div>\n              <label\n                htmlFor=\"name\"\n                className=\"block text-sm font-semibold text-gray-900 mb-2\"\n              >\n                Activity Name *\n              </label>\n              <input\n                type=\"text\"\n                id=\"name\"\n                value={formData.name}\n                onChange={e => handleInputChange('name', e.target.value)}\n                className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] transition-colors ${\n                  errors.name ? 'border-red-500' : 'border-gray-300'\n                }`}\n                placeholder=\"Enter activity name\"\n                maxLength={50}\n              />\n              {errors.name && (\n                <p className=\"mt-1 text-sm text-red-600\">{errors.name}</p>\n              )}\n            </div>\n\n            {/* Description */}\n            <div>\n              <label\n                htmlFor=\"description\"\n                className=\"block text-sm font-semibold text-gray-900 mb-2\"\n              >\n                Description\n              </label>\n              <textarea\n                id=\"description\"\n                value={formData.description}\n                onChange={e => handleInputChange('description', e.target.value)}\n                className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] resize-none transition-colors ${\n                  errors.description ? 'border-red-500' : 'border-gray-300'\n                }`}\n                placeholder=\"Describe your activity (optional)\"\n                rows={3}\n                maxLength={200}\n              />\n              {errors.description && (\n                <p className=\"mt-1 text-sm text-red-600\">\n                  {errors.description}\n                </p>\n              )}\n              <p className=\"mt-1 text-xs text-gray-500\">\n                {formData.description.length}/200 characters\n              </p>\n            </div>\n\n            {/* Icon Selector */}\n            <div>\n              <label\n                htmlFor=\"icon\"\n                className=\"block text-sm font-semibold text-gray-900 mb-2\"\n              >\n                Icon\n              </label>\n              <IconSelector\n                icons={AVAILABLE_ICONS}\n                value={formData.icon}\n                onChange={iconName => handleInputChange('icon', iconName)}\n              />\n              <p className=\"mt-1 text-xs text-gray-500\">\n                Choose an icon that represents this activity\n              </p>\n            </div>\n\n            {/* Color Selector */}\n            <div>\n              <label\n                htmlFor=\"color\"\n                className=\"block text-sm font-semibold text-gray-900 mb-2\"\n              >\n                Color\n              </label>\n              <ColorSelector\n                colors={AVAILABLE_COLORS}\n                value={formData.color}\n                onChange={colorName => handleInputChange('color', colorName)}\n              />\n              <p className=\"mt-1 text-xs text-gray-500\">\n                Pick a color to identify this activity\n              </p>\n            </div>\n\n            {/* Weekly Target */}\n            <div>\n              <label\n                htmlFor=\"weeklyTarget\"\n                className=\"block text-sm font-semibold text-gray-900 mb-2\"\n              >\n                Weekly Target (hours)\n              </label>\n              <input\n                type=\"number\"\n                id=\"weeklyTarget\"\n                value={formData.weeklyTarget || ''}\n                onChange={e =>\n                  handleInputChange(\n                    'weeklyTarget',\n                    e.target.value ? Number(e.target.value) : undefined\n                  )\n                }\n                className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] transition-colors ${\n                  errors.weeklyTarget ? 'border-red-500' : 'border-gray-300'\n                }`}\n                placeholder=\"Optional\"\n                min=\"0\"\n                max=\"168\"\n                step=\"0.5\"\n              />\n              {errors.weeklyTarget && (\n                <p className=\"mt-1 text-sm text-red-600\">\n                  {errors.weeklyTarget}\n                </p>\n              )}\n              <p className=\"mt-1 text-xs text-gray-500\">\n                Set a weekly goal for this activity\n              </p>\n            </div>\n\n            {/* Total Target */}\n            <div>\n              <label\n                htmlFor=\"totalTarget\"\n                className=\"block text-sm font-semibold text-gray-900 mb-2\"\n              >\n                Total Target (hours)\n              </label>\n              <input\n                type=\"number\"\n                id=\"totalTarget\"\n                value={formData.totalTarget || ''}\n                onChange={e =>\n                  handleInputChange(\n                    'totalTarget',\n                    e.target.value ? Number(e.target.value) : undefined\n                  )\n                }\n                className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] transition-colors ${\n                  errors.totalTarget ? 'border-red-500' : 'border-gray-300'\n                }`}\n                placeholder=\"Optional\"\n                min=\"0\"\n                max=\"10000\"\n                step=\"1\"\n              />\n              {errors.totalTarget && (\n                <p className=\"mt-1 text-sm text-red-600\">\n                  {errors.totalTarget}\n                </p>\n              )}\n              <p className=\"mt-1 text-xs text-gray-500\">\n                Set an overall activity goal\n              </p>\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex flex-col sm:flex-row gap-3 pt-6 border-t border-gray-200\">\n              <button\n                type=\"button\"\n                onClick={() => router.push(redirectPath || '/activities')}\n                className=\"flex-1 px-6 py-3 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors font-medium\"\n                disabled={isSubmitting}\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"flex-1 px-6 py-3 bg-[#007AFF] text-white rounded-lg hover:bg-[#0056D6] transition-colors disabled:opacity-50 disabled:cursor-not-allowed font-medium shadow-md\"\n              >\n                {isSubmitting ? 'Creating...' : 'Create Activity'}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function CreateActivityPage() {\n  return (\n    <ProtectedRoute>\n      <CreateActivityContent />\n    </ProtectedRoute>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/activities/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/admin/migrate-users/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/analytics/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'LineChart' is defined but never used.",
        "line": 20,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Line' is defined but never used.",
        "line": 21,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 7
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useMemo, useRef, useEffect } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useActivities } from '@/hooks/useActivitiesQuery';\nimport { ProtectedRoute } from '@/components/ProtectedRoute';\nimport MobileHeader from '@/components/MobileHeader';\nimport BottomNavigation from '@/components/BottomNavigation';\nimport Footer from '@/components/Footer';\nimport Header from '@/components/HeaderComponent';\nimport { useUserSessions } from '@/features/sessions/hooks';\nimport { useProfileStats } from '@/features/profile/hooks';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  Tooltip,\n  LineChart,\n  Line,\n  ComposedChart,\n  Area,\n} from 'recharts';\nimport { ChevronDown, BarChart3, TrendingUp, Activity } from 'lucide-react';\nimport { IconRenderer } from '@/components/IconRenderer';\nimport { useRouter } from 'next/navigation';\nimport { safeNumber } from '@/lib/utils';\n\ntype TimePeriod = '7D' | '2W' | '4W' | '3M' | '1Y';\n\ninterface ChartDataPoint {\n  name: string;\n  hours: number;\n  sessions: number;\n  avgDuration: number;\n}\n\nexport default function AnalyticsPage() {\n  const { user } = useAuth();\n  const router = useRouter();\n  const [timePeriod, setTimePeriod] = useState<TimePeriod>('7D');\n  const [selectedProjectId, setSelectedProjectId] = useState<string>('all');\n  const [showProjectDropdown, setShowProjectDropdown] = useState(false);\n  const [chartType, setChartType] = useState<'bar' | 'line'>(() => {\n    // Load chart type from localStorage\n    if (typeof window !== 'undefined') {\n      const saved = localStorage.getItem('analyticsChartType');\n      return saved === 'bar' || saved === 'line' ? saved : 'bar';\n    }\n    return 'bar';\n  });\n  const [showChartTypeDropdown, setShowChartTypeDropdown] = useState(false);\n\n  // Refs for dropdown trigger buttons (for focus management)\n  const activityTriggerRef = useRef<HTMLButtonElement>(null);\n  const chartTypeTriggerRef = useRef<HTMLButtonElement>(null);\n\n  // Save chart type to localStorage when it changes\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('analyticsChartType', chartType);\n    }\n  }, [chartType]);\n\n  // Handle Escape key for Activity dropdown\n  useEffect(() => {\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && showProjectDropdown) {\n        setShowProjectDropdown(false);\n        // Return focus to the trigger button\n        activityTriggerRef.current?.focus();\n      }\n    };\n\n    if (showProjectDropdown) {\n      document.addEventListener('keydown', handleEscape);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [showProjectDropdown]);\n\n  // Handle Escape key for Chart Type dropdown\n  useEffect(() => {\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === 'Escape' && showChartTypeDropdown) {\n        setShowChartTypeDropdown(false);\n        // Return focus to the trigger button\n        chartTypeTriggerRef.current?.focus();\n      }\n    };\n\n    if (showChartTypeDropdown) {\n      document.addEventListener('keydown', handleEscape);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [showChartTypeDropdown]);\n\n  // Use new feature hooks for sessions and stats\n  const { data: sessions = [], isLoading: sessionsLoading } = useUserSessions(\n    user?.id || '',\n    undefined,\n    {\n      enabled: !!user?.id,\n    }\n  );\n  const { data: stats, isLoading: statsLoading } = useProfileStats(\n    user?.id || '',\n    {\n      enabled: !!user?.id,\n    }\n  );\n  const { data: activities = [] } = useActivities(user?.id);\n\n  const isLoading = sessionsLoading || statsLoading;\n\n  // Debug logging for activities\n\n  const filteredSessions = useMemo(() => {\n    if (selectedProjectId === 'all') {\n      return sessions;\n    }\n\n    // Filter by both activityId and projectId for backward compatibility\n    const filtered = sessions.filter(s => {\n      const matchesActivityId = s.activityId === selectedProjectId;\n      const matchesProjectId = s.projectId === selectedProjectId;\n      return matchesActivityId || matchesProjectId;\n    });\n\n    return filtered;\n  }, [sessions, selectedProjectId]);\n\n  const calculatedStats = useMemo(() => {\n    const now = new Date();\n\n    // Helper to get date range based on time period\n    const getDateRange = (period: TimePeriod) => {\n      const end = new Date(now);\n      const start = new Date(now);\n\n      switch (period) {\n        case '7D':\n          start.setDate(now.getDate() - 7);\n          break;\n        case '2W':\n          start.setDate(now.getDate() - 14);\n          break;\n        case '4W':\n          start.setDate(now.getDate() - 28);\n          break;\n        case '3M':\n          start.setMonth(now.getMonth() - 3);\n          break;\n        case '1Y':\n          start.setFullYear(now.getFullYear() - 1);\n          break;\n      }\n\n      return { start, end };\n    };\n\n    // Get current and previous period ranges\n    const currentRange = getDateRange(timePeriod);\n    const previousStart = new Date(currentRange.start);\n    const periodLength =\n      currentRange.end.getTime() - currentRange.start.getTime();\n    previousStart.setTime(previousStart.getTime() - periodLength);\n\n    // Filter sessions for current period\n    const currentPeriodSessions = filteredSessions.filter(s => {\n      const sessionDate = new Date(s.createdAt);\n      return (\n        sessionDate >= currentRange.start && sessionDate <= currentRange.end\n      );\n    });\n\n    // Filter sessions for previous period\n    const previousPeriodSessions = filteredSessions.filter(s => {\n      const sessionDate = new Date(s.createdAt);\n      return sessionDate >= previousStart && sessionDate < currentRange.start;\n    });\n\n    // Calculate current period stats\n    const currentHours = currentPeriodSessions.reduce(\n      (sum, s) => sum + s.duration / 3600,\n      0\n    );\n    const currentSessionCount = currentPeriodSessions.length;\n    const currentAvgDuration =\n      currentSessionCount > 0\n        ? currentPeriodSessions.reduce((sum, s) => sum + s.duration, 0) /\n          currentSessionCount /\n          60\n        : 0;\n\n    const currentActiveDays = new Set(\n      currentPeriodSessions.map(s => new Date(s.createdAt).toDateString())\n    ).size;\n\n    // Calculate previous period stats\n    const previousHours = previousPeriodSessions.reduce(\n      (sum, s) => sum + s.duration / 3600,\n      0\n    );\n    const previousSessionCount = previousPeriodSessions.length;\n    const previousAvgDuration =\n      previousSessionCount > 0\n        ? previousPeriodSessions.reduce((sum, s) => sum + s.duration, 0) /\n          previousSessionCount /\n          60\n        : 0;\n\n    const previousActiveDays = new Set(\n      previousPeriodSessions.map(s => new Date(s.createdAt).toDateString())\n    ).size;\n\n    // Calculate percentage changes\n    const calculateChange = (\n      current: number,\n      previous: number\n    ): number | null => {\n      if (previous === 0) return null; // No previous data\n      return ((current - previous) / previous) * 100;\n    };\n\n    const hoursChange = calculateChange(currentHours, previousHours);\n    const sessionsChange = calculateChange(\n      currentSessionCount,\n      previousSessionCount\n    );\n    const avgDurationChange = calculateChange(\n      currentAvgDuration,\n      previousAvgDuration\n    );\n    const activeDaysChange = calculateChange(\n      currentActiveDays,\n      previousActiveDays\n    );\n\n    return {\n      totalHours: currentHours,\n      sessions: currentSessionCount,\n      avgDuration: Math.round(currentAvgDuration),\n      currentStreak: stats?.currentStreak ?? 0,\n      longestStreak: stats?.longestStreak ?? 0,\n      activeDays: currentActiveDays,\n      activities: (activities && activities.length) || 0,\n\n      // Percentage changes\n      hoursChange,\n      sessionsChange,\n      avgDurationChange,\n      activeDaysChange,\n      activitiesChange: null, // Activities count doesn't have time-based comparison\n      streakChange: null, // Streaks don't have meaningful percentage changes\n    };\n  }, [filteredSessions, stats, activities, timePeriod]);\n\n  const chartData = useMemo(() => {\n    if (!filteredSessions) return [];\n    const now = new Date();\n    const data: ChartDataPoint[] = [];\n\n    if (timePeriod === '7D') {\n      const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n      for (let i = 6; i >= 0; i--) {\n        const day = new Date(now);\n        day.setDate(day.getDate() - i);\n        const daySessions = filteredSessions.filter(\n          s => new Date(s.createdAt).toDateString() === day.toDateString()\n        );\n        const hoursWorked = daySessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          daySessions.length > 0\n            ? daySessions.reduce((sum, s) => sum + s.duration, 0) /\n              daySessions.length /\n              60\n            : 0;\n        const dayIndex = day.getDay();\n        const dayName = dayNames[dayIndex]?.slice(0, 3) ?? 'Day';\n        data.push({\n          name: `${dayName} ${day.getDate()}`,\n          hours: Number(hoursWorked.toFixed(2)),\n          sessions: daySessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    } else if (timePeriod === '2W') {\n      const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n      for (let i = 13; i >= 0; i--) {\n        const day = new Date(now);\n        day.setDate(day.getDate() - i);\n        const daySessions = filteredSessions.filter(\n          s => new Date(s.createdAt).toDateString() === day.toDateString()\n        );\n        const hoursWorked = daySessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          daySessions.length > 0\n            ? daySessions.reduce((sum, s) => sum + s.duration, 0) /\n              daySessions.length /\n              60\n            : 0;\n        const dayIndex = day.getDay();\n        const dayName = dayNames[dayIndex]?.slice(0, 3) ?? 'Day';\n        data.push({\n          name: `${dayName} ${day.getDate()}`,\n          hours: safeNumber(hoursWorked.toFixed(2)),\n          sessions: daySessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    } else if (timePeriod === '4W') {\n      for (let i = 3; i >= 0; i--) {\n        const weekStart = new Date(now);\n        weekStart.setDate(weekStart.getDate() - (i * 7 + 6));\n        const weekEnd = new Date(now);\n        weekEnd.setDate(weekEnd.getDate() - i * 7);\n        const weekSessions = filteredSessions.filter(s => {\n          const sessionDate = new Date(s.createdAt);\n          return sessionDate >= weekStart && sessionDate <= weekEnd;\n        });\n        const hoursWorked = weekSessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          weekSessions.length > 0\n            ? weekSessions.reduce((sum, s) => sum + s.duration, 0) /\n              weekSessions.length /\n              60\n            : 0;\n        data.push({\n          name: `Week ${4 - i}`,\n          hours: safeNumber(hoursWorked.toFixed(2)),\n          sessions: weekSessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    } else if (timePeriod === '3M' || timePeriod === '1Y') {\n      const monthNames = [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec',\n      ];\n      const monthsBack = timePeriod === '3M' ? 2 : 11;\n      for (let i = monthsBack; i >= 0; i--) {\n        const month = new Date(now);\n        month.setMonth(month.getMonth() - i);\n        const monthSessions = filteredSessions.filter(s => {\n          const sessionDate = new Date(s.createdAt);\n          return (\n            sessionDate.getMonth() === month.getMonth() &&\n            sessionDate.getFullYear() === month.getFullYear()\n          );\n        });\n        const hoursWorked = monthSessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          monthSessions.length > 0\n            ? monthSessions.reduce((sum, s) => sum + s.duration, 0) /\n              monthSessions.length /\n              60\n            : 0;\n        const monthIndex = month.getMonth();\n        const monthName = monthNames[monthIndex] ?? 'Month';\n        data.push({\n          name: monthName,\n          hours: safeNumber(hoursWorked.toFixed(2)),\n          sessions: monthSessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    }\n    return data;\n  }, [filteredSessions, timePeriod]);\n\n  // Average duration over time data - extract from chartData\n  const avgDurationData = useMemo(() => {\n    return chartData.map(d => ({ name: d.name, value: d.avgDuration }));\n  }, [chartData]);\n\n  // Custom tooltip formatter\n  interface TooltipPayload {\n    color: string;\n    name: string;\n    value: number;\n  }\n\n  interface CustomTooltipProps {\n    active?: boolean;\n    payload?: TooltipPayload[];\n    label?: string;\n  }\n\n  const CustomTooltip = ({ active, payload, label }: CustomTooltipProps) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white border border-gray-200 rounded-lg shadow-lg p-3\">\n          <p className=\"text-sm font-medium text-gray-900 mb-2\">{label}</p>\n          {payload.map((entry, index) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              <span className=\"font-semibold\">{entry.name}</span>: {entry.value}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  // Empty state component for charts\n  const ChartEmptyState = ({\n    icon: Icon,\n    title,\n    description,\n  }: {\n    icon: React.ElementType;\n    title: string;\n    description: string;\n  }) => (\n    <div\n      className=\"h-full flex items-center justify-center\"\n      role=\"status\"\n      aria-label={`No data: ${title}`}\n    >\n      <div className=\"text-center max-w-md px-4\">\n        <Icon\n          className=\"w-16 h-16 md:w-20 md:h-20 text-gray-300 mx-auto mb-4\"\n          aria-hidden=\"true\"\n        />\n        <h3 className=\"text-lg md:text-xl font-semibold text-gray-900 mb-2\">\n          {title}\n        </h3>\n        <p className=\"text-sm md:text-base text-gray-600 mb-4\">{description}</p>\n        <button\n          onClick={() => router.push('/timer')}\n          className=\"inline-flex items-center justify-center gap-2 px-4 md:px-6 py-2 md:py-3 bg-[#007AFF] text-white rounded-lg hover:bg-[#0051D5] transition-colors duration-200 font-semibold text-sm md:text-base shadow-md hover:shadow-lg focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2\"\n          aria-label=\"Start tracking your first session\"\n        >\n          <Activity className=\"w-4 h-4 md:w-5 md:h-5\" aria-hidden=\"true\" />\n          Start Your First Session\n        </button>\n      </div>\n    </div>\n  );\n\n  // Helper to render percentage change\n  const renderPercentageChange = (change: number | null) => {\n    if (change === null) return null;\n\n    const isPositive = change >= 0;\n    const formattedChange = Math.abs(change).toFixed(0);\n\n    return (\n      <div\n        className={`text-sm ${isPositive ? 'text-green-600' : 'text-red-600'}`}\n      >\n        {isPositive ? '↑' : '↓'} {formattedChange}%\n      </div>\n    );\n  };\n\n  if (!user) return null;\n\n  return (\n    <ProtectedRoute>\n      <div className=\"min-h-screen bg-white\">\n        <div className=\"hidden md:block\">\n          <Header />\n        </div>\n        <div className=\"md:hidden\">\n          <MobileHeader title=\"Analytics\" />\n        </div>\n\n        <div className=\"pb-20 md:pb-8\">\n          <div className=\"max-w-5xl mx-auto px-4 md:px-6 py-4\">\n            {/* Header - Desktop only */}\n            <div className=\"hidden md:block mb-4\">\n              <h1 className=\"text-xl md:text-2xl font-bold text-gray-900\">\n                Analytics\n              </h1>\n            </div>\n\n            {/* Controls */}\n            <div className=\"space-y-3 mb-6\">\n              {/* Row 1: Activity Selector & Chart Type */}\n              <div className=\"flex items-center gap-2\">\n                {/* Activity Selector */}\n                <div className=\"relative flex-shrink-0\">\n                  <button\n                    ref={activityTriggerRef}\n                    onClick={() => setShowProjectDropdown(!showProjectDropdown)}\n                    className=\"flex items-center gap-2 px-3 md:px-4 py-2 text-xs md:text-sm font-semibold border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] min-w-[140px] max-w-[200px]\"\n                    aria-label=\"Select activity to filter analytics\"\n                    aria-expanded={showProjectDropdown}\n                    aria-haspopup=\"listbox\"\n                  >\n                    <span className=\"truncate\">\n                      {selectedProjectId === 'all'\n                        ? 'All activities'\n                        : activities?.find(p => p.id === selectedProjectId)\n                            ?.name || 'All activities'}\n                    </span>\n                    <ChevronDown className=\"w-3.5 h-3.5 md:w-4 md:h-4 flex-shrink-0\" />\n                  </button>\n                  {showProjectDropdown && (\n                    <>\n                      <div\n                        className=\"fixed inset-0 z-40\"\n                        onClick={() => setShowProjectDropdown(false)}\n                      />\n                      <div\n                        className=\"absolute left-0 top-full mt-2 w-full max-w-xs bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50 max-h-64 overflow-y-auto\"\n                        role=\"listbox\"\n                      >\n                        <button\n                          onClick={() => {\n                            setSelectedProjectId('all');\n                            setShowProjectDropdown(false);\n                          }}\n                          className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-inset focus:bg-blue-50 ${selectedProjectId === 'all' ? 'bg-blue-50 text-blue-600' : ''}`}\n                          role=\"option\"\n                          aria-selected={selectedProjectId === 'all'}\n                        >\n                          All\n                        </button>\n                        {(!activities || activities.length === 0) && (\n                          <div className=\"px-4 py-2 text-xs text-gray-400\">\n                            No activities yet\n                          </div>\n                        )}\n                        {activities?.map(activity => (\n                          <button\n                            key={activity.id}\n                            onClick={() => {\n                              setSelectedProjectId(activity.id);\n                              setShowProjectDropdown(false);\n                            }}\n                            className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-inset focus:bg-blue-50 flex items-center gap-3 ${selectedProjectId === activity.id ? 'bg-blue-50 text-blue-600' : ''}`}\n                            role=\"option\"\n                            aria-selected={selectedProjectId === activity.id}\n                            aria-label={`Filter by ${activity.name}`}\n                          >\n                            <div\n                              className=\"w-7 h-7 rounded-lg flex items-center justify-center flex-shrink-0\"\n                              style={{ backgroundColor: activity.color + '20' }}\n                            >\n                              <IconRenderer\n                                iconName={activity.icon}\n                                size={18}\n                              />\n                            </div>\n                            <span className=\"truncate\">{activity.name}</span>\n                          </button>\n                        ))}\n                      </div>\n                    </>\n                  )}\n                </div>\n\n                {/* Chart Type Selector */}\n                <div className=\"relative flex-shrink-0\">\n                  <button\n                    ref={chartTypeTriggerRef}\n                    onClick={() =>\n                      setShowChartTypeDropdown(!showChartTypeDropdown)\n                    }\n                    className=\"flex items-center gap-1.5 md:gap-2 px-3 md:px-4 py-2 text-xs md:text-sm font-semibold border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF]\"\n                    aria-label=\"Select chart type for analytics visualization\"\n                    aria-expanded={showChartTypeDropdown}\n                    aria-haspopup=\"listbox\"\n                  >\n                    <svg\n                      className=\"w-3.5 h-3.5 md:w-4 md:h-4\"\n                      viewBox=\"0 0 16 16\"\n                      fill=\"currentColor\"\n                    >\n                      {chartType === 'bar' ? (\n                        <>\n                          <rect x=\"2\" y=\"8\" width=\"3\" height=\"6\" rx=\"0.5\" />\n                          <rect x=\"6.5\" y=\"4\" width=\"3\" height=\"10\" rx=\"0.5\" />\n                          <rect x=\"11\" y=\"6\" width=\"3\" height=\"8\" rx=\"0.5\" />\n                        </>\n                      ) : (\n                        <path\n                          d=\"M2 12 L5 8 L8 10 L11 4 L14 6\"\n                          stroke=\"currentColor\"\n                          strokeWidth=\"1.5\"\n                          fill=\"none\"\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                        />\n                      )}\n                    </svg>\n                    <span className=\"capitalize\">{chartType}</span>\n                    <ChevronDown className=\"w-3 h-3 md:w-4 md:h-4\" />\n                  </button>\n                  {showChartTypeDropdown && (\n                    <>\n                      <div\n                        className=\"fixed inset-0 z-40\"\n                        onClick={() => setShowChartTypeDropdown(false)}\n                      />\n                      <div\n                        className=\"absolute right-0 top-full mt-2 w-32 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50\"\n                        role=\"listbox\"\n                      >\n                        <button\n                          onClick={() => {\n                            setChartType('bar');\n                            setShowChartTypeDropdown(false);\n                          }}\n                          className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-inset focus:bg-blue-50 flex items-center gap-2 ${chartType === 'bar' ? 'bg-blue-50 text-blue-600' : ''}`}\n                          role=\"option\"\n                          aria-selected={chartType === 'bar'}\n                          aria-label=\"Display charts as bar charts\"\n                        >\n                          <svg\n                            className=\"w-4 h-4\"\n                            viewBox=\"0 0 16 16\"\n                            fill=\"currentColor\"\n                          >\n                            <rect x=\"2\" y=\"8\" width=\"3\" height=\"6\" rx=\"0.5\" />\n                            <rect\n                              x=\"6.5\"\n                              y=\"4\"\n                              width=\"3\"\n                              height=\"10\"\n                              rx=\"0.5\"\n                            />\n                            <rect x=\"11\" y=\"6\" width=\"3\" height=\"8\" rx=\"0.5\" />\n                          </svg>\n                          Bar\n                        </button>\n                        <button\n                          onClick={() => {\n                            setChartType('line');\n                            setShowChartTypeDropdown(false);\n                          }}\n                          className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-inset focus:bg-blue-50 flex items-center gap-2 ${chartType === 'line' ? 'bg-blue-50 text-blue-600' : ''}`}\n                          role=\"option\"\n                          aria-selected={chartType === 'line'}\n                          aria-label=\"Display charts as line charts\"\n                        >\n                          <svg\n                            className=\"w-4 h-4\"\n                            viewBox=\"0 0 16 16\"\n                            fill=\"none\"\n                            stroke=\"currentColor\"\n                          >\n                            <path\n                              d=\"M2 12 L5 8 L8 10 L11 4 L14 6\"\n                              strokeWidth=\"1.5\"\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                            />\n                          </svg>\n                          Line\n                        </button>\n                      </div>\n                    </>\n                  )}\n                </div>\n              </div>\n\n              {/* Row 2: Time Period Buttons - Scrollable on mobile */}\n              <div\n                className=\"flex items-center gap-2 overflow-x-auto scrollbar-hide -mx-4 px-4 md:mx-0 md:px-0\"\n                role=\"group\"\n                aria-label=\"Time period selection\"\n              >\n                {(['7D', '2W', '4W', '3M', '1Y'] as TimePeriod[]).map(\n                  period => {\n                    const ariaLabels: Record<TimePeriod, string> = {\n                      '7D': 'Last 7 days',\n                      '2W': 'Last 2 weeks',\n                      '4W': 'Last 4 weeks',\n                      '3M': 'Last 3 months',\n                      '1Y': 'Last 1 year',\n                    };\n                    return (\n                      <button\n                        key={period}\n                        onClick={() => setTimePeriod(period)}\n                        className={`flex-shrink-0 px-4 md:px-5 py-2 text-xs md:text-sm font-semibold rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-[#007AFF] ${\n                          timePeriod === period\n                            ? 'bg-gray-900 text-white focus:ring-offset-2'\n                            : 'bg-white text-gray-700 hover:bg-gray-100 border border-gray-300 focus:border-[#007AFF]'\n                        }`}\n                        aria-label={ariaLabels[period]}\n                        aria-pressed={timePeriod === period}\n                      >\n                        {period}\n                      </button>\n                    );\n                  }\n                )}\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              {/* Main Chart */}\n              <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n                <div className=\"mb-4\">\n                  <h3 className=\"font-semibold text-gray-900\">\n                    Hours completed\n                  </h3>\n                </div>\n                <div className=\"h-72\">\n                  {isLoading ? (\n                    <div className=\"h-full bg-gray-50 rounded animate-pulse\" />\n                  ) : chartData.length === 0 ||\n                    chartData.every(d => d.hours === 0) ? (\n                    <ChartEmptyState\n                      icon={BarChart3}\n                      title=\"No session data yet\"\n                      description=\"Start tracking your productive sessions to see your hours visualized over time. Your progress will appear here!\"\n                    />\n                  ) : (\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      {chartType === 'bar' ? (\n                        <BarChart\n                          data={chartData}\n                          margin={{ top: 10, right: 10, left: -20, bottom: 0 }}\n                        >\n                          <XAxis\n                            dataKey=\"name\"\n                            tick={{ fontSize: 12, fill: '#666' }}\n                            axisLine={false}\n                            tickLine={false}\n                          />\n                          <YAxis\n                            tick={{ fontSize: 12, fill: '#666' }}\n                            axisLine={false}\n                            tickLine={false}\n                            width={40}\n                          />\n                          <Tooltip content={<CustomTooltip />} />\n                          <Bar\n                            dataKey=\"hours\"\n                            fill=\"#007AFF\"\n                            radius={[4, 4, 0, 0]}\n                            name=\"Hours\"\n                          />\n                        </BarChart>\n                      ) : (\n                        <ComposedChart\n                          data={chartData}\n                          margin={{ top: 10, right: 10, left: -20, bottom: 0 }}\n                        >\n                          <defs>\n                            <linearGradient\n                              id=\"colorHours\"\n                              x1=\"0\"\n                              y1=\"0\"\n                              x2=\"0\"\n                              y2=\"1\"\n                            >\n                              <stop\n                                offset=\"5%\"\n                                stopColor=\"#007AFF\"\n                                stopOpacity={0.3}\n                              />\n                              <stop\n                                offset=\"95%\"\n                                stopColor=\"#007AFF\"\n                                stopOpacity={0}\n                              />\n                            </linearGradient>\n                          </defs>\n                          <XAxis\n                            dataKey=\"name\"\n                            tick={{ fontSize: 12, fill: '#666' }}\n                            axisLine={false}\n                            tickLine={false}\n                          />\n                          <YAxis\n                            tick={{ fontSize: 12, fill: '#666' }}\n                            axisLine={false}\n                            tickLine={false}\n                            width={40}\n                          />\n                          <Tooltip content={<CustomTooltip />} />\n                          <Area\n                            type=\"monotone\"\n                            dataKey=\"hours\"\n                            stroke=\"#007AFF\"\n                            strokeWidth={2}\n                            fill=\"url(#colorHours)\"\n                            name=\"Hours\"\n                          />\n                        </ComposedChart>\n                      )}\n                    </ResponsiveContainer>\n                  )}\n                </div>\n              </div>\n\n              {/* Second Row - Two Charts */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                {/* Average Session Duration */}\n                <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n                  <div className=\"mb-4\">\n                    <h3 className=\"font-semibold text-gray-900\">\n                      Average session duration\n                    </h3>\n                  </div>\n                  <div className=\"h-48\">\n                    {avgDurationData.length === 0 ||\n                    avgDurationData.every(d => d.value === 0) ? (\n                      <ChartEmptyState\n                        icon={TrendingUp}\n                        title=\"No duration data\"\n                        description=\"Track sessions to see your average session duration trends and improve your productivity!\"\n                      />\n                    ) : (\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        {chartType === 'bar' ? (\n                          <BarChart\n                            data={avgDurationData}\n                            margin={{ top: 5, right: 5, left: -30, bottom: 0 }}\n                          >\n                            <XAxis\n                              dataKey=\"name\"\n                              tick={{ fontSize: 11, fill: '#666' }}\n                              axisLine={false}\n                              tickLine={false}\n                            />\n                            <YAxis\n                              tick={{ fontSize: 11, fill: '#666' }}\n                              axisLine={false}\n                              tickLine={false}\n                            />\n                            <Tooltip content={<CustomTooltip />} />\n                            <Bar\n                              dataKey=\"value\"\n                              fill=\"#34C759\"\n                              radius={[4, 4, 0, 0]}\n                              name=\"Minutes\"\n                            />\n                          </BarChart>\n                        ) : (\n                          <ComposedChart\n                            data={avgDurationData}\n                            margin={{ top: 5, right: 5, left: -30, bottom: 0 }}\n                          >\n                            <defs>\n                              <linearGradient\n                                id=\"colorAvgDuration\"\n                                x1=\"0\"\n                                y1=\"0\"\n                                x2=\"0\"\n                                y2=\"1\"\n                              >\n                                <stop\n                                  offset=\"5%\"\n                                  stopColor=\"#34C759\"\n                                  stopOpacity={0.3}\n                                />\n                                <stop\n                                  offset=\"95%\"\n                                  stopColor=\"#34C759\"\n                                  stopOpacity={0}\n                                />\n                              </linearGradient>\n                            </defs>\n                            <XAxis\n                              dataKey=\"name\"\n                              tick={{ fontSize: 11, fill: '#666' }}\n                              axisLine={false}\n                              tickLine={false}\n                            />\n                            <YAxis\n                              tick={{ fontSize: 11, fill: '#666' }}\n                              axisLine={false}\n                              tickLine={false}\n                            />\n                            <Tooltip content={<CustomTooltip />} />\n                            <Area\n                              type=\"monotone\"\n                              dataKey=\"value\"\n                              stroke=\"#34C759\"\n                              strokeWidth={2}\n                              fill=\"url(#colorAvgDuration)\"\n                              name=\"Minutes\"\n                            />\n                          </ComposedChart>\n                        )}\n                      </ResponsiveContainer>\n                    )}\n                  </div>\n                </div>\n\n                {/* Sessions */}\n                <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n                  <div className=\"mb-4\">\n                    <h3 className=\"font-semibold text-gray-900\">\n                      Sessions completed\n                    </h3>\n                  </div>\n                  <div className=\"h-48\">\n                    {chartData.length === 0 ||\n                    chartData.every(d => d.sessions === 0) ? (\n                      <ChartEmptyState\n                        icon={Activity}\n                        title=\"No sessions tracked\"\n                        description=\"Complete your first session to start building your productivity streak and track your progress!\"\n                      />\n                    ) : (\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        {chartType === 'bar' ? (\n                          <BarChart\n                            data={chartData}\n                            margin={{ top: 5, right: 5, left: -30, bottom: 0 }}\n                          >\n                            <XAxis\n                              dataKey=\"name\"\n                              tick={{ fontSize: 11, fill: '#666' }}\n                              axisLine={false}\n                              tickLine={false}\n                            />\n                            <YAxis\n                              tick={{ fontSize: 11, fill: '#666' }}\n                              axisLine={false}\n                              tickLine={false}\n                            />\n                            <Tooltip content={<CustomTooltip />} />\n                            <Bar\n                              dataKey=\"sessions\"\n                              fill=\"#34C759\"\n                              radius={[4, 4, 0, 0]}\n                              name=\"Sessions\"\n                            />\n                          </BarChart>\n                        ) : (\n                          <ComposedChart\n                            data={chartData}\n                            margin={{ top: 5, right: 5, left: -30, bottom: 0 }}\n                          >\n                            <defs>\n                              <linearGradient\n                                id=\"colorSessionsSmall\"\n                                x1=\"0\"\n                                y1=\"0\"\n                                x2=\"0\"\n                                y2=\"1\"\n                              >\n                                <stop\n                                  offset=\"5%\"\n                                  stopColor=\"#34C759\"\n                                  stopOpacity={0.3}\n                                />\n                                <stop\n                                  offset=\"95%\"\n                                  stopColor=\"#34C759\"\n                                  stopOpacity={0}\n                                />\n                              </linearGradient>\n                            </defs>\n                            <XAxis\n                              dataKey=\"name\"\n                              tick={{ fontSize: 11, fill: '#666' }}\n                              axisLine={false}\n                              tickLine={false}\n                            />\n                            <YAxis\n                              tick={{ fontSize: 11, fill: '#666' }}\n                              axisLine={false}\n                              tickLine={false}\n                            />\n                            <Tooltip content={<CustomTooltip />} />\n                            <Area\n                              type=\"monotone\"\n                              dataKey=\"sessions\"\n                              stroke=\"#34C759\"\n                              strokeWidth={2}\n                              fill=\"url(#colorSessionsSmall)\"\n                              name=\"Sessions\"\n                            />\n                          </ComposedChart>\n                        )}\n                      </ResponsiveContainer>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Stats Grid - 5 columns */}\n              <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n                <div className=\"bg-white border border-gray-200 rounded-lg p-4\">\n                  <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                    Total Hours\n                  </div>\n                  <div className=\"text-2xl font-bold mb-1\">\n                    {calculatedStats.totalHours.toFixed(1)}\n                  </div>\n                  {renderPercentageChange(calculatedStats.hoursChange)}\n                </div>\n\n                <div className=\"bg-white border border-gray-200 rounded-lg p-4\">\n                  <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                    Avg Duration\n                  </div>\n                  <div className=\"text-2xl font-bold mb-1\">\n                    {calculatedStats.avgDuration}m\n                  </div>\n                  {renderPercentageChange(calculatedStats.avgDurationChange)}\n                </div>\n\n                <div className=\"bg-white border border-gray-200 rounded-lg p-4\">\n                  <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                    Sessions\n                  </div>\n                  <div className=\"text-2xl font-bold mb-1\">\n                    {calculatedStats.sessions}\n                  </div>\n                  {renderPercentageChange(calculatedStats.sessionsChange)}\n                </div>\n\n                <div className=\"bg-white border border-gray-200 rounded-lg p-4\">\n                  <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                    Active Days\n                  </div>\n                  <div className=\"text-2xl font-bold mb-1\">\n                    {calculatedStats.activeDays}\n                  </div>\n                  {renderPercentageChange(calculatedStats.activeDaysChange)}\n                </div>\n\n                <div className=\"bg-white border border-gray-200 rounded-lg p-4\">\n                  <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                    Activities\n                  </div>\n                  <div className=\"text-2xl font-bold mb-1\">\n                    {calculatedStats.activities}\n                  </div>\n                  {renderPercentageChange(calculatedStats.activitiesChange)}\n                </div>\n              </div>\n\n              {/* Secondary Stats Grid - Streaks */}\n              <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n                <div className=\"bg-white border border-gray-200 rounded-lg p-4\">\n                  <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                    Current Streak\n                  </div>\n                  <div className=\"text-2xl font-bold mb-1\">\n                    {calculatedStats.currentStreak}\n                  </div>\n                  {renderPercentageChange(calculatedStats.streakChange)}\n                </div>\n\n                <div className=\"bg-white border border-gray-200 rounded-lg p-4\">\n                  <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                    Longest Streak\n                  </div>\n                  <div className=\"text-2xl font-bold mb-1\">\n                    {calculatedStats.longestStreak}\n                  </div>\n                  {renderPercentageChange(calculatedStats.streakChange)}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"md:hidden\">\n          <BottomNavigation />\n        </div>\n        <Footer />\n      </div>\n    </ProtectedRoute>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/auth/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/challenges/[id]/page.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadChallengeData'. Either include it or remove the dependency array.",
        "line": 34,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 34,
        "endColumn": 25,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [challengeId, loadChallengeData, user]",
            "fix": {
              "range": [1439, 1458],
              "text": "[challengeId, loadChallengeData, user]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/challenges/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setUserProgressMap' is assigned a value but never used.",
        "line": 37,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 37,
        "endColumn": 45
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useMemo } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { ChallengeFilters } from '@/types';\nimport {\n  useChallenges,\n  useJoinChallenge,\n  useLeaveChallenge,\n} from '@/features/challenges/hooks';\nimport Header from '@/components/HeaderComponent';\nimport ChallengeCard from '@/components/ChallengeCard';\nimport { Button } from '@/components/ui/button';\nimport { Trophy, Target, Search, TrendingUp, Zap, Timer } from 'lucide-react';\n\nconst filterTabs = [\n  { key: 'all', label: 'All Challenges', icon: Trophy },\n  { key: 'active', label: 'Active', icon: TrendingUp },\n  { key: 'upcoming', label: 'Upcoming', icon: Target },\n  { key: 'participating', label: 'My Challenges', icon: Target },\n];\n\nconst challengeTypeFilters = [\n  { key: 'most-activity', label: 'Most Activity', icon: TrendingUp },\n  { key: 'fastest-effort', label: 'Fastest Effort', icon: Zap },\n  { key: 'longest-session', label: 'Longest Session', icon: Timer },\n  { key: 'group-goal', label: 'Group Goal', icon: Target },\n];\n\nexport default function ChallengesPage() {\n  const { user } = useAuth();\n  const [activeFilter, setActiveFilter] = useState<\n    'all' | 'active' | 'upcoming' | 'participating'\n  >('all');\n  const [typeFilter, setTypeFilter] = useState<string>('all');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [userProgressMap, setUserProgressMap] = useState<\n    Record<string, number>\n  >({});\n\n  // Build filters based on active filter state\n  const filters = useMemo(() => {\n    const filterObj: ChallengeFilters = {};\n\n    if (activeFilter === 'active') {\n      filterObj.status = 'active';\n    } else if (activeFilter === 'upcoming') {\n      filterObj.status = 'upcoming';\n    } else if (activeFilter === 'participating') {\n      filterObj.isParticipating = true;\n    }\n\n    if (typeFilter !== 'all') {\n      filterObj.type = typeFilter as 'most-activity' | 'fastest-effort' | 'longest-session' | 'group-goal';\n    }\n\n    return filterObj;\n  }, [activeFilter, typeFilter]);\n\n  // Use new challenge hooks\n  const { data: challenges = [], isLoading } = useChallenges(filters);\n  const joinChallengeMutation = useJoinChallenge();\n  const leaveChallengeMutation = useLeaveChallenge();\n\n  // Build set of participating challenge IDs based on filter result\n  // When filtering by 'participating', all returned challenges are ones the user is in\n  const participatingChallenges = useMemo(() => {\n    if (activeFilter === 'participating') {\n      // All challenges returned when filtering by participation are participating\n      return new Set(challenges.map(c => c.id));\n    }\n    // Otherwise, we need a different method to determine participation\n    // For now, we mark none as participating unless the filter explicitly sets it\n    return new Set<string>();\n  }, [challenges, activeFilter]);\n\n  const handleJoinChallenge = async (challengeId: string) => {\n    try {\n      await joinChallengeMutation.mutateAsync(challengeId);\n    } catch (error) {\n      console.error('Failed to join challenge:', error);\n      alert('Failed to join challenge. Please try again.');\n    }\n  };\n\n  const handleLeaveChallenge = async (challengeId: string) => {\n    try {\n      await leaveChallengeMutation.mutateAsync(challengeId);\n    } catch (error) {\n      console.error('Failed to leave challenge:', error);\n      alert('Failed to leave challenge. Please try again.');\n    }\n  };\n\n  const filteredChallenges = useMemo(() => {\n    if (!searchQuery) return challenges;\n\n    const query = searchQuery.toLowerCase();\n    return challenges.filter(\n      challenge =>\n        challenge.name.toLowerCase().includes(query) ||\n        challenge.description.toLowerCase().includes(query)\n    );\n  }, [challenges, searchQuery]);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n\n      <div className=\"max-w-6xl mx-auto px-4 md:px-6 lg:px-8 py-6\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Challenges</h1>\n          <p className=\"text-gray-600\">\n            Participate in productivity challenges and compete with others\n          </p>\n        </div>\n\n        {/* Filters */}\n        <div className=\"bg-white rounded-lg border border-gray-200 shadow-sm p-6 mb-6\">\n          {/* Status Filter Tabs */}\n          <div className=\"flex flex-wrap gap-2 mb-4\">\n            {filterTabs.map(tab => {\n              const Icon = tab.icon;\n              const isActive = activeFilter === tab.key;\n\n              return (\n                <button\n                  key={tab.key}\n                  onClick={() => setActiveFilter(tab.key as 'all' | 'active' | 'upcoming' | 'participating')}\n                  className={`flex items-center gap-2 px-4 py-2.5 rounded-lg font-semibold text-sm transition-colors min-h-[44px] ${\n                    isActive\n                      ? 'bg-[#007AFF] text-white'\n                      : 'bg-gray-50 text-gray-600 hover:bg-gray-100 border border-transparent'\n                  }`}\n                >\n                  <Icon className=\"w-4 h-4\" />\n                  {tab.label}\n                </button>\n              );\n            })}\n          </div>\n\n          {/* Search and Type Filter */}\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <input\n                type=\"text\"\n                placeholder=\"Search challenges...\"\n                value={searchQuery}\n                onChange={e => setSearchQuery(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              />\n            </div>\n\n            <select\n              value={typeFilter}\n              onChange={e => setTypeFilter(e.target.value)}\n              className=\"px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            >\n              <option value=\"all\">All Types</option>\n              {challengeTypeFilters.map(type => (\n                <option key={type.key} value={type.key}>\n                  {type.label}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n\n        {/* Results */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <div\n                key={i}\n                className=\"bg-white rounded-lg border border-gray-200 shadow-sm p-6 animate-pulse\"\n              >\n                <div className=\"h-4 bg-gray-200 rounded mb-4\"></div>\n                <div className=\"h-3 bg-gray-200 rounded mb-2\"></div>\n                <div className=\"h-3 bg-gray-200 rounded mb-4\"></div>\n                <div className=\"h-8 bg-gray-200 rounded\"></div>\n              </div>\n            ))}\n          </div>\n        ) : filteredChallenges.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6\">\n            {filteredChallenges.map(challenge => (\n              <ChallengeCard\n                key={challenge.id}\n                challenge={challenge}\n                isParticipating={participatingChallenges.has(challenge.id)}\n                userProgress={userProgressMap[challenge.id] || 0}\n                onJoin={() => handleJoinChallenge(challenge.id)}\n                onLeave={() => handleLeaveChallenge(challenge.id)}\n                showActions={!!user}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className=\"bg-white rounded-lg border border-gray-200 shadow-sm p-12 text-center\">\n            <Trophy className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">\n              {searchQuery ? 'No challenges found' : 'No challenges available'}\n            </h2>\n            <p className=\"text-gray-600 mb-6\">\n              {searchQuery\n                ? 'Try adjusting your search or filters'\n                : 'Check back later for new challenges to join'}\n            </p>\n            {searchQuery && (\n              <Button variant=\"outline\" onClick={() => setSearchQuery('')}>\n                Clear Search\n              </Button>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/contact/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 130,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 130,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft, Mail, MessageSquare, HelpCircle, Bug } from 'lucide-react';\nimport { staticPageStyles } from '@/styles/staticPages';\n\ninterface FormErrors {\n  name?: string;\n  email?: string;\n  subject?: string;\n  message?: string;\n  privacyAgree?: string;\n}\n\nexport default function ContactPage() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    subject: '',\n    message: '',\n    type: 'general',\n  });\n  const [privacyAgree, setPrivacyAgree] = useState(false);\n  const [errors, setErrors] = useState<FormErrors>({});\n  const [touched, setTouched] = useState<Set<string>>(new Set());\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const validateField = (name: string, value: string | boolean): string | undefined => {\n    switch (name) {\n      case 'name':\n        if (typeof value === 'string' && !value.trim()) {\n          return 'Name is required';\n        }\n        if (typeof value === 'string' && value.trim().length < 2) {\n          return 'Name must be at least 2 characters';\n        }\n        break;\n      case 'email':\n        if (typeof value === 'string' && !value.trim()) {\n          return 'Email is required';\n        }\n        if (typeof value === 'string' && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) {\n          return 'Please enter a valid email address';\n        }\n        break;\n      case 'subject':\n        if (typeof value === 'string' && !value.trim()) {\n          return 'Subject is required';\n        }\n        if (typeof value === 'string' && value.trim().length < 5) {\n          return 'Subject must be at least 5 characters';\n        }\n        break;\n      case 'message':\n        if (typeof value === 'string' && !value.trim()) {\n          return 'Message is required';\n        }\n        if (typeof value === 'string' && value.trim().length < 10) {\n          return 'Message must be at least 10 characters';\n        }\n        break;\n      case 'privacyAgree':\n        if (typeof value === 'boolean' && !value) {\n          return 'You must agree to the Privacy Policy to continue';\n        }\n        break;\n    }\n    return undefined;\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: FormErrors = {};\n\n    newErrors.name = validateField('name', formData.name);\n    newErrors.email = validateField('email', formData.email);\n    newErrors.subject = validateField('subject', formData.subject);\n    newErrors.message = validateField('message', formData.message);\n    newErrors.privacyAgree = validateField('privacyAgree', privacyAgree);\n\n    setErrors(newErrors);\n    return !Object.values(newErrors).some(error => error !== undefined);\n  };\n\n  const handleBlur = (fieldName: string) => {\n    setTouched(prev => new Set(prev).add(fieldName));\n    const value = fieldName === 'privacyAgree' ? privacyAgree : formData[fieldName as keyof typeof formData];\n    const error = validateField(fieldName, value);\n    setErrors(prev => ({ ...prev, [fieldName]: error }));\n  };\n\n  const handleChange = (fieldName: string, value: string) => {\n    setFormData(prev => ({ ...prev, [fieldName]: value }));\n    if (touched.has(fieldName)) {\n      const error = validateField(fieldName, value);\n      setErrors(prev => ({ ...prev, [fieldName]: error }));\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    // Mark all fields as touched\n    setTouched(new Set(['name', 'email', 'subject', 'message', 'privacyAgree']));\n\n    if (!validateForm()) {\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      // TODO: Implement actual form submission to backend\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\n\n      alert('Thank you for contacting us! We\\'ll get back to you soon.');\n\n      // Reset form\n      setFormData({\n        name: '',\n        email: '',\n        subject: '',\n        message: '',\n        type: 'general',\n      });\n      setPrivacyAgree(false);\n      setErrors({});\n      setTouched(new Set());\n    } catch (error) {\n      alert('Sorry, there was an error submitting your message. Please try again.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className={staticPageStyles.containers.page}>\n      <div className={staticPageStyles.containers.content}>\n        {/* Header */}\n        <div className={staticPageStyles.spacing.sectionMargin}>\n          <Button variant=\"ghost\" asChild className={staticPageStyles.backButton}>\n            <Link href=\"/\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Home\n            </Link>\n          </Button>\n          <h1 className={`${staticPageStyles.typography.pageTitle} mb-2`}>Contact Us</h1>\n          <p className={staticPageStyles.typography.pageDescription}>\n            Have a question, suggestion, or need support? We're here to help.\n          </p>\n        </div>\n\n        <div className={`grid md:grid-cols-3 gap-6 ${staticPageStyles.spacing.sectionMargin}`}>\n          {/* Contact Methods */}\n          <div className={staticPageStyles.containers.card}>\n            <div className={`${staticPageStyles.iconBackgrounds.blue} rounded-lg p-3 w-fit mb-4`}>\n              <Mail className={`${staticPageStyles.icons.medium} ${staticPageStyles.icons.white}`} />\n            </div>\n            <h3 className={`${staticPageStyles.typography.subsectionHeading} mb-2`}>Email Support</h3>\n            <p className={`${staticPageStyles.typography.smallText} mb-3`}>\n              Get help from our support team\n            </p>\n            <a\n              href=\"mailto:support@ambira.app\"\n              className={`${staticPageStyles.links.email} ${staticPageStyles.typography.smallText} font-medium`}\n            >\n              support@ambira.app\n            </a>\n          </div>\n\n          <div className={staticPageStyles.containers.card}>\n            <div className={`${staticPageStyles.iconBackgrounds.green} rounded-lg p-3 w-fit mb-4`}>\n              <MessageSquare className={`${staticPageStyles.icons.medium} ${staticPageStyles.icons.white}`} />\n            </div>\n            <h3 className={`${staticPageStyles.typography.subsectionHeading} mb-2`}>General Inquiries</h3>\n            <p className={`${staticPageStyles.typography.smallText} mb-3`}>\n              For partnerships and press\n            </p>\n            <a\n              href=\"mailto:hello@ambira.app\"\n              className={`${staticPageStyles.links.email} ${staticPageStyles.typography.smallText} font-medium`}\n            >\n              hello@ambira.app\n            </a>\n          </div>\n\n          <div className={staticPageStyles.containers.card}>\n            <div className={`${staticPageStyles.iconBackgrounds.orange} rounded-lg p-3 w-fit mb-4`}>\n              <Bug className={`${staticPageStyles.icons.medium} ${staticPageStyles.icons.white}`} />\n            </div>\n            <h3 className={`${staticPageStyles.typography.subsectionHeading} mb-2`}>Report a Bug</h3>\n            <p className={`${staticPageStyles.typography.smallText} mb-3`}>\n              Help us improve Ambira\n            </p>\n            <a\n              href=\"mailto:bugs@ambira.app\"\n              className={`${staticPageStyles.links.email} ${staticPageStyles.typography.smallText} font-medium`}\n            >\n              bugs@ambira.app\n            </a>\n          </div>\n        </div>\n\n        {/* Contact Form */}\n        <div className={`${staticPageStyles.containers.card} ${staticPageStyles.spacing.sectionMargin}`}>\n          <div className=\"flex items-center mb-6\">\n            <HelpCircle className={`${staticPageStyles.icons.medium} ${staticPageStyles.icons.primary} mr-2`} />\n            <h2 className={staticPageStyles.typography.sectionHeading}>Send us a Message</h2>\n          </div>\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\" noValidate>\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div>\n                <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Name <span className=\"text-red-500\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => handleChange('name', e.target.value)}\n                  onBlur={() => handleBlur('name')}\n                  className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:border-transparent transition-colors ${\n                    errors.name && touched.has('name')\n                      ? 'border-red-500 focus:ring-red-200'\n                      : 'border-gray-300 focus:ring-[#007AFF]'\n                  }`}\n                  placeholder=\"Your name\"\n                  aria-invalid={errors.name && touched.has('name') ? 'true' : 'false'}\n                  aria-describedby={errors.name && touched.has('name') ? 'name-error' : undefined}\n                />\n                {errors.name && touched.has('name') && (\n                  <p id=\"name-error\" className=\"mt-1 text-sm text-red-600\">\n                    {errors.name}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Email <span className=\"text-red-500\">*</span>\n                </label>\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  value={formData.email}\n                  onChange={(e) => handleChange('email', e.target.value)}\n                  onBlur={() => handleBlur('email')}\n                  className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:border-transparent transition-colors ${\n                    errors.email && touched.has('email')\n                      ? 'border-red-500 focus:ring-red-200'\n                      : 'border-gray-300 focus:ring-[#007AFF]'\n                  }`}\n                  placeholder=\"your@email.com\"\n                  aria-invalid={errors.email && touched.has('email') ? 'true' : 'false'}\n                  aria-describedby={errors.email && touched.has('email') ? 'email-error' : undefined}\n                />\n                {errors.email && touched.has('email') && (\n                  <p id=\"email-error\" className=\"mt-1 text-sm text-red-600\">\n                    {errors.email}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            <div>\n              <label htmlFor=\"type\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Inquiry Type <span className=\"text-red-500\">*</span>\n              </label>\n              <select\n                id=\"type\"\n                value={formData.type}\n                onChange={(e) => handleChange('type', e.target.value)}\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-transparent\"\n              >\n                <option value=\"general\">General Question</option>\n                <option value=\"support\">Technical Support</option>\n                <option value=\"bug\">Bug Report</option>\n                <option value=\"feature\">Feature Request</option>\n                <option value=\"account\">Account Issue</option>\n                <option value=\"privacy\">Privacy Concern</option>\n                <option value=\"partnership\">Partnership/Business</option>\n                <option value=\"other\">Other</option>\n              </select>\n            </div>\n\n            <div>\n              <label htmlFor=\"subject\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Subject <span className=\"text-red-500\">*</span>\n              </label>\n              <input\n                type=\"text\"\n                id=\"subject\"\n                value={formData.subject}\n                onChange={(e) => handleChange('subject', e.target.value)}\n                onBlur={() => handleBlur('subject')}\n                className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:border-transparent transition-colors ${\n                  errors.subject && touched.has('subject')\n                    ? 'border-red-500 focus:ring-red-200'\n                    : 'border-gray-300 focus:ring-[#007AFF]'\n                }`}\n                placeholder=\"Brief description of your inquiry\"\n                aria-invalid={errors.subject && touched.has('subject') ? 'true' : 'false'}\n                aria-describedby={errors.subject && touched.has('subject') ? 'subject-error' : undefined}\n              />\n              {errors.subject && touched.has('subject') && (\n                <p id=\"subject-error\" className=\"mt-1 text-sm text-red-600\">\n                  {errors.subject}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <label htmlFor=\"message\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Message <span className=\"text-red-500\">*</span>\n              </label>\n              <textarea\n                id=\"message\"\n                value={formData.message}\n                onChange={(e) => handleChange('message', e.target.value)}\n                onBlur={() => handleBlur('message')}\n                rows={6}\n                className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:border-transparent resize-none transition-colors ${\n                  errors.message && touched.has('message')\n                    ? 'border-red-500 focus:ring-red-200'\n                    : 'border-gray-300 focus:ring-[#007AFF]'\n                }`}\n                placeholder=\"Tell us more about your question or concern...\"\n                aria-invalid={errors.message && touched.has('message') ? 'true' : 'false'}\n                aria-describedby={errors.message && touched.has('message') ? 'message-error' : undefined}\n              />\n              {errors.message && touched.has('message') && (\n                <p id=\"message-error\" className=\"mt-1 text-sm text-red-600\">\n                  {errors.message}\n                </p>\n              )}\n            </div>\n\n            <div>\n              <div className=\"flex items-start\">\n                <input\n                  type=\"checkbox\"\n                  id=\"privacy-agree\"\n                  checked={privacyAgree}\n                  onChange={(e) => {\n                    setPrivacyAgree(e.target.checked);\n                    if (touched.has('privacyAgree')) {\n                      const error = validateField('privacyAgree', e.target.checked);\n                      setErrors(prev => ({ ...prev, privacyAgree: error }));\n                    }\n                  }}\n                  onBlur={() => handleBlur('privacyAgree')}\n                  className={`mt-1 mr-2 h-4 w-4 rounded border-gray-300 text-[#007AFF] focus:ring-[#007AFF] ${\n                    errors.privacyAgree && touched.has('privacyAgree') ? 'border-red-500' : ''\n                  }`}\n                  aria-invalid={errors.privacyAgree && touched.has('privacyAgree') ? 'true' : 'false'}\n                  aria-describedby={errors.privacyAgree && touched.has('privacyAgree') ? 'privacy-error' : undefined}\n                />\n                <label htmlFor=\"privacy-agree\" className={staticPageStyles.typography.smallText}>\n                  I agree to the{' '}\n                  <Link href=\"/privacy\" className={staticPageStyles.links.inline}>\n                    Privacy Policy\n                  </Link>{' '}\n                  and understand my data will be processed to respond to this inquiry.{' '}\n                  <span className=\"text-red-500\">*</span>\n                </label>\n              </div>\n              {errors.privacyAgree && touched.has('privacyAgree') && (\n                <p id=\"privacy-error\" className=\"mt-1 text-sm text-red-600\">\n                  {errors.privacyAgree}\n                </p>\n              )}\n            </div>\n\n            <Button\n              type=\"submit\"\n              size=\"lg\"\n              className=\"w-full md:w-auto\"\n              disabled={isSubmitting}\n            >\n              {isSubmitting ? 'Sending...' : 'Send Message'}\n            </Button>\n          </form>\n        </div>\n\n        {/* Quick Links */}\n        <div className={staticPageStyles.containers.card}>\n          <h3 className={`${staticPageStyles.typography.subsectionHeading} mb-4`}>Before you contact us...</h3>\n          <p className={`${staticPageStyles.typography.bodyText} mb-4`}>\n            You might find the answer to your question in our help resources:\n          </p>\n          <div className=\"flex flex-wrap gap-3\">\n            <Button variant=\"outline\" asChild>\n              <Link href=\"/help\">Help Center</Link>\n            </Button>\n            <Button variant=\"outline\" asChild>\n              <Link href=\"/about\">About Ambira</Link>\n            </Button>\n            <Button variant=\"outline\" asChild>\n              <Link href=\"/privacy\">Privacy Policy</Link>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/cookies/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/discover/people/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 16,
        "column": 56,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 16,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [642, 645], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [642, 645], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'followingUsers' is assigned a value but never used.",
        "line": 18,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 24
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport Header from '@/components/HeaderComponent';\nimport MobileHeader from '@/components/MobileHeader';\nimport BottomNavigation from '@/components/BottomNavigation';\nimport { firebaseUserApi } from '@/lib/api';\nimport { useAuth } from '@/hooks/useAuth';\nimport { UserCardCompact } from '@/components/UserCard';\nimport { ArrowLeft, Users as UsersIcon } from 'lucide-react';\n\nexport default function DiscoverPeoplePage() {\n  const router = useRouter();\n  const { user } = useAuth();\n  const [suggestedUsers, setSuggestedUsers] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [followingUsers, setFollowingUsers] = useState<Set<string>>(new Set());\n\n  useEffect(() => {\n    const loadUsers = async () => {\n      if (!user) {\n        setIsLoading(false);\n        return;\n      }\n\n      try {\n        setIsLoading(true);\n\n        // Load the list of users we're already following\n        try {\n          const following = await firebaseUserApi.getFollowing(user.id);\n          const followingIds = new Set(following.map(u => u.id));\n          setFollowingUsers(followingIds);\n        } catch (error) {\n          console.error('Failed to load following list:', error);\n        }\n\n        // Load suggested users (filters by profileVisibility and excludes following)\n        // Limit to 5 to avoid revealing total user count\n        const suggestions = await firebaseUserApi.getSuggestedUsers(5);\n\n        setSuggestedUsers(suggestions);\n      } catch (error) {\n        console.error('Error loading users:', error);\n        setSuggestedUsers([]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadUsers();\n  }, [user]);\n\n  const handleFollowChange = (userId: string, isFollowing: boolean) => {\n    // Update following state\n    setFollowingUsers(prev => {\n      const next = new Set(prev);\n      if (isFollowing) {\n        next.add(userId);\n      } else {\n        next.delete(userId);\n      }\n      return next;\n    });\n\n    // Update user data\n    setSuggestedUsers(prev =>\n      prev.map(u =>\n        u.id === userId\n          ? {\n              ...u,\n              isFollowing,\n              followersCount: isFollowing\n                ? (u.followersCount || 0) + 1\n                : Math.max(0, (u.followersCount || 0) - 1)\n            }\n          : u\n      )\n    );\n\n    // Remove from suggestions after following\n    if (isFollowing) {\n      setSuggestedUsers(prev => prev.filter(u => u.id !== userId));\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Header - desktop */}\n      <div className=\"hidden md:block\">\n        <Header />\n      </div>\n\n      {/* Mobile Header */}\n      <MobileHeader title=\"Discover People\" />\n\n      <div className=\"max-w-4xl mx-auto px-0 md:px-6 md:py-8 md:pt-24\">\n        {/* Page Header - Desktop */}\n        <div className=\"mb-8 hidden md:block px-6\">\n          <div className=\"flex items-center gap-3 mb-4\">\n            <button\n              onClick={() => router.back()}\n              className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n            >\n              <ArrowLeft className=\"w-5 h-5 text-gray-600\" />\n            </button>\n          </div>\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Discover People</h1>\n            <p className=\"text-gray-600\">\n              Here are some people you might want to follow\n            </p>\n          </div>\n        </div>\n\n        {/* Content */}\n        {isLoading ? (\n          <div className=\"p-12 text-center\">\n            <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-[#007AFF]\"></div>\n            <p className=\"text-gray-600 mt-4\">Finding people for you...</p>\n          </div>\n        ) : suggestedUsers.length === 0 ? (\n          <div className=\"p-16 text-center\">\n            <div className=\"w-20 h-20 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <UsersIcon className=\"w-10 h-10 text-[#007AFF]\" />\n            </div>\n            <h3 className=\"text-xl font-bold text-gray-900 mb-2\">No suggestions yet</h3>\n            <p className=\"text-gray-600 max-w-md mx-auto\">\n              We'll show you people to connect with as the community grows. Check back later!\n            </p>\n          </div>\n        ) : (\n          <div>\n            {/* Section Header */}\n            <div className=\"px-6 py-4 border-b border-gray-200 bg-gray-50\">\n              <h2 className=\"text-sm font-semibold text-gray-700 uppercase tracking-wide\">\n                Who to Follow\n              </h2>\n            </div>\n\n            {/* People List */}\n            <div className=\"divide-y divide-gray-200\">\n              {suggestedUsers.map((suggestedUser) => (\n                <div key={suggestedUser.id}>\n                  <UserCardCompact\n                    user={suggestedUser}\n                    variant=\"search\"\n                    onFollowChange={handleFollowChange}\n                  />\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Bottom padding for mobile navigation */}\n      <div className=\"h-20 md:hidden\" />\n\n      <BottomNavigation />\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/features/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'TrendingUp' is defined but never used.",
        "line": 6,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import Link from 'next/link';\nimport {\n  Clock,\n  Target,\n  Users,\n  TrendingUp,\n  Award,\n  Calendar,\n  CheckCircle,\n  Zap,\n  Activity,\n  Trophy,\n  BarChart3,\n  Heart,\n} from 'lucide-react';\n\nexport default function FeaturesPage() {\n  const features = [\n    {\n      icon: Clock,\n      title: 'Smart Session Tracking',\n      description:\n        'Track work sessions with our intuitive timer. Start, pause, and log your productivity with detailed notes and project tagging.',\n      color: 'text-blue-500',\n      bgColor: 'bg-blue-50',\n    },\n    {\n      icon: Target,\n      title: 'Project Management',\n      description:\n        'Organize your work into projects and tasks. Break down complex goals into manageable pieces and track progress over time.',\n      color: 'text-orange-500',\n      bgColor: 'bg-orange-50',\n    },\n    {\n      icon: Calendar,\n      title: 'Streak Tracking',\n      description:\n        'Build momentum with daily streaks. Stay motivated by maintaining your current streak and beat your personal best.',\n      color: 'text-green-500',\n      bgColor: 'bg-green-50',\n    },\n    {\n      icon: Users,\n      title: 'Social Connectivity',\n      description:\n        'Follow friends and colleagues to see their productivity sessions. Give support, leave comments, and build a community of focused workers.',\n      color: 'text-purple-500',\n      bgColor: 'bg-purple-50',\n    },\n    {\n      icon: Trophy,\n      title: 'Groups & Challenges',\n      description:\n        'Join productivity groups and compete in challenges. Test yourself with most-activity, fastest-effort, and group goal challenges.',\n      color: 'text-yellow-500',\n      bgColor: 'bg-yellow-50',\n    },\n    {\n      icon: BarChart3,\n      title: 'Analytics & Insights',\n      description:\n        'Visualize your productivity patterns with detailed analytics. Track time spent across projects and identify your most productive periods.',\n      color: 'text-indigo-500',\n      bgColor: 'bg-indigo-50',\n    },\n    {\n      icon: Activity,\n      title: 'Live Activity Feed',\n      description:\n        'See real-time updates from your network. Celebrate wins, discover new projects, and stay inspired by the community.',\n      color: 'text-pink-500',\n      bgColor: 'bg-pink-50',\n    },\n    {\n      icon: Award,\n      title: 'Achievements',\n      description:\n        'Unlock achievements as you reach milestones. Earn badges for consistency, dedication, and productivity excellence.',\n      color: 'text-red-500',\n      bgColor: 'bg-red-50',\n    },\n    {\n      icon: Zap,\n      title: 'Privacy Controls',\n      description:\n        'Control who sees your activity. Choose between public, followers-only, or private visibility for your sessions and profile.',\n      color: 'text-cyan-500',\n      bgColor: 'bg-cyan-50',\n    },\n  ];\n\n  const stats = [\n    { value: '10K+', label: 'Active Users', icon: Users },\n    { value: '1M+', label: 'Sessions Tracked', icon: CheckCircle },\n    { value: '500K+', label: 'Hours Logged', icon: Clock },\n    { value: '5K+', label: 'Challenges Completed', icon: Trophy },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-white to-gray-50\">\n      {/* Hero Section */}\n      <div className=\"bg-gradient-to-r from-[#007AFF] to-[#0055CC] text-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16 sm:py-24\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl sm:text-5xl lg:text-6xl font-bold mb-6\">\n              Productivity Meets Community\n            </h1>\n            <p className=\"text-xl sm:text-2xl text-blue-100 mb-8 max-w-3xl mx-auto\">\n              Track your work sessions, build streaks, compete with friends, and\n              celebrate productivity together - like Strava, but for getting things\n              done.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link\n                href=\"/signup\"\n                className=\"inline-flex items-center justify-center px-8 py-3 text-lg font-semibold bg-white text-[#007AFF] rounded-lg hover:bg-gray-100 transition-colors\"\n              >\n                Get Started Free\n              </Link>\n              <Link\n                href=\"/about\"\n                className=\"inline-flex items-center justify-center px-8 py-3 text-lg font-semibold bg-transparent text-white border-2 border-white rounded-lg hover:bg-white/10 transition-colors\"\n              >\n                Learn More\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Stats Section */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 -mt-12\">\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n          {stats.map((stat, index) => (\n            <div\n              key={index}\n              className=\"bg-white rounded-xl shadow-lg p-6 text-center transform hover:scale-105 transition-transform\"\n            >\n              <stat.icon className=\"w-8 h-8 mx-auto mb-3 text-[#007AFF]\" />\n              <div className=\"text-3xl font-bold text-gray-900 mb-1\">\n                {stat.value}\n              </div>\n              <div className=\"text-gray-600\">{stat.label}</div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Features Grid */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16 sm:py-24\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-3xl sm:text-4xl font-bold text-gray-900 mb-4\">\n            Everything You Need to Stay Productive\n          </h2>\n          <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n            Powerful features designed to help you track, improve, and share your\n            productivity journey.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {features.map((feature, index) => (\n            <div\n              key={index}\n              className=\"bg-white rounded-xl p-6 shadow-md hover:shadow-xl transition-shadow\"\n            >\n              <div\n                className={`${feature.bgColor} w-14 h-14 rounded-lg flex items-center justify-center mb-4`}\n              >\n                <feature.icon className={`w-7 h-7 ${feature.color}`} />\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">\n                {feature.title}\n              </h3>\n              <p className=\"text-gray-600 leading-relaxed\">\n                {feature.description}\n              </p>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* How It Works Section */}\n      <div className=\"bg-white py-16 sm:py-24\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl sm:text-4xl font-bold text-gray-900 mb-4\">\n              How Ambira Works\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              Get started in minutes and join a community of productive people\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-12\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-[#007AFF] text-white rounded-full flex items-center justify-center text-2xl font-bold mx-auto mb-4\">\n                1\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">\n                Track Your Sessions\n              </h3>\n              <p className=\"text-gray-600\">\n                Start the timer when you begin working. Add project tags, tasks,\n                and notes to document your progress.\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-[#FC4C02] text-white rounded-full flex items-center justify-center text-2xl font-bold mx-auto mb-4\">\n                2\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">\n                Build Your Streak\n              </h3>\n              <p className=\"text-gray-600\">\n                Log at least one session daily to maintain your streak. Watch your\n                momentum grow and beat your personal best.\n              </p>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-[#34C759] text-white rounded-full flex items-center justify-center text-2xl font-bold mx-auto mb-4\">\n                3\n              </div>\n              <h3 className=\"text-xl font-semibold text-gray-900 mb-3\">\n                Connect & Compete\n              </h3>\n              <p className=\"text-gray-600\">\n                Follow friends, join groups, and participate in challenges. Share\n                your wins and support others in their journey.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Social Proof Section */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16 sm:py-24\">\n        <div className=\"bg-gradient-to-r from-[#007AFF] to-[#0055CC] rounded-2xl p-8 sm:p-12 text-white text-center\">\n          <Heart className=\"w-16 h-16 mx-auto mb-6\" />\n          <h2 className=\"text-3xl sm:text-4xl font-bold mb-4\">\n            Join the Productivity Revolution\n          </h2>\n          <p className=\"text-xl text-blue-100 mb-8 max-w-2xl mx-auto\">\n            Thousands of people are already tracking their work, building streaks,\n            and achieving their goals with Ambira. Be part of the community.\n          </p>\n          <Link\n            href=\"/signup\"\n            className=\"inline-flex items-center justify-center px-8 py-3 text-lg font-semibold bg-white text-[#007AFF] rounded-lg hover:bg-gray-100 transition-colors\"\n          >\n            Start Tracking Free\n          </Link>\n        </div>\n      </div>\n\n      {/* Footer CTA */}\n      <div className=\"bg-gray-50 border-t border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 text-center\">\n          <p className=\"text-gray-600 mb-4\">\n            Have questions?{' '}\n            <Link href=\"/help\" className=\"text-[#007AFF] hover:underline\">\n              Visit our Help Center\n            </Link>{' '}\n            or{' '}\n            <Link href=\"/contact\" className=\"text-[#007AFF] hover:underline\">\n              Contact Us\n            </Link>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/feed/page-content.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/feed/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/global-error.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/groups/[id]/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/groups/[id]/settings/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Upload' is defined but never used.",
        "line": 11,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 287,
        "column": 72,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 287,
        "endColumn": 75,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8795, 8798], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8795, 8798], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 311,
        "column": 68,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 311,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9722, 9725], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9722, 9725], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadGroup'. Either include it or remove the dependency array.",
        "line": 49,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 49,
        "endColumn": 21,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [groupId, loadGroup, user]",
            "fix": {
              "range": [1550, 1565],
              "text": "[groupId, loadGroup, user]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useRouter } from 'next/navigation';\nimport { useAuth } from '@/hooks/useAuth';\nimport Header from '@/components/HeaderComponent';\nimport { ImageUpload } from '@/components/ImageUpload';\nimport { Group, UpdateGroupData } from '@/types';\nimport { firebaseApi } from '@/lib/api';\nimport { uploadImage } from '@/lib/imageUpload';\nimport { Upload } from 'lucide-react';\n\nexport default function GroupSettingsPage() {\n  const params = useParams();\n  const router = useRouter();\n  const { user } = useAuth();\n  const [group, setGroup] = useState<Group | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const groupId = params.id as string;\n\n  // Form state\n  const [formData, setFormData] = useState({\n    name: '',\n    description: '',\n    location: '',\n    category: 'other' as\n      | 'work'\n      | 'study'\n      | 'side-project'\n      | 'learning'\n      | 'other',\n    type: 'other' as 'just-for-fun' | 'professional' | 'competitive' | 'other',\n    privacySetting: 'public' as 'public' | 'approval-required',\n    imageUrl: '',\n  });\n\n  // Image upload state\n  const [groupImages, setGroupImages] = useState<File[]>([]);\n  const [groupImagePreviews, setGroupImagePreviews] = useState<string[]>([]);\n\n  useEffect(() => {\n    if (groupId && user) {\n      loadGroup();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [groupId, user]);\n\n  const loadGroup = async () => {\n    try {\n      setIsLoading(true);\n      const groupData = await firebaseApi.group.getGroup(groupId);\n\n      if (!groupData) {\n        router.push('/groups');\n        return;\n      }\n\n      // Check if user is admin\n      if (!groupData.adminUserIds.includes(user!.id)) {\n        router.push(`/groups/${groupId}`);\n        return;\n      }\n\n      setGroup(groupData);\n      setFormData({\n        name: groupData.name,\n        description: groupData.description,\n        location: groupData.location || '',\n        category: groupData.category,\n        type: groupData.type,\n        privacySetting: groupData.privacySetting,\n        imageUrl: groupData.imageUrl || '',\n      });\n\n      // Set existing image as preview if it exists\n      if (groupData.imageUrl) {\n        setGroupImagePreviews([groupData.imageUrl]);\n      }\n    } catch (error) {\n      console.error('Error loading group:', error);\n      setError('Failed to load group');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!group || !user) return;\n\n    setIsSaving(true);\n    setError(null);\n\n    try {\n      // Upload new group image if provided\n      let imageUrl = formData.imageUrl;\n      if (groupImages.length > 0) {\n        try {\n          const imageFile = groupImages[0];\n          if (imageFile !== undefined) {\n            const result = await uploadImage(imageFile, 'group-images');\n            imageUrl = result.url;\n          }\n        } catch (uploadError) {\n          console.error('Error uploading group image:', uploadError);\n          setError(\n            uploadError instanceof Error\n              ? uploadError.message\n              : 'Failed to upload group image'\n          );\n          setIsSaving(false);\n          return;\n        }\n      }\n\n      const updateData: UpdateGroupData = {\n        name: formData.name,\n        description: formData.description,\n        location: formData.location || undefined,\n        category: formData.category,\n        type: formData.type,\n        privacySetting: formData.privacySetting,\n        imageUrl: imageUrl || undefined,\n      };\n\n      await firebaseApi.group.updateGroup(groupId, updateData);\n      router.push(`/groups/${groupId}`);\n    } catch (error) {\n      console.error('Error updating group:', error);\n      setError('Failed to update group. Please try again.');\n      setIsSaving(false);\n    }\n  };\n\n  const handleCancel = () => {\n    router.push(`/groups/${groupId}`);\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">\n            Please log in\n          </h1>\n          <p className=\"text-gray-600\">\n            You need to be logged in to edit groups.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"max-w-3xl mx-auto px-4 py-8\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-64 mb-6\"></div>\n            <div className=\"h-96 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!group) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"max-w-3xl mx-auto px-4 py-8\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">\n              Group not found\n            </h1>\n            <button\n              onClick={() => router.push('/groups')}\n              className=\"bg-[#007AFF] text-white px-4 py-2 rounded-lg hover:bg-[#0051D5]\"\n            >\n              Back to Groups\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n\n      <div className=\"max-w-3xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Edit Group</h1>\n        </div>\n\n        <form\n          onSubmit={handleSubmit}\n          className=\"bg-white rounded-lg border border-gray-200 p-8\"\n        >\n          {/* Image Upload */}\n          <div className=\"mb-8\">\n            <label className=\"block text-sm font-semibold text-gray-900 mb-2\">\n              Group Picture\n            </label>\n            <ImageUpload\n              singleImage={true}\n              maxSizeMB={5}\n              images={groupImages}\n              previewUrls={groupImagePreviews}\n              onImagesChange={(images, previews) => {\n                setGroupImages(images);\n                setGroupImagePreviews(previews);\n                // Clear the imageUrl from formData when user uploads a new image\n                if (images.length > 0) {\n                  setFormData({ ...formData, imageUrl: '' });\n                }\n              }}\n              placeholder=\"Upload group picture\"\n              disabled={isSaving}\n            />\n            <p className=\"text-xs text-gray-500 mt-2\">\n              Recommended size: 248×248 px (max 5MB)\n            </p>\n          </div>\n\n          <p className=\"text-sm text-gray-600 mb-6 italic\">\n            Fields marked with * are required\n          </p>\n\n          {/* Group Name */}\n          <div className=\"mb-6\">\n            <label\n              htmlFor=\"name\"\n              className=\"block text-sm font-semibold text-gray-900 mb-2\"\n            >\n              Group Name *\n            </label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              required\n              value={formData.name}\n              onChange={e => setFormData({ ...formData, name: e.target.value })}\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:border-transparent\"\n              placeholder=\"Enter group name\"\n            />\n          </div>\n\n          {/* Location */}\n          <div className=\"mb-6\">\n            <label\n              htmlFor=\"location\"\n              className=\"block text-sm font-semibold text-gray-900 mb-2\"\n            >\n              Location\n            </label>\n            <input\n              type=\"text\"\n              id=\"location\"\n              value={formData.location}\n              onChange={e =>\n                setFormData({ ...formData, location: e.target.value })\n              }\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:border-transparent\"\n              placeholder=\"Enter location\"\n            />\n          </div>\n\n          {/* Category */}\n          <div className=\"mb-6\">\n            <label\n              htmlFor=\"category\"\n              className=\"block text-sm font-semibold text-gray-900 mb-2\"\n            >\n              Category\n            </label>\n            <select\n              id=\"category\"\n              value={formData.category}\n              onChange={e =>\n                setFormData({ ...formData, category: e.target.value as any })\n              }\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:border-transparent bg-white\"\n            >\n              <option value=\"work\">Work</option>\n              <option value=\"study\">Study</option>\n              <option value=\"side-project\">Side Project</option>\n              <option value=\"learning\">Learning</option>\n              <option value=\"other\">Other</option>\n            </select>\n          </div>\n\n          {/* Type */}\n          <div className=\"mb-6\">\n            <label\n              htmlFor=\"type\"\n              className=\"block text-sm font-semibold text-gray-900 mb-2\"\n            >\n              Group Type\n            </label>\n            <select\n              id=\"type\"\n              value={formData.type}\n              onChange={e =>\n                setFormData({ ...formData, type: e.target.value as any })\n              }\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:border-transparent bg-white\"\n            >\n              <option value=\"just-for-fun\">Just For Fun</option>\n              <option value=\"professional\">Professional</option>\n              <option value=\"competitive\">Competitive</option>\n              <option value=\"other\">Other</option>\n            </select>\n          </div>\n\n          {/* Description */}\n          <div className=\"mb-8\">\n            <label\n              htmlFor=\"description\"\n              className=\"block text-sm font-semibold text-gray-900 mb-2\"\n            >\n              Description *\n            </label>\n            <textarea\n              id=\"description\"\n              required\n              value={formData.description}\n              onChange={e => {\n                // Limit to 4 lines (3 newlines)\n                const newlineCount = (e.target.value.match(/\\n/g) || []).length;\n                if (newlineCount <= 3) {\n                  setFormData({ ...formData, description: e.target.value });\n                }\n              }}\n              rows={4}\n              maxLength={200}\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:border-transparent resize-none\"\n              placeholder=\"Describe your group\"\n            />\n            <p className=\"text-xs text-gray-500 mt-1\">\n              {formData.description.length}/200 characters\n            </p>\n          </div>\n\n          {/* Error Message */}\n          {error && (\n            <div className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg\">\n              <p className=\"text-sm text-red-600\">{error}</p>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-4\">\n            <button\n              type=\"submit\"\n              disabled={isSaving}\n              className=\"px-6 py-2.5 bg-[#FC4C02] text-white font-medium rounded-md hover:bg-[#FC4C02]/90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isSaving ? 'Saving...' : 'Save Changes'}\n            </button>\n            <button\n              type=\"button\"\n              onClick={handleCancel}\n              disabled={isSaving}\n              className=\"px-6 py-2.5 text-gray-700 font-medium hover:text-gray-900 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              Cancel\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/groups/loading.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/groups/new/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/groups/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'MY_GROUPS_GRID_COLS' is assigned a value but never used.",
        "line": 39,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 39,
        "endColumn": 26
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useMemo has a missing dependency: 'hasActiveFilters'. Either include it or remove the dependency array.",
        "line": 102,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 102,
        "endColumn": 38,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [allPublicGroups, hasActiveFilters, searchFilters.category, searchFilters.location, searchFilters.name]",
            "fix": {
              "range": [2941, 2973],
              "text": "[allPublicGroups, hasActiveFilters, searchFilters.category, searchFilters.location, searchFilters.name]"
            }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport {\n  useUserGroups,\n  usePublicGroups,\n  useJoinGroup,\n} from '@/features/groups/hooks';\nimport Header from '@/components/HeaderComponent';\nimport MobileHeader from '@/components/MobileHeader';\nimport BottomNavigation from '@/components/BottomNavigation';\nimport GroupCard from '@/components/GroupCard';\nimport { GroupListItem } from '@/components/GroupListItem';\nimport { Group } from '@/types';\nimport {\n  Users,\n  Search,\n  ChevronLeft,\n  ChevronRight,\n  Loader2,\n  X,\n} from 'lucide-react';\nimport Link from 'next/link';\n\n// Category filter options\nconst categoryOptions = [\n  { value: '', label: 'All Categories' },\n  { value: 'fitness', label: 'Fitness' },\n  { value: 'study', label: 'Study' },\n  { value: 'work', label: 'Work' },\n  { value: 'health', label: 'Health' },\n  { value: 'other', label: 'Other' },\n];\n\n// Pagination and layout constants\nconst GROUPS_PER_PAGE = 10;\nconst SEARCH_RESULTS_LIMIT = 50;\nconst MY_GROUPS_GRID_COLS = {\n  mobile: 4,\n  tablet: 6,\n  desktop: 8,\n} as const;\n\nexport default function GroupsPage() {\n  const { user } = useAuth();\n  const [searchResults, setSearchResults] = useState<Group[]>([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [hasSearched, setHasSearched] = useState(false);\n  const [searchStatus, setSearchStatus] = useState('');\n\n  // Search filters\n  const [searchFilters, setSearchFilters] = useState({\n    name: '',\n    location: '',\n    category: '',\n  });\n\n  // Use new group hooks\n  const { data: userGroups = [], isLoading: isLoadingUserGroups } =\n    useUserGroups(user?.id || '', {\n      enabled: !!user?.id,\n    });\n\n  const { data: allPublicGroups = [], isLoading: isLoadingSuggested } =\n    usePublicGroups(undefined, {\n      enabled: !!user,\n    });\n\n  const joinGroupMutation = useJoinGroup();\n  const isLoading = isLoadingUserGroups || isLoadingSuggested;\n\n  // Client-side filtering for search\n  const hasActiveFilters = !!(\n    searchFilters.name ||\n    searchFilters.location ||\n    searchFilters.category\n  );\n\n  const filteredSearchResults = useMemo(() => {\n    if (!hasActiveFilters) return [];\n\n    return allPublicGroups\n      .filter(group => {\n        const matchesName =\n          searchFilters.name === '' ||\n          group.name.toLowerCase().includes(searchFilters.name.toLowerCase());\n        const matchesLocation =\n          searchFilters.location === '' ||\n          (group.location\n            ?.toLowerCase()\n            .includes(searchFilters.location.toLowerCase()) ??\n            false);\n        const matchesCategory =\n          searchFilters.category === '' ||\n          group.category === searchFilters.category;\n\n        return matchesName && matchesLocation && matchesCategory;\n      })\n      .slice(0, SEARCH_RESULTS_LIMIT);\n  }, [allPublicGroups, searchFilters]);\n\n  // Update search results when filtered results change\n  useEffect(() => {\n    if (hasSearched && filteredSearchResults.length >= 0) {\n      setSearchResults(filteredSearchResults);\n    }\n  }, [filteredSearchResults, hasSearched]);\n\n  /**\n   * Executes a group search based on current filter criteria.\n   * Updates search results state and resets pagination to first page.\n   */\n  const handleSearch = useCallback(async () => {\n    if (!user) return;\n\n    try {\n      setIsSearching(true);\n      setHasSearched(true);\n      setCurrentPage(0);\n      setSearchStatus('Searching for groups...');\n\n      // Use client-side filtered results\n      if (filteredSearchResults.length > 0) {\n        setSearchResults(filteredSearchResults);\n        setSearchStatus(\n          `Found ${filteredSearchResults.length} ${filteredSearchResults.length === 1 ? 'group' : 'groups'}`\n        );\n      } else {\n        setSearchStatus('No groups found');\n      }\n    } catch (error) {\n      console.error('Error searching groups:', error);\n      setSearchStatus('Error searching groups. Please try again.');\n    } finally {\n      setIsSearching(false);\n    }\n  }, [user, filteredSearchResults]);\n\n  /**\n   * Clears a specific search filter and updates the filter state.\n   * @param filterKey - The key of the filter to clear (name, location, or category)\n   */\n  const clearFilter = (filterKey: keyof typeof searchFilters) => {\n    setSearchFilters({ ...searchFilters, [filterKey]: '' });\n  };\n\n  /**\n   * Clears all active search filters and resets search state.\n   * Returns to default discover groups view.\n   */\n  const clearAllFilters = () => {\n    setSearchFilters({ name: '', location: '', category: '' });\n    setHasSearched(false);\n    setSearchResults([]);\n  };\n\n  // Memoized pagination calculations to avoid unnecessary recalculations\n  const { totalPages, paginatedGroups } = useMemo(() => {\n    const pages = Math.ceil(allPublicGroups.length / GROUPS_PER_PAGE);\n    const startIndex = currentPage * GROUPS_PER_PAGE;\n    const endIndex = startIndex + GROUPS_PER_PAGE;\n    const groups = allPublicGroups.slice(startIndex, endIndex);\n\n    return {\n      totalPages: pages,\n      paginatedGroups: groups,\n    };\n  }, [allPublicGroups, currentPage]);\n\n  /**\n   * Advances to the next page of groups if available.\n   */\n  const goToNextPage = () => {\n    if (currentPage < totalPages - 1) {\n      setCurrentPage(prev => prev + 1);\n    }\n  };\n\n  /**\n   * Returns to the previous page of groups if available.\n   */\n  const goToPreviousPage = () => {\n    if (currentPage > 0) {\n      setCurrentPage(prev => prev - 1);\n    }\n  };\n\n  /**\n   * Handles joining a group for the current user.\n   * Uses the new joinGroupMutation hook for automatic cache invalidation.\n   * @param groupId - The ID of the group to join\n   * @param e - The click event (prevented to avoid navigation)\n   */\n  const handleJoinGroup = async (groupId: string, e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (!user) return;\n\n    try {\n      await joinGroupMutation.mutateAsync({ groupId, userId: user.id });\n      // Automatic cache invalidation handled by mutation\n    } catch (error) {\n      console.error('Failed to join group:', error);\n    }\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">\n            Please log in to view groups\n          </h1>\n          <p className=\"text-gray-600\">\n            You need to be logged in to join groups and challenges.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"hidden md:block\">\n        <Header />\n      </div>\n      <MobileHeader title=\"Groups\" />\n\n      <div className=\"max-w-5xl mx-auto px-4 md:px-6 py-4\">\n        {/* Page Header */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-xl md:text-2xl font-bold text-gray-900\">\n              Groups\n            </h1>\n          </div>\n          <Link\n            href=\"/groups/new\"\n            aria-label=\"Create a new group\"\n            className=\"min-h-[44px] px-4 py-2 md:px-6 md:py-2.5 bg-[#007AFF] text-white text-sm font-semibold rounded-lg hover:bg-[#0051D5] transition-all duration-200 inline-flex items-center justify-center focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2\"\n          >\n            Create a Group\n          </Link>\n        </div>\n\n        {/* My Groups Section */}\n        {isLoading ? (\n          <div className=\"mb-8\">\n            <div className=\"mb-4\">\n              <div className=\"h-6 bg-gray-200 rounded w-32 animate-pulse\"></div>\n            </div>\n            <div className=\"grid grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-3\">\n              {[...Array(8)].map((_, i) => (\n                <div key={i} className=\"flex flex-col items-center text-center\">\n                  <div className=\"mb-3 w-16 h-16 bg-gray-200 rounded-full animate-pulse\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-16 animate-pulse\"></div>\n                </div>\n              ))}\n            </div>\n          </div>\n        ) : (\n          <div className=\"mb-8\">\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">\n              My Groups\n            </h2>\n            {userGroups.length > 0 ? (\n              <div className=\"grid grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-3\">\n                {userGroups.map(group => (\n                  <GroupCard\n                    key={group.id}\n                    group={group}\n                    currentUserId={user?.id}\n                    isJoined={true}\n                  />\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12 px-4 bg-white border border-gray-200 rounded-lg\">\n                <div className=\"max-w-md mx-auto\">\n                  <Users\n                    className=\"w-16 h-16 text-gray-300 mx-auto mb-4\"\n                    aria-hidden=\"true\"\n                  />\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n                    You haven't joined any groups yet\n                  </h3>\n                  <p className=\"text-gray-600 mb-6\">\n                    Join groups to connect with like-minded people, participate\n                    in challenges, and stay motivated!\n                  </p>\n                  <button\n                    onClick={() => {\n                      const discoverSection =\n                        document.getElementById('discover-groups');\n                      discoverSection?.scrollIntoView({ behavior: 'smooth' });\n                    }}\n                    aria-label=\"Scroll to discover groups section\"\n                    className=\"min-h-[44px] px-6 py-2.5 bg-[#007AFF] text-white text-sm font-semibold rounded-lg hover:bg-[#0051D5] transition-all duration-200 inline-flex items-center justify-center gap-2 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2\"\n                  >\n                    <Search className=\"w-4 h-4\" aria-hidden=\"true\" />\n                    Explore Groups Below\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Screen reader announcements for search status */}\n        <div\n          className=\"sr-only\"\n          role=\"status\"\n          aria-live=\"polite\"\n          aria-atomic=\"true\"\n        >\n          {searchStatus}\n        </div>\n\n        {/* Search Section */}\n        <div className=\"mb-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-3\">\n            <input\n              type=\"text\"\n              placeholder=\"Group Name\"\n              aria-label=\"Search by group name\"\n              value={searchFilters.name}\n              onChange={e =>\n                setSearchFilters({ ...searchFilters, name: e.target.value })\n              }\n              className=\"min-h-[44px] px-4 py-2 border border-gray-300 rounded-lg focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2 bg-white\"\n            />\n            <input\n              type=\"text\"\n              placeholder=\"Location\"\n              aria-label=\"Filter by location\"\n              value={searchFilters.location}\n              onChange={e =>\n                setSearchFilters({ ...searchFilters, location: e.target.value })\n              }\n              className=\"min-h-[44px] px-4 py-2 border border-gray-300 rounded-lg focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2 bg-white\"\n            />\n            <select\n              value={searchFilters.category}\n              onChange={e =>\n                setSearchFilters({ ...searchFilters, category: e.target.value })\n              }\n              aria-label=\"Filter by category\"\n              className=\"min-h-[44px] px-4 py-2 border border-gray-300 rounded-lg focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2 bg-white\"\n            >\n              {categoryOptions.map(option => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n            <button\n              onClick={handleSearch}\n              disabled={isSearching}\n              aria-label={\n                isSearching ? 'Searching for groups' : 'Search groups'\n              }\n              className=\"min-h-[44px] px-6 py-2 bg-[#007AFF] text-white text-sm font-semibold rounded-lg hover:bg-[#0051D5] transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2\"\n            >\n              {isSearching ? (\n                <>\n                  <Loader2\n                    className=\"w-4 h-4 animate-spin\"\n                    aria-hidden=\"true\"\n                  />\n                  Searching...\n                </>\n              ) : (\n                <>\n                  <Search className=\"w-4 h-4\" aria-hidden=\"true\" />\n                  Search\n                </>\n              )}\n            </button>\n          </div>\n\n          {/* Active Filters Display */}\n          {hasActiveFilters && (\n            <div className=\"mt-3 flex flex-wrap items-center gap-2\">\n              <span className=\"text-sm text-gray-600 font-medium\">\n                Active filters:\n              </span>\n              {searchFilters.name && (\n                <span className=\"inline-flex items-center gap-1.5 px-3 py-1.5 bg-[#007AFF] text-white text-xs font-semibold rounded-full transition-all duration-200 hover:bg-[#0051D5]\">\n                  Name: {searchFilters.name}\n                  <button\n                    onClick={() => clearFilter('name')}\n                    aria-label=\"Remove name filter\"\n                    className=\"hover:bg-white/20 rounded-full p-0.5 transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white\"\n                  >\n                    <X className=\"w-3 h-3\" aria-hidden=\"true\" />\n                  </button>\n                </span>\n              )}\n              {searchFilters.location && (\n                <span className=\"inline-flex items-center gap-1.5 px-3 py-1.5 bg-[#007AFF] text-white text-xs font-semibold rounded-full transition-all duration-200 hover:bg-[#0051D5]\">\n                  Location: {searchFilters.location}\n                  <button\n                    onClick={() => clearFilter('location')}\n                    aria-label=\"Remove location filter\"\n                    className=\"hover:bg-white/20 rounded-full p-0.5 transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white\"\n                  >\n                    <X className=\"w-3 h-3\" aria-hidden=\"true\" />\n                  </button>\n                </span>\n              )}\n              {searchFilters.category && (\n                <span className=\"inline-flex items-center gap-1.5 px-3 py-1.5 bg-[#007AFF] text-white text-xs font-semibold rounded-full transition-all duration-200 hover:bg-[#0051D5]\">\n                  Category:{' '}\n                  {\n                    categoryOptions.find(\n                      opt => opt.value === searchFilters.category\n                    )?.label\n                  }\n                  <button\n                    onClick={() => clearFilter('category')}\n                    aria-label=\"Remove category filter\"\n                    className=\"hover:bg-white/20 rounded-full p-0.5 transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-white\"\n                  >\n                    <X className=\"w-3 h-3\" aria-hidden=\"true\" />\n                  </button>\n                </span>\n              )}\n              <button\n                onClick={clearAllFilters}\n                className=\"text-xs text-gray-500 hover:text-gray-700 font-medium underline transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2 rounded px-1\"\n                aria-label=\"Clear all filters\"\n              >\n                Clear all\n              </button>\n            </div>\n          )}\n        </div>\n\n        {/* Search Results or Suggested Groups */}\n        {isSearching ? (\n          <div>\n            <div className=\"mb-4\">\n              <div className=\"h-6 bg-gray-200 rounded w-40 animate-pulse\"></div>\n            </div>\n            <div className=\"space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"py-3\">\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-12 h-12 bg-gray-200 rounded-full animate-pulse flex-shrink-0\"></div>\n                    <div className=\"flex-1 min-w-0 space-y-2\">\n                      <div className=\"h-5 bg-gray-200 rounded w-48 animate-pulse\"></div>\n                      <div className=\"h-4 bg-gray-200 rounded w-full animate-pulse\"></div>\n                      <div className=\"h-4 bg-gray-200 rounded w-3/4 animate-pulse\"></div>\n                      <div className=\"h-3 bg-gray-200 rounded w-32 animate-pulse\"></div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        ) : hasSearched && searchResults.length > 0 ? (\n          <div>\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">\n              Search Results\n            </h2>\n            <div className=\"space-y-4\">\n              {searchResults.map(group => {\n                const isJoined = userGroups.some(g => g.id === group.id);\n                return (\n                  <GroupListItem\n                    key={group.id}\n                    group={group}\n                    isJoined={isJoined}\n                    isJoining={joinGroupMutation.isPending}\n                    onJoinGroup={handleJoinGroup}\n                  />\n                );\n              })}\n            </div>\n          </div>\n        ) : hasSearched && !isSearching && searchResults.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Users\n              className=\"w-16 h-16 text-gray-300 mx-auto mb-4\"\n              aria-hidden=\"true\"\n            />\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">\n              No groups found\n            </h2>\n            <p className=\"text-gray-600\">Try adjusting your search filters</p>\n          </div>\n        ) : !hasSearched ? (\n          allPublicGroups.length > 0 ? (\n            <div id=\"discover-groups\">\n              <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                Discover Groups\n              </h2>\n              <div className=\"space-y-4\">\n                {paginatedGroups.map(group => {\n                  const isJoined = userGroups.some(g => g.id === group.id);\n                  return (\n                    <GroupListItem\n                      key={group.id}\n                      group={group}\n                      isJoined={isJoined}\n                      isJoining={joinGroupMutation.isPending}\n                      onJoinGroup={handleJoinGroup}\n                    />\n                  );\n                })}\n              </div>\n\n              {/* Pagination Controls */}\n              {allPublicGroups.length > GROUPS_PER_PAGE && (\n                <div className=\"mt-4 flex items-center justify-between\">\n                  <button\n                    onClick={goToPreviousPage}\n                    disabled={currentPage === 0}\n                    className=\"min-h-[44px] min-w-[44px] p-2 rounded-lg hover:bg-gray-100 disabled:opacity-30 disabled:cursor-not-allowed transition-all duration-200 flex items-center justify-center focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2\"\n                    aria-label=\"Previous page\"\n                  >\n                    <ChevronLeft\n                      className=\"w-5 h-5 text-gray-700\"\n                      aria-hidden=\"true\"\n                    />\n                  </button>\n\n                  <span className=\"text-sm text-gray-600 font-medium\">\n                    Page {currentPage + 1} of {totalPages}\n                  </span>\n\n                  <button\n                    onClick={goToNextPage}\n                    disabled={currentPage >= totalPages - 1}\n                    className=\"min-h-[44px] min-w-[44px] p-2 rounded-lg hover:bg-gray-100 disabled:opacity-30 disabled:cursor-not-allowed transition-all duration-200 flex items-center justify-center focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2\"\n                    aria-label=\"Next page\"\n                  >\n                    <ChevronRight\n                      className=\"w-5 h-5 text-gray-700\"\n                      aria-hidden=\"true\"\n                    />\n                  </button>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <Users\n                className=\"w-16 h-16 text-gray-300 mx-auto mb-4\"\n                aria-hidden=\"true\"\n              />\n              <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">\n                No groups available\n              </h2>\n              <p className=\"text-gray-600\">Be the first to create a group!</p>\n            </div>\n          )\n        ) : null}\n      </div>\n\n      {/* Bottom padding for mobile navigation */}\n      <div className=\"h-20 md:hidden\" />\n\n      <BottomNavigation />\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/help/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/invite/group/[groupId]/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'groupIcon' is assigned a value but never used.",
        "line": 22,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'baseUrl' is assigned a value but never used.",
        "line": 23,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 18
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Metadata } from 'next';\nimport { firebaseApi } from '@/lib/api';\nimport GroupInviteLanding from '@/components/GroupInviteLanding';\n\ntype Props = {\n  params: Promise<{ groupId: string }>;\n};\n\nexport async function generateMetadata({ params }: Props): Promise<Metadata> {\n  try {\n    const { groupId } = await params;\n    // Fetch group data for metadata\n    const group = await firebaseApi.group.getGroup(groupId);\n\n    if (!group) {\n      return {\n        title: 'Group Not Found - Ambira',\n        description: 'Join Ambira to track your productivity with friends',\n      };\n    }\n\n    const groupIcon = group.imageUrl || '💼';\n    const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || 'https://ambira.com';\n\n    return {\n      title: `Join ${group.name} on Ambira`,\n      description: `${group.description.slice(0, 160)}`,\n      openGraph: {\n        title: `Join ${group.name} on Ambira`,\n        description: group.description,\n        images: group.imageUrl ? [group.imageUrl] : [],\n        siteName: 'Ambira',\n        type: 'website',\n      },\n      twitter: {\n        card: 'summary_large_image',\n        title: `Join ${group.name} on Ambira`,\n        description: group.description,\n        images: group.imageUrl ? [group.imageUrl] : [],\n      },\n    };\n  } catch (error) {\n    console.error('Error generating metadata:', error);\n    return {\n      title: 'Join Group on Ambira',\n      description: 'Join Ambira to track your productivity with friends',\n    };\n  }\n}\n\nexport default async function GroupInvitePage({ params }: Props) {\n  const { groupId } = await params;\n  return <GroupInviteLanding groupId={groupId} />;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/layout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/loading.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/login/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/not-found.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/notifications/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'MobileHeader' is defined but never used.",
        "line": 26,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'onMarkRead' is defined but never used.",
        "line": 36,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isLoading' is assigned a value but never used.",
        "line": 215,
        "column": 37,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 215,
        "endColumn": 46
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport {\n  ArrowLeft,\n  Trash2,\n  UserPlus,\n  Heart,\n  MessageCircle,\n  Reply,\n  AtSign,\n  Users,\n  Trophy,\n  Bell,\n} from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport Image from 'next/image';\nimport { useAuth } from '@/hooks/useAuth';\nimport {\n  useNotifications,\n  useUnreadCount,\n  useMarkNotificationRead,\n  useMarkAllNotificationsRead,\n  useDeleteNotification,\n} from '@/hooks/useNotifications';\nimport MobileHeader from '@/components/MobileHeader';\nimport Header from '@/components/HeaderComponent';\nimport BottomNavigation from '@/components/BottomNavigation';\nimport { Notification } from '@/types';\nimport { formatDistanceToNow } from 'date-fns';\n\n// Swipeable notification item component\nfunction SwipeableNotificationItem({\n  notification,\n  onDelete,\n  onMarkRead,\n  onClick,\n}: {\n  notification: Notification;\n  onDelete: (id: string) => void;\n  onMarkRead: (id: string) => void;\n  onClick: (notification: Notification) => void;\n}) {\n  const [touchStart, setTouchStart] = useState(0);\n  const [touchEnd, setTouchEnd] = useState(0);\n  const [swipeOffset, setSwipeOffset] = useState(0);\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  const minSwipeDistance = 80;\n  const deleteThreshold = 120;\n\n  const onTouchStart = (e: React.TouchEvent) => {\n    setTouchEnd(0);\n    const touch = e.targetTouches[0];\n    if (touch) {\n      setTouchStart(touch.clientX);\n    }\n  };\n\n  const onTouchMove = (e: React.TouchEvent) => {\n    const touch = e.targetTouches[0];\n    if (!touch) return;\n\n    setTouchEnd(touch.clientX);\n    const distance = touchStart - touch.clientX;\n    if (distance > 0) {\n      setSwipeOffset(Math.min(distance, deleteThreshold + 20));\n    }\n  };\n\n  const onTouchEnd = () => {\n    if (!touchStart || !touchEnd) return;\n\n    const distance = touchStart - touchEnd;\n    const isLeftSwipe = distance > minSwipeDistance;\n\n    if (isLeftSwipe && distance >= deleteThreshold) {\n      // Delete if swiped past threshold\n      handleDelete();\n    } else if (isLeftSwipe && distance >= minSwipeDistance) {\n      // Show delete button\n      setSwipeOffset(deleteThreshold);\n    } else {\n      // Reset\n      setSwipeOffset(0);\n    }\n  };\n\n  const handleDelete = async () => {\n    setIsDeleting(true);\n    setTimeout(() => {\n      onDelete(notification.id);\n    }, 200);\n  };\n\n  const handleClick = () => {\n    if (swipeOffset === 0 && !isDeleting) {\n      onClick(notification);\n    }\n  };\n\n  const getNotificationIcon = (type: Notification['type']) => {\n    const iconClass = 'w-5 h-5 text-gray-600';\n\n    switch (type) {\n      case 'follow':\n        return <UserPlus className={iconClass} />;\n      case 'support':\n        return <Heart className={iconClass} />;\n      case 'comment':\n        return <MessageCircle className={iconClass} />;\n      case 'reply':\n        return <Reply className={iconClass} />;\n      case 'mention':\n        return <AtSign className={iconClass} />;\n      case 'group':\n        return <Users className={iconClass} />;\n      case 'challenge':\n        return <Trophy className={iconClass} />;\n      default:\n        return <Bell className={iconClass} />;\n    }\n  };\n\n  return (\n    <div className=\"relative overflow-hidden\">\n      {/* Delete button background */}\n      <div\n        className=\"absolute right-0 top-0 bottom-0 flex items-center justify-end bg-red-500 px-6\"\n        style={{\n          width: `${Math.max(swipeOffset, 0)}px`,\n          transition: isDeleting\n            ? 'none'\n            : swipeOffset === deleteThreshold\n              ? 'width 0.2s ease-out'\n              : 'none',\n        }}\n      >\n        <button\n          onClick={handleDelete}\n          className=\"text-white flex flex-col items-center gap-1\"\n        >\n          <Trash2 className=\"w-6 h-6\" />\n          <span className=\"text-xs font-medium\">Delete</span>\n        </button>\n      </div>\n\n      {/* Notification content */}\n      <div\n        onTouchStart={onTouchStart}\n        onTouchMove={onTouchMove}\n        onTouchEnd={onTouchEnd}\n        onClick={handleClick}\n        className={`border-b border-gray-200 transition-all ${\n          isDeleting ? 'opacity-0 translate-x-full' : ''\n        } ${!notification.isRead ? 'bg-gray-100' : 'bg-white'}`}\n        style={{\n          transform: `translateX(-${swipeOffset}px)`,\n          transition: isDeleting\n            ? 'all 0.3s ease-out'\n            : swipeOffset === deleteThreshold || swipeOffset === 0\n              ? 'transform 0.2s ease-out'\n              : 'none',\n        }}\n      >\n        <div className=\"flex items-start gap-4 p-4\">\n          {/* Avatar / Icon */}\n          <div className=\"flex-shrink-0\">\n            {notification.actorProfilePicture ? (\n              <Image\n                src={notification.actorProfilePicture}\n                alt={notification.actorName ?? ''}\n                width={48}\n                height={48}\n                className=\"w-12 h-12 rounded-full object-cover\"\n              />\n            ) : (\n              <div className=\"w-12 h-12 bg-gray-200 rounded-full flex items-center justify-center\">\n                {getNotificationIcon(notification.type)}\n              </div>\n            )}\n          </div>\n\n          {/* Content */}\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-start justify-between gap-2\">\n              <div className=\"flex-1\">\n                <p\n                  className={`text-base text-gray-900 ${!notification.isRead ? 'font-semibold' : 'font-medium'}`}\n                >\n                  {notification.title}\n                </p>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  {notification.message}\n                </p>\n                {notification.createdAt && (\n                  <p className=\"text-xs text-gray-500 mt-2\">\n                    {formatDistanceToNow(notification.createdAt, {\n                      addSuffix: true,\n                    })}\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function NotificationsPage() {\n  const router = useRouter();\n  const { user } = useAuth();\n  const { data: notifications = [], isLoading } = useNotifications({\n    realtime: true,\n  });\n  const unreadCount = useUnreadCount();\n  const markAsReadMutation = useMarkNotificationRead();\n  const markAllAsReadMutation = useMarkAllNotificationsRead();\n  const deleteNotificationMutation = useDeleteNotification();\n\n  const handleNotificationClick = (notification: Notification) => {\n    // Mark as read\n    if (!notification.isRead) {\n      markAsReadMutation.mutate(notification.id);\n    }\n\n    // Navigate to link if available\n    if (notification.linkUrl) {\n      router.push(notification.linkUrl);\n    }\n  };\n\n  const handleDelete = (id: string) => {\n    deleteNotificationMutation.mutate(id);\n  };\n\n  const handleMarkRead = (id: string) => {\n    markAsReadMutation.mutate(id);\n  };\n\n  const handleMarkAllRead = () => {\n    markAllAsReadMutation.mutate();\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-white flex items-center justify-center\">\n        <div className=\"text-center\">\n          <p className=\"text-gray-600\">Please log in to view notifications</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-white flex flex-col\">\n      {/* Desktop Header */}\n      <div className=\"hidden md:block\">\n        <Header />\n      </div>\n\n      {/* Mobile Header */}\n      <div className=\"md:hidden bg-white border-b border-gray-200 sticky top-0 z-10\">\n        <div className=\"flex items-center justify-between px-4 py-3\">\n          <button\n            onClick={() => router.back()}\n            className=\"p-2 -ml-2 hover:bg-gray-100 rounded-lg transition-colors\"\n          >\n            <ArrowLeft className=\"w-6 h-6 text-gray-700\" />\n          </button>\n          <h1 className=\"text-lg font-bold text-gray-900\">Notifications</h1>\n          <div className=\"w-10\" /> {/* Spacer for centering */}\n        </div>\n      </div>\n\n      {/* Desktop content wrapper */}\n      <div className=\"hidden md:flex flex-1 items-start justify-center pt-24 pb-8\">\n        <div className=\"w-full max-w-2xl px-4\">\n          <div className=\"bg-white rounded-lg border border-gray-200 shadow-sm\">\n            <div className=\"p-6 border-b border-gray-200\">\n              <h1 className=\"text-2xl font-bold text-gray-900\">\n                Notifications\n              </h1>\n              <p className=\"text-sm text-gray-600 mt-1\">\n                {unreadCount > 0\n                  ? `${unreadCount} unread notification${unreadCount !== 1 ? 's' : ''}`\n                  : 'All caught up!'}\n              </p>\n            </div>\n\n            {/* Desktop notifications list */}\n            <div className=\"divide-y divide-gray-200\">\n              {notifications.length === 0 ? (\n                <div className=\"p-12 text-center\">\n                  <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <span className=\"text-3xl\">🔔</span>\n                  </div>\n                  <p className=\"text-gray-600\">No notifications yet</p>\n                </div>\n              ) : (\n                notifications.map(notification => (\n                  <SwipeableNotificationItem\n                    key={notification.id}\n                    notification={notification}\n                    onDelete={handleDelete}\n                    onMarkRead={handleMarkRead}\n                    onClick={handleNotificationClick}\n                  />\n                ))\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Action Buttons - Sticky at top on mobile */}\n      {notifications.length > 0 && (\n        <div className=\"md:hidden bg-gray-50 border-b border-gray-200 px-4 py-3 flex items-center justify-between sticky top-[57px] z-10\">\n          <span className=\"text-sm text-gray-600\">\n            {unreadCount > 0 ? `${unreadCount} unread` : 'All caught up!'}\n          </span>\n          {unreadCount > 0 && (\n            <button\n              onClick={handleMarkAllRead}\n              className=\"text-[#007AFF] font-semibold text-sm hover:text-[#0051D5] transition-colors\"\n            >\n              Mark all read\n            </button>\n          )}\n        </div>\n      )}\n\n      {/* Mobile Notifications List */}\n      <div className=\"md:hidden flex-1 overflow-y-auto\">\n        {notifications.length === 0 ? (\n          <div className=\"flex flex-col items-center justify-center py-20 px-4\">\n            <div className=\"w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mb-4\">\n              <span className=\"text-4xl\">🔔</span>\n            </div>\n            <p className=\"text-lg font-semibold text-gray-900 mb-2\">\n              No notifications\n            </p>\n            <p className=\"text-gray-600 text-center\">\n              When you get notifications, they'll show up here\n            </p>\n          </div>\n        ) : (\n          <div>\n            {notifications.map(notification => (\n              <SwipeableNotificationItem\n                key={notification.id}\n                notification={notification}\n                onDelete={handleDelete}\n                onMarkRead={handleMarkRead}\n                onClick={handleNotificationClick}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Bottom padding for mobile navigation */}\n      <div className=\"h-20 md:hidden\" />\n\n      <BottomNavigation />\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/post/[id]/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'BarChart3' is defined but never used.",
        "line": 12,
        "column": 49,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 12,
        "endColumn": 58
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Users' is defined but never used.",
        "line": 12,
        "column": 60,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 12,
        "endColumn": 65
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 46,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 46,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1669, 1672], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1669, 1672], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 65,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 65,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2326, 2329], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2326, 2329], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'loadComments' and 'loadSessionData'. Either include them or remove the dependency array.",
        "line": 39,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 39,
        "endColumn": 24,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [activityId, loadComments, loadSessionData, user]",
            "fix": {
              "range": [1400, 1418],
              "text": "[activityId, loadComments, loadSessionData, user]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '@/hooks/useAuth';\nimport { ProtectedRoute } from '@/components/ProtectedRoute';\nimport Header from '@/components/HeaderComponent';\nimport { SessionWithDetails, CommentWithDetails } from '@/types';\nimport { firebaseApi } from '@/lib/api';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { Heart, MessageCircle, Eye, TrendingUp, BarChart3, Users } from 'lucide-react';\n\ntype ActivityTab = 'overview' | 'comments';\n\ninterface ActivityDetailPageProps {\n  params: Promise<{\n    id: string;\n  }>;\n}\n\nfunction ActivityDetailContent({ activityId }: { activityId: string }) {\n  const router = useRouter();\n  const { user } = useAuth();\n  const [session, setSession] = useState<SessionWithDetails | null>(null);\n  const [comments, setComments] = useState<CommentWithDetails[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState<ActivityTab>('overview');\n  const [isSupporting, setIsSupporting] = useState(false);\n  const [newComment, setNewComment] = useState('');\n  const [isPostingComment, setIsPostingComment] = useState(false);\n\n  useEffect(() => {\n    if (activityId && user) {\n      loadSessionData();\n      loadComments();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activityId, user]);\n\n  const loadSessionData = async () => {\n    try {\n      setIsLoading(true);\n      const sessionData = await firebaseApi.session.getSessionWithDetails(activityId);\n      setSession(sessionData as unknown as SessionWithDetails);\n    } catch (error: any) {\n      const isPermissionError = error?.message?.includes('permission') || error?.message?.includes('Permission');\n      const isNotFound = error?.message?.includes('not found') || error?.message?.includes('Not found');\n\n      if (isPermissionError || isNotFound) {\n        setSession(null);\n      } else {\n        console.error('[Activity Detail] Unexpected error:', error);\n        setSession(null);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadComments = async () => {\n    try {\n      const response = await firebaseApi.comment.getSessionComments(activityId);\n      setComments(response.comments);\n    } catch (error: any) {\n      const isPermissionError = error?.message?.includes('permission') || error?.message?.includes('Permission');\n      if (!isPermissionError) {\n        console.error('Error loading comments:', error);\n      }\n    }\n  };\n\n  const handleSupport = async () => {\n    if (!session || isSupporting) return;\n\n    try {\n      setIsSupporting(true);\n      if (session.isSupported) {\n        await firebaseApi.post.removeSupportFromSession(session.id);\n      } else {\n        await firebaseApi.post.supportSession(session.id);\n      }\n      await loadSessionData();\n    } catch (error) {\n      console.error('Error toggling support:', error);\n    } finally {\n      setIsSupporting(false);\n    }\n  };\n\n  const handlePostComment = async () => {\n    if (!newComment.trim() || isPostingComment) return;\n\n    try {\n      setIsPostingComment(true);\n      await firebaseApi.comment.createComment({\n        sessionId: activityId,\n        content: newComment.trim(),\n      });\n      setNewComment('');\n      await loadComments();\n      await loadSessionData();\n    } catch (error) {\n      console.error('Error posting comment:', error);\n    } finally {\n      setIsPostingComment(false);\n    }\n  };\n\n  const formatTime = (seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    }\n    return `${minutes}m`;\n  };\n\n  const formatDate = (date: Date): string => {\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  };\n\n  const formatTimeAgo = (date: Date): string => {\n    const now = new Date();\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    const activityDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n\n    // Format time as \"h:mm am/pm\"\n    const timeStr = new Date(date).toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n\n    // Check if today\n    if (activityDate.getTime() === today.getTime()) {\n      return `Today at ${timeStr}`;\n    }\n\n    // Check if yesterday\n    if (activityDate.getTime() === yesterday.getTime()) {\n      return `Yesterday at ${timeStr}`;\n    }\n\n    // Otherwise show full date: \"Month Day, Year at h:mm am/pm\"\n    const dateStr = new Date(date).toLocaleDateString('en-US', {\n      month: 'long',\n      day: 'numeric',\n      year: 'numeric'\n    });\n\n    return `${dateStr} at ${timeStr}`;\n  };\n\n  // Calculate engagement metrics (X-like analytics)\n  const totalEngagements = (session?.supportCount || 0) + (session?.commentCount || 0);\n  const impressions = 0; // Placeholder - would need to implement view tracking\n  const engagementRate = impressions > 0 ? ((totalEngagements / impressions) * 100).toFixed(1) : '0.0';\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Please log in to view activities</h1>\n          <p className=\"text-gray-600\">You need to be logged in to view activity details.</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 py-6\">\n          <div className=\"animate-pulse space-y-6\">\n            <div className=\"h-32 bg-gray-200 rounded-xl\"></div>\n            <div className=\"h-48 bg-gray-200 rounded-xl\"></div>\n            <div className=\"h-96 bg-gray-200 rounded-xl\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!session) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"max-w-4xl mx-auto px-4 py-6\">\n          <div className=\"text-center py-12\">\n            <div className=\"mb-4\">\n              <div className=\"w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <svg className=\"w-8 h-8 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\" />\n                </svg>\n              </div>\n            </div>\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Unable to view activity</h1>\n            <p className=\"text-gray-600 mb-6 max-w-md mx-auto\">\n              This activity doesn't exist, has been deleted, or is set to private.\n            </p>\n            <button\n              onClick={() => router.push('/')}\n              className=\"bg-[#007AFF] text-white px-6 py-2.5 rounded-lg hover:bg-[#0051D5] transition-colors\"\n            >\n              Back to Feed\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 py-8\">\n        {/* Activity Header Card */}\n        <div className=\"bg-white rounded-xl border border-gray-200 mb-6 overflow-hidden\">\n          {/* User Info Bar */}\n          <div className=\"px-6 pt-6 pb-4 border-b border-gray-100\">\n            <Link\n              href={`/profile/${session.user.username}`}\n              className=\"flex items-center gap-3 hover:opacity-80 transition-opacity w-fit\"\n            >\n              {session.user.profilePicture ? (\n                <div className=\"w-12 h-12 rounded-full overflow-hidden ring-2 ring-gray-100\">\n                  <Image\n                    src={session.user.profilePicture}\n                    alt={session.user.name}\n                    width={48}\n                    height={48}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n              ) : (\n                <div className=\"w-12 h-12 rounded-full bg-gradient-to-br from-[#FC4C02] to-[#FC4C02]/80 flex items-center justify-center ring-2 ring-gray-100\">\n                  <span className=\"text-white font-semibold text-lg\">\n                    {session.user.name.charAt(0).toUpperCase()}\n                  </span>\n                </div>\n              )}\n              <div>\n                <div className=\"font-semibold text-gray-900\">{session.user.name}</div>\n                <div className=\"text-sm text-gray-500\">@{session.user.username}</div>\n              </div>\n            </Link>\n          </div>\n\n          {/* Activity Content */}\n          <div className=\"px-6 py-6\">\n            {/* Activity Badge */}\n            <Link\n              href={`/activities/${session.activityId}`}\n              className=\"inline-flex items-center gap-2 px-3 py-1.5 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors mb-4\"\n            >\n              <span className=\"text-xl\">{session.activity.icon || '📊'}</span>\n              <span className=\"text-sm font-medium text-gray-900\">\n                {session.activity.name}\n              </span>\n            </Link>\n\n            {/* Title & Description */}\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-3\">{session.title}</h1>\n            {session.description && (\n              <p className=\"text-gray-700 text-lg mb-4 whitespace-pre-line\">{session.description}</p>\n            )}\n\n            {/* Duration & Date */}\n            <div className=\"flex items-center gap-4 text-gray-500 text-sm mb-6\">\n              <span className=\"font-medium text-gray-900\">{formatTime(session.duration)}</span>\n              <span>•</span>\n              <span>{formatTimeAgo(session.createdAt)}</span>\n              {session.showStartTime && (\n                <>\n                  <span>•</span>\n                  <span>\n                    {new Date(session.startTime).toLocaleTimeString('en-US', {\n                      hour: 'numeric',\n                      minute: '2-digit',\n                    })}\n                  </span>\n                </>\n              )}\n            </div>\n\n            {/* Engagement Stats Bar */}\n            <div className=\"flex items-center gap-6 text-gray-600 text-sm border-t border-gray-100 pt-4\">\n              <button className=\"flex items-center gap-2 hover:text-gray-900 transition-colors\">\n                <MessageCircle className=\"w-4 h-4\" />\n                <span>{session.commentCount}</span>\n              </button>\n              <button className=\"flex items-center gap-2 hover:text-gray-900 transition-colors\">\n                <Heart className={`w-4 h-4 ${session.isSupported ? 'fill-red-500 text-red-500' : ''}`} />\n                <span>{session.supportCount}</span>\n              </button>\n              <div className=\"flex items-center gap-2\">\n                <Eye className=\"w-4 h-4\" />\n                <span>{impressions}</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"px-6 pb-6 flex gap-3\">\n            <button\n              onClick={handleSupport}\n              disabled={isSupporting}\n              className={`flex-1 flex items-center justify-center gap-2 px-4 py-3 rounded-xl transition-all font-medium ${\n                session.isSupported\n                  ? 'bg-red-50 text-red-600 hover:bg-red-100 border border-red-200'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200 border border-gray-200'\n              }`}\n            >\n              <Heart className={`w-5 h-5 ${session.isSupported ? 'fill-current' : ''}`} />\n              <span>{session.isSupported ? 'Supported' : 'Support'}</span>\n            </button>\n            <button\n              onClick={() => setActiveTab('comments')}\n              className=\"flex-1 flex items-center justify-center gap-2 px-4 py-3 bg-[#007AFF] text-white rounded-xl hover:bg-[#0051D5] transition-colors font-medium border border-[#007AFF]\"\n            >\n              <MessageCircle className=\"w-5 h-5\" />\n              <span>Comment</span>\n            </button>\n          </div>\n        </div>\n\n        {/* Tabs */}\n        <div className=\"border-b border-gray-200 mb-6 bg-white rounded-t-xl\">\n          <nav className=\"flex gap-8 px-6\" aria-label=\"Activity tabs\">\n            <button\n              onClick={() => setActiveTab('overview')}\n              className={`py-4 px-1 text-sm font-medium border-b-2 transition-colors ${\n                activeTab === 'overview'\n                  ? 'border-gray-900 text-gray-900'\n                  : 'border-transparent text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              Analytics\n            </button>\n            <button\n              onClick={() => setActiveTab('comments')}\n              className={`py-4 px-1 text-sm font-medium border-b-2 transition-colors ${\n                activeTab === 'comments'\n                  ? 'border-gray-900 text-gray-900'\n                  : 'border-transparent text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              Comments ({session.commentCount})\n            </button>\n          </nav>\n        </div>\n\n        {/* Tab Content */}\n        <div>\n          {activeTab === 'overview' && (\n            <div className=\"space-y-6\">\n              {/* Engagement Overview - X Style */}\n              <div className=\"bg-white rounded-xl border border-gray-200 p-6\">\n                <h3 className=\"text-lg font-bold text-gray-900 mb-6\">Engagement</h3>\n\n                {/* Main Metrics Grid */}\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n                  <div className=\"text-center p-4 bg-gray-50 rounded-xl\">\n                    <div className=\"flex justify-center mb-2\">\n                      <Eye className=\"w-6 h-6 text-[#007AFF]\" />\n                    </div>\n                    <div className=\"text-2xl font-bold text-gray-900\">{impressions}</div>\n                    <div className=\"text-sm text-gray-600 mt-1\">Impressions</div>\n                  </div>\n\n                  <div className=\"text-center p-4 bg-gray-50 rounded-xl\">\n                    <div className=\"flex justify-center mb-2\">\n                      <TrendingUp className=\"w-6 h-6 text-green-600\" />\n                    </div>\n                    <div className=\"text-2xl font-bold text-gray-900\">{totalEngagements}</div>\n                    <div className=\"text-sm text-gray-600 mt-1\">Engagements</div>\n                  </div>\n\n                  <div className=\"text-center p-4 bg-gray-50 rounded-xl\">\n                    <div className=\"flex justify-center mb-2\">\n                      <Heart className=\"w-6 h-6 text-red-500\" />\n                    </div>\n                    <div className=\"text-2xl font-bold text-gray-900\">{session.supportCount}</div>\n                    <div className=\"text-sm text-gray-600 mt-1\">Supports</div>\n                  </div>\n\n                  <div className=\"text-center p-4 bg-gray-50 rounded-xl\">\n                    <div className=\"flex justify-center mb-2\">\n                      <MessageCircle className=\"w-6 h-6 text-[#007AFF]\" />\n                    </div>\n                    <div className=\"text-2xl font-bold text-gray-900\">{session.commentCount}</div>\n                    <div className=\"text-sm text-gray-600 mt-1\">Comments</div>\n                  </div>\n                </div>\n\n                {/* Engagement Rate */}\n                <div className=\"border-t border-gray-200 pt-6\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div>\n                      <div className=\"text-sm font-medium text-gray-600\">Engagement Rate</div>\n                      <div className=\"text-xs text-gray-500 mt-0.5\">Engagements ÷ Impressions</div>\n                    </div>\n                    <div className=\"text-3xl font-bold text-gray-900\">{engagementRate}%</div>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-2 overflow-hidden\">\n                    <div\n                      className=\"bg-gradient-to-r from-[#007AFF] to-[#0051D5] h-2 rounded-full transition-all duration-300\"\n                      style={{ width: `${Math.min(100, parseFloat(engagementRate))}%` }}\n                    ></div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Engagement Breakdown */}\n              <div className=\"bg-white rounded-xl border border-gray-200 p-6\">\n                <h3 className=\"text-lg font-bold text-gray-900 mb-6\">Engagement Breakdown</h3>\n\n                <div className=\"space-y-4\">\n                  {/* Supports */}\n                  <div>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <Heart className=\"w-4 h-4 text-red-500\" />\n                        <span className=\"text-sm font-medium text-gray-700\">Supports</span>\n                      </div>\n                      <span className=\"text-sm font-semibold text-gray-900\">\n                        {session.supportCount} ({totalEngagements > 0 ? Math.round((session.supportCount / totalEngagements) * 100) : 0}%)\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2 overflow-hidden\">\n                      <div\n                        className=\"bg-red-500 h-2 rounded-full transition-all duration-300\"\n                        style={{ width: `${totalEngagements > 0 ? (session.supportCount / totalEngagements) * 100 : 0}%` }}\n                      ></div>\n                    </div>\n                  </div>\n\n                  {/* Comments */}\n                  <div>\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <MessageCircle className=\"w-4 h-4 text-[#007AFF]\" />\n                        <span className=\"text-sm font-medium text-gray-700\">Comments</span>\n                      </div>\n                      <span className=\"text-sm font-semibold text-gray-900\">\n                        {session.commentCount} ({totalEngagements > 0 ? Math.round((session.commentCount / totalEngagements) * 100) : 0}%)\n                      </span>\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2 overflow-hidden\">\n                      <div\n                        className=\"bg-[#007AFF] h-2 rounded-full transition-all duration-300\"\n                        style={{ width: `${totalEngagements > 0 ? (session.commentCount / totalEngagements) * 100 : 0}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Activity Details */}\n              <div className=\"bg-white rounded-xl border border-gray-200 p-6\">\n                <h3 className=\"text-lg font-bold text-gray-900 mb-4\">Activity Details</h3>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between py-3 border-b border-gray-100\">\n                    <span className=\"text-sm text-gray-600\">Duration</span>\n                    <span className=\"font-semibold text-gray-900\">{formatTime(session.duration)}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between py-3 border-b border-gray-100\">\n                    <span className=\"text-sm text-gray-600\">Date</span>\n                    <span className=\"text-sm text-gray-900\">{formatDate(session.startTime)}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between py-3 border-b border-gray-100\">\n                    <span className=\"text-sm text-gray-600\">Visibility</span>\n                    <span className=\"text-sm font-medium text-gray-900 capitalize\">{session.visibility}</span>\n                  </div>\n                  <div className=\"flex items-center justify-between py-3\">\n                    <span className=\"text-sm text-gray-600\">Activity</span>\n                    <Link\n                      href={`/activities/${session.activityId}`}\n                      className=\"text-sm font-medium text-[#007AFF] hover:text-[#0051D5] transition-colors\"\n                    >\n                      {session.activity.name}\n                    </Link>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'comments' && (\n            <div className=\"space-y-6\">\n              {/* Comment Input */}\n              {session.allowComments !== false && (\n                <div className=\"bg-white rounded-xl border border-gray-200 p-6\">\n                  <h3 className=\"text-base font-medium text-gray-900 mb-4\">Add a comment</h3>\n                  <textarea\n                    value={newComment}\n                    onChange={(e) => setNewComment(e.target.value)}\n                    placeholder=\"Write a comment...\"\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:border-transparent resize-none\"\n                    rows={3}\n                  />\n                  <div className=\"flex justify-end mt-3\">\n                    <button\n                      onClick={handlePostComment}\n                      disabled={!newComment.trim() || isPostingComment}\n                      className=\"bg-[#007AFF] text-white px-6 py-2 rounded-lg hover:bg-[#0051D5] disabled:opacity-50 disabled:cursor-not-allowed transition-colors font-medium\"\n                    >\n                      {isPostingComment ? 'Posting...' : 'Post Comment'}\n                    </button>\n                  </div>\n                </div>\n              )}\n\n              {/* Comments List */}\n              <div className=\"bg-white rounded-xl border border-gray-200 p-6\">\n                <h3 className=\"text-base font-medium text-gray-900 mb-6\">\n                  Comments ({comments.length})\n                </h3>\n                {comments.length > 0 ? (\n                  <div className=\"space-y-6\">\n                    {comments.map((comment) => (\n                      <div key={comment.id} className=\"flex gap-3\">\n                        <Link href={`/profile/${comment.user.username}`}>\n                          {comment.user.profilePicture ? (\n                            <div className=\"w-10 h-10 rounded-full overflow-hidden flex-shrink-0\">\n                              <Image\n                                src={comment.user.profilePicture}\n                                alt={comment.user.name}\n                                width={40}\n                                height={40}\n                                className=\"w-full h-full object-cover\"\n                              />\n                            </div>\n                          ) : (\n                            <div className=\"w-10 h-10 rounded-full bg-gradient-to-br from-[#FC4C02] to-[#FC4C02]/80 flex items-center justify-center flex-shrink-0\">\n                              <span className=\"text-white font-semibold text-sm\">\n                                {comment.user.name.charAt(0).toUpperCase()}\n                              </span>\n                            </div>\n                          )}\n                        </Link>\n                        <div className=\"flex-1\">\n                          <div className=\"bg-gray-50 rounded-lg p-3\">\n                            <Link\n                              href={`/profile/${comment.user.username}`}\n                              className=\"font-semibold text-gray-900 hover:text-[#007AFF] transition-colors\"\n                            >\n                              {comment.user.name}\n                            </Link>\n                            <p className=\"text-gray-700 mt-1\">{comment.content}</p>\n                          </div>\n                          <div className=\"flex items-center gap-4 mt-2 text-xs text-gray-500\">\n                            <span>{formatTimeAgo(comment.createdAt)}</span>\n                            {comment.likeCount > 0 && (\n                              <span>{comment.likeCount} likes</span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-gray-400\">\n                    <MessageCircle className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                    <p>No comments yet. Be the first to comment!</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function ActivityDetailPageWrapper({ params }: ActivityDetailPageProps) {\n  const [activityId, setActivityId] = React.useState<string>('');\n\n  React.useEffect(() => {\n    params.then(({ id }) => setActivityId(id));\n  }, [params]);\n\n  return (\n    <ProtectedRoute>\n      {!activityId ? (\n        <div className=\"min-h-screen bg-gray-50\">\n          <Header />\n          <div className=\"max-w-4xl mx-auto px-4 py-6\">\n            <div className=\"animate-pulse space-y-6\">\n              <div className=\"h-32 bg-gray-200 rounded-xl\"></div>\n              <div className=\"h-48 bg-gray-200 rounded-xl\"></div>\n              <div className=\"h-96 bg-gray-200 rounded-xl\"></div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <ActivityDetailContent activityId={activityId} />\n      )}\n    </ProtectedRoute>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/privacy/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/profile/[username]/page-content.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 598,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 598,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18475, 18478], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18475, 18478], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 603,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 603,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18737, 18740], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18737, 18740], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport Image from 'next/image';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/button';\nimport { UserX, ChevronDown, BarChart2, MapPin } from 'lucide-react';\nimport { toast } from 'sonner';\nimport Link from 'next/link';\nimport {\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  Tooltip,\n  Area,\n  ComposedChart,\n  BarChart,\n  Bar,\n} from 'recharts';\nimport {\n  useProfileByUsername,\n  useProfileStats,\n  useFollowers,\n  useFollowing,\n  useFollowUser,\n  useUnfollowUser,\n  useIsFollowing,\n} from '@/features/profile/hooks';\nimport { useUserSessions } from '@/features/sessions/hooks';\nimport { useProjects } from '@/features/projects/hooks';\nimport Feed from '@/components/Feed';\nimport { FollowersList } from '@/features/social/components/FollowersList';\nimport { FollowingList } from '@/features/social/components/FollowingList';\n\ntype YouTab = 'progress' | 'sessions' | 'followers' | 'following';\ntype TimePeriod = '7D' | '2W' | '4W' | '3M' | '1Y';\ntype ChartType = 'bar' | 'line';\n\ninterface ChartDataPoint {\n  name: string;\n  hours: number;\n  sessions: number;\n  avgDuration: number;\n}\n\ninterface ProfilePageContentProps {\n  username: string;\n}\n\nexport default function ProfilePageContent({\n  username,\n}: ProfilePageContentProps) {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const { user: currentUser } = useAuth();\n  const tabParam = searchParams?.get('tab') as YouTab | null;\n\n  const [activeTab, setActiveTab] = useState<YouTab>(\n    tabParam === 'sessions'\n      ? 'sessions'\n      : tabParam === 'followers'\n        ? 'followers'\n        : tabParam === 'following'\n          ? 'following'\n          : 'progress'\n  );\n  const [timePeriod, setTimePeriod] = useState<TimePeriod>('7D');\n  const [chartType, setChartType] = useState<ChartType>('line');\n  const [showChartTypeDropdown, setShowChartTypeDropdown] = useState(false);\n  const [selectedActivityId, setSelectedActivityId] = useState<string>('all');\n  const [showActivityDropdown, setShowActivityDropdown] = useState(false);\n\n  // Use new profile and session hooks for all data fetching\n  const {\n    data: profile,\n    isLoading: isLoadingProfile,\n    error: profileError,\n  } = useProfileByUsername(username);\n\n  const isOwnProfile = currentUser?.username === username;\n\n  // Dynamic metadata using useEffect for client component\n  React.useEffect(() => {\n    if (profile) {\n      document.title = `${profile.name} (@${profile.username}) - Ambira`;\n\n      const description =\n        profile.bio || `View ${profile.name}'s productivity profile on Ambira`;\n\n      let metaDescription = document.querySelector('meta[name=\"description\"]');\n      if (!metaDescription) {\n        metaDescription = document.createElement('meta');\n        metaDescription.setAttribute('name', 'description');\n        document.head.appendChild(metaDescription);\n      }\n      metaDescription.setAttribute('content', description);\n\n      // Open Graph tags\n      let ogTitle = document.querySelector('meta[property=\"og:title\"]');\n      if (!ogTitle) {\n        ogTitle = document.createElement('meta');\n        ogTitle.setAttribute('property', 'og:title');\n        document.head.appendChild(ogTitle);\n      }\n      ogTitle.setAttribute(\n        'content',\n        `${profile.name} (@${profile.username}) - Ambira`\n      );\n\n      let ogDescription = document.querySelector(\n        'meta[property=\"og:description\"]'\n      );\n      if (!ogDescription) {\n        ogDescription = document.createElement('meta');\n        ogDescription.setAttribute('property', 'og:description');\n        document.head.appendChild(ogDescription);\n      }\n      ogDescription.setAttribute('content', description);\n\n      let ogType = document.querySelector('meta[property=\"og:type\"]');\n      if (!ogType) {\n        ogType = document.createElement('meta');\n        ogType.setAttribute('property', 'og:type');\n        document.head.appendChild(ogType);\n      }\n      ogType.setAttribute('content', 'profile');\n\n      // Twitter card tags\n      let twitterCard = document.querySelector('meta[name=\"twitter:card\"]');\n      if (!twitterCard) {\n        twitterCard = document.createElement('meta');\n        twitterCard.setAttribute('name', 'twitter:card');\n        document.head.appendChild(twitterCard);\n      }\n      twitterCard.setAttribute('content', 'summary');\n\n      let twitterTitle = document.querySelector('meta[name=\"twitter:title\"]');\n      if (!twitterTitle) {\n        twitterTitle = document.createElement('meta');\n        twitterTitle.setAttribute('name', 'twitter:title');\n        document.head.appendChild(twitterTitle);\n      }\n      twitterTitle.setAttribute(\n        'content',\n        `${profile.name} (@${profile.username}) - Ambira`\n      );\n\n      let twitterDescription = document.querySelector(\n        'meta[name=\"twitter:description\"]'\n      );\n      if (!twitterDescription) {\n        twitterDescription = document.createElement('meta');\n        twitterDescription.setAttribute('name', 'twitter:description');\n        document.head.appendChild(twitterDescription);\n      }\n      twitterDescription.setAttribute('content', description);\n    }\n  }, [profile]);\n\n  const { data: stats, isLoading: isLoadingStats } = useProfileStats(\n    profile?.id || '',\n    {\n      enabled: !!profile?.id,\n    }\n  );\n\n  const { data: sessions = [], isLoading: isLoadingSessions } = useUserSessions(\n    profile?.id || '',\n    undefined,\n    {\n      enabled: !!profile?.id,\n    }\n  );\n\n  const { data: followers = [] } = useFollowers(profile?.id || '', {\n    enabled: !!profile?.id,\n  });\n\n  const { data: following = [] } = useFollowing(profile?.id || '', {\n    enabled: !!profile?.id,\n  });\n\n  const { data: activities = [] } = useProjects({\n    enabled: !!profile?.id,\n  });\n\n  // Check if current user is following this profile\n  const { data: isFollowing = false } = useIsFollowing(\n    currentUser?.id || '',\n    profile?.id || '',\n    {\n      enabled: !isOwnProfile && !!currentUser?.id && !!profile?.id,\n    }\n  );\n\n  // Use follow/unfollow mutations\n  const followUserMutation = useFollowUser();\n  const unfollowUserMutation = useUnfollowUser();\n\n  // Compute loading and error states\n  const isLoading = isLoadingProfile || isLoadingStats || isLoadingSessions;\n  const error = profileError\n    ? (profileError.message as string | undefined)?.includes('not found')\n      ? 'User not found'\n      : (profileError.message as string | undefined)?.includes('private')\n        ? 'This profile is private'\n        : (profileError.message as string | undefined)?.includes('followers')\n          ? 'This profile is only visible to followers'\n          : 'Failed to load profile'\n    : null;\n\n  // Filter sessions based on selected activity\n  const filteredSessions = useMemo(() => {\n    if (selectedActivityId === 'all') return sessions;\n    return sessions.filter(\n      s =>\n        s.activityId === selectedActivityId ||\n        s.projectId === selectedActivityId\n    );\n  }, [sessions, selectedActivityId]);\n\n  // Calculate weekly stats from sessions\n  const weeklyStats = useMemo(() => {\n    const now = new Date();\n    const oneWeekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n    const weeklySessions = sessions.filter(\n      s => new Date(s.createdAt) >= oneWeekAgo\n    );\n    const weeklyHours = weeklySessions.reduce(\n      (sum, s) => sum + s.duration / 3600,\n      0\n    );\n    return {\n      weeklyHours,\n      sessionsThisWeek: weeklySessions.length,\n    };\n  }, [sessions]);\n\n  // Update tab when URL changes\n  useEffect(() => {\n    if (\n      tabParam === 'sessions' ||\n      tabParam === 'progress' ||\n      tabParam === 'followers' ||\n      tabParam === 'following'\n    ) {\n      setActiveTab(tabParam);\n    }\n  }, [tabParam]);\n\n  // Show error toast when profile fails to load\n  useEffect(() => {\n    if (error && profileError) {\n      toast.error(error);\n    }\n  }, [error, profileError]);\n\n  // Calculate chart data using useMemo to prevent infinite loop\n  const chartData = useMemo(() => {\n    if (!filteredSessions) return [];\n\n    const now = new Date();\n    const data: ChartDataPoint[] = [];\n\n    if (timePeriod === '7D') {\n      // Last 7 days\n      const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n      for (let i = 6; i >= 0; i--) {\n        const day = new Date(now);\n        day.setDate(day.getDate() - i);\n\n        const daySessions = filteredSessions.filter(\n          s => new Date(s.createdAt).toDateString() === day.toDateString()\n        );\n        const hoursWorked = daySessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          daySessions.length > 0\n            ? daySessions.reduce((sum, s) => sum + s.duration, 0) /\n              daySessions.length /\n              60\n            : 0;\n\n        const dayName = dayNames[day.getDay()] || 'Day';\n        data.push({\n          name: `${dayName.slice(0, 3)} ${day.getDate()}`,\n          hours: Number(hoursWorked.toFixed(2)),\n          sessions: daySessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    } else if (timePeriod === '2W') {\n      // Last 14 days\n      const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n      for (let i = 13; i >= 0; i--) {\n        const day = new Date(now);\n        day.setDate(day.getDate() - i);\n\n        const daySessions = filteredSessions.filter(\n          s => new Date(s.createdAt).toDateString() === day.toDateString()\n        );\n        const hoursWorked = daySessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          daySessions.length > 0\n            ? daySessions.reduce((sum, s) => sum + s.duration, 0) /\n              daySessions.length /\n              60\n            : 0;\n\n        const dayName = dayNames[day.getDay()] || 'Day';\n        data.push({\n          name: `${dayName.slice(0, 3)} ${day.getDate()}`,\n          hours: Number(hoursWorked.toFixed(2)),\n          sessions: daySessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    } else if (timePeriod === '4W') {\n      // Last 4 weeks\n      for (let i = 3; i >= 0; i--) {\n        const weekStart = new Date(now);\n        weekStart.setDate(weekStart.getDate() - (i * 7 + 6));\n        const weekEnd = new Date(now);\n        weekEnd.setDate(weekEnd.getDate() - i * 7);\n\n        const weekSessions = filteredSessions.filter(s => {\n          const sessionDate = new Date(s.createdAt);\n          return sessionDate >= weekStart && sessionDate <= weekEnd;\n        });\n        const hoursWorked = weekSessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          weekSessions.length > 0\n            ? weekSessions.reduce((sum, s) => sum + s.duration, 0) /\n              weekSessions.length /\n              60\n            : 0;\n\n        data.push({\n          name: `Week ${4 - i}`,\n          hours: Number(hoursWorked.toFixed(2)),\n          sessions: weekSessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    } else if (timePeriod === '3M') {\n      // Last 3 months\n      const monthNames = [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec',\n      ];\n      for (let i = 2; i >= 0; i--) {\n        const month = new Date(now);\n        month.setMonth(month.getMonth() - i);\n\n        const monthSessions = filteredSessions.filter(s => {\n          const sessionDate = new Date(s.createdAt);\n          return (\n            sessionDate.getMonth() === month.getMonth() &&\n            sessionDate.getFullYear() === month.getFullYear()\n          );\n        });\n        const hoursWorked = monthSessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          monthSessions.length > 0\n            ? monthSessions.reduce((sum, s) => sum + s.duration, 0) /\n              monthSessions.length /\n              60\n            : 0;\n\n        data.push({\n          name: monthNames[month.getMonth()] || 'Month',\n          hours: Number(hoursWorked.toFixed(2)),\n          sessions: monthSessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    } else if (timePeriod === '1Y') {\n      // Last 12 months\n      const monthNames = [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec',\n      ];\n      for (let i = 11; i >= 0; i--) {\n        const month = new Date(now);\n        month.setMonth(month.getMonth() - i);\n\n        const monthSessions = filteredSessions.filter(s => {\n          const sessionDate = new Date(s.createdAt);\n          return (\n            sessionDate.getMonth() === month.getMonth() &&\n            sessionDate.getFullYear() === month.getFullYear()\n          );\n        });\n        const hoursWorked = monthSessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          monthSessions.length > 0\n            ? monthSessions.reduce((sum, s) => sum + s.duration, 0) /\n              monthSessions.length /\n              60\n            : 0;\n\n        data.push({\n          name: monthNames[month.getMonth()] || 'Month',\n          hours: Number(hoursWorked.toFixed(2)),\n          sessions: monthSessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    }\n\n    return data;\n  }, [filteredSessions, timePeriod]);\n\n  // Calculate stats with percentage changes\n  const calculatedStats = useMemo(() => {\n    const now = new Date();\n\n    // Helper to get date range based on time period\n    const getDateRange = (period: TimePeriod) => {\n      const end = new Date(now);\n      const start = new Date(now);\n\n      switch (period) {\n        case '7D':\n          start.setDate(now.getDate() - 7);\n          break;\n        case '2W':\n          start.setDate(now.getDate() - 14);\n          break;\n        case '4W':\n          start.setDate(now.getDate() - 28);\n          break;\n        case '3M':\n          start.setMonth(now.getMonth() - 3);\n          break;\n        case '1Y':\n          start.setFullYear(now.getFullYear() - 1);\n          break;\n      }\n\n      return { start, end };\n    };\n\n    // Get current and previous period ranges\n    const currentRange = getDateRange(timePeriod);\n    const previousStart = new Date(currentRange.start);\n    const periodLength =\n      currentRange.end.getTime() - currentRange.start.getTime();\n    previousStart.setTime(previousStart.getTime() - periodLength);\n\n    // Filter sessions for current period\n    const currentPeriodSessions = filteredSessions.filter(s => {\n      const sessionDate = new Date(s.createdAt);\n      return (\n        sessionDate >= currentRange.start && sessionDate <= currentRange.end\n      );\n    });\n\n    // Filter sessions for previous period\n    const previousPeriodSessions = filteredSessions.filter(s => {\n      const sessionDate = new Date(s.createdAt);\n      return sessionDate >= previousStart && sessionDate < currentRange.start;\n    });\n\n    // Calculate current period stats\n    const currentHours = currentPeriodSessions.reduce(\n      (sum, s) => sum + s.duration / 3600,\n      0\n    );\n    const currentSessionCount = currentPeriodSessions.length;\n    const currentAvgDuration =\n      currentSessionCount > 0\n        ? currentPeriodSessions.reduce((sum, s) => sum + s.duration, 0) /\n          currentSessionCount /\n          60\n        : 0;\n\n    const currentActiveDays = new Set(\n      currentPeriodSessions.map(s => new Date(s.createdAt).toDateString())\n    ).size;\n\n    // Calculate previous period stats\n    const previousHours = previousPeriodSessions.reduce(\n      (sum, s) => sum + s.duration / 3600,\n      0\n    );\n    const previousSessionCount = previousPeriodSessions.length;\n    const previousAvgDuration =\n      previousSessionCount > 0\n        ? previousPeriodSessions.reduce((sum, s) => sum + s.duration, 0) /\n          previousSessionCount /\n          60\n        : 0;\n\n    const previousActiveDays = new Set(\n      previousPeriodSessions.map(s => new Date(s.createdAt).toDateString())\n    ).size;\n\n    // Calculate percentage changes\n    const calculateChange = (\n      current: number,\n      previous: number\n    ): number | null => {\n      if (previous === 0) return null; // No previous data\n      return ((current - previous) / previous) * 100;\n    };\n\n    const hoursChange = calculateChange(currentHours, previousHours);\n    const sessionsChange = calculateChange(\n      currentSessionCount,\n      previousSessionCount\n    );\n    const avgDurationChange = calculateChange(\n      currentAvgDuration,\n      previousAvgDuration\n    );\n    const activeDaysChange = calculateChange(\n      currentActiveDays,\n      previousActiveDays\n    );\n\n    return {\n      totalHours: currentHours,\n      sessions: currentSessionCount,\n      avgDuration: Math.round(currentAvgDuration),\n      currentStreak: stats?.currentStreak || 0,\n      longestStreak: stats?.longestStreak || 0,\n      activeDays: currentActiveDays,\n      activities: activities?.length || 0,\n\n      // Percentage changes\n      hoursChange,\n      sessionsChange,\n      avgDurationChange,\n      activeDaysChange,\n      activitiesChange: null, // Activities count doesn't have time-based comparison\n      streakChange: null, // Streaks don't have meaningful percentage changes\n    };\n  }, [filteredSessions, stats, activities, timePeriod]);\n\n  // Average duration over time data - extract from chartData\n  const avgDurationData = useMemo(() => {\n    return chartData.map(d => ({ name: d.name, value: d.avgDuration }));\n  }, [chartData]);\n\n  // Helper to render percentage change\n  const renderPercentageChange = (change: number | null) => {\n    if (change === null) return null;\n\n    const isPositive = change >= 0;\n    const formattedChange = Math.abs(change).toFixed(0);\n\n    return (\n      <div\n        className={`text-sm ${isPositive ? 'text-green-600' : 'text-red-600'}`}\n      >\n        {isPositive ? '↑' : '↓'} {formattedChange}%\n      </div>\n    );\n  };\n\n  // Custom tooltip formatter\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white border border-gray-200 rounded-lg shadow-lg p-3\">\n          <p className=\"text-sm font-medium text-gray-900 mb-2\">{label}</p>\n          {payload.map((entry: any, index: number) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              <span className=\"font-semibold\">{entry.name}</span>: {entry.value}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"space-y-6\">\n          {/* Loading skeleton for profile header */}\n          <div className=\"bg-card-background rounded-lg border border-border p-6 animate-pulse\">\n            <div className=\"flex flex-col md:flex-row gap-6\">\n              <div className=\"w-30 h-30 bg-muted rounded-full\" />\n              <div className=\"flex-1 space-y-4\">\n                <div className=\"h-8 bg-muted rounded w-1/3\" />\n                <div className=\"h-4 bg-muted rounded w-1/4\" />\n                <div className=\"h-4 bg-muted rounded w-1/2\" />\n                <div className=\"grid grid-cols-3 gap-4 mt-6\">\n                  {[1, 2, 3].map(i => (\n                    <div key={i} className=\"text-center\">\n                      <div className=\"h-6 bg-muted rounded w-16 mx-auto mb-2\" />\n                      <div className=\"h-4 bg-muted rounded w-20 mx-auto\" />\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Loading skeleton for tabs */}\n          <div className=\"border-b border-border animate-pulse\">\n            <div className=\"flex space-x-1\">\n              {[1, 2, 3, 4].map(i => (\n                <div key={i} className=\"h-10 bg-muted rounded w-24\" />\n              ))}\n            </div>\n          </div>\n\n          {/* Loading skeleton for content */}\n          <div className=\"bg-card-background rounded-lg border border-border p-6 animate-pulse\">\n            <div className=\"space-y-4\">\n              <div className=\"h-4 bg-muted rounded w-3/4\" />\n              <div className=\"h-4 bg-muted rounded w-1/2\" />\n              <div className=\"h-4 bg-muted rounded w-2/3\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !profile) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"text-center py-16\">\n          <UserX className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n          <h1 className=\"text-2xl font-bold text-foreground mb-2\">\n            {error === 'User not found' && 'User Not Found'}\n            {error === 'This profile is private' && 'Private Profile'}\n            {error === 'This profile is only visible to followers' &&\n              'Followers Only'}\n            {error &&\n              ![\n                'User not found',\n                'This profile is private',\n                'This profile is only visible to followers',\n              ].includes(error) &&\n              'Error Loading Profile'}\n          </h1>\n          <p className=\"text-muted-foreground mb-6\">\n            {error === 'User not found' &&\n              `The user \"${username}\" doesn't exist.`}\n            {error === 'This profile is private' &&\n              `@${username}'s profile is private. Only they can view their profile.`}\n            {error === 'This profile is only visible to followers' &&\n              `@${username}'s profile is only visible to people they follow back.`}\n            {error &&\n              ![\n                'User not found',\n                'This profile is private',\n                'This profile is only visible to followers',\n              ].includes(error) &&\n              'Something went wrong while loading this profile.'}\n          </p>\n          <Button asChild>\n            <Link href=\"/\">Go Home</Link>\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"pb-24 md:pb-8\">\n      <div className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8 py-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Profile Card with This Week Stats */}\n          <div className=\"bg-gray-50 md:rounded-xl md:border border-gray-200 p-3 md:p-6 mb-4 md:mb-6 relative\">\n            {/* Responsive Layout - Stacks on mobile, side-by-side on desktop */}\n            <div className=\"flex flex-col md:flex-row md:gap-8\">\n              {/* Left Column - Profile Info */}\n              <div className=\"flex-1\">\n                {/* Profile Picture */}\n                {profile.profilePicture ? (\n                  <div className=\"w-20 h-20 md:w-32 md:h-32 rounded-full overflow-hidden ring-4 ring-white shadow-md mb-3 md:mb-4\">\n                    <Image\n                      src={profile.profilePicture}\n                      alt={`${profile.name}'s profile picture`}\n                      width={128}\n                      height={128}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                ) : (\n                  <div className=\"w-20 h-20 md:w-32 md:h-32 bg-[#FC4C02] rounded-full flex items-center justify-center ring-4 ring-white shadow-md mb-3 md:mb-4\">\n                    <span className=\"text-white font-bold text-2xl md:text-4xl\">\n                      {profile.name.charAt(0).toUpperCase()}\n                    </span>\n                  </div>\n                )}\n\n                {/* Name and Username */}\n                <h1 className=\"text-lg md:text-2xl font-bold text-gray-900\">\n                  {profile.name}\n                </h1>\n                <p className=\"text-gray-600 text-sm md:text-base mb-2 md:mb-3\">\n                  @{profile.username}\n                </p>\n\n                {/* Bio */}\n                {profile.bio && (\n                  <p className=\"text-gray-700 mb-2 md:mb-3 text-sm md:text-base leading-snug\">\n                    {profile.bio}\n                  </p>\n                )}\n\n                {/* Location */}\n                {profile.location && (\n                  <p className=\"text-gray-500 text-xs md:text-sm mb-3 md:mb-4 flex items-center gap-1\">\n                    <MapPin\n                      className=\"w-3 h-3 md:w-4 md:h-4\"\n                      aria-hidden=\"true\"\n                    />\n                    {profile.location}\n                  </p>\n                )}\n\n                {/* Follow Button - Only for other users' profiles */}\n                {!isOwnProfile && currentUser && profile && (\n                  <button\n                    onClick={async () => {\n                      try {\n                        if (isFollowing) {\n                          await unfollowUserMutation.mutateAsync({\n                            currentUserId: currentUser.id,\n                            targetUserId: profile.id,\n                          });\n                        } else {\n                          await followUserMutation.mutateAsync({\n                            currentUserId: currentUser.id,\n                            targetUserId: profile.id,\n                          });\n                        }\n                        // Automatic cache invalidation handled by mutations\n                      } catch (error) {\n                        console.error('Follow error:', error);\n                      }\n                    }}\n                    disabled={\n                      followUserMutation.isPending ||\n                      unfollowUserMutation.isPending\n                    }\n                    className={`inline-flex items-center gap-2 mb-3 md:mb-4 px-3 md:px-4 py-2 md:py-2.5 rounded-lg transition-colors font-semibold text-xs md:text-sm disabled:opacity-50 disabled:cursor-not-allowed ${\n                      isFollowing\n                        ? 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n                        : 'bg-[#007AFF] text-white hover:bg-[#0056D6]'\n                    }`}\n                  >\n                    {followUserMutation.isPending ||\n                    unfollowUserMutation.isPending\n                      ? 'Loading...'\n                      : isFollowing\n                        ? 'Following'\n                        : 'Follow'}\n                  </button>\n                )}\n\n                {/* Follower/Following Counts */}\n                <div className=\"flex gap-4 md:gap-6 mb-4 md:mb-0\">\n                  <button\n                    onClick={() => {\n                      setActiveTab('followers');\n                      router.push(`/profile/${username}?tab=followers`);\n                    }}\n                    className=\"hover:underline\"\n                  >\n                    <span className=\"font-bold text-gray-900 text-sm md:text-base\">\n                      {followers.length}\n                    </span>{' '}\n                    <span className=\"text-gray-600 text-xs md:text-sm\">\n                      Followers\n                    </span>\n                  </button>\n                  <button\n                    onClick={() => {\n                      setActiveTab('following');\n                      router.push(`/profile/${username}?tab=following`);\n                    }}\n                    className=\"hover:underline\"\n                  >\n                    <span className=\"font-bold text-gray-900 text-sm md:text-base\">\n                      {following.length}\n                    </span>{' '}\n                    <span className=\"text-gray-600 text-xs md:text-sm\">\n                      Following\n                    </span>\n                  </button>\n                </div>\n              </div>\n\n              {/* Right Column - This Week Stats */}\n              <div className=\"md:w-64 border-t md:border-t-0 md:border-l border-gray-200 pt-4 md:pt-0 md:pl-8\">\n                <div className=\"flex items-center gap-2 mb-3 md:mb-4\">\n                  <BarChart2\n                    className=\"w-4 h-4 md:w-5 md:h-5 text-[#FC4C02]\"\n                    aria-hidden=\"true\"\n                  />\n                  <h2 className=\"text-sm md:text-base font-bold\">This week</h2>\n                </div>\n\n                <div className=\"grid grid-cols-3 md:grid-cols-1 gap-3 md:gap-4 md:space-y-0\">\n                  <div>\n                    <div className=\"text-[10px] md:text-xs text-gray-600 uppercase tracking-wide\">\n                      Time\n                    </div>\n                    <div className=\"text-lg md:text-2xl font-bold\">\n                      {weeklyStats.weeklyHours.toFixed(1)}h\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-[10px] md:text-xs text-gray-600 uppercase tracking-wide\">\n                      Sessions\n                    </div>\n                    <div className=\"text-lg md:text-2xl font-bold\">\n                      {weeklyStats.sessionsThisWeek}\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-[10px] md:text-xs text-gray-600 uppercase tracking-wide\">\n                      Streak\n                    </div>\n                    <div className=\"text-lg md:text-2xl font-bold\">\n                      {stats?.currentStreak || 0}{' '}\n                      <span className=\"text-sm md:text-base\">days</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Tabs */}\n          <div className=\"sticky top-12 md:top-14 bg-white md:bg-gray-50 z-30 -mx-4 md:mx-0\">\n            <div className=\"bg-white md:bg-gray-50 border-b border-gray-200\">\n              <div className=\"flex md:gap-8 px-4 md:px-0 overflow-x-auto scrollbar-hide\">\n                <button\n                  onClick={() => {\n                    setActiveTab('progress');\n                    router.push(`/profile/${username}?tab=progress`);\n                  }}\n                  className={`flex-1 md:flex-initial py-3 md:py-4 px-1 text-sm md:text-base font-medium border-b-2 transition-colors whitespace-nowrap ${\n                    activeTab === 'progress'\n                      ? 'border-[#007AFF] text-[#007AFF]'\n                      : 'border-transparent text-gray-500 md:text-gray-600 hover:text-gray-700 md:hover:text-gray-900'\n                  }`}\n                >\n                  Progress\n                </button>\n                <button\n                  onClick={() => {\n                    setActiveTab('sessions');\n                    router.push(`/profile/${username}?tab=sessions`);\n                  }}\n                  className={`flex-1 md:flex-initial py-3 md:py-4 px-1 text-sm md:text-base font-medium border-b-2 transition-colors whitespace-nowrap ${\n                    activeTab === 'sessions'\n                      ? 'border-[#007AFF] text-[#007AFF]'\n                      : 'border-transparent text-gray-500 md:text-gray-600 hover:text-gray-700 md:hover:text-gray-900'\n                  }`}\n                >\n                  Sessions\n                </button>\n                <button\n                  onClick={() => {\n                    setActiveTab('followers');\n                    router.push(`/profile/${username}?tab=followers`);\n                  }}\n                  className={`flex-1 md:flex-initial py-3 md:py-4 px-1 text-sm md:text-base font-medium border-b-2 transition-colors whitespace-nowrap ${\n                    activeTab === 'followers'\n                      ? 'border-[#007AFF] text-[#007AFF]'\n                      : 'border-transparent text-gray-500 md:text-gray-600 hover:text-gray-700 md:hover:text-gray-900'\n                  }`}\n                >\n                  Followers\n                </button>\n                <button\n                  onClick={() => {\n                    setActiveTab('following');\n                    router.push(`/profile/${username}?tab=following`);\n                  }}\n                  className={`flex-1 md:flex-initial py-3 md:py-4 px-1 text-sm md:text-base font-medium border-b-2 transition-colors whitespace-nowrap ${\n                    activeTab === 'following'\n                      ? 'border-[#007AFF] text-[#007AFF]'\n                      : 'border-transparent text-gray-500 md:text-gray-600 hover:text-gray-700 md:hover:text-gray-900'\n                  }`}\n                >\n                  Following\n                </button>\n              </div>\n            </div>\n          </div>\n\n          {/* Tab Content */}\n          <div className=\"mt-6\">\n            {activeTab === 'progress' && (\n              <div className=\"space-y-4\">\n                {/* Controls */}\n                <div className=\"space-y-3\">\n                  {/* Row 1: Activity Selector & Chart Type */}\n                  <div className=\"flex items-center gap-2\">\n                    {/* Activity Selector */}\n                    <div className=\"relative flex-shrink-0\">\n                      <button\n                        onClick={() =>\n                          setShowActivityDropdown(!showActivityDropdown)\n                        }\n                        className=\"flex items-center gap-2 px-3 md:px-4 py-2 text-xs md:text-sm font-semibold border border-gray-300 rounded-lg hover:bg-gray-50 min-w-[140px] max-w-[200px]\"\n                      >\n                        <span className=\"truncate\">\n                          {selectedActivityId === 'all'\n                            ? 'All activities'\n                            : activities?.find(p => p.id === selectedActivityId)\n                                ?.name || 'All activities'}\n                        </span>\n                        <ChevronDown className=\"w-3.5 h-3.5 md:w-4 md:h-4 flex-shrink-0\" />\n                      </button>\n                      {showActivityDropdown && (\n                        <>\n                          <div\n                            className=\"fixed inset-0 z-40\"\n                            onClick={() => setShowActivityDropdown(false)}\n                          />\n                          <div className=\"absolute left-0 top-full mt-2 w-full max-w-xs bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50 max-h-64 overflow-y-auto\">\n                            <button\n                              onClick={() => {\n                                setSelectedActivityId('all');\n                                setShowActivityDropdown(false);\n                              }}\n                              className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 ${selectedActivityId === 'all' ? 'bg-blue-50 text-blue-600' : ''}`}\n                            >\n                              All\n                            </button>\n                            {(!activities || activities.length === 0) && (\n                              <div className=\"px-4 py-2 text-xs text-gray-400\">\n                                No activities yet\n                              </div>\n                            )}\n                            {activities?.map(activity => (\n                              <button\n                                key={activity.id}\n                                onClick={() => {\n                                  setSelectedActivityId(activity.id);\n                                  setShowActivityDropdown(false);\n                                }}\n                                className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 flex items-center gap-3 ${selectedActivityId === activity.id ? 'bg-blue-50 text-blue-600' : ''}`}\n                              >\n                                <div\n                                  className=\"w-7 h-7 rounded-lg flex items-center justify-center flex-shrink-0\"\n                                  style={{\n                                    backgroundColor: activity.color + '20',\n                                  }}\n                                >\n                                  <span style={{ color: activity.color }}>\n                                    ●\n                                  </span>\n                                </div>\n                                <span className=\"truncate\">\n                                  {activity.name}\n                                </span>\n                              </button>\n                            ))}\n                          </div>\n                        </>\n                      )}\n                    </div>\n\n                    {/* Chart Type Selector */}\n                    <div className=\"relative flex-shrink-0\">\n                      <button\n                        onClick={() =>\n                          setShowChartTypeDropdown(!showChartTypeDropdown)\n                        }\n                        className=\"flex items-center gap-1.5 md:gap-2 px-3 md:px-4 py-2 text-xs md:text-sm font-semibold border border-gray-300 rounded-lg hover:bg-gray-50\"\n                      >\n                        <svg\n                          className=\"w-3.5 h-3.5 md:w-4 md:h-4\"\n                          viewBox=\"0 0 16 16\"\n                          fill=\"currentColor\"\n                        >\n                          {chartType === 'bar' ? (\n                            <>\n                              <rect x=\"2\" y=\"8\" width=\"3\" height=\"6\" rx=\"0.5\" />\n                              <rect\n                                x=\"6.5\"\n                                y=\"4\"\n                                width=\"3\"\n                                height=\"10\"\n                                rx=\"0.5\"\n                              />\n                              <rect\n                                x=\"11\"\n                                y=\"6\"\n                                width=\"3\"\n                                height=\"8\"\n                                rx=\"0.5\"\n                              />\n                            </>\n                          ) : (\n                            <path\n                              d=\"M2 12 L5 8 L8 10 L11 4 L14 6\"\n                              stroke=\"currentColor\"\n                              strokeWidth=\"1.5\"\n                              fill=\"none\"\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                            />\n                          )}\n                        </svg>\n                        <span className=\"capitalize\">{chartType}</span>\n                        <ChevronDown className=\"w-3 h-3 md:w-4 md:h-4\" />\n                      </button>\n                      {showChartTypeDropdown && (\n                        <>\n                          <div\n                            className=\"fixed inset-0 z-40\"\n                            onClick={() => setShowChartTypeDropdown(false)}\n                          />\n                          <div className=\"absolute right-0 top-full mt-2 w-32 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50\">\n                            <button\n                              onClick={() => {\n                                setChartType('bar');\n                                setShowChartTypeDropdown(false);\n                              }}\n                              className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 flex items-center gap-2 ${chartType === 'bar' ? 'bg-blue-50 text-blue-600' : ''}`}\n                            >\n                              <svg\n                                className=\"w-4 h-4\"\n                                viewBox=\"0 0 16 16\"\n                                fill=\"currentColor\"\n                              >\n                                <rect\n                                  x=\"2\"\n                                  y=\"8\"\n                                  width=\"3\"\n                                  height=\"6\"\n                                  rx=\"0.5\"\n                                />\n                                <rect\n                                  x=\"6.5\"\n                                  y=\"4\"\n                                  width=\"3\"\n                                  height=\"10\"\n                                  rx=\"0.5\"\n                                />\n                                <rect\n                                  x=\"11\"\n                                  y=\"6\"\n                                  width=\"3\"\n                                  height=\"8\"\n                                  rx=\"0.5\"\n                                />\n                              </svg>\n                              Bar\n                            </button>\n                            <button\n                              onClick={() => {\n                                setChartType('line');\n                                setShowChartTypeDropdown(false);\n                              }}\n                              className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 flex items-center gap-2 ${chartType === 'line' ? 'bg-blue-50 text-blue-600' : ''}`}\n                            >\n                              <svg\n                                className=\"w-4 h-4\"\n                                viewBox=\"0 0 16 16\"\n                                fill=\"none\"\n                                stroke=\"currentColor\"\n                              >\n                                <path\n                                  d=\"M2 12 L5 8 L8 10 L11 4 L14 6\"\n                                  strokeWidth=\"1.5\"\n                                  strokeLinecap=\"round\"\n                                  strokeLinejoin=\"round\"\n                                />\n                              </svg>\n                              Line\n                            </button>\n                          </div>\n                        </>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Row 2: Time Period Buttons - Scrollable on mobile */}\n                  <div className=\"flex items-center gap-2 overflow-x-auto scrollbar-hide -mx-4 px-4 md:mx-0 md:px-0\">\n                    {(['7D', '2W', '4W', '3M', '1Y'] as TimePeriod[]).map(\n                      period => (\n                        <button\n                          key={period}\n                          onClick={() => setTimePeriod(period)}\n                          className={`flex-shrink-0 px-4 md:px-5 py-2 text-xs md:text-sm font-semibold rounded-lg transition-colors ${\n                            timePeriod === period\n                              ? 'bg-gray-900 text-white'\n                              : 'bg-white text-gray-700 hover:bg-gray-100 border border-gray-300'\n                          }`}\n                        >\n                          {period}\n                        </button>\n                      )\n                    )}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  {/* Main Chart */}\n                  <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                    <div className=\"mb-4\">\n                      <h3 className=\"font-semibold text-gray-900\">\n                        Hours completed\n                      </h3>\n                    </div>\n                    <div className=\"h-72\">\n                      {isLoading ? (\n                        <div className=\"h-full bg-gray-50 rounded animate-pulse\" />\n                      ) : (\n                        <ResponsiveContainer width=\"100%\" height=\"100%\">\n                          {chartType === 'bar' ? (\n                            <BarChart\n                              data={chartData}\n                              margin={{\n                                top: 10,\n                                right: 10,\n                                left: -20,\n                                bottom: 0,\n                              }}\n                            >\n                              <XAxis\n                                dataKey=\"name\"\n                                tick={{ fontSize: 12, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                              />\n                              <YAxis\n                                tick={{ fontSize: 12, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                                width={40}\n                              />\n                              <Tooltip content={<CustomTooltip />} />\n                              <Bar\n                                dataKey=\"hours\"\n                                fill=\"#007AFF\"\n                                radius={[4, 4, 0, 0]}\n                                name=\"Hours\"\n                              />\n                            </BarChart>\n                          ) : (\n                            <ComposedChart\n                              data={chartData}\n                              margin={{\n                                top: 10,\n                                right: 10,\n                                left: -20,\n                                bottom: 0,\n                              }}\n                            >\n                              <defs>\n                                <linearGradient\n                                  id=\"colorHours\"\n                                  x1=\"0\"\n                                  y1=\"0\"\n                                  x2=\"0\"\n                                  y2=\"1\"\n                                >\n                                  <stop\n                                    offset=\"5%\"\n                                    stopColor=\"#007AFF\"\n                                    stopOpacity={0.3}\n                                  />\n                                  <stop\n                                    offset=\"95%\"\n                                    stopColor=\"#007AFF\"\n                                    stopOpacity={0}\n                                  />\n                                </linearGradient>\n                              </defs>\n                              <XAxis\n                                dataKey=\"name\"\n                                tick={{ fontSize: 12, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                              />\n                              <YAxis\n                                tick={{ fontSize: 12, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                                width={40}\n                              />\n                              <Tooltip content={<CustomTooltip />} />\n                              <Area\n                                type=\"monotone\"\n                                dataKey=\"hours\"\n                                stroke=\"#007AFF\"\n                                strokeWidth={2}\n                                fill=\"url(#colorHours)\"\n                                name=\"Hours\"\n                              />\n                            </ComposedChart>\n                          )}\n                        </ResponsiveContainer>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Second Row - Two Charts */}\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                    {/* Average Session Duration */}\n                    <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                      <div className=\"mb-4\">\n                        <h3 className=\"font-semibold text-gray-900\">\n                          Average session duration\n                        </h3>\n                      </div>\n                      <div className=\"h-48\">\n                        <ResponsiveContainer width=\"100%\" height=\"100%\">\n                          {chartType === 'bar' ? (\n                            <BarChart\n                              data={avgDurationData}\n                              margin={{\n                                top: 5,\n                                right: 5,\n                                left: -30,\n                                bottom: 0,\n                              }}\n                            >\n                              <XAxis\n                                dataKey=\"name\"\n                                tick={{ fontSize: 11, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                              />\n                              <YAxis\n                                tick={{ fontSize: 11, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                              />\n                              <Tooltip content={<CustomTooltip />} />\n                              <Bar\n                                dataKey=\"value\"\n                                fill=\"#34C759\"\n                                radius={[4, 4, 0, 0]}\n                                name=\"Minutes\"\n                              />\n                            </BarChart>\n                          ) : (\n                            <ComposedChart\n                              data={avgDurationData}\n                              margin={{\n                                top: 5,\n                                right: 5,\n                                left: -30,\n                                bottom: 0,\n                              }}\n                            >\n                              <defs>\n                                <linearGradient\n                                  id=\"colorAvgDuration\"\n                                  x1=\"0\"\n                                  y1=\"0\"\n                                  x2=\"0\"\n                                  y2=\"1\"\n                                >\n                                  <stop\n                                    offset=\"5%\"\n                                    stopColor=\"#34C759\"\n                                    stopOpacity={0.3}\n                                  />\n                                  <stop\n                                    offset=\"95%\"\n                                    stopColor=\"#34C759\"\n                                    stopOpacity={0}\n                                  />\n                                </linearGradient>\n                              </defs>\n                              <XAxis\n                                dataKey=\"name\"\n                                tick={{ fontSize: 11, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                              />\n                              <YAxis\n                                tick={{ fontSize: 11, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                              />\n                              <Tooltip content={<CustomTooltip />} />\n                              <Area\n                                type=\"monotone\"\n                                dataKey=\"value\"\n                                stroke=\"#34C759\"\n                                strokeWidth={2}\n                                fill=\"url(#colorAvgDuration)\"\n                                name=\"Minutes\"\n                              />\n                            </ComposedChart>\n                          )}\n                        </ResponsiveContainer>\n                      </div>\n                    </div>\n\n                    {/* Sessions */}\n                    <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                      <div className=\"mb-4\">\n                        <h3 className=\"font-semibold text-gray-900\">\n                          Sessions completed\n                        </h3>\n                      </div>\n                      <div className=\"h-48\">\n                        <ResponsiveContainer width=\"100%\" height=\"100%\">\n                          {chartType === 'bar' ? (\n                            <BarChart\n                              data={chartData}\n                              margin={{\n                                top: 5,\n                                right: 5,\n                                left: -30,\n                                bottom: 0,\n                              }}\n                            >\n                              <XAxis\n                                dataKey=\"name\"\n                                tick={{ fontSize: 11, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                              />\n                              <YAxis\n                                tick={{ fontSize: 11, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                              />\n                              <Tooltip content={<CustomTooltip />} />\n                              <Bar\n                                dataKey=\"sessions\"\n                                fill=\"#34C759\"\n                                radius={[4, 4, 0, 0]}\n                                name=\"Sessions\"\n                              />\n                            </BarChart>\n                          ) : (\n                            <ComposedChart\n                              data={chartData}\n                              margin={{\n                                top: 5,\n                                right: 5,\n                                left: -30,\n                                bottom: 0,\n                              }}\n                            >\n                              <defs>\n                                <linearGradient\n                                  id=\"colorSessionsSmall\"\n                                  x1=\"0\"\n                                  y1=\"0\"\n                                  x2=\"0\"\n                                  y2=\"1\"\n                                >\n                                  <stop\n                                    offset=\"5%\"\n                                    stopColor=\"#34C759\"\n                                    stopOpacity={0.3}\n                                  />\n                                  <stop\n                                    offset=\"95%\"\n                                    stopColor=\"#34C759\"\n                                    stopOpacity={0}\n                                  />\n                                </linearGradient>\n                              </defs>\n                              <XAxis\n                                dataKey=\"name\"\n                                tick={{ fontSize: 11, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                              />\n                              <YAxis\n                                tick={{ fontSize: 11, fill: '#666' }}\n                                axisLine={false}\n                                tickLine={false}\n                              />\n                              <Tooltip content={<CustomTooltip />} />\n                              <Area\n                                type=\"monotone\"\n                                dataKey=\"sessions\"\n                                stroke=\"#34C759\"\n                                strokeWidth={2}\n                                fill=\"url(#colorSessionsSmall)\"\n                                name=\"Sessions\"\n                              />\n                            </ComposedChart>\n                          )}\n                        </ResponsiveContainer>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Stats Grid - 5 columns */}\n                  <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n                    <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                      <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                        Total Hours\n                      </div>\n                      <div className=\"text-2xl font-bold mb-1\">\n                        {calculatedStats.totalHours.toFixed(1)}\n                      </div>\n                      {renderPercentageChange(calculatedStats.hoursChange)}\n                    </div>\n\n                    <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                      <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                        Avg Duration\n                      </div>\n                      <div className=\"text-2xl font-bold mb-1\">\n                        {calculatedStats.avgDuration}m\n                      </div>\n                      {renderPercentageChange(\n                        calculatedStats.avgDurationChange\n                      )}\n                    </div>\n\n                    <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                      <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                        Sessions\n                      </div>\n                      <div className=\"text-2xl font-bold mb-1\">\n                        {calculatedStats.sessions}\n                      </div>\n                      {renderPercentageChange(calculatedStats.sessionsChange)}\n                    </div>\n\n                    <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                      <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                        Active Days\n                      </div>\n                      <div className=\"text-2xl font-bold mb-1\">\n                        {calculatedStats.activeDays}\n                      </div>\n                      {renderPercentageChange(calculatedStats.activeDaysChange)}\n                    </div>\n\n                    <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                      <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                        Activities\n                      </div>\n                      <div className=\"text-2xl font-bold mb-1\">\n                        {calculatedStats.activities}\n                      </div>\n                      {renderPercentageChange(calculatedStats.activitiesChange)}\n                    </div>\n                  </div>\n\n                  {/* Secondary Stats Grid - Streaks */}\n                  <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n                    <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                      <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                        Current Streak\n                      </div>\n                      <div className=\"text-2xl font-bold mb-1\">\n                        {calculatedStats.currentStreak}\n                      </div>\n                      {renderPercentageChange(calculatedStats.streakChange)}\n                    </div>\n\n                    <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                      <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                        Longest Streak\n                      </div>\n                      <div className=\"text-2xl font-bold mb-1\">\n                        {calculatedStats.longestStreak}\n                      </div>\n                      {renderPercentageChange(calculatedStats.streakChange)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {activeTab === 'sessions' && (\n              <div className=\"max-w-4xl mx-auto\">\n                <Feed\n                  filters={{ type: 'user', userId: profile.id }}\n                  showEndMessage={true}\n                />\n              </div>\n            )}\n\n            {activeTab === 'followers' && (\n              <div>\n                <FollowersList userId={profile.id} />\n              </div>\n            )}\n\n            {activeTab === 'following' && (\n              <div>\n                <FollowingList userId={profile.id} />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/profile/[username]/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/profile/loading.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/profile/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/record-manual/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/search/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'useEffect' is defined but never used.",
        "line": 4,
        "column": 20,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isLoadingFollowing' is assigned a value but never used.",
        "line": 47,
        "column": 36,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 47,
        "endColumn": 54
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isLoadingUserGroups' is assigned a value but never used.",
        "line": 52,
        "column": 42,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 52,
        "endColumn": 61
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 163,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 163,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4847, 4850], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4847, 4850], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 203,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 203,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6283, 6286], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6283, 6286], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useSearchParams } from 'next/navigation';\nimport { useState, useEffect, Suspense, useMemo } from 'react';\nimport Link from 'next/link';\nimport Header from '@/components/HeaderComponent';\nimport BottomNavigation from '@/components/BottomNavigation';\nimport GroupAvatar from '@/components/GroupAvatar';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useDebounce } from '@/hooks/useDebounce';\nimport { UserCardCompact } from '@/components/UserCard';\nimport { Users } from 'lucide-react';\nimport { firebaseApi } from '@/lib/api';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { CACHE_KEYS } from '@/lib/queryClient';\n\n// Optimized hooks\nimport {\n  useSearchUsers,\n  useSearchGroups,\n  useSuggestedUsers,\n  useSuggestedGroups,\n  useFollowingList,\n  useUserGroups,\n} from '@/features/search/hooks';\n\n// Loading skeletons\nimport {\n  SearchLoadingSkeleton,\n  SuggestionsLoadingSkeleton,\n} from '@/features/search/components/SearchLoadingSkeleton';\n\nfunction SearchContent() {\n  const searchParams = useSearchParams();\n  const initialQuery = searchParams.get('q') || '';\n  const type = (searchParams.get('type') || 'people') as 'people' | 'groups';\n\n  const [query, setQuery] = useState(initialQuery);\n  const [joiningGroup, setJoiningGroup] = useState<string | null>(null);\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  // Debounce search input to reduce API calls\n  const debouncedQuery = useDebounce(query, 300);\n\n  // Prefetch following list and user groups in parallel when page loads\n  const { followingIds, isLoading: isLoadingFollowing } = useFollowingList({\n    userId: user?.id,\n    enabled: !!user,\n  });\n\n  const { groups: userGroups, isLoading: isLoadingUserGroups } = useUserGroups({\n    userId: user?.id,\n    enabled: !!user && type === 'groups',\n  });\n\n  const joinedGroupIds = useMemo(\n    () => new Set(userGroups.map(g => g.id)),\n    [userGroups]\n  );\n\n  // Search hooks - only enabled when there's a search query\n  const hasSearchQuery = debouncedQuery.trim().length > 0;\n\n  const { users: searchUsers, isLoading: isSearchingUsers } = useSearchUsers({\n    searchTerm: debouncedQuery,\n    enabled: hasSearchQuery && type === 'people',\n  });\n\n  const { groups: searchGroups, isLoading: isSearchingGroups } =\n    useSearchGroups({\n      searchTerm: debouncedQuery,\n      enabled: hasSearchQuery && type === 'groups',\n    });\n\n  // Suggestions hooks - only enabled when there's no search query\n  const { suggestedUsers, isLoading: isLoadingSuggestedUsers } =\n    useSuggestedUsers({\n      enabled: !hasSearchQuery && type === 'people' && !!user,\n      limit: 5,\n    });\n\n  const { suggestedGroups, isLoading: isLoadingSuggestedGroups } =\n    useSuggestedGroups({\n      userId: user?.id,\n      enabled: !hasSearchQuery && type === 'groups' && !!user,\n      limit: 20,\n    });\n\n  // Enhance search results with following/joined status\n  const enhancedUsers = useMemo(() => {\n    if (!hasSearchQuery) return [];\n\n    return searchUsers\n      .map(u => ({\n        ...u,\n        isFollowing: followingIds.has(u.id),\n        isSelf: user && u.id === user.id,\n      }))\n      .sort((a, b) => (b.isSelf ? 1 : 0) - (a.isSelf ? 1 : 0));\n  }, [searchUsers, followingIds, user, hasSearchQuery]);\n\n  const enhancedSuggestedUsers = useMemo(() => {\n    return suggestedUsers.map(u => ({\n      ...u,\n      isFollowing: followingIds.has(u.id),\n    }));\n  }, [suggestedUsers, followingIds]);\n\n  // Determine loading state\n  const isLoading = hasSearchQuery\n    ? type === 'people'\n      ? isSearchingUsers\n      : isSearchingGroups\n    : type === 'people'\n      ? isLoadingSuggestedUsers\n      : isLoadingSuggestedGroups;\n\n  const handleFollowChange = (userId: string, isFollowing: boolean) => {\n    // Optimistically update the following IDs set\n    queryClient.setQueryData(\n      ['following-ids', user!.id],\n      (old: Set<string> = new Set()) => {\n        const newSet = new Set(old);\n        if (isFollowing) {\n          newSet.add(userId);\n        } else {\n          newSet.delete(userId);\n        }\n        return newSet;\n      }\n    );\n  };\n\n  const handleJoinGroup = async (groupId: string, e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (!user) return;\n\n    const isJoined = joinedGroupIds.has(groupId);\n\n    try {\n      setJoiningGroup(groupId);\n\n      if (isJoined) {\n        await firebaseApi.group.leaveGroup(groupId, user.id);\n      } else {\n        await firebaseApi.group.joinGroup(groupId, user.id);\n      }\n\n      // Invalidate user groups cache to refetch\n      queryClient.invalidateQueries({\n        queryKey: CACHE_KEYS.USER_GROUPS(user.id),\n      });\n    } catch (error) {\n      console.error('Failed to join/leave group:', error);\n    } finally {\n      setJoiningGroup(null);\n    }\n  };\n\n  const renderUserResult = (user: any) => {\n    if (user.isSelf) {\n      return (\n        <Link\n          key={user.id}\n          href={`/profile/${user.username}`}\n          className=\"block border-b border-gray-100 last:border-0\"\n        >\n          <div className=\"p-4 hover:bg-gray-50 transition-colors\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 rounded-full flex items-center justify-center text-base font-semibold bg-green-100 text-green-800 ring-2 ring-green-400\">\n                {(user.username?.[0] || 'U').toUpperCase()}\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-gray-900\">{user.name}</h3>\n                <p className=\"text-sm text-gray-600\">@{user.username}</p>\n                {user.bio && (\n                  <p className=\"text-sm text-gray-700 mt-1\">{user.bio}</p>\n                )}\n                <span className=\"inline-flex items-center px-2 py-0.5 mt-1 text-xs font-medium rounded-full bg-green-100 text-green-800\">\n                  This is you\n                </span>\n              </div>\n            </div>\n          </div>\n        </Link>\n      );\n    }\n\n    return (\n      <div key={user.id} className=\"border-b border-gray-100 last:border-0\">\n        <UserCardCompact\n          user={user}\n          variant=\"search\"\n          onFollowChange={handleFollowChange}\n        />\n      </div>\n    );\n  };\n\n  const renderGroupResult = (group: any) => {\n    const isJoined = joinedGroupIds.has(group.id);\n    const isLoading = joiningGroup === group.id;\n\n    return (\n      <div className=\"p-3 transition-colors\">\n        <div className=\"flex items-center gap-3\">\n          {/* Group Icon */}\n          <Link href={`/groups/${group.id}`}>\n            <GroupAvatar\n              imageUrl={group.imageUrl}\n              name={group.name}\n              size=\"md\"\n            />\n          </Link>\n\n          {/* Group Info */}\n          <div className=\"flex-1 min-w-0\">\n            <Link href={`/groups/${group.id}`}>\n              <p className=\"font-semibold text-sm text-gray-900 hover:text-[#007AFF] truncate mb-0.5 transition-colors\">\n                {group.name}\n              </p>\n            </Link>\n            <div className=\"text-xs text-gray-500\">\n              {group.memberCount || group.members || 0}{' '}\n              {(group.memberCount || group.members) === 1\n                ? 'member'\n                : 'members'}\n            </div>\n          </div>\n\n          {/* Join Button */}\n          <button\n            onClick={e => handleJoinGroup(group.id, e)}\n            disabled={isLoading}\n            className={`text-sm font-semibold transition-colors whitespace-nowrap flex-shrink-0 ${\n              isJoined\n                ? 'text-gray-600 hover:text-gray-900'\n                : 'text-[#007AFF] hover:text-[#0051D5]'\n            } ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}`}\n          >\n            {isLoading ? 'Joining...' : isJoined ? 'Joined' : 'Join'}\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header - only show on desktop */}\n      <div className=\"hidden md:block\">\n        <Header />\n      </div>\n\n      {/* Mobile search header */}\n      <div className=\"md:hidden bg-white border-b border-gray-200 px-4 py-3 sticky top-0 z-40\">\n        <div className=\"flex items-center space-x-3\">\n          <svg\n            className=\"w-6 h-6 text-gray-600\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n            />\n          </svg>\n          <h1 className=\"text-xl font-semibold text-gray-900\">Discover</h1>\n        </div>\n      </div>\n\n      <div className=\"max-w-4xl mx-auto px-4 pt-6 pb-4 md:py-8 md:pt-24\">\n        {/* Search Info - only show if there's a query */}\n        {initialQuery && (\n          <div className=\"mb-6 hidden md:block\">\n            <h1 className=\"text-2xl font-bold text-gray-900\">\n              Search Results for \"{initialQuery}\"\n            </h1>\n            <p className=\"text-gray-600 mt-1\">\n              Searching in {type.charAt(0).toUpperCase() + type.slice(1)}\n            </p>\n          </div>\n        )}\n\n        {/* Mobile Search Form */}\n        <div className=\"md:hidden mb-6\">\n          <form\n            onSubmit={e => {\n              e.preventDefault();\n              if (query.trim())\n                window.location.href = `/search?q=${encodeURIComponent(query.trim())}&type=${type}`;\n            }}\n          >\n            <div className=\"space-y-4\">\n              {/* Filter Tabs */}\n              <div className=\"flex bg-white border border-gray-200 rounded-xl overflow-hidden shadow-sm\">\n                <button\n                  type=\"button\"\n                  onClick={() =>\n                    (window.location.href = `/search?q=${encodeURIComponent(initialQuery)}&type=people`)\n                  }\n                  className={`flex-1 py-3 px-4 text-sm font-medium transition-all border-r border-gray-200 last:border-r-0 ${\n                    type === 'people'\n                      ? 'bg-[#007AFF] text-white'\n                      : 'text-gray-700 hover:bg-gray-50'\n                  }`}\n                >\n                  People\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={() =>\n                    (window.location.href = `/search?q=${encodeURIComponent(initialQuery)}&type=groups`)\n                  }\n                  className={`flex-1 py-3 px-4 text-sm font-medium transition-all ${\n                    type === 'groups'\n                      ? 'bg-[#007AFF] text-white'\n                      : 'text-gray-700 hover:bg-gray-50'\n                  }`}\n                >\n                  Groups\n                </button>\n              </div>\n\n              {/* Search Input */}\n              <div className=\"relative\">\n                <input\n                  type=\"text\"\n                  value={query}\n                  onChange={e => setQuery(e.target.value)}\n                  placeholder={`Search ${type}...`}\n                  className=\"w-full px-4 py-3 pr-12 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#FC4C02] focus:border-transparent text-base\"\n                />\n                <button\n                  type=\"submit\"\n                  className=\"absolute right-3 top-1/2 -translate-y-1/2 p-1.5 text-gray-400 hover:text-[#FC4C02] transition-colors\"\n                >\n                  <svg\n                    className=\"w-5 h-5\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                    />\n                  </svg>\n                </button>\n              </div>\n            </div>\n          </form>\n        </div>\n\n        {/* Results */}\n        <div>\n          {!hasSearchQuery ? (\n            isLoading ? (\n              <SuggestionsLoadingSkeleton />\n            ) : (\n              <div className=\"space-y-6\">\n                {/* Suggested People - only show on People tab */}\n                {type === 'people' && (\n                  <>\n                    {enhancedSuggestedUsers.length > 0 ? (\n                      <div>\n                        <div className=\"flex items-center justify-between mb-3 px-1\">\n                          <h3 className=\"text-lg font-semibold text-gray-900\">\n                            People you might like\n                          </h3>\n                        </div>\n                        <div className=\"space-y-1\">\n                          {enhancedSuggestedUsers.map(suggestedUser => (\n                            <div\n                              key={suggestedUser.id}\n                              className=\"bg-white rounded-lg overflow-hidden\"\n                            >\n                              <UserCardCompact\n                                user={suggestedUser}\n                                variant=\"search\"\n                                onFollowChange={handleFollowChange}\n                              />\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"p-12 text-center\">\n                        <div className=\"w-16 h-16 mx-auto bg-gray-100 rounded-full flex items-center justify-center mb-4\">\n                          <Users className=\"w-8 h-8 text-gray-400\" />\n                        </div>\n                        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                          No people to suggest\n                        </h3>\n                        <p className=\"text-gray-600 text-sm\">\n                          There are no people available at the moment. Check\n                          back later!\n                        </p>\n                      </div>\n                    )}\n                  </>\n                )}\n\n                {/* Suggested Groups - only show on Groups tab */}\n                {type === 'groups' && (\n                  <>\n                    {suggestedGroups.length > 0 ? (\n                      <div>\n                        <div className=\"flex items-center justify-between mb-3 px-1\">\n                          <h3 className=\"text-lg font-semibold text-gray-900\">\n                            Suggested Groups\n                          </h3>\n                        </div>\n                        <div className=\"space-y-1\">\n                          {suggestedGroups.slice(0, 5).map(group => (\n                            <div\n                              key={group.id}\n                              className=\"bg-white rounded-lg overflow-hidden hover:bg-gray-50 transition-colors\"\n                            >\n                              {renderGroupResult(group)}\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"p-12 text-center\">\n                        <div className=\"w-16 h-16 mx-auto bg-gray-100 rounded-full flex items-center justify-center mb-4\">\n                          <Users className=\"w-8 h-8 text-gray-400\" />\n                        </div>\n                        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                          No groups to suggest\n                        </h3>\n                        <p className=\"text-gray-600 text-sm\">\n                          There are no groups available at the moment. Check\n                          back later!\n                        </p>\n                      </div>\n                    )}\n                  </>\n                )}\n              </div>\n            )\n          ) : isLoading ? (\n            <SearchLoadingSkeleton type={type} count={5} />\n          ) : (\n            <>\n              {type === 'people' && enhancedUsers.length === 0 && (\n                <div className=\"bg-white rounded-lg border border-gray-200 p-12 text-center\">\n                  <svg\n                    className=\"w-20 h-20 mx-auto text-gray-300\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                    />\n                  </svg>\n                  <h3 className=\"mt-4 text-lg font-medium text-gray-900\">\n                    No results found\n                  </h3>\n                  <p className=\"text-gray-600 mt-2\">\n                    No {type} found matching \"{debouncedQuery}\"\n                  </p>\n                  <p className=\"text-gray-500 text-sm mt-1\">\n                    Try a different search term or filter\n                  </p>\n                </div>\n              )}\n\n              {type === 'groups' && searchGroups.length === 0 && (\n                <div className=\"bg-white rounded-lg border border-gray-200 p-12 text-center\">\n                  <svg\n                    className=\"w-20 h-20 mx-auto text-gray-300\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                    />\n                  </svg>\n                  <h3 className=\"mt-4 text-lg font-medium text-gray-900\">\n                    No results found\n                  </h3>\n                  <p className=\"text-gray-600 mt-2\">\n                    No {type} found matching \"{debouncedQuery}\"\n                  </p>\n                  <p className=\"text-gray-500 text-sm mt-1\">\n                    Try a different search term or filter\n                  </p>\n                </div>\n              )}\n\n              {type === 'people' && enhancedUsers.length > 0 && (\n                <div>\n                  <div className=\"mb-2\">\n                    <p className=\"text-sm text-gray-600\">\n                      Found {enhancedUsers.length}{' '}\n                      {enhancedUsers.length === 1 ? 'result' : 'results'}\n                    </p>\n                  </div>\n                  <div className=\"bg-white rounded-lg border border-gray-200 overflow-hidden\">\n                    {enhancedUsers.map(renderUserResult)}\n                  </div>\n                </div>\n              )}\n\n              {type === 'groups' && searchGroups.length > 0 && (\n                <div>\n                  <div className=\"mb-2\">\n                    <p className=\"text-sm text-gray-600\">\n                      Found {searchGroups.length}{' '}\n                      {searchGroups.length === 1 ? 'result' : 'results'}\n                    </p>\n                  </div>\n                  <div className=\"bg-white rounded-lg border border-gray-200 overflow-hidden\">\n                    {searchGroups.map(renderGroupResult)}\n                  </div>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n\n      {/* Bottom padding for mobile navigation */}\n      <div className=\"h-20 md:hidden\" />\n\n      <BottomNavigation />\n    </div>\n  );\n}\n\nexport default function SearchPage() {\n  return (\n    <Suspense\n      fallback={\n        <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n          <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-[#007AFF]\"></div>\n        </div>\n      }\n    >\n      <SearchContent />\n    </Suspense>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/sessions/[id]/edit/page.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadSession'. Either include it or remove the dependency array.",
        "line": 28,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 28,
        "endColumn": 17,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadSession, sessionId]",
            "fix": { "range": [871, 882], "text": "[loadSession, sessionId]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { ArrowLeft } from 'lucide-react';\nimport { Session } from '@/types';\nimport { firebaseApi } from '@/lib/api';\nimport { useAuth } from '@/hooks/useAuth';\nimport { EditSessionModal } from '@/components/EditSessionModal';\nimport Header from '@/components/HeaderComponent';\nimport MobileHeader from '@/components/MobileHeader';\n\ninterface SessionEditPageProps {\n  params: Promise<{\n    id: string;\n  }>;\n}\n\nfunction SessionEditContent({ sessionId }: { sessionId: string }) {\n  const router = useRouter();\n  const { user } = useAuth();\n  const [session, setSession] = useState<Session | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadSession();\n  }, [sessionId]);\n\n  const loadSession = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Fetch the session\n      const sessionData = await firebaseApi.session.getSession(sessionId);\n\n      // Check if user owns this session\n      if (!user || sessionData.userId !== user.id) {\n        setError('You do not have permission to edit this session');\n        return;\n      }\n\n      setSession(sessionData);\n    } catch (err) {\n      console.error('Error loading session:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load session');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSave = async (sessionId: string, data: {\n    title: string;\n    description?: string;\n    projectId?: string;\n    tags?: string[];\n    visibility?: 'everyone' | 'followers' | 'private';\n    images?: string[];\n    startTime?: Date;\n    duration?: number;\n  }) => {\n    try {\n      await firebaseApi.session.updateSession(sessionId, data);\n      // Navigate back to the session detail page\n      router.push(`/sessions/${sessionId}`);\n    } catch (err) {\n      console.error('Failed to update session:', err);\n      throw err; // Let the modal handle the error\n    }\n  };\n\n  const handleClose = () => {\n    router.back();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"hidden md:block\">\n          <Header />\n        </div>\n        <MobileHeader title=\"Edit Session\" />\n\n        <div className=\"max-w-[600px] mx-auto px-4 py-6\">\n          <div className=\"bg-white border border-gray-200 rounded-lg p-6 animate-pulse\">\n            <div className=\"space-y-4\">\n              <div className=\"h-10 bg-gray-300 rounded\"></div>\n              <div className=\"h-24 bg-gray-300 rounded\"></div>\n              <div className=\"h-10 bg-gray-300 rounded\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !session) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"hidden md:block\">\n          <Header />\n        </div>\n        <MobileHeader title=\"Edit Session\" />\n\n        <div className=\"max-w-[600px] mx-auto px-4 py-6\">\n          <div className=\"text-center py-12\">\n            <div className=\"text-red-600 mb-4\">\n              <svg className=\"w-12 h-12 mx-auto mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 18.5c-.77.833.192 2.5 1.732 2.5z\" />\n              </svg>\n              <p className=\"font-medium text-lg\">Cannot Edit Session</p>\n              <p className=\"text-sm text-gray-600 mt-1\">\n                {error || 'This session may have been deleted or you may not have permission to edit it.'}\n              </p>\n            </div>\n            <button\n              onClick={() => router.push('/')}\n              className=\"px-4 py-2 bg-[#007AFF] text-white rounded-lg hover:bg-[#0051D5] transition-colors\"\n            >\n              Back to Feed\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"hidden md:block\">\n        <Header />\n      </div>\n      <MobileHeader title=\"Edit Session\" />\n\n      <div className=\"max-w-[600px] mx-auto md:px-4 md:py-6\">\n        {/* Back button for desktop */}\n        <button\n          onClick={() => router.back()}\n          className=\"hidden md:flex items-center gap-2 text-gray-600 hover:text-gray-900 mb-4 transition-colors\"\n        >\n          <ArrowLeft className=\"w-5 h-5\" />\n          <span>Back</span>\n        </button>\n\n        {/* Edit Form - Not in modal, just as page content */}\n        <EditSessionModal\n          session={session}\n          onClose={handleClose}\n          onSave={handleSave}\n          isPage={true}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default function SessionEditPageWrapper({ params }: SessionEditPageProps) {\n  const [sessionId, setSessionId] = React.useState<string>('');\n\n  React.useEffect(() => {\n    params.then(({ id }) => setSessionId(id));\n  }, [params]);\n\n  return (\n    <>\n      {!sessionId ? (\n        <div className=\"min-h-screen bg-gray-50\">\n          <div className=\"hidden md:block\">\n            <Header />\n          </div>\n          <MobileHeader title=\"Edit Session\" />\n          <div className=\"max-w-[600px] mx-auto px-4 py-6\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-8 bg-gray-200 rounded w-48 mb-4\"></div>\n              <div className=\"h-64 bg-gray-200 rounded\"></div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <SessionEditContent sessionId={sessionId} />\n      )}\n    </>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/sessions/[id]/page.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadSession'. Either include it or remove the dependency array.",
        "line": 29,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 29,
        "endColumn": 17,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadSession, sessionId]",
            "fix": { "range": [943, 954], "text": "[loadSession, sessionId]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { ArrowLeft } from 'lucide-react';\nimport { SessionWithDetails } from '@/types';\nimport { firebaseApi } from '@/lib/api';\nimport { useAuth } from '@/hooks/useAuth';\nimport SessionCard from '@/components/SessionCard';\nimport Header from '@/components/HeaderComponent';\nimport MobileHeader from '@/components/MobileHeader';\nimport { ErrorBoundary } from '@/components/ErrorBoundary';\n\ninterface SessionDetailPageProps {\n  params: Promise<{\n    id: string;\n  }>;\n}\n\nfunction SessionDetailContent({ sessionId }: { sessionId: string }) {\n  const router = useRouter();\n  const { user } = useAuth();\n  const [session, setSession] = useState<SessionWithDetails | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadSession();\n  }, [sessionId]);\n\n  const loadSession = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Fetch the session with details\n      const sessionData = await firebaseApi.session.getSessionWithDetails(sessionId);\n      setSession(sessionData as unknown as SessionWithDetails);\n    } catch (err) {\n      console.error('Error loading session:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load session');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSupport = async (sessionId: string) => {\n    try {\n      await firebaseApi.post.supportSession(sessionId);\n\n      // Optimistic update\n      setSession(prev => prev ? {\n        ...prev,\n        isSupported: true,\n        supportCount: prev.supportCount + 1,\n        supportedBy: [...(prev.supportedBy || []), user?.id || ''].filter(Boolean)\n      } : null);\n    } catch (err) {\n      console.error('Failed to support session:', err);\n    }\n  };\n\n  const handleRemoveSupport = async (sessionId: string) => {\n    try {\n      await firebaseApi.post.removeSupportFromSession(sessionId);\n\n      // Optimistic update\n      setSession(prev => prev ? {\n        ...prev,\n        isSupported: false,\n        supportCount: Math.max(0, prev.supportCount - 1),\n        supportedBy: (prev.supportedBy || []).filter(id => id !== user?.id)\n      } : null);\n    } catch (err) {\n      console.error('Failed to remove support:', err);\n    }\n  };\n\n  const handleShare = async (sessionId: string) => {\n    try {\n      const sessionUrl = `${window.location.origin}/sessions/${sessionId}`;\n\n      if (navigator.share) {\n        await navigator.share({\n          title: session?.title || 'Check out this session on Ambira',\n          text: session?.description || 'Look at this productive session!',\n          url: sessionUrl\n        });\n      } else {\n        await navigator.clipboard.writeText(sessionUrl);\n        alert('Link copied to clipboard!');\n      }\n    } catch (err) {\n      if (err instanceof Error && err.name === 'AbortError') {\n        return;\n      }\n      console.error('Failed to share session:', err);\n    }\n  };\n\n  const handleDelete = async (sessionId: string) => {\n    if (!confirm('Are you sure you want to delete this session?')) {\n      return;\n    }\n\n    try {\n      await firebaseApi.session.deleteSession(sessionId);\n      router.push('/');\n    } catch (err) {\n      console.error('Failed to delete session:', err);\n      alert('Failed to delete session. Please try again.');\n    }\n  };\n\n  // Dynamic metadata using useEffect for client component\n  // MUST be called before any conditional returns\n  React.useEffect(() => {\n    if (session) {\n      const title = session.title || 'Session';\n      document.title = `${title} by ${session.user?.name || 'User'} - Ambira`;\n\n      const description = session.description || `Check out this productive session on Ambira`;\n\n      let metaDescription = document.querySelector('meta[name=\"description\"]');\n      if (!metaDescription) {\n        metaDescription = document.createElement('meta');\n        metaDescription.setAttribute('name', 'description');\n        document.head.appendChild(metaDescription);\n      }\n      metaDescription.setAttribute('content', description);\n\n      // Open Graph tags\n      let ogTitle = document.querySelector('meta[property=\"og:title\"]');\n      if (!ogTitle) {\n        ogTitle = document.createElement('meta');\n        ogTitle.setAttribute('property', 'og:title');\n        document.head.appendChild(ogTitle);\n      }\n      ogTitle.setAttribute('content', `${title} - Ambira`);\n\n      let ogDescription = document.querySelector('meta[property=\"og:description\"]');\n      if (!ogDescription) {\n        ogDescription = document.createElement('meta');\n        ogDescription.setAttribute('property', 'og:description');\n        document.head.appendChild(ogDescription);\n      }\n      ogDescription.setAttribute('content', description);\n\n      let ogType = document.querySelector('meta[property=\"og:type\"]');\n      if (!ogType) {\n        ogType = document.createElement('meta');\n        ogType.setAttribute('property', 'og:type');\n        document.head.appendChild(ogType);\n      }\n      ogType.setAttribute('content', 'article');\n\n      // Twitter card tags\n      let twitterCard = document.querySelector('meta[name=\"twitter:card\"]');\n      if (!twitterCard) {\n        twitterCard = document.createElement('meta');\n        twitterCard.setAttribute('name', 'twitter:card');\n        document.head.appendChild(twitterCard);\n      }\n      twitterCard.setAttribute('content', 'summary_large_image');\n\n      let twitterTitle = document.querySelector('meta[name=\"twitter:title\"]');\n      if (!twitterTitle) {\n        twitterTitle = document.createElement('meta');\n        twitterTitle.setAttribute('name', 'twitter:title');\n        document.head.appendChild(twitterTitle);\n      }\n      twitterTitle.setAttribute('content', `${title} - Ambira`);\n\n      let twitterDescription = document.querySelector('meta[name=\"twitter:description\"]');\n      if (!twitterDescription) {\n        twitterDescription = document.createElement('meta');\n        twitterDescription.setAttribute('name', 'twitter:description');\n        document.head.appendChild(twitterDescription);\n      }\n      twitterDescription.setAttribute('content', description);\n    }\n  }, [session]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"hidden md:block\">\n          <Header />\n        </div>\n        <MobileHeader title=\"Session\" />\n\n        <div className=\"max-w-[600px] mx-auto px-4 py-6\">\n          <div className=\"bg-white border border-gray-200 rounded-lg p-4 animate-pulse\">\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"w-10 h-10 bg-gray-300 rounded-full\"></div>\n              <div className=\"space-y-2 flex-1\">\n                <div className=\"h-4 bg-gray-300 rounded w-32\"></div>\n                <div className=\"h-3 bg-gray-300 rounded w-24\"></div>\n              </div>\n            </div>\n            <div className=\"space-y-3\">\n              <div className=\"h-4 bg-gray-300 rounded w-full\"></div>\n              <div className=\"h-4 bg-gray-300 rounded w-3/4\"></div>\n              <div className=\"h-48 bg-gray-300 rounded\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !session) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"hidden md:block\">\n          <Header />\n        </div>\n        <MobileHeader title=\"Session\" />\n\n        <div className=\"max-w-[600px] mx-auto px-4 py-6\">\n          <div className=\"text-center py-12\">\n            <div className=\"text-red-600 mb-4\">\n              <svg className=\"w-12 h-12 mx-auto mb-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 18.5c-.77.833.192 2.5 1.732 2.5z\" />\n              </svg>\n              <p className=\"font-medium text-lg\">Session not found</p>\n              <p className=\"text-sm text-gray-600 mt-1\">\n                {error || 'This session may have been deleted or you may not have permission to view it.'}\n              </p>\n            </div>\n            <button\n              onClick={() => router.push('/')}\n              className=\"px-4 py-2 bg-[#007AFF] text-white rounded-lg hover:bg-[#0051D5] transition-colors\"\n            >\n              Back to Feed\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const isOwnSession = user && session.userId === user.id;\n\n  return (\n    <ErrorBoundary\n      fallback={\n        <div className=\"min-h-screen bg-gray-50\">\n          <div className=\"hidden md:block\">\n            <Header />\n          </div>\n          <MobileHeader title=\"Session\" />\n          <div className=\"max-w-[600px] mx-auto px-4 py-6 text-center\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">Error loading session</h2>\n            <p className=\"text-gray-600 mb-6\">Something went wrong while loading this session.</p>\n            <button\n              onClick={() => router.push('/')}\n              className=\"px-4 py-2 bg-[#007AFF] text-white rounded-lg hover:bg-[#0051D5] transition-colors\"\n            >\n              Back to Feed\n            </button>\n          </div>\n        </div>\n      }\n    >\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"hidden md:block\">\n          <Header />\n        </div>\n        <MobileHeader title=\"Session\" />\n\n        <div className=\"max-w-[600px] mx-auto md:px-4 md:py-6\">\n          {/* Back button for desktop */}\n          <button\n            onClick={() => router.back()}\n            className=\"hidden md:flex items-center gap-2 text-gray-600 hover:text-gray-900 mb-4 transition-colors\"\n          >\n            <ArrowLeft className=\"w-5 h-5\" />\n            <span>Back</span>\n          </button>\n\n          {/* Session Card */}\n          <SessionCard\n            session={session}\n            onSupport={handleSupport}\n            onRemoveSupport={handleRemoveSupport}\n            onShare={handleShare}\n            onEdit={isOwnSession ? (sessionId) => router.push(`/sessions/${sessionId}/edit`) : undefined}\n            onDelete={isOwnSession ? handleDelete : undefined}\n            showComments={true}\n          />\n        </div>\n      </div>\n    </ErrorBoundary>\n  );\n}\n\nexport default function SessionDetailPageWrapper({ params }: SessionDetailPageProps) {\n  const [sessionId, setSessionId] = React.useState<string>('');\n\n  React.useEffect(() => {\n    params.then(({ id }) => setSessionId(id));\n  }, [params]);\n\n  return (\n    <>\n      {!sessionId ? (\n        <div className=\"min-h-screen bg-gray-50\">\n          <div className=\"hidden md:block\">\n            <Header />\n          </div>\n          <MobileHeader title=\"Session\" />\n          <div className=\"max-w-[600px] mx-auto px-4 py-6\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-8 bg-gray-200 rounded w-48 mb-4\"></div>\n              <div className=\"h-64 bg-gray-200 rounded\"></div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <SessionDetailContent sessionId={sessionId} />\n      )}\n    </>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/sessions/[id]/share/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used.",
        "line": 5,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 13
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadSession'. Either include it or remove the dependency array.",
        "line": 41,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 41,
        "endColumn": 23,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadSession, sessionId, user]",
            "fix": {
              "range": [1333, 1350],
              "text": "[loadSession, sessionId, user]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 51,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 51,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1625, 1628], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1625, 1628], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'formatTimeAgo' is assigned a value but never used.",
        "line": 69,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 69,
        "endColumn": 22
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 392,
        "column": 17,
        "nodeType": "JSXOpeningElement",
        "endLine": 398,
        "endColumn": 19,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 532,
        "column": 17,
        "nodeType": "JSXOpeningElement",
        "endLine": 541,
        "endColumn": 19,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 562,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 571,
        "endColumn": 23,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 594,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 603,
        "endColumn": 23,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 856,
        "column": 17,
        "nodeType": "JSXOpeningElement",
        "endLine": 862,
        "endColumn": 19,
        "suppressions": [
          { "kind": "directive", "justification": "" },
          { "kind": "directive", "justification": "" }
        ]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useRouter } from 'next/navigation';\nimport Image from 'next/image';\nimport { ArrowLeft, Download, Share2 } from 'lucide-react';\nimport { SessionWithDetails, User } from '@/types';\nimport { firebaseApi } from '@/lib/api';\nimport { useAuth } from '@/hooks/useAuth';\nimport Header from '@/components/HeaderComponent';\nimport MobileHeader from '@/components/MobileHeader';\nimport { toPng } from 'html-to-image';\n\ninterface SessionSharePageProps {\n  params: Promise<{\n    id: string;\n  }>;\n}\n\ntype LayoutType = 'minimal' | 'square';\n\nfunction SessionShareContent({ sessionId }: { sessionId: string }) {\n  const router = useRouter();\n  const { user } = useAuth();\n  const [session, setSession] = useState<SessionWithDetails | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedLayout, setSelectedLayout] = useState<LayoutType | null>(\n    'square'\n  );\n  const [isExporting, setIsExporting] = useState(false);\n  const [exportError, setExportError] = useState<string | null>(null);\n\n  const minimalRef = useRef<HTMLDivElement>(null);\n  const squareRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (sessionId && user) {\n      loadSession();\n    }\n  }, [sessionId, user]);\n\n  const loadSession = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      const sessionData =\n        await firebaseApi.session.getSessionWithDetails(sessionId);\n      setSession(sessionData as unknown as SessionWithDetails);\n    } catch (err: any) {\n      console.error('Error loading session:', err);\n      setError(err.message || 'Failed to load session');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const formatTime = (seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n\n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    }\n    return `${minutes}m`;\n  };\n\n  const formatTimeAgo = (date: Date): string => {\n    const now = new Date();\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    const sessionDate = new Date(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate()\n    );\n\n    const timeStr = date.toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true,\n    });\n\n    if (sessionDate.getTime() === today.getTime()) {\n      return `Today at ${timeStr}`;\n    }\n\n    if (sessionDate.getTime() === yesterday.getTime()) {\n      return `Yesterday at ${timeStr}`;\n    }\n\n    const dateStr = date.toLocaleDateString('en-US', {\n      month: 'long',\n      day: 'numeric',\n      year: 'numeric',\n    });\n\n    return `${dateStr} at ${timeStr}`;\n  };\n\n  const getUserInitials = (user: User): string => {\n    return user.name\n      .split(' ')\n      .map(word => word.charAt(0))\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const formatDate = (date: Date): string => {\n    const dateStr = new Intl.DateTimeFormat('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n    }).format(date);\n\n    const timeStr = new Intl.DateTimeFormat('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true,\n    }).format(date);\n\n    return `${dateStr} at ${timeStr}`;\n  };\n\n  const getCurrentRef = () => {\n    if (selectedLayout === 'square') return squareRef;\n    if (selectedLayout === 'minimal') return minimalRef;\n    return null;\n  };\n\n  const handleExport = async () => {\n    const imageRef = getCurrentRef();\n    if (!imageRef || !imageRef.current) return;\n\n    setIsExporting(true);\n    setExportError(null);\n\n    try {\n      // Create a temporary container off-screen with the full-size layout\n      const tempContainer = document.createElement('div');\n      tempContainer.style.position = 'fixed';\n      tempContainer.style.left = '-9999px';\n      tempContainer.style.top = '0';\n      document.body.appendChild(tempContainer);\n\n      // Clone the layout content\n      const clonedLayout = imageRef.current.cloneNode(true) as HTMLElement;\n      tempContainer.appendChild(clonedLayout);\n\n      // Generate the image from the full-size layout\n      const dataUrl = await toPng(clonedLayout, {\n        quality: 1.0,\n        pixelRatio: 2,\n        cacheBust: true,\n        backgroundColor: '#ffffff',\n        width: selectedLayout === 'square' ? 1080 : 1080,\n        height: selectedLayout === 'square' ? 1110 : 1080,\n      });\n\n      // Clean up\n      document.body.removeChild(tempContainer);\n\n      const link = document.createElement('a');\n      link.download = `ambira-${session?.title?.toLowerCase().replace(/\\s+/g, '-') || 'session'}-${selectedLayout}.png`;\n      link.href = dataUrl;\n      link.click();\n    } catch (error) {\n      console.error('Failed to export image:', error);\n      setExportError('Failed to export image. Please try again.');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const handleShare = async () => {\n    const imageRef = getCurrentRef();\n    if (!imageRef || !imageRef.current) return;\n\n    setIsExporting(true);\n    setExportError(null);\n\n    try {\n      // Create a temporary container off-screen with the full-size layout\n      const tempContainer = document.createElement('div');\n      tempContainer.style.position = 'fixed';\n      tempContainer.style.left = '-9999px';\n      tempContainer.style.top = '0';\n      document.body.appendChild(tempContainer);\n\n      // Clone the layout content\n      const clonedLayout = imageRef.current.cloneNode(true) as HTMLElement;\n      tempContainer.appendChild(clonedLayout);\n\n      // Generate the image from the full-size layout\n      const dataUrl = await toPng(clonedLayout, {\n        quality: 1.0,\n        pixelRatio: 2,\n        cacheBust: true,\n        backgroundColor: '#ffffff',\n        width: selectedLayout === 'square' ? 1080 : 1080,\n        height: selectedLayout === 'square' ? 1110 : 1080,\n      });\n\n      // Clean up\n      document.body.removeChild(tempContainer);\n\n      const response = await fetch(dataUrl);\n      const blob = await response.blob();\n      const file = new File([blob], `ambira-session.png`, {\n        type: 'image/png',\n      });\n\n      if (navigator.share && navigator.canShare({ files: [file] })) {\n        await navigator.share({\n          files: [file],\n          title: session?.title || 'My Ambira Session',\n          text: `Check out my productivity session on Ambira!`,\n        });\n      } else {\n        await handleExport();\n      }\n    } catch (error) {\n      console.error('Failed to share image:', error);\n      if ((error as Error).name !== 'AbortError') {\n        setExportError('Failed to share. Downloading instead...');\n        await handleExport();\n      }\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"hidden md:block\">\n          <Header />\n        </div>\n        <MobileHeader title=\"Share Session\" />\n\n        <div className=\"max-w-4xl mx-auto px-4 py-6\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-6 bg-gray-300 rounded w-32\"></div>\n            <div className=\"grid grid-cols-3 gap-3\">\n              <div className=\"aspect-square bg-gray-300 rounded\"></div>\n              <div className=\"aspect-square bg-gray-300 rounded\"></div>\n              <div className=\"aspect-square bg-gray-300 rounded\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !session) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"hidden md:block\">\n          <Header />\n        </div>\n        <MobileHeader title=\"Share Session\" />\n\n        <div className=\"max-w-4xl mx-auto px-4 py-6\">\n          <div className=\"text-center py-12\">\n            <div className=\"text-red-600 mb-4\">\n              <svg\n                className=\"w-12 h-12 mx-auto mb-2\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 18.5c-.77.833.192 2.5 1.732 2.5z\"\n                />\n              </svg>\n              <p className=\"font-medium text-lg\">Cannot Share Session</p>\n              <p className=\"text-sm text-gray-600 mt-1\">\n                {error ||\n                  'This session may have been deleted or you may not have permission to view it.'}\n              </p>\n            </div>\n            <button\n              onClick={() => router.push('/')}\n              className=\"px-4 py-2 bg-[#007AFF] text-white rounded-lg hover:bg-[#0051D5] transition-colors\"\n            >\n              Back to Feed\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Check if the current user owns this session\n  if (session.userId !== user?.id) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"hidden md:block\">\n          <Header />\n        </div>\n        <MobileHeader title=\"Share Session\" />\n\n        <div className=\"max-w-4xl mx-auto px-4 py-6\">\n          <div className=\"text-center py-12\">\n            <div className=\"text-gray-600 mb-4\">\n              <svg\n                className=\"w-12 h-12 mx-auto mb-2\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z\"\n                />\n              </svg>\n              <p className=\"font-medium text-lg\">Cannot Share This Session</p>\n              <p className=\"text-sm text-gray-600 mt-1\">\n                You can only create share images for your own sessions.\n              </p>\n            </div>\n            <button\n              onClick={() => router.back()}\n              className=\"px-4 py-2 bg-[#007AFF] text-white rounded-lg hover:bg-[#0051D5] transition-colors\"\n            >\n              Go Back\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Square Mobile Post Layout\n  // Note: Using native <img> tags here instead of Next.js <Image> because this component\n  // is rendered to PNG via html-to-image, which doesn't support Next.js image optimization\n  /* eslint-disable @next/next/no-img-element */\n  const SquareLayout = () => (\n    <div\n      ref={squareRef}\n      style={{\n        width: '1080px',\n        height: '1110px',\n        backgroundColor: '#ffffff',\n        overflow: 'hidden',\n        fontFamily:\n          'system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", sans-serif',\n      }}\n    >\n      <div\n        style={{\n          height: '100%',\n          paddingTop: '48px',\n          paddingLeft: '32px',\n          paddingRight: '32px',\n          paddingBottom: '16px',\n          display: 'flex',\n          flexDirection: 'column',\n          backgroundColor: '#ffffff',\n        }}\n      >\n        {/* Top Bar - Logo/Website and User Info */}\n        <div\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n            marginBottom: '36px',\n          }}\n        >\n          {/* User Info */}\n          <div style={{ display: 'flex', alignItems: 'center', gap: '20px' }}>\n            {session.user.profilePicture ? (\n              <div\n                style={{\n                  width: '88px',\n                  height: '88px',\n                  borderRadius: '50%',\n                  overflow: 'hidden',\n                  flexShrink: 0,\n                }}\n              >\n                <img\n                  src={session.user.profilePicture}\n                  alt={session.user.name}\n                  width=\"88\"\n                  height=\"88\"\n                  style={{ width: '100%', height: '100%', objectFit: 'cover' }}\n                />\n              </div>\n            ) : (\n              <div\n                style={{\n                  width: '88px',\n                  height: '88px',\n                  backgroundColor: '#f3f4f6',\n                  borderRadius: '50%',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                  flexShrink: 0,\n                }}\n              >\n                <span\n                  style={{\n                    color: '#4b5563',\n                    fontWeight: 600,\n                    fontSize: '36px',\n                  }}\n                >\n                  {getUserInitials(session.user)}\n                </span>\n              </div>\n            )}\n            <div\n              style={{ display: 'flex', alignItems: 'baseline', gap: '12px' }}\n            >\n              <div\n                style={{\n                  fontWeight: 700,\n                  fontSize: '40px',\n                  color: '#111827',\n                  lineHeight: 1,\n                }}\n              >\n                {session.user.name}\n              </div>\n              <div\n                style={{\n                  fontSize: '28px',\n                  color: '#6b7280',\n                  lineHeight: 1,\n                  position: 'relative',\n                  top: '-3px',\n                }}\n              >\n                @{session.user.username}\n              </div>\n            </div>\n          </div>\n\n          {/* Logo and Website - Top Right */}\n          <div\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              gap: '14px',\n              flexShrink: 0,\n            }}\n          >\n            <svg\n              width=\"56\"\n              height=\"56\"\n              viewBox=\"0 0 375 375\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              style={{ flexShrink: 0 }}\n            >\n              <path\n                d=\"M 56.387 320.265 L 105.145 307.202 L 134.619 191.47 L 222.369 275.789 L 300.91 254.743 C 300.91 254.743 327.644 243.277 327.701 205.067 C 327.765 162.452 292.22 150.864 292.22 150.864 C 292.22 150.864 311.586 129.825 286.573 94.501 C 265.409 64.612 226.767 75.885 226.767 75.885 L 131.479 100.996 L 163.14 132.378 L 240.652 113.004 C 240.652 113.004 253.429 109.011 259.254 125.122 C 264.463 139.529 249.128 146.798 249.139 146.809 C 249.186 146.856 192.6 161.379 192.553 161.379 C 192.506 161.379 224.354 193.363 224.406 193.466 C 224.435 193.523 259.751 183.839 259.751 183.839 C 259.751 183.839 281.184 181.354 285.882 196.467 C 292.14 216.599 271.779 222.147 271.79 222.147 C 271.837 222.147 239.215 231.316 239.215 231.316 C 239.215 231.316 113.277 106.094 113.228 106.045 C 113.179 105.996 56.211 321.004 56.387 320.265 Z\"\n                fill=\"#007AFF\"\n                transform=\"matrix(0.96592605, 0.25881901, -0.25881901, 0.96592605, 57.2958925, -43.02296686)\"\n              />\n            </svg>\n            <span\n              style={{\n                fontSize: '36px',\n                fontWeight: 400,\n                color: '#111827',\n                lineHeight: 1,\n                whiteSpace: 'nowrap',\n              }}\n            >\n              www.ambira.app\n            </span>\n          </div>\n        </div>\n\n        {/* Title and Description */}\n        <div style={{ marginBottom: '32px' }}>\n          <h3\n            style={{\n              fontSize: '44px',\n              fontWeight: 'bold',\n              color: '#111827',\n              lineHeight: '1.2',\n              margin: 0,\n              marginBottom: '12px',\n              textAlign: 'left',\n            }}\n          >\n            {session.title || 'Focus Session'}\n          </h3>\n          {session.description && (\n            <p\n              style={{\n                color: '#4b5563',\n                fontSize: '28px',\n                lineHeight: '1.4',\n                margin: 0,\n                wordBreak: 'break-word',\n                textAlign: 'left',\n              }}\n            >\n              {session.description}\n            </p>\n          )}\n        </div>\n\n        {/* Images */}\n        {session.images && session.images.length > 0 && (\n          <div style={{ marginBottom: '32px' }}>\n            {session.images.length === 1 ? (\n              <div\n                style={{\n                  width: '100%',\n                  height: '480px',\n                  borderRadius: '16px',\n                  overflow: 'hidden',\n                  backgroundColor: '#f9fafb',\n                }}\n              >\n                <img\n                  src={session.images[0]}\n                  alt=\"Session image\"\n                  style={{\n                    width: '100%',\n                    height: '100%',\n                    objectFit: 'cover',\n                    objectPosition: 'center center',\n                  }}\n                />\n              </div>\n            ) : session.images.length === 2 ? (\n              <div\n                style={{\n                  display: 'grid',\n                  gridTemplateColumns: '1fr 1fr',\n                  gap: '12px',\n                }}\n              >\n                {session.images.slice(0, 2).map((img, idx) => (\n                  <div\n                    key={idx}\n                    style={{\n                      width: '100%',\n                      height: '380px',\n                      borderRadius: '16px',\n                      overflow: 'hidden',\n                      backgroundColor: '#f9fafb',\n                    }}\n                  >\n                    <img\n                      src={img}\n                      alt={`Session image ${idx + 1}`}\n                      style={{\n                        width: '100%',\n                        height: '100%',\n                        objectFit: 'cover',\n                        objectPosition: 'center center',\n                      }}\n                    />\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div\n                style={{\n                  display: 'grid',\n                  gridTemplateColumns: '1fr 1fr',\n                  gap: '12px',\n                }}\n              >\n                {session.images.slice(0, 4).map((img, idx) => (\n                  <div\n                    key={idx}\n                    style={{\n                      width: '100%',\n                      height: '240px',\n                      borderRadius: '16px',\n                      overflow: 'hidden',\n                      backgroundColor: '#f9fafb',\n                    }}\n                  >\n                    <img\n                      src={img}\n                      alt={`Session image ${idx + 1}`}\n                      style={{\n                        width: '100%',\n                        height: '100%',\n                        objectFit: 'cover',\n                        objectPosition: 'center center',\n                      }}\n                    />\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Stats */}\n        <div style={{ paddingLeft: '8px', paddingBottom: '0px' }}>\n          <div\n            style={{\n              display: 'grid',\n              gridTemplateColumns: '1fr 1fr',\n              gap: '32px',\n            }}\n          >\n            <div>\n              <div\n                style={{\n                  fontSize: '24px',\n                  color: '#6b7280',\n                  marginBottom: '10px',\n                  fontWeight: 500,\n                }}\n              >\n                Time\n              </div>\n              <div\n                style={{ fontSize: '32px', fontWeight: 600, color: '#111827' }}\n              >\n                {formatTime(session.duration)}\n              </div>\n            </div>\n            <div>\n              <div\n                style={{\n                  fontSize: '24px',\n                  color: '#6b7280',\n                  marginBottom: '10px',\n                  fontWeight: 500,\n                }}\n              >\n                Activity\n              </div>\n              <div\n                style={{\n                  fontSize: '32px',\n                  fontWeight: 600,\n                  color: '#111827',\n                  overflow: 'hidden',\n                  textOverflow: 'ellipsis',\n                  whiteSpace: 'nowrap',\n                }}\n              >\n                {session.activity?.name || session.project?.name || 'N/A'}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  // Minimal Clean Layout (no images)\n  // Note: Using native <img> tags here instead of Next.js <Image> because this component\n  // is rendered to PNG via html-to-image, which doesn't support Next.js image optimization\n  /* eslint-disable @next/next/no-img-element */\n  const MinimalLayout = () => (\n    <div\n      ref={minimalRef}\n      style={{\n        width: '1080px',\n        height: '1080px',\n        backgroundColor: '#ffffff',\n        overflow: 'hidden',\n      }}\n    >\n      <div\n        style={{\n          height: '100%',\n          padding: '60px',\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'space-between',\n          backgroundColor: '#f9fafb',\n        }}\n      >\n        <div\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n            borderBottom: '3px solid #111827',\n            paddingBottom: '20px',\n          }}\n        >\n          <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>\n            <svg\n              width=\"70\"\n              height=\"70\"\n              viewBox=\"0 0 375 375\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                d=\"M 56.387 320.265 L 105.145 307.202 L 134.619 191.47 L 222.369 275.789 L 300.91 254.743 C 300.91 254.743 327.644 243.277 327.701 205.067 C 327.765 162.452 292.22 150.864 292.22 150.864 C 292.22 150.864 311.586 129.825 286.573 94.501 C 265.409 64.612 226.767 75.885 226.767 75.885 L 131.479 100.996 L 163.14 132.378 L 240.652 113.004 C 240.652 113.004 253.429 109.011 259.254 125.122 C 264.463 139.529 249.128 146.798 249.139 146.809 C 249.186 146.856 192.6 161.379 192.553 161.379 C 192.506 161.379 224.354 193.363 224.406 193.466 C 224.435 193.523 259.751 183.839 259.751 183.839 C 259.751 183.839 281.184 181.354 285.882 196.467 C 292.14 216.599 271.779 222.147 271.79 222.147 C 271.837 222.147 239.215 231.316 239.215 231.316 C 239.215 231.316 113.277 106.094 113.228 106.045 C 113.179 105.996 56.211 321.004 56.387 320.265 Z\"\n                fill=\"#007AFF\"\n                transform=\"matrix(0.96592605, 0.25881901, -0.25881901, 0.96592605, 57.2958925, -43.02296686)\"\n              />\n            </svg>\n          </div>\n          <div style={{ color: '#4b5563', fontSize: '22px' }}>\n            {formatDate(session.createdAt)}\n          </div>\n        </div>\n\n        <div\n          style={{\n            flex: 1,\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            gap: '32px',\n            paddingTop: '32px',\n            paddingBottom: '32px',\n          }}\n        >\n          <div\n            style={{\n              textAlign: 'center',\n              display: 'flex',\n              flexDirection: 'column',\n              gap: '20px',\n            }}\n          >\n            <h1\n              style={{\n                fontSize: '68px',\n                fontWeight: 'bold',\n                color: '#111827',\n                lineHeight: '1.2',\n                margin: 0,\n                fontFamily: 'system-ui, -apple-system, sans-serif',\n              }}\n            >\n              {session.title || 'Focus Session'}\n            </h1>\n            {session.description && (\n              <p\n                style={{\n                  color: '#4b5563',\n                  fontSize: '28px',\n                  lineHeight: '1.5',\n                  maxWidth: '880px',\n                  margin: '0 auto',\n                  display: '-webkit-box',\n                  WebkitLineClamp: 3,\n                  WebkitBoxOrient: 'vertical',\n                  overflow: 'hidden',\n                  fontFamily: 'system-ui, -apple-system, sans-serif',\n                }}\n              >\n                {session.description}\n              </p>\n            )}\n          </div>\n\n          <div\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              gap: '48px',\n              paddingTop: '28px',\n              paddingBottom: '28px',\n            }}\n          >\n            <div style={{ textAlign: 'center', minWidth: '380px' }}>\n              <div\n                style={{\n                  color: '#6b7280',\n                  fontSize: '19px',\n                  marginBottom: '10px',\n                  fontFamily: 'system-ui, -apple-system, sans-serif',\n                }}\n              >\n                Duration\n              </div>\n              <div\n                style={{\n                  color: '#111827',\n                  fontSize: '58px',\n                  fontWeight: 'bold',\n                  whiteSpace: 'nowrap',\n                  fontFamily: 'system-ui, -apple-system, sans-serif',\n                }}\n              >\n                {formatTime(session.duration)}\n              </div>\n            </div>\n            <div\n              style={{\n                width: '1px',\n                height: '90px',\n                backgroundColor: '#d1d5db',\n              }}\n            ></div>\n            <div style={{ textAlign: 'center', minWidth: '480px' }}>\n              <div\n                style={{\n                  color: '#6b7280',\n                  fontSize: '19px',\n                  marginBottom: '10px',\n                  fontFamily: 'system-ui, -apple-system, sans-serif',\n                }}\n              >\n                Activity\n              </div>\n              <div\n                style={{\n                  color: '#111827',\n                  fontSize: '46px',\n                  fontWeight: 'bold',\n                  wordBreak: 'break-word',\n                  fontFamily: 'system-ui, -apple-system, sans-serif',\n                }}\n              >\n                {session.activity?.name || 'Work'}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n            borderTop: '3px solid #111827',\n            paddingTop: '20px',\n          }}\n        >\n          <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>\n            {session.user.profilePicture ? (\n              <div\n                style={{\n                  width: '60px',\n                  height: '60px',\n                  borderRadius: '50%',\n                  overflow: 'hidden',\n                }}\n              >\n                <img\n                  src={session.user.profilePicture}\n                  alt={session.user.name}\n                  width=\"60\"\n                  height=\"60\"\n                  style={{ width: '100%', height: '100%', objectFit: 'cover' }}\n                />\n              </div>\n            ) : (\n              <div\n                style={{\n                  width: '60px',\n                  height: '60px',\n                  backgroundColor: '#111827',\n                  borderRadius: '50%',\n                  display: 'flex',\n                  alignItems: 'center',\n                  justifyContent: 'center',\n                }}\n              >\n                <span\n                  style={{\n                    color: '#ffffff',\n                    fontWeight: 'bold',\n                    fontSize: '24px',\n                    fontFamily: 'system-ui, -apple-system, sans-serif',\n                  }}\n                >\n                  {getUserInitials(session.user)}\n                </span>\n              </div>\n            )}\n            <div>\n              <div\n                style={{\n                  color: '#111827',\n                  fontSize: '34px',\n                  fontWeight: 'bold',\n                  fontFamily: 'system-ui, -apple-system, sans-serif',\n                }}\n              >\n                {session.user.name}\n              </div>\n              <div\n                style={{\n                  color: '#4b5563',\n                  fontSize: '22px',\n                  fontFamily: 'system-ui, -apple-system, sans-serif',\n                }}\n              >\n                @{session.user.username}\n              </div>\n            </div>\n          </div>\n          <div\n            style={{\n              color: '#111827',\n              fontSize: '46px',\n              fontWeight: 'bold',\n              fontFamily: 'system-ui, -apple-system, sans-serif',\n            }}\n          >\n            ambira.app\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      <div className=\"hidden md:block\">\n        <Header />\n      </div>\n      <MobileHeader title=\"Share Session\" />\n\n      <div className=\"max-w-6xl mx-auto px-4 py-8\">\n        {/* Back button */}\n        <button\n          onClick={() => router.back()}\n          className=\"flex items-center gap-2 text-gray-600 hover:text-gray-900 mb-8 transition-colors group\"\n        >\n          <ArrowLeft className=\"w-5 h-5 group-hover:-translate-x-1 transition-transform\" />\n          <span className=\"font-medium\">Back</span>\n        </button>\n\n        {/* Header */}\n        <div className=\"text-center mb-10\">\n          <h1 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-2\">\n            Share Your Session\n          </h1>\n          <p className=\"text-gray-600 text-lg\">\n            Download or share your session card\n          </p>\n        </div>\n\n        {/* Error Message */}\n        {exportError && (\n          <div className=\"mb-8 p-4 bg-red-50 border border-red-200 rounded-lg text-red-700 text-center\">\n            {exportError}\n          </div>\n        )}\n\n        {/* Layout Previews - Side by Side */}\n        <div className=\"flex flex-col md:flex-row items-center justify-center gap-6 mb-8\">\n          {/* Minimal Layout Preview */}\n          <button\n            onClick={() => setSelectedLayout('minimal')}\n            className={`relative rounded-lg overflow-hidden transition-all ${\n              selectedLayout === 'minimal'\n                ? 'ring-4 ring-[#007AFF]'\n                : 'ring-2 ring-gray-200 hover:ring-gray-300'\n            }`}\n            style={{ width: '420px', height: '420px' }}\n          >\n            <div className=\"absolute inset-0 flex items-center justify-center bg-white\">\n              <div className=\"transform scale-[0.389] origin-center\">\n                <MinimalLayout />\n              </div>\n            </div>\n          </button>\n\n          {/* Square Post Layout Preview */}\n          <button\n            onClick={() => setSelectedLayout('square')}\n            className={`relative rounded-lg overflow-hidden transition-all ${\n              selectedLayout === 'square'\n                ? 'ring-4 ring-[#007AFF]'\n                : 'ring-2 ring-gray-200 hover:ring-gray-300'\n            }`}\n            style={{ width: '420px', height: '432px' }}\n          >\n            <div className=\"absolute inset-0 flex items-center justify-center bg-white\">\n              <div className=\"transform scale-[0.389] origin-center\">\n                <SquareLayout />\n              </div>\n            </div>\n          </button>\n        </div>\n\n        {/* Action Buttons or Prompt */}\n        {selectedLayout ? (\n          <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center justify-center gap-3 max-w-md mx-auto\">\n            <button\n              onClick={handleShare}\n              className=\"flex-1 flex items-center justify-center gap-2 px-6 py-3 bg-[#007AFF] text-white rounded-lg hover:bg-[#0056b3] transition-all disabled:opacity-50 disabled:cursor-not-allowed font-semibold shadow-lg hover:shadow-xl active:scale-95\"\n              disabled={isExporting}\n            >\n              <Share2 className=\"w-4 h-4\" />\n              {isExporting ? 'Processing...' : 'Share'}\n            </button>\n            <button\n              onClick={handleExport}\n              className=\"flex-1 flex items-center justify-center gap-2 px-6 py-3 bg-gray-900 text-white rounded-lg hover:bg-gray-800 transition-all disabled:opacity-50 disabled:cursor-not-allowed font-semibold shadow-lg hover:shadow-xl active:scale-95\"\n              disabled={isExporting}\n            >\n              <Download className=\"w-4 h-4\" />\n              {isExporting ? 'Processing...' : 'Download'}\n            </button>\n          </div>\n        ) : (\n          <div className=\"text-center py-8\">\n            <p className=\"text-gray-500 text-lg\">Select a layout to continue</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default function SessionSharePageWrapper({\n  params,\n}: SessionSharePageProps) {\n  const [sessionId, setSessionId] = React.useState<string>('');\n\n  React.useEffect(() => {\n    params.then(({ id }) => setSessionId(id));\n  }, [params]);\n\n  return (\n    <>\n      {!sessionId ? (\n        <div className=\"min-h-screen bg-white\">\n          <div className=\"hidden md:block\">\n            <Header />\n          </div>\n          <MobileHeader title=\"Share Session\" />\n          <div className=\"max-w-6xl mx-auto px-4 py-8\">\n            <div className=\"animate-pulse space-y-4\">\n              <div className=\"h-6 bg-gray-200 rounded w-32\"></div>\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"aspect-square bg-gray-200 rounded-lg\"></div>\n                <div className=\"aspect-square bg-gray-200 rounded-lg\"></div>\n                <div className=\"aspect-square bg-gray-200 rounded-lg\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <SessionShareContent sessionId={sessionId} />\n      )}\n    </>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/settings/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/settings/privacy/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/signup/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/terms/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/timer/loading.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/timer/page-content.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/timer/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/you/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/AchievementCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/AchievementUnlock.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ActiveTimerBar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ActivityCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ActivityChart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ActivityList.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'onCreateActivity' is defined but never used.",
        "line": 24,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Plus, FileText } from 'lucide-react';\nimport { Activity } from '@/types';\nimport { ActivityCard } from './ActivityCard';\nimport { useAuth } from '@/hooks/useAuth';\nimport {\n  useActivities,\n  useDeleteActivity,\n  useArchiveActivity,\n  useRestoreActivity,\n} from '@/hooks/useActivitiesQuery';\nimport { toast } from 'sonner';\nimport { cn, isEmpty } from '@/lib/utils';\n\ninterface ActivityListProps {\n  onCreateActivity?: () => void;\n  onEditActivity?: (activity: Activity) => void;\n}\n\nexport const ActivityList: React.FC<ActivityListProps> = ({\n  onCreateActivity,\n  onEditActivity,\n}) => {\n  const router = useRouter();\n  const { user } = useAuth();\n  const { data: activities = [], isLoading, error } = useActivities(user?.id);\n  const deleteActivityMutation = useDeleteActivity();\n  const archiveActivityMutation = useArchiveActivity();\n  const restoreActivityMutation = useRestoreActivity();\n  const [deleteConfirm, setDeleteConfirm] = useState<Activity | null>(null);\n\n  // View mode is always 'grid' - list view has been removed for consistency\n  const viewMode = 'grid';\n\n  // Display all activities without filtering (no active filters applied)\n  const filteredActivities = activities;\n\n  const handleDelete = async (activity: Activity) => {\n    try {\n      await deleteActivityMutation.mutateAsync(activity.id);\n      toast.success(`Activity \"${activity.name}\" deleted successfully`);\n      setDeleteConfirm(null);\n    } catch (error) {\n      console.error('Failed to delete activity:', error);\n      toast.error('Failed to delete activity. Please try again.');\n    }\n  };\n\n  const handleArchive = async (activity: Activity) => {\n    try {\n      await archiveActivityMutation.mutateAsync(activity.id);\n      toast.success(`Activity \"${activity.name}\" archived successfully`);\n    } catch (error) {\n      console.error('Failed to archive activity:', error);\n      toast.error('Failed to archive activity. Please try again.');\n    }\n  };\n\n  const handleRestore = async (activity: Activity) => {\n    try {\n      await restoreActivityMutation.mutateAsync(activity.id);\n      toast.success(`Activity \"${activity.name}\" restored successfully`);\n    } catch (error) {\n      console.error('Failed to restore activity:', error);\n      toast.error('Failed to restore activity. Please try again.');\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        {/* Loading skeleton for header */}\n        <div className=\"flex justify-between items-center\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-32\"></div>\n          </div>\n          <div className=\"flex gap-2\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-10 bg-gray-200 rounded w-24\"></div>\n            </div>\n            <div className=\"animate-pulse\">\n              <div className=\"h-10 bg-gray-200 rounded w-24\"></div>\n            </div>\n          </div>\n        </div>\n\n        {/* Loading skeleton for filters */}\n        <div className=\"flex gap-2\">\n          {[1, 2, 3, 4].map(i => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"h-8 bg-gray-200 rounded w-20\"></div>\n            </div>\n          ))}\n        </div>\n\n        {/* Loading skeleton for activity cards */}\n        {/* Showing 6 skeleton cards to fill a typical viewport (2 rows × 3 columns on desktop) */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {[1, 2, 3, 4, 5, 6].map(i => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"bg-transparent rounded-xl border border-gray-200/60 p-5\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"w-14 h-14 bg-gray-200/80 rounded-xl\"></div>\n                  <div className=\"w-5 h-5 bg-gray-200/80 rounded\"></div>\n                </div>\n                <div className=\"mb-4\">\n                  <div className=\"h-6 bg-gray-200/80 rounded w-3/4 mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200/80 rounded w-full\"></div>\n                </div>\n                <div className=\"space-y-3\">\n                  <div className=\"h-2.5 bg-gray-200/80 rounded-full w-full\"></div>\n                  <div className=\"h-2.5 bg-gray-200/80 rounded-full w-2/3\"></div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"text-red-500 text-lg mb-4\">Error loading activities</div>\n        <p className=\"text-gray-600 mb-4\">{error instanceof Error ? error.message : 'Unknown error'}</p>\n        <button\n          onClick={() => window.location.reload()}\n          className=\"bg-orange-500 text-white px-4 py-2 rounded-lg hover:bg-orange-600 transition-colors\"\n        >\n          Try Again\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 pb-2\">\n          <div>\n            <h1 className=\"text-xl md:text-2xl font-bold text-gray-900 mb-1\">Activities</h1>\n            <p className=\"text-gray-600 text-sm\">\n              {filteredActivities.length} activit{filteredActivities.length !== 1 ? 'ies' : 'y'}\n            </p>\n          </div>\n          <div className=\"flex gap-2\">\n            <button\n              onClick={() => router.push('/activities/new')}\n              aria-label=\"Create new activity\"\n              className=\"bg-[#007AFF] text-white px-5 py-2.5 rounded-lg hover:bg-[#0056D6] transition-colors flex items-center gap-2 font-medium shadow-sm hover:shadow-md focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2\"\n            >\n              <Plus className=\"w-5 h-5\" aria-hidden=\"true\" />\n              New Activity\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Activities Grid/List */}\n      {isEmpty(filteredActivities) ? (\n        <div className=\"bg-transparent rounded-xl border border-gray-200/60 p-8 md:p-12\">\n          <div className=\"max-w-md mx-auto text-center\">\n            <div className=\"w-16 h-16 md:w-20 md:h-20 bg-gradient-to-br from-[#007AFF] to-[#0051D5] rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-sm\">\n              <FileText className=\"w-8 h-8 md:w-10 md:h-10 text-white\" />\n            </div>\n            <h3 className=\"text-xl md:text-2xl font-bold text-gray-900 mb-2\">\n              No activities yet\n            </h3>\n            <p className=\"text-sm md:text-base text-gray-600 mb-6\">\n              Activities help you organize your work sessions and track progress over time. Create your first activity to get started!\n            </p>\n            <button\n              onClick={() => router.push('/activities/new')}\n              aria-label=\"Create your first activity\"\n              className=\"inline-flex items-center gap-2 bg-[#007AFF] text-white px-6 py-3 rounded-xl hover:bg-[#0056D6] transition-colors font-medium shadow-sm mb-4 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2 min-h-[44px]\"\n            >\n              <Plus className=\"w-5 h-5\" aria-hidden=\"true\" />\n              Create Your First Activity\n            </button>\n            <p className=\"text-xs text-gray-500\">\n              Tip: You can assign tasks to activities and track time spent on each one\n            </p>\n          </div>\n        </div>\n      ) : (\n        <div className={cn(\n          viewMode === 'grid'\n            ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'\n            : 'max-w-3xl mx-auto space-y-4'\n        )}>\n          {filteredActivities.map((activity) => (\n            <ActivityCard\n              key={activity.id}\n              activity={activity}\n              onEdit={onEditActivity}\n              onDelete={(activity) => setDeleteConfirm(activity)}\n              onArchive={activity.status === 'active' ? handleArchive : handleRestore}\n            />\n          ))}\n        </div>\n      )}\n\n      {/* Delete Confirmation Modal */}\n      {deleteConfirm && (\n        <div\n          className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4 motion-safe:animate-in motion-safe:fade-in motion-safe:duration-200\"\n          onClick={(e) => {\n            if (e.target === e.currentTarget) {\n              setDeleteConfirm(null);\n            }\n          }}\n          onKeyDown={(e) => {\n            if (e.key === 'Escape') {\n              setDeleteConfirm(null);\n            }\n          }}\n        >\n          <div className=\"bg-white/95 backdrop-blur-sm rounded-xl p-6 max-w-md w-full shadow-xl motion-safe:animate-in motion-safe:zoom-in-95 motion-safe:duration-200 border border-gray-200\">\n            <h3 className=\"text-xl font-bold text-gray-900 mb-3\">Delete Activity</h3>\n            <p className=\"text-gray-600 mb-6 leading-relaxed\">\n              Are you sure you want to delete <span className=\"font-semibold text-gray-900\">\"{deleteConfirm.name}\"</span>? This action cannot be undone.\n            </p>\n            <div className=\"flex gap-3 justify-end\">\n              <button\n                onClick={() => setDeleteConfirm(null)}\n                className=\"px-5 py-2.5 text-gray-700 font-medium border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2 min-h-[44px]\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={() => handleDelete(deleteConfirm)}\n                className=\"px-5 py-2.5 bg-red-500 text-white font-medium rounded-lg hover:bg-red-600 transition-colors shadow-sm hover:shadow-md focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-red-500 focus-visible:ring-offset-2 min-h-[44px]\"\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/AnalyticsWidget.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'TrendingUp' is defined but never used.",
        "line": 4,
        "column": 45,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 55
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'StatsCard' is defined but never used.",
        "line": 5,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Clock, Target, CheckSquare, Flame, TrendingUp, ArrowRight } from 'lucide-react';\nimport { StatsCard } from './StatsCard';\nimport { ActivityChart } from './ActivityChart';\nimport Link from 'next/link';\n\ninterface AnalyticsWidgetProps {\n  userId: string;\n}\n\nexport const AnalyticsWidget: React.FC<AnalyticsWidgetProps> = ({ userId }) => {\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Mock data - in real implementation, fetch from API\n  const mockData = {\n    thisWeek: {\n      hours: 28,\n      sessions: 18,\n      tasks: 45,\n      streak: 5\n    },\n    trends: {\n      hours: { value: 15, isPositive: true },\n      sessions: { value: 12, isPositive: true },\n      tasks: { value: 8, isPositive: true }\n    },\n    weeklyActivity: [\n      { label: 'Mon', value: 4 },\n      { label: 'Tue', value: 5 },\n      { label: 'Wed', value: 3 },\n      { label: 'Thu', value: 6 },\n      { label: 'Fri', value: 5 },\n      { label: 'Sat', value: 3 },\n      { label: 'Sun', value: 2 }\n    ]\n  };\n\n  useEffect(() => {\n    // Simulate loading\n    setIsLoading(false);\n  }, [userId]);\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"h-6 bg-gray-200 rounded w-1/3\"></div>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"h-24 bg-gray-200 rounded\"></div>\n            <div className=\"h-24 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h2 className=\"text-xl font-bold text-gray-900\">This Week's Progress</h2>\n          <p className=\"text-sm text-gray-600\">Your productivity at a glance</p>\n        </div>\n        <Link\n          href=\"/profile\"\n          className=\"flex items-center gap-1 text-sm font-medium text-blue-600 hover:text-blue-700 transition-colors\"\n        >\n          View All\n          <ArrowRight className=\"w-4 h-4\" />\n        </Link>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n        <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n          <Clock className=\"w-6 h-6 text-blue-600 mx-auto mb-2\" />\n          <div className=\"text-2xl font-bold text-gray-900\">{mockData.thisWeek.hours}</div>\n          <div className=\"text-xs text-gray-600\">Hours</div>\n          <div className=\"text-xs text-green-600 font-medium mt-1\">\n            +{mockData.trends.hours.value}%\n          </div>\n        </div>\n\n        <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n          <Target className=\"w-6 h-6 text-green-600 mx-auto mb-2\" />\n          <div className=\"text-2xl font-bold text-gray-900\">{mockData.thisWeek.sessions}</div>\n          <div className=\"text-xs text-gray-600\">Sessions</div>\n          <div className=\"text-xs text-green-600 font-medium mt-1\">\n            +{mockData.trends.sessions.value}%\n          </div>\n        </div>\n\n        <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n          <CheckSquare className=\"w-6 h-6 text-purple-600 mx-auto mb-2\" />\n          <div className=\"text-2xl font-bold text-gray-900\">{mockData.thisWeek.tasks}</div>\n          <div className=\"text-xs text-gray-600\">Tasks</div>\n          <div className=\"text-xs text-green-600 font-medium mt-1\">\n            +{mockData.trends.tasks.value}%\n          </div>\n        </div>\n\n        <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\n          <Flame className=\"w-6 h-6 text-orange-600 mx-auto mb-2\" />\n          <div className=\"text-2xl font-bold text-gray-900\">{mockData.thisWeek.streak}</div>\n          <div className=\"text-xs text-gray-600\">Day Streak</div>\n          <div className=\"text-xs text-orange-600 font-medium mt-1\">\n            Keep it up!\n          </div>\n        </div>\n      </div>\n\n      {/* Weekly Activity Chart */}\n      <div>\n        <h3 className=\"text-sm font-semibold text-gray-700 mb-3\">Daily Activity</h3>\n        <ActivityChart\n          data={mockData.weeklyActivity}\n          type=\"bar\"\n          height={120}\n          color=\"#3b82f6\"\n          valueFormatter={(v) => `${v}h`}\n          showLabels={true}\n        />\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/AuthDebugger.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/AuthInitializer.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'AuthUser' is defined but never used.",
        "line": 26,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 23
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Auth Initializer Component\n *\n * This component sets up the Firebase auth state listener once at the app root.\n * It replaces the heavyweight AuthProvider with a lightweight initializer.\n *\n * CRITICAL RESPONSIBILITIES:\n * 1. Subscribe to Firebase onAuthStateChanged\n * 2. Update React Query cache when Firebase auth changes\n * 3. Handle OAuth redirect results (Google sign-in on mobile)\n * 4. Show loading state during initial auth check\n *\n * ARCHITECTURE:\n * - NO Context API usage\n * - Just side effects + children rendering\n * - Auth state lives in React Query cache\n */\n\n'use client';\n\nimport { useEffect, useState, useRef, useCallback, ReactNode } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { firebaseAuthApi } from '@/lib/api/auth';\nimport { AUTH_KEYS } from '@/lib/react-query/auth.queries';\nimport type { AuthUser } from '@/types';\n\ninterface AuthInitializerProps {\n  children: ReactNode;\n}\n\nexport function AuthInitializer({ children }: AuthInitializerProps) {\n  const queryClient = useQueryClient();\n  const router = useRouter();\n  const [isInitializing, setIsInitializing] = useState(true);\n  const redirectHandledRef = useRef(false);\n\n  // Memoize navigation to avoid re-renders\n  const navigateToHome = useCallback(() => {\n    router.push('/');\n  }, [router]);\n\n  useEffect(() => {\n    let authUnsubscribe: (() => void) | null = null;\n\n    const initializeAuth = async () => {\n      // STEP 1: Check for Google OAuth redirect result\n      // This MUST happen before setting up the auth listener\n      // getRedirectResult can only be called once per redirect\n      try {\n        const redirectResult =\n          await firebaseAuthApi.handleGoogleRedirectResult();\n\n        if (redirectResult) {\n          redirectHandledRef.current = true;\n\n          // Update React Query cache immediately\n          queryClient.setQueryData(AUTH_KEYS.session(), redirectResult.user);\n\n          // Stop loading\n          setIsInitializing(false);\n\n          // Navigate to home after successful redirect\n          navigateToHome();\n          return; // Exit early - redirect handled\n        }\n      } catch (error) {\n        console.error('[AuthInitializer] ❌ Google redirect error:', error);\n        // Continue with normal auth flow even if redirect check fails\n        setIsInitializing(false);\n      }\n\n      // STEP 2: Set up Firebase auth state listener\n      authUnsubscribe = firebaseAuthApi.onAuthStateChanged(\n        async firebaseUser => {\n          // Skip if we already handled redirect\n          if (redirectHandledRef.current) {\n            redirectHandledRef.current = false; // Reset for next time\n            return;\n          }\n\n          try {\n            if (firebaseUser) {\n              // User is signed in - fetch full user data from Firestore\n              const userData = await firebaseAuthApi.getCurrentUser();\n\n              // Update React Query cache\n              queryClient.setQueryData(AUTH_KEYS.session(), userData);\n            } else {\n              // User is signed out\n              // Clear React Query cache\n              queryClient.setQueryData(AUTH_KEYS.session(), null);\n            }\n          } catch (error) {\n            console.error(\n              '[AuthInitializer] ❌ Auth state change error:',\n              error\n            );\n\n            // On error, assume user is not authenticated\n            queryClient.setQueryData(AUTH_KEYS.session(), null);\n          } finally {\n            setIsInitializing(false);\n          }\n        }\n      );\n    };\n\n    // Start initialization\n    initializeAuth();\n\n    // Cleanup: Unsubscribe from Firebase listener on unmount\n    return () => {\n      if (authUnsubscribe) {\n        authUnsubscribe();\n      }\n    };\n  }, [queryClient, navigateToHome]);\n\n  // Show loading spinner during initial auth check\n  // This prevents flash of unauthenticated content\n  if (isInitializing) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  // Auth initialized - render app\n  return <>{children}</>;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/BottomNavigation.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'User' is defined but never used.",
        "line": 13,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isOnTimerPage' is assigned a value but never used.",
        "line": 51,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 51,
        "endColumn": 22
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport Link from 'next/link';\nimport { usePathname, useRouter } from 'next/navigation';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useTimer } from '@/features/timer/hooks';\nimport {\n  Home,\n  Compass,\n  PlayCircle,\n  Users,\n  MoreHorizontal,\n  User,\n  Activity,\n  BarChart3,\n  Settings,\n  X,\n} from 'lucide-react';\nimport { useState, useEffect } from 'react';\nimport Image from 'next/image';\n\nexport default function BottomNavigation() {\n  const pathname = usePathname();\n  const router = useRouter();\n  const { user } = useAuth();\n  const { timerState } = useTimer();\n  const [showMoreMenu, setShowMoreMenu] = useState(false);\n\n  const isActive = (path: string) => {\n    if (path === '/') return pathname === '/';\n    if (path === '/search') return pathname.startsWith('/search');\n    if (path === '/activities') return pathname.startsWith('/activities');\n    if (path === '/groups') return pathname.startsWith('/groups');\n    if (path === '/profile')\n      return pathname.startsWith('/profile') || pathname.startsWith('/you');\n    if (path === '/analytics') return pathname.startsWith('/analytics');\n    if (path === '/settings') return pathname.startsWith('/settings');\n    return pathname === path;\n  };\n\n  // Check if any \"More\" menu item is active\n  const isMoreActive =\n    isActive('/profile') ||\n    isActive('/analytics') ||\n    isActive('/activities') ||\n    isActive('/settings');\n\n  const hasActiveSession =\n    timerState.currentProject &&\n    (timerState.isRunning || timerState.pausedDuration > 0);\n  const isOnTimerPage = pathname.startsWith('/timer');\n\n  // Close menu when pathname changes\n  useEffect(() => {\n    setShowMoreMenu(false);\n  }, [pathname]);\n\n  const handleMoreClick = () => {\n    setShowMoreMenu(!showMoreMenu);\n  };\n\n  const handleNavigate = (path: string) => {\n    setShowMoreMenu(false);\n    router.push(path);\n  };\n\n  return (\n    <>\n      {/* Backdrop */}\n      {showMoreMenu && (\n        <div\n          className=\"fixed inset-0 bg-black/20 z-40 md:hidden backdrop-blur-sm\"\n          onClick={() => setShowMoreMenu(false)}\n        />\n      )}\n\n      {/* More Menu */}\n      {showMoreMenu && (\n        <div className=\"fixed bottom-20 left-0 right-0 z-50 md:hidden animate-slide-up\">\n          <div className=\"mx-4 bg-white rounded-2xl shadow-2xl border border-gray-200 overflow-hidden\">\n            {/* Header */}\n            <div className=\"flex items-center justify-between px-4 py-3 border-b border-gray-100\">\n              <h3 className=\"font-semibold text-gray-900\">Menu</h3>\n              <button\n                onClick={() => setShowMoreMenu(false)}\n                className=\"p-1 hover:bg-gray-100 rounded-full transition-colors\"\n                aria-label=\"Close menu\"\n              >\n                <X className=\"w-5 h-5 text-gray-500\" aria-hidden=\"true\" />\n              </button>\n            </div>\n\n            {/* Menu Items */}\n            <div className=\"py-2\">\n              {/* Profile */}\n              <button\n                onClick={() => handleNavigate('/profile')}\n                className={`w-full flex items-center gap-3 px-4 py-3 hover:bg-gray-50 transition-colors ${\n                  isActive('/profile') ? 'bg-blue-50' : ''\n                }`}\n                aria-label=\"View my profile\"\n              >\n                {user?.profilePicture ? (\n                  <div className=\"w-10 h-10 rounded-full overflow-hidden ring-2 ring-white\">\n                    <Image\n                      src={user.profilePicture}\n                      alt={user.name}\n                      width={40}\n                      height={40}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                ) : (\n                  <div className=\"w-10 h-10 bg-[#FC4C02] rounded-full flex items-center justify-center\">\n                    <span className=\"text-white font-semibold text-sm\">\n                      {user?.name?.charAt(0).toUpperCase()}\n                    </span>\n                  </div>\n                )}\n                <div className=\"flex-1 text-left\">\n                  <div\n                    className={`font-medium ${isActive('/profile') ? 'text-[#007AFF]' : 'text-gray-900'}`}\n                  >\n                    My Profile\n                  </div>\n                  <div className=\"text-xs text-gray-500\">@{user?.username}</div>\n                </div>\n              </button>\n\n              {/* Activities */}\n              <button\n                onClick={() => handleNavigate('/activities')}\n                className={`w-full flex items-center gap-3 px-4 py-3 hover:bg-gray-50 transition-colors ${\n                  isActive('/activities') ? 'bg-blue-50' : ''\n                }`}\n                aria-label=\"View activities\"\n              >\n                <div\n                  className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                    isActive('/activities') ? 'bg-blue-100' : 'bg-gray-100'\n                  }`}\n                >\n                  <Activity\n                    className={`w-5 h-5 ${isActive('/activities') ? 'text-[#007AFF]' : 'text-gray-600'}`}\n                  />\n                </div>\n                <div className=\"flex-1 text-left\">\n                  <div\n                    className={`font-medium ${isActive('/activities') ? 'text-[#007AFF]' : 'text-gray-900'}`}\n                  >\n                    Activities\n                  </div>\n                  <div className=\"text-xs text-gray-500\">\n                    Manage your activities\n                  </div>\n                </div>\n              </button>\n\n              {/* Analytics */}\n              <button\n                onClick={() => handleNavigate('/analytics')}\n                className={`w-full flex items-center gap-3 px-4 py-3 hover:bg-gray-50 transition-colors ${\n                  isActive('/analytics') ? 'bg-blue-50' : ''\n                }`}\n                aria-label=\"View analytics\"\n              >\n                <div\n                  className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                    isActive('/analytics') ? 'bg-blue-100' : 'bg-gray-100'\n                  }`}\n                >\n                  <BarChart3\n                    className={`w-5 h-5 ${isActive('/analytics') ? 'text-[#007AFF]' : 'text-gray-600'}`}\n                  />\n                </div>\n                <div className=\"flex-1 text-left\">\n                  <div\n                    className={`font-medium ${isActive('/analytics') ? 'text-[#007AFF]' : 'text-gray-900'}`}\n                  >\n                    Analytics\n                  </div>\n                  <div className=\"text-xs text-gray-500\">\n                    View detailed stats\n                  </div>\n                </div>\n              </button>\n\n              {/* Settings */}\n              <button\n                onClick={() => handleNavigate('/settings')}\n                className={`w-full flex items-center gap-3 px-4 py-3 hover:bg-gray-50 transition-colors ${\n                  isActive('/settings') ? 'bg-blue-50' : ''\n                }`}\n                aria-label=\"View settings\"\n              >\n                <div\n                  className={`w-10 h-10 rounded-full flex items-center justify-center ${\n                    isActive('/settings') ? 'bg-blue-100' : 'bg-gray-100'\n                  }`}\n                >\n                  <Settings\n                    className={`w-5 h-5 ${isActive('/settings') ? 'text-[#007AFF]' : 'text-gray-600'}`}\n                  />\n                </div>\n                <div className=\"flex-1 text-left\">\n                  <div\n                    className={`font-medium ${isActive('/settings') ? 'text-[#007AFF]' : 'text-gray-900'}`}\n                  >\n                    Settings\n                  </div>\n                  <div className=\"text-xs text-gray-500\">\n                    Account & preferences\n                  </div>\n                </div>\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <nav className=\"fixed bottom-0 left-0 right-0 z-50 bg-white border-t border-gray-200 md:hidden\">\n        <div\n          className=\"flex items-center justify-around h-20 px-2 pb-6 pt-2\"\n          style={{ paddingBottom: 'max(1.5rem, env(safe-area-inset-bottom))' }}\n        >\n          {/* Feed */}\n          <Link\n            href=\"/\"\n            className={`flex flex-col items-center justify-center space-y-0.5 px-3 py-1 transition-colors ${\n              isActive('/') ? 'text-[#007AFF]' : 'text-gray-500'\n            }`}\n            aria-label=\"View feed\"\n            aria-current={isActive('/') ? 'page' : undefined}\n          >\n            <Home className=\"w-6 h-6\" strokeWidth={isActive('/') ? 2.5 : 2} aria-hidden=\"true\" />\n            <span className=\"text-[10px] font-medium\">Feed</span>\n          </Link>\n\n          {/* Discovery */}\n          <Link\n            href=\"/search\"\n            className={`flex flex-col items-center justify-center space-y-0.5 px-3 py-1 transition-colors ${\n              isActive('/search') ? 'text-[#007AFF]' : 'text-gray-500'\n            }`}\n            aria-label=\"Discover people, groups, and challenges\"\n            aria-current={isActive('/search') ? 'page' : undefined}\n          >\n            <Compass\n              className=\"w-6 h-6\"\n              strokeWidth={isActive('/search') ? 2.5 : 2}\n              aria-hidden=\"true\"\n            />\n            <span className=\"text-[10px] font-medium\">Discovery</span>\n          </Link>\n\n          {/* Record Button */}\n          <Link\n            href=\"/timer\"\n            className={`flex flex-col items-center justify-center space-y-0.5 px-3 py-1 transition-colors ${\n              hasActiveSession || isActive('/timer') ? 'text-[#007AFF]' : 'text-gray-500'\n            }`}\n            aria-label={hasActiveSession ? 'View active session' : 'Start session timer'}\n            aria-current={isActive('/timer') ? 'page' : undefined}\n          >\n            <div className={`relative p-0.5 rounded-full ${hasActiveSession ? 'ring-2 ring-[#007AFF]' : ''}`}>\n              <PlayCircle\n                className=\"w-6 h-6\"\n                strokeWidth={hasActiveSession || isActive('/timer') ? 2.5 : 2}\n                fill={hasActiveSession || isActive('/timer') ? 'currentColor' : 'none'}\n                aria-hidden=\"true\"\n              />\n            </div>\n            <span className=\"text-[10px] font-medium\">\n              {hasActiveSession ? 'Active' : 'Record'}\n            </span>\n          </Link>\n\n          {/* Groups */}\n          <Link\n            href=\"/groups\"\n            className={`flex flex-col items-center justify-center space-y-0.5 px-3 py-1 transition-colors ${\n              isActive('/groups') ? 'text-[#007AFF]' : 'text-gray-500'\n            }`}\n            aria-label=\"View groups\"\n            aria-current={isActive('/groups') ? 'page' : undefined}\n          >\n            <Users\n              className=\"w-6 h-6\"\n              strokeWidth={isActive('/groups') ? 2.5 : 2}\n              aria-hidden=\"true\"\n            />\n            <span className=\"text-[10px] font-medium\">Groups</span>\n          </Link>\n\n          {/* More */}\n          <button\n            onClick={handleMoreClick}\n            className={`flex flex-col items-center justify-center space-y-0.5 px-3 py-1 transition-colors ${\n              isMoreActive || showMoreMenu ? 'text-[#007AFF]' : 'text-gray-500'\n            }`}\n            aria-label=\"Open more options menu\"\n            aria-expanded={showMoreMenu}\n            aria-haspopup=\"true\"\n          >\n            <MoreHorizontal\n              className=\"w-6 h-6\"\n              strokeWidth={isMoreActive || showMoreMenu ? 2.5 : 2}\n              aria-hidden=\"true\"\n            />\n            <span className=\"text-[10px] font-medium\">More</span>\n          </button>\n        </div>\n      </nav>\n\n      <style jsx>{`\n        @keyframes slide-up {\n          from {\n            transform: translateY(100%);\n            opacity: 0;\n          }\n          to {\n            transform: translateY(0);\n            opacity: 1;\n          }\n        }\n        .animate-slide-up {\n          animation: slide-up 0.3s ease-out;\n        }\n      `}</style>\n    </>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/BrowseGroups.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 24,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 24,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [681, 684], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [681, 684], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Group, GroupFilters } from '@/types';\nimport GroupCard from './GroupCard';\nimport CreateGroupModal from './CreateGroupModal';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Select } from '@/components/ui/select';\nimport { \n  Search, \n  Filter, \n  Plus,\n  Grid3X3,\n  List,\n  MapPin\n} from 'lucide-react';\n\ninterface BrowseGroupsProps {\n  groups: Group[];\n  userGroups: string[]; // Array of group IDs the user has joined\n  onJoinGroup: (groupId: string) => Promise<void>;\n  onLeaveGroup: (groupId: string) => Promise<void>;\n  onCreateGroup: (data: any) => Promise<void>;\n  isLoading?: boolean;\n  hasMore?: boolean;\n  onLoadMore?: () => void;\n}\n\nconst categoryOptions = [\n  { value: '', label: 'All Categories' },\n  { value: 'work', label: 'Work' },\n  { value: 'study', label: 'Study' },\n  { value: 'side-project', label: 'Side Project' },\n  { value: 'learning', label: 'Learning' },\n  { value: 'other', label: 'Other' }\n];\n\nconst typeOptions = [\n  { value: '', label: 'All Types' },\n  { value: 'just-for-fun', label: 'Just for Fun' },\n  { value: 'professional', label: 'Professional' },\n  { value: 'competitive', label: 'Competitive' },\n  { value: 'other', label: 'Other' }\n];\n\nconst privacyOptions = [\n  { value: '', label: 'All Privacy' },\n  { value: 'public', label: 'Public' },\n  { value: 'approval-required', label: 'Approval Required' }\n];\n\nconst sortOptions = [\n  { value: 'recent', label: 'Most Recent' },\n  { value: 'members', label: 'Most Members' },\n  { value: 'name', label: 'Name A-Z' },\n  { value: 'activity', label: 'Most Active' }\n];\n\nexport default function BrowseGroups({ \n  groups, \n  userGroups,\n  onJoinGroup, \n  onLeaveGroup,\n  onCreateGroup,\n  isLoading = false,\n  hasMore = false,\n  onLoadMore\n}: BrowseGroupsProps) {\n  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [showFilters, setShowFilters] = useState(false);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [filters, setFilters] = useState<GroupFilters>({\n    search: '',\n    category: undefined,\n    type: undefined,\n    privacySetting: undefined,\n    location: ''\n  });\n  const [sortBy, setSortBy] = useState('recent');\n  const [filteredGroups, setFilteredGroups] = useState<Group[]>(groups);\n\n  useEffect(() => {\n    let filtered = [...groups];\n\n    // Apply search filter\n    if (filters.search) {\n      const searchLower = filters.search.toLowerCase();\n      filtered = filtered.filter(group => \n        group.name.toLowerCase().includes(searchLower) ||\n        group.description.toLowerCase().includes(searchLower)\n      );\n    }\n\n    // Apply category filter\n    if (filters.category) {\n      filtered = filtered.filter(group => group.category === filters.category);\n    }\n\n    // Apply type filter\n    if (filters.type) {\n      filtered = filtered.filter(group => group.type === filters.type);\n    }\n\n    // Apply privacy filter\n    if (filters.privacySetting) {\n      filtered = filtered.filter(group => group.privacySetting === filters.privacySetting);\n    }\n\n    // Apply location filter\n    if (filters.location) {\n      const locationLower = filters.location.toLowerCase();\n      filtered = filtered.filter(group => \n        group.location?.toLowerCase().includes(locationLower)\n      );\n    }\n\n    // Apply sorting\n    switch (sortBy) {\n      case 'members':\n        filtered.sort((a, b) => b.memberCount - a.memberCount);\n        break;\n      case 'name':\n        filtered.sort((a, b) => a.name.localeCompare(b.name));\n        break;\n      case 'activity':\n        // For now, sort by member count as a proxy for activity\n        filtered.sort((a, b) => b.memberCount - a.memberCount);\n        break;\n      case 'recent':\n      default:\n        filtered.sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n        break;\n    }\n\n    setFilteredGroups(filtered);\n  }, [groups, filters, sortBy]);\n\n  const handleFilterChange = (key: keyof GroupFilters, value: string) => {\n    setFilters(prev => ({ ...prev, [key]: value }));\n  };\n\n  const clearFilters = () => {\n    setFilters({\n      search: '',\n      category: undefined,\n      type: undefined,\n      privacySetting: undefined,\n      location: ''\n    });\n  };\n\n  const hasActiveFilters = Object.values(filters).some(value => value !== '');\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Discover Groups</h1>\n          <p className=\"text-gray-600 mt-1\">\n            Join productivity groups and connect with like-minded people\n          </p>\n        </div>\n        <Button onClick={() => setShowCreateModal(true)}>\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Create Group\n        </Button>\n      </div>\n\n      {/* Search and Filters */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\n        <div className=\"flex flex-col lg:flex-row gap-4\">\n          {/* Search */}\n          <div className=\"flex-1\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n              <Input\n                placeholder=\"Search groups...\"\n                value={filters.search}\n                onChange={(e) => handleFilterChange('search', e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </div>\n\n          {/* Location */}\n          <div className=\"lg:w-48\">\n            <div className=\"relative\">\n              <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\n              <Input\n                placeholder=\"Location...\"\n                value={filters.location}\n                onChange={(e) => handleFilterChange('location', e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n          </div>\n\n          {/* Filter Toggle */}\n          <Button\n            variant=\"outline\"\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"lg:hidden\"\n          >\n            <Filter className=\"w-4 h-4 mr-2\" />\n            Filters\n          </Button>\n        </div>\n\n        {/* Advanced Filters */}\n        {(showFilters || window.innerWidth >= 1024) && (\n          <div className=\"mt-4 pt-4 border-t border-gray-200\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <Select\n                value={filters.category}\n                onChange={(e) => handleFilterChange('category', e.target.value)}\n              >\n                {categoryOptions.map((option) => (\n                  <option key={option.value} value={option.value}>\n                    {option.label}\n                  </option>\n                ))}\n              </Select>\n\n              <Select\n                value={filters.type}\n                onChange={(e) => handleFilterChange('type', e.target.value)}\n              >\n                {typeOptions.map((option) => (\n                  <option key={option.value} value={option.value}>\n                    {option.label}\n                  </option>\n                ))}\n              </Select>\n\n              <Select\n                value={filters.privacySetting}\n                onChange={(e) => handleFilterChange('privacySetting', e.target.value)}\n              >\n                {privacyOptions.map((option) => (\n                  <option key={option.value} value={option.value}>\n                    {option.label}\n                  </option>\n                ))}\n              </Select>\n\n              <Select\n                value={sortBy}\n                onChange={(e) => setSortBy(e.target.value)}\n              >\n                {sortOptions.map((option) => (\n                  <option key={option.value} value={option.value}>\n                    {option.label}\n                  </option>\n                ))}\n              </Select>\n            </div>\n\n            {hasActiveFilters && (\n              <div className=\"mt-4 flex items-center gap-2\">\n                <Button variant=\"outline\" size=\"sm\" onClick={clearFilters}>\n                  Clear Filters\n                </Button>\n                <span className=\"text-sm text-gray-500\">\n                  {filteredGroups.length} of {groups.length} groups\n                </span>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* View Mode Toggle */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-sm text-gray-600\">\n            {filteredGroups.length} groups found\n          </span>\n        </div>\n        \n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-sm text-gray-600\">View:</span>\n          <div className=\"flex border border-gray-300 rounded-md\">\n            <Button\n              variant={viewMode === 'grid' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setViewMode('grid')}\n              className=\"rounded-r-none border-r border-gray-300\"\n            >\n              <Grid3X3 className=\"w-4 h-4\" />\n            </Button>\n            <Button\n              variant={viewMode === 'list' ? 'default' : 'ghost'}\n              size=\"sm\"\n              onClick={() => setViewMode('list')}\n              className=\"rounded-l-none\"\n            >\n              <List className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Groups Grid/List */}\n      {isLoading && filteredGroups.length === 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <div key={i} className=\"bg-white rounded-lg border border-gray-200 p-4 animate-pulse\">\n              <div className=\"h-32 bg-gray-200 rounded-lg mb-4\"></div>\n              <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n              <div className=\"h-3 bg-gray-200 rounded mb-4\"></div>\n              <div className=\"h-8 bg-gray-200 rounded\"></div>\n            </div>\n          ))}\n        </div>\n      ) : filteredGroups.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Search className=\"w-8 h-8 text-gray-400\" />\n          </div>\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No groups found</h3>\n          <p className=\"text-gray-600 mb-4\">\n            {hasActiveFilters \n              ? 'Try adjusting your filters or search terms'\n              : 'Be the first to create a group in this category'\n            }\n          </p>\n          {hasActiveFilters ? (\n            <Button variant=\"outline\" onClick={clearFilters}>\n              Clear Filters\n            </Button>\n          ) : (\n            <Button onClick={() => setShowCreateModal(true)}>\n              Create Group\n            </Button>\n          )}\n        </div>\n      ) : (\n        <>\n          <div className={\n            viewMode === 'grid' \n              ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6'\n              : 'space-y-4'\n          }>\n            {filteredGroups.map((group) => (\n              <GroupCard\n                key={group.id}\n                group={group}\n                currentUserId=\"current-user-id\" // This should come from auth context\n                isJoined={userGroups.includes(group.id)}\n                onJoin={onJoinGroup}\n                onLeave={onLeaveGroup}\n                isLoading={isLoading}\n              />\n            ))}\n          </div>\n\n          {/* Load More */}\n          {hasMore && (\n            <div className=\"text-center pt-6\">\n              <Button variant=\"outline\" onClick={onLoadMore} disabled={isLoading}>\n                {isLoading ? 'Loading...' : 'Load More Groups'}\n              </Button>\n            </div>\n          )}\n        </>\n      )}\n\n      {/* Create Group Modal */}\n      <CreateGroupModal\n        isOpen={showCreateModal}\n        onClose={() => setShowCreateModal(false)}\n        onSubmit={onCreateGroup}\n        isLoading={isLoading}\n      />\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ChallengeCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ChallengeDetail.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'onDelete' is defined but never used.",
        "line": 70,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 70,
        "endColumn": 11
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport { Challenge, ChallengeStats, ChallengeLeaderboard as ChallengeLeaderboardType, ChallengeProgress } from '@/types';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { \n  Calendar, \n  Target,\n  Zap,\n  Timer,\n  TrendingUp,\n  Award,\n  Settings,\n  Share2\n} from 'lucide-react';\nimport ChallengeLeaderboard from './ChallengeLeaderboard';\n\ninterface ChallengeDetailProps {\n  challenge: Challenge;\n  stats: ChallengeStats;\n  leaderboard: ChallengeLeaderboardType;\n  userProgress?: ChallengeProgress | null;\n  isParticipating: boolean;\n  isAdmin: boolean;\n  onJoin: () => Promise<void>;\n  onLeave: () => Promise<void>;\n  onEdit?: () => void;\n  onDelete?: () => void;  \n  isLoading: boolean;\n}\n\nconst challengeTypeConfig = {\n  'most-activity': {\n    label: 'Most Activity',\n    icon: TrendingUp,\n    color: 'bg-blue-100 text-blue-800',\n    description: 'Compete to log the most productive hours during the challenge period'\n  },\n  'fastest-effort': {\n    label: 'Fastest Effort',\n    icon: Zap,\n    color: 'bg-yellow-100 text-yellow-800',\n    description: 'Achieve the best tasks-per-hour ratio in your sessions'\n  },\n  'longest-session': {\n    label: 'Longest Session',\n    icon: Timer,\n    color: 'bg-purple-100 text-purple-800',\n    description: 'Record the longest single continuous work session'\n  },\n  'group-goal': {\n    label: 'Group Goal',\n    icon: Target,\n    color: 'bg-green-100 text-green-800',\n    description: 'Work together to reach a collective productivity target'\n  }\n};\n\nexport default function ChallengeDetail({\n  challenge,\n  stats,\n  leaderboard,\n  userProgress,\n  isParticipating,\n  isAdmin,\n  onJoin,\n  onLeave,\n  onEdit,\n  onDelete,\n  isLoading\n}: ChallengeDetailProps) {\n  const [activeSection, setActiveSection] = useState<'overview' | 'leaderboard'>('overview');\n  \n  const typeConfig = challengeTypeConfig[challenge.type];\n  const TypeIcon = typeConfig.icon;\n\n  const now = new Date();\n  const startDate = new Date(challenge.startDate);\n  const endDate = new Date(challenge.endDate);\n  const isActive = now >= startDate && now <= endDate && challenge.isActive;\n  const isUpcoming = now < startDate && challenge.isActive;\n  const isCompleted = now > endDate || !challenge.isActive;\n\n  const timeRemaining = isActive ? endDate.getTime() - now.getTime() : 0;\n  const daysRemaining = Math.ceil(timeRemaining / (1000 * 60 * 60 * 24));\n  const hoursRemaining = Math.ceil(timeRemaining / (1000 * 60 * 60));\n\n  const getStatusBadge = () => {\n    if (isUpcoming) {\n      return <Badge className=\"bg-blue-100 text-blue-800\">Upcoming</Badge>;\n    }\n    if (isActive) {\n      return <Badge className=\"bg-green-100 text-green-800\">Active</Badge>;\n    }\n    return <Badge className=\"bg-gray-100 text-gray-800\">Completed</Badge>;\n  };\n\n  const formatProgress = (progress: number) => {\n    if (challenge.type === 'most-activity' || challenge.type === 'group-goal' || challenge.type === 'longest-session') {\n      return `${progress.toFixed(1)} hours`;\n    }\n    if (challenge.type === 'fastest-effort') {\n      return `${progress.toFixed(1)} tasks/hour`;\n    }\n    return progress.toString();\n  };\n\n  const getProgressPercentage = () => {\n    if (!challenge.goalValue || !userProgress?.currentValue) return 0;\n    return Math.min((userProgress.currentValue / challenge.goalValue) * 100, 100);\n  };\n\n  const formatTimeRemaining = () => {\n    if (daysRemaining > 1) {\n      return `${daysRemaining} days remaining`;\n    } else if (hoursRemaining > 1) {\n      return `${hoursRemaining} hours remaining`;\n    } else if (timeRemaining > 0) {\n      return 'Less than 1 hour remaining';\n    }\n    return 'Challenge ended';\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      {/* Hero Section */}\n      <div className=\"bg-gradient-to-r from-[#007AFF] to-[#0051D5] text-white rounded-lg shadow-sm p-8 mb-8\">\n        <div className=\"flex items-start justify-between mb-6\">\n          <div className=\"flex items-center gap-4 flex-1 min-w-0\">\n            <div className=\"p-3 bg-white/20 rounded-lg flex-shrink-0\">\n              <TypeIcon className=\"w-8 h-8\" />\n            </div>\n            <div className=\"min-w-0 flex-1\">\n              <h1 className=\"text-3xl font-bold mb-2\">{challenge.name}</h1>\n              <p className=\"text-white/80 text-lg\">{typeConfig.description}</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {getStatusBadge()}\n            {isAdmin && (\n              <Button variant=\"secondary\" size=\"sm\" onClick={onEdit}>\n                <Settings className=\"w-4 h-4 mr-1\" />\n                Settings\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {/* Challenge Meta */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n          <div className=\"text-center p-4 bg-white/10 rounded-lg\">\n            <div className=\"text-3xl font-bold\">{challenge.participantCount}</div>\n            <div className=\"text-white/80 text-sm mt-1\">Participants</div>\n          </div>\n          <div className=\"text-center p-4 bg-white/10 rounded-lg\">\n            <div className=\"text-2xl font-bold\">\n              {isActive ? formatTimeRemaining() :\n               isUpcoming ? `Starts ${startDate.toLocaleDateString()}` :\n               `Ended ${endDate.toLocaleDateString()}`}\n            </div>\n            <div className=\"text-white/80 text-sm mt-1\">\n              {isActive ? 'Time Remaining' : isUpcoming ? 'Start Date' : 'End Date'}\n            </div>\n          </div>\n          <div className=\"text-center p-4 bg-white/10 rounded-lg\">\n            <div className=\"text-3xl font-bold\">\n              {challenge.goalValue ? formatProgress(challenge.goalValue) : 'No limit'}\n            </div>\n            <div className=\"text-white/80 text-sm mt-1\">Target Goal</div>\n          </div>\n        </div>\n\n        {/* User Progress */}\n        {isParticipating && userProgress && (\n          <div className=\"bg-white/10 rounded-lg p-4\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"font-medium\">Your Progress</span>\n              <span className=\"text-lg font-bold\">\n                {formatProgress(userProgress.currentValue)}\n                {challenge.goalValue && ` / ${formatProgress(challenge.goalValue)}`}\n              </span>\n            </div>\n            {challenge.goalValue && (\n              <div className=\"w-full bg-white/20 rounded-full h-3 mb-2\">\n                <div \n                  className=\"bg-white h-3 rounded-full transition-all duration-300\"\n                  style={{ width: `${getProgressPercentage()}%` }}\n                />\n              </div>\n            )}\n            <div className=\"flex items-center justify-between text-sm text-blue-100\">\n              <span>Rank #{userProgress.rank}</span>\n              <span>{userProgress.percentage.toFixed(1)}% complete</span>\n            </div>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex flex-wrap items-center gap-3 mt-6\">\n          {!isParticipating && !isCompleted && (\n            <Button\n              onClick={onJoin}\n              disabled={isLoading}\n              size=\"lg\"\n              className=\"bg-white text-[#007AFF] hover:bg-gray-50 font-semibold\"\n            >\n              {isLoading ? 'Joining...' : 'Join Challenge'}\n            </Button>\n          )}\n          {isParticipating && !isCompleted && (\n            <Button\n              variant=\"outline\"\n              onClick={onLeave}\n              disabled={isLoading}\n              size=\"lg\"\n              className=\"border-white text-white hover:bg-white/10 font-semibold\"\n            >\n              {isLoading ? 'Leaving...' : 'Leave Challenge'}\n            </Button>\n          )}\n          <Button\n            variant=\"outline\"\n            size=\"lg\"\n            className=\"border-white text-white hover:bg-white/10 font-semibold\"\n          >\n            <Share2 className=\"w-4 h-4 mr-2\" />\n            Share\n          </Button>\n        </div>\n      </div>\n\n      {/* Navigation Tabs */}\n      <div className=\"bg-white rounded-lg border border-gray-200 shadow-sm mb-6\">\n        <div className=\"flex border-b border-gray-200\">\n          <button\n            onClick={() => setActiveSection('overview')}\n            className={`px-6 py-4 font-semibold text-sm border-b-2 transition-colors ${\n              activeSection === 'overview'\n                ? 'border-[#007AFF] text-[#007AFF]'\n                : 'border-transparent text-gray-600 hover:text-gray-900'\n            }`}\n          >\n            Overview\n          </button>\n          <button\n            onClick={() => setActiveSection('leaderboard')}\n            className={`px-6 py-4 font-semibold text-sm border-b-2 transition-colors ${\n              activeSection === 'leaderboard'\n                ? 'border-[#007AFF] text-[#007AFF]'\n                : 'border-transparent text-gray-600 hover:text-gray-900'\n            }`}\n          >\n            Leaderboard\n          </button>\n        </div>\n\n        <div className=\"p-6\">\n          {activeSection === 'overview' && (\n            <div className=\"space-y-6\">\n              {/* Description */}\n              <div>\n                <h2 className=\"text-xl font-bold text-gray-900 mb-3\">About This Challenge</h2>\n                <p className=\"text-gray-600 leading-relaxed\">{challenge.description}</p>\n              </div>\n\n              {/* Rules */}\n              {challenge.rules && (\n                <div>\n                  <h2 className=\"text-xl font-bold text-gray-900 mb-3\">Rules & Requirements</h2>\n                  <div className=\"bg-gray-50 rounded-lg p-4\">\n                    <p className=\"text-gray-600 whitespace-pre-wrap\">{challenge.rules}</p>\n                  </div>\n                </div>\n              )}\n\n              {/* Challenge Details */}\n              <div>\n                <h2 className=\"text-xl font-bold text-gray-900 mb-3\">Challenge Details</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"bg-gray-50 rounded-lg p-4\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Calendar className=\"w-5 h-5 text-gray-500\" />\n                      <span className=\"font-medium text-gray-900\">Duration</span>\n                    </div>\n                    <p className=\"text-gray-600\">\n                      {startDate.toLocaleDateString()} - {endDate.toLocaleDateString()}\n                    </p>\n                  </div>\n                  <div className=\"bg-gray-50 rounded-lg p-4\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Target className=\"w-5 h-5 text-gray-500\" />\n                      <span className=\"font-medium text-gray-900\">Challenge Type</span>\n                    </div>\n                    <Badge className={typeConfig.color}>\n                      {typeConfig.label}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n\n              {/* Rewards */}\n              {challenge.rewards && challenge.rewards.length > 0 && (\n                <div>\n                  <h2 className=\"text-xl font-bold text-gray-900 mb-3\">Rewards</h2>\n                  <div className=\"bg-yellow-50 rounded-lg p-4 border border-yellow-200\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Award className=\"w-5 h-5 text-yellow-600\" />\n                      <span className=\"font-semibold text-yellow-900\">What You'll Earn</span>\n                    </div>\n                    <ul className=\"space-y-1\">\n                      {challenge.rewards.map((reward, index) => (\n                        <li key={index} className=\"text-yellow-800\">• {reward}</li>\n                      ))}\n                    </ul>\n                  </div>\n                </div>\n              )}\n\n              {/* Statistics */}\n              <div>\n                <h2 className=\"text-xl font-bold text-gray-900 mb-3\">Challenge Statistics</h2>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"bg-blue-50 rounded-lg p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-blue-600\">{stats.totalParticipants}</div>\n                    <div className=\"text-sm text-blue-600\">Total Participants</div>\n                  </div>\n                  <div className=\"bg-green-50 rounded-lg p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-green-600\">{stats.completedParticipants}</div>\n                    <div className=\"text-sm text-green-600\">Completed</div>\n                  </div>\n                  <div className=\"bg-purple-50 rounded-lg p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-purple-600\">\n                      {formatProgress(stats.averageProgress)}\n                    </div>\n                    <div className=\"text-sm text-purple-600\">Average Progress</div>\n                  </div>\n                  <div className=\"bg-orange-50 rounded-lg p-4 text-center\">\n                    <div className=\"text-2xl font-bold text-orange-600\">\n                      {Math.round((stats.completedParticipants / stats.totalParticipants) * 100) || 0}%\n                    </div>\n                    <div className=\"text-sm text-orange-600\">Completion Rate</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeSection === 'leaderboard' && (\n            <ChallengeLeaderboard\n              leaderboard={leaderboard}\n              challengeType={challenge.type}\n              currentUserId={userProgress?.userId}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ChallengeLeaderboard.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ChallengeLeaderboardEntry' is defined but never used.",
        "line": 6,
        "column": 60,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 85
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'User' is defined but never used.",
        "line": 14,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'index' is defined but never used.",
        "line": 151,
        "column": 52,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 151,
        "endColumn": 57
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { ChallengeLeaderboard as ChallengeLeaderboardType, ChallengeLeaderboardEntry } from '@/types';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { \n  Trophy, \n  Medal, \n  Award,\n  Crown,\n  User,\n  MapPin,\n  CheckCircle\n} from 'lucide-react';\n\ninterface ChallengeLeaderboardProps {\n  leaderboard: ChallengeLeaderboardType;\n  challengeType: 'most-activity' | 'fastest-effort' | 'longest-session' | 'group-goal';\n  currentUserId?: string;\n  showFilters?: boolean;\n}\n\nconst getRankIcon = (rank: number) => {\n  switch (rank) {\n    case 1:\n      return <Crown className=\"w-5 h-5 text-yellow-500\" />;\n    case 2:\n      return <Medal className=\"w-5 h-5 text-gray-400\" />;\n    case 3:\n      return <Award className=\"w-5 h-5 text-amber-600\" />;\n    default:\n      return <span className=\"w-5 h-5 flex items-center justify-center text-sm font-medium text-gray-500\">#{rank}</span>;\n  }\n};\n\nconst getRankBadgeColor = (rank: number) => {\n  switch (rank) {\n    case 1:\n      return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n    case 2:\n      return 'bg-gray-100 text-gray-800 border-gray-200';\n    case 3:\n      return 'bg-amber-100 text-amber-800 border-amber-200';\n    default:\n      return 'bg-blue-50 text-blue-700 border-blue-200';\n  }\n};\n\nexport default function ChallengeLeaderboard({\n  leaderboard,\n  challengeType,\n  currentUserId,\n  showFilters = true\n}: ChallengeLeaderboardProps) {\n  const [filter, setFilter] = useState<'all' | 'following' | 'completed'>('all');\n\n  const formatProgress = (progress: number) => {\n    if (challengeType === 'most-activity' || challengeType === 'group-goal' || challengeType === 'longest-session') {\n      return `${progress.toFixed(1)} hours`;\n    }\n    if (challengeType === 'fastest-effort') {\n      return `${progress.toFixed(1)} tasks/hour`;\n    }\n    return progress.toString();\n  };\n\n  const getProgressLabel = () => {\n    switch (challengeType) {\n      case 'most-activity':\n        return 'Total Hours';\n      case 'fastest-effort':\n        return 'Best Ratio';\n      case 'longest-session':\n        return 'Longest Session';\n      case 'group-goal':\n        return 'Contributed Hours';\n      default:\n        return 'Progress';\n    }\n  };\n\n  // Filter entries based on selected filter\n  const filteredEntries = leaderboard.entries.filter(entry => {\n    if (filter === 'completed') {\n      return entry.isCompleted;\n    }\n    // TODO: Implement following filter when we have following data\n    return true;\n  });\n\n  const currentUserEntry = leaderboard.entries.find(entry => entry.userId === currentUserId);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filters */}\n      {showFilters && (\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant={filter === 'all' ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => setFilter('all')}\n          >\n            All Participants\n          </Button>\n          <Button\n            variant={filter === 'following' ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => setFilter('following')}\n            disabled // TODO: Implement when following data is available\n          >\n            Following\n          </Button>\n          <Button\n            variant={filter === 'completed' ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => setFilter('completed')}\n          >\n            Completed\n          </Button>\n        </div>\n      )}\n\n      {/* Current User Highlight */}\n      {currentUserEntry && filter === 'all' && currentUserEntry.rank > 3 && (\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"flex items-center justify-center w-10 h-10 bg-blue-100 rounded-full\">\n              <span className=\"text-sm font-bold text-blue-700\">#{currentUserEntry.rank}</span>\n            </div>\n            <div className=\"flex-1\">\n              <div className=\"flex items-center gap-2\">\n                <span className=\"font-medium text-blue-900\">Your Position</span>\n                {currentUserEntry.isCompleted && (\n                  <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                )}\n              </div>\n              <div className=\"text-sm text-blue-700\">\n                {formatProgress(currentUserEntry.progress)} • {getProgressLabel()}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Top 3 Podium */}\n      {filteredEntries.length > 0 && (\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n          {filteredEntries.slice(0, 3).map((entry, index) => (\n            <div\n              key={entry.userId}\n              className={`relative bg-white border-2 rounded-lg p-6 text-center ${\n                entry.userId === currentUserId ? 'border-blue-300 bg-blue-50' : 'border-gray-200'\n              }`}\n            >\n              {/* Rank Badge */}\n              <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                <Badge className={`${getRankBadgeColor(entry.rank)} border-2`}>\n                  #{entry.rank}\n                </Badge>\n              </div>\n\n              {/* Profile Picture */}\n              <div className=\"w-16 h-16 mx-auto mb-3 relative\">\n                {entry.user.profilePicture ? (\n                  <Image\n                    src={entry.user.profilePicture}\n                    alt={entry.user.name}\n                    fill\n                    className=\"rounded-full object-cover\"\n                  />\n                ) : (\n                  <div className=\"w-full h-full bg-gradient-to-br from-blue-400 to-purple-500 rounded-full flex items-center justify-center text-white font-bold text-lg\">\n                    {entry.user.name.charAt(0).toUpperCase()}\n                  </div>\n                )}\n                {/* Rank Icon Overlay */}\n                <div className=\"absolute -top-1 -right-1\">\n                  {getRankIcon(entry.rank)}\n                </div>\n              </div>\n\n              {/* User Info */}\n              <Link \n                href={`/users/${entry.user.username}`}\n                className=\"block hover:text-blue-600 transition-colors\"\n              >\n                <h3 className=\"font-semibold text-gray-900 mb-1\">{entry.user.name}</h3>\n                <p className=\"text-sm text-gray-500 mb-2\">@{entry.user.username}</p>\n              </Link>\n\n              {/* Location */}\n              {entry.user.location && (\n                <div className=\"flex items-center justify-center gap-1 text-xs text-gray-500 mb-3\">\n                  <MapPin className=\"w-3 h-3\" />\n                  <span>{entry.user.location}</span>\n                </div>\n              )}\n\n              {/* Progress */}\n              <div className=\"text-2xl font-bold text-gray-900 mb-1\">\n                {formatProgress(entry.progress)}\n              </div>\n              <div className=\"text-sm text-gray-500\">\n                {getProgressLabel()}\n              </div>\n\n              {/* Completion Badge */}\n              {entry.isCompleted && (\n                <div className=\"mt-3\">\n                  <Badge className=\"bg-green-100 text-green-800\">\n                    <CheckCircle className=\"w-3 h-3 mr-1\" />\n                    Completed\n                  </Badge>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Full Leaderboard Table */}\n      {filteredEntries.length > 3 && (\n        <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Full Leaderboard</h3>\n          </div>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Rank\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Participant\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    {getProgressLabel()}\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {filteredEntries.slice(3).map((entry) => (\n                  <tr\n                    key={entry.userId}\n                    className={`hover:bg-gray-50 ${\n                      entry.userId === currentUserId ? 'bg-blue-50' : ''\n                    }`}\n                  >\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        {getRankIcon(entry.rank)}\n                        <span className=\"ml-2 text-sm font-medium text-gray-900\">\n                          #{entry.rank}\n                        </span>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-8 h-8 relative mr-3\">\n                          {entry.user.profilePicture ? (\n                            <Image\n                              src={entry.user.profilePicture}\n                              alt={entry.user.name}\n                              fill\n                              className=\"rounded-full object-cover\"\n                            />\n                          ) : (\n                            <div className=\"w-full h-full bg-gradient-to-br from-blue-400 to-purple-500 rounded-full flex items-center justify-center text-white font-bold text-xs\">\n                              {entry.user.name.charAt(0).toUpperCase()}\n                            </div>\n                          )}\n                        </div>\n                        <div>\n                          <Link \n                            href={`/users/${entry.user.username}`}\n                            className=\"text-sm font-medium text-gray-900 hover:text-blue-600\"\n                          >\n                            {entry.user.name}\n                          </Link>\n                          <div className=\"text-sm text-gray-500\">@{entry.user.username}</div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"text-sm font-medium text-gray-900\">\n                        {formatProgress(entry.progress)}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      {entry.isCompleted ? (\n                        <Badge className=\"bg-green-100 text-green-800\">\n                          <CheckCircle className=\"w-3 h-3 mr-1\" />\n                          Completed\n                        </Badge>\n                      ) : (\n                        <Badge variant=\"secondary\">\n                          In Progress\n                        </Badge>\n                      )}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n\n      {/* Empty State */}\n      {filteredEntries.length === 0 && (\n        <div className=\"text-center py-12\">\n          <Trophy className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No participants yet</h3>\n          <p className=\"text-gray-500\">\n            {filter === 'completed' \n              ? 'No one has completed this challenge yet.'\n              : 'Be the first to join this challenge!'\n            }\n          </p>\n        </div>\n      )}\n\n      {/* Last Updated */}\n      <div className=\"text-center text-sm text-gray-500\">\n        Last updated: {leaderboard.lastUpdated.toLocaleString()}\n      </div>\n    </div>\n  );\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ChallengeProgress.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ColorSelector.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/CommentInput.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'MentionSuggestion' is defined but never used.",
        "line": 18,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'sessionId' is defined but never used.",
        "line": 24,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'parentId' is defined but never used.",
        "line": 25,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'handleCancel' is assigned a value but never used.",
        "line": 179,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 179,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport Image from 'next/image';\nimport { UserSearchResult } from '@/types';\nimport { firebaseUserApi } from '@/lib/api';\n\ninterface CommentInputProps {\n  sessionId: string;\n  parentId?: string;\n  placeholder?: string;\n  onSubmit: (content: string) => Promise<void>;\n  onCancel?: () => void;\n  autoFocus?: boolean;\n  initialValue?: string;\n}\n\ninterface MentionSuggestion {\n  user: UserSearchResult;\n  index: number;\n}\n\nexport const CommentInput: React.FC<CommentInputProps> = ({\n  sessionId,\n  parentId,\n  placeholder = 'Add a comment, @ to mention',\n  onSubmit,\n  onCancel,\n  autoFocus = false,\n  initialValue = '',\n}) => {\n  const maxCharacters = 1000;\n  const [content, setContent] = useState(initialValue);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showMentions, setShowMentions] = useState(false);\n  const [mentionQuery, setMentionQuery] = useState('');\n  const [mentionSuggestions, setMentionSuggestions] = useState<\n    UserSearchResult[]\n  >([]);\n  const [selectedMentionIndex, setSelectedMentionIndex] = useState(0);\n  const [mentionStartPos, setMentionStartPos] = useState<number | null>(null);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const mentionDropdownRef = useRef<HTMLDivElement>(null);\n\n  // Auto-resize textarea\n  useEffect(() => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n    }\n  }, [content]);\n\n  // Auto-focus if requested\n  useEffect(() => {\n    if (autoFocus && textareaRef.current) {\n      textareaRef.current.focus();\n    }\n  }, [autoFocus]);\n\n  // Handle mention search\n  useEffect(() => {\n    const searchMentions = async () => {\n      if (mentionQuery.length > 0) {\n        try {\n          const results = await firebaseUserApi.searchUsers(mentionQuery, 5);\n          setMentionSuggestions(results.users);\n        } catch (error) {\n          console.error('Failed to search users:', error);\n          setMentionSuggestions([]);\n        }\n      } else {\n        setMentionSuggestions([]);\n      }\n    };\n\n    const debounce = setTimeout(searchMentions, 200);\n    return () => clearTimeout(debounce);\n  }, [mentionQuery]);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = e.target.value;\n\n    // Enforce character limit\n    if (value.length > maxCharacters) {\n      return;\n    }\n\n    const cursorPos = e.target.selectionStart;\n\n    setContent(value);\n\n    // Check for @ mentions\n    const textBeforeCursor = value.slice(0, cursorPos);\n    const lastAtIndex = textBeforeCursor.lastIndexOf('@');\n\n    if (lastAtIndex !== -1) {\n      const textAfterAt = textBeforeCursor.slice(lastAtIndex + 1);\n\n      // Check if there's a space after @\n      if (!textAfterAt.includes(' ') && textAfterAt.length < 20) {\n        setShowMentions(true);\n        setMentionQuery(textAfterAt);\n        setMentionStartPos(lastAtIndex);\n        setSelectedMentionIndex(0);\n      } else {\n        setShowMentions(false);\n      }\n    } else {\n      setShowMentions(false);\n    }\n  };\n\n  const insertMention = (user: UserSearchResult) => {\n    if (mentionStartPos === null) return;\n\n    const beforeMention = content.slice(0, mentionStartPos);\n    const cursorPos = textareaRef.current?.selectionStart || content.length;\n    const afterCursor = content.slice(cursorPos);\n\n    const newContent = `${beforeMention}@${user.username} ${afterCursor}`;\n    setContent(newContent);\n    setShowMentions(false);\n    setMentionQuery('');\n    setMentionStartPos(null);\n\n    // Focus back on textarea\n    setTimeout(() => {\n      if (textareaRef.current) {\n        const newCursorPos = mentionStartPos + user.username.length + 2;\n        textareaRef.current.focus();\n        textareaRef.current.setSelectionRange(newCursorPos, newCursorPos);\n      }\n    }, 0);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (showMentions && mentionSuggestions.length > 0) {\n      if (e.key === 'ArrowDown') {\n        e.preventDefault();\n        setSelectedMentionIndex(prev =>\n          prev < mentionSuggestions.length - 1 ? prev + 1 : 0\n        );\n      } else if (e.key === 'ArrowUp') {\n        e.preventDefault();\n        setSelectedMentionIndex(prev =>\n          prev > 0 ? prev - 1 : mentionSuggestions.length - 1\n        );\n      } else if (e.key === 'Enter' && !e.shiftKey) {\n        e.preventDefault();\n        const selectedUser = mentionSuggestions[selectedMentionIndex];\n        if (selectedUser) {\n          insertMention(selectedUser);\n        }\n      } else if (e.key === 'Escape') {\n        setShowMentions(false);\n      }\n    } else if (e.key === 'Enter' && !e.shiftKey && (e.metaKey || e.ctrlKey)) {\n      e.preventDefault();\n      handleSubmit();\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!content.trim() || isSubmitting) return;\n\n    setIsSubmitting(true);\n    try {\n      await onSubmit(content.trim());\n      setContent('');\n      setShowMentions(false);\n      setMentionQuery('');\n    } catch (error) {\n      console.error('Failed to submit comment:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleCancel = () => {\n    setContent('');\n    setShowMentions(false);\n    if (onCancel) onCancel();\n  };\n\n  return (\n    <div className=\"relative\">\n      <div className=\"flex items-center gap-3 border-t border-gray-200 pt-2\">\n        <textarea\n          ref={textareaRef}\n          value={content}\n          onChange={handleInputChange}\n          onKeyDown={handleKeyDown}\n          placeholder={placeholder}\n          autoFocus={autoFocus}\n          disabled={isSubmitting}\n          className=\"flex-1 px-0 pt-2 pb-0 bg-transparent border-0 resize-none focus:outline-none disabled:opacity-50 disabled:cursor-not-allowed min-h-[20px] max-h-[120px] scrollbar-hide overflow-y-auto text-base placeholder:text-gray-400 leading-5\"\n          rows={1}\n          style={{\n            scrollbarWidth: 'none',\n            msOverflowStyle: 'none',\n          }}\n          aria-label=\"Comment input\"\n          aria-describedby=\"comment-help-text\"\n          maxLength={1000}\n        />\n        <button\n          onClick={handleSubmit}\n          disabled={!content.trim() || isSubmitting}\n          className={`text-base font-semibold transition-colors flex-shrink-0 leading-5 ${\n            content.trim() && !isSubmitting\n              ? 'text-[#007AFF] hover:text-[#0051D5]'\n              : 'text-gray-300 cursor-not-allowed'\n          }`}\n          aria-label=\"Post comment\"\n        >\n          Send\n        </button>\n      </div>\n      <span id=\"comment-help-text\" className=\"sr-only\">\n        Use @ to mention users. Press Cmd+Enter or Ctrl+Enter to submit.\n      </span>\n\n      {/* Mention Suggestions Dropdown */}\n      {showMentions && mentionSuggestions.length > 0 && (\n        <div\n          ref={mentionDropdownRef}\n          className=\"absolute bottom-full left-0 mb-2 w-full max-w-xs bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50 max-h-60 overflow-y-auto\"\n          role=\"listbox\"\n          aria-label=\"User mentions\"\n        >\n          {mentionSuggestions.map((user, index) => (\n            <button\n              key={user.id}\n              onClick={() => insertMention(user)}\n              className={`w-full px-4 py-2 flex items-center gap-3 hover:bg-gray-50 transition-colors ${\n                index === selectedMentionIndex ? 'bg-blue-50' : ''\n              }`}\n              role=\"option\"\n              aria-selected={index === selectedMentionIndex}\n            >\n              {user.profilePicture ? (\n                <Image\n                  src={user.profilePicture}\n                  alt={user.name}\n                  width={32}\n                  height={32}\n                  className=\"w-8 h-8 rounded-full object-cover\"\n                />\n              ) : (\n                <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-orange-400 to-orange-600 flex items-center justify-center\">\n                  <span className=\"text-xs font-semibold text-white\">\n                    {user.name\n                      .split(' ')\n                      .map(n => n[0])\n                      .join('')\n                      .slice(0, 2)\n                      .toUpperCase()}\n                  </span>\n                </div>\n              )}\n              <div className=\"flex-1 text-left min-w-0\">\n                <div className=\"text-sm font-semibold text-gray-900 truncate\">\n                  {user.name}\n                </div>\n                <div className=\"text-xs text-gray-600 truncate\">\n                  @{user.username}\n                </div>\n              </div>\n            </button>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CommentInput;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/CommentItem.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'sessionId' is defined but never used.",
        "line": 21,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 12
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport Image from 'next/image';\nimport { CommentWithDetails } from '@/types';\nimport Link from 'next/link';\nimport { Trash2, Heart, MoreVertical } from 'lucide-react';\nimport { formatTimeAgo } from '@/lib/formatters';\nimport { getUserInitials } from '@/lib/userUtils';\n\ninterface CommentItemProps {\n  comment: CommentWithDetails;\n  sessionId: string;\n  onDelete?: (commentId: string) => Promise<void>;\n  onLike?: (commentId: string, action: 'like' | 'unlike') => void;\n  currentUserId?: string;\n}\n\nexport const CommentItem: React.FC<CommentItemProps> = ({\n  comment,\n  sessionId,\n  onDelete,\n  onLike,\n  currentUserId,\n}) => {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [isLiking, setIsLiking] = useState(false);\n  const [optimisticLiked, setOptimisticLiked] = useState(comment.isLiked);\n  const [optimisticLikeCount, setOptimisticLikeCount] = useState(\n    comment.likeCount\n  );\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  // Update optimistic state when prop changes (from cache invalidation)\n  useEffect(() => {\n    setOptimisticLiked(comment.isLiked);\n    setOptimisticLikeCount(comment.likeCount);\n  }, [comment.isLiked, comment.likeCount]);\n\n  // Close menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        setIsMenuOpen(false);\n      }\n    };\n\n    if (isMenuOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [isMenuOpen]);\n\n  const isOwner = currentUserId === comment.userId;\n  const canDelete = isOwner && !!onDelete;\n\n  const renderContent = (text: string) => {\n    // Highlight mentions\n    const parts = text.split(/(@\\w+)/g);\n    return parts.map((part, index) => {\n      if (part.startsWith('@')) {\n        const username = part.slice(1);\n        return (\n          <Link\n            key={index}\n            href={`/profile/${username}`}\n            className=\"text-[#007AFF] hover:text-[#0051D5] font-medium\"\n          >\n            {part}\n          </Link>\n        );\n      }\n      return <span key={index}>{part}</span>;\n    });\n  };\n\n  const handleDelete = async () => {\n    if (!onDelete) return;\n    setIsMenuOpen(false);\n    if (window.confirm('Are you sure you want to delete this comment?')) {\n      setIsDeleting(true);\n      try {\n        await onDelete(comment.id);\n      } catch (error) {\n        console.error('Failed to delete comment:', error);\n        setIsDeleting(false);\n      }\n    }\n  };\n\n  const handleLike = () => {\n    if (!onLike || !currentUserId || isLiking) return;\n\n    // Optimistic update\n    const action = optimisticLiked ? 'unlike' : 'like';\n    const newLiked = !optimisticLiked;\n    const newCount = newLiked\n      ? optimisticLikeCount + 1\n      : Math.max(0, optimisticLikeCount - 1);\n\n    setOptimisticLiked(newLiked);\n    setOptimisticLikeCount(newCount);\n    setIsLiking(true);\n\n    // Call the mutation\n    onLike(comment.id, action);\n\n    // Reset loading state after a short delay to prevent rapid clicking\n    setTimeout(() => setIsLiking(false), 500);\n  };\n\n  if (isDeleting) {\n    return (\n      <div className=\"flex gap-2 opacity-50\">\n        <div className=\"w-10 h-10 rounded-full bg-gray-200 animate-pulse\" />\n        <div className=\"flex-1\">\n          <div className=\"h-4 bg-gray-200 rounded w-1/3 mb-1 animate-pulse\" />\n          <div className=\"h-3 bg-gray-200 rounded w-full animate-pulse\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex gap-3\">\n      {/* User Avatar */}\n      <Link href={`/profile/${comment.user.username}`} className=\"shrink-0\">\n        {comment.user.profilePicture ? (\n          <Image\n            src={comment.user.profilePicture}\n            alt={comment.user.name}\n            width={40}\n            height={40}\n            className=\"w-10 h-10 rounded-full object-cover\"\n          />\n        ) : (\n          <div className=\"w-10 h-10 bg-gradient-to-br from-orange-400 to-orange-600 rounded-full flex items-center justify-center\">\n            <span className=\"text-sm font-semibold text-white\">\n              {getUserInitials(comment.user.name)}\n            </span>\n          </div>\n        )}\n      </Link>\n\n      {/* Comment Content */}\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"flex items-baseline justify-between gap-2\">\n          <div className=\"flex items-baseline gap-2 min-w-0\">\n            <Link href={`/profile/${comment.user.username}`}>\n              <span className=\"text-sm font-semibold text-gray-900 hover:text-[#007AFF] transition-colors\">\n                {comment.user.name}\n              </span>\n            </Link>\n            <span className=\"text-xs text-gray-500 flex-shrink-0\">\n              {formatTimeAgo(comment.createdAt)}\n            </span>\n          </div>\n\n          {/* More Menu */}\n          {canDelete && (\n            <div className=\"relative shrink-0\" ref={menuRef}>\n              <button\n                onClick={() => setIsMenuOpen(!isMenuOpen)}\n                className=\"text-gray-400 hover:text-gray-600 p-1 rounded-full hover:bg-gray-100 transition-colors\"\n                aria-label=\"More options\"\n                aria-expanded={isMenuOpen}\n                aria-haspopup=\"true\"\n              >\n                <MoreVertical className=\"w-4 h-4\" aria-hidden=\"true\" />\n              </button>\n\n              {/* Dropdown Menu */}\n              {isMenuOpen && (\n                <div className=\"absolute right-0 top-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg py-1 z-10 min-w-[120px]\">\n                  <button\n                    onClick={handleDelete}\n                    className=\"w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-gray-50 transition-colors flex items-center gap-2\"\n                    role=\"menuitem\"\n                    aria-label=\"Delete comment\"\n                  >\n                    <Trash2 className=\"w-4 h-4\" aria-hidden=\"true\" />\n                    Delete\n                  </button>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Comment Text */}\n        <p className=\"text-[15px] text-gray-900 whitespace-pre-wrap break-words mt-0.5\">\n          {renderContent(comment.content)}\n        </p>\n\n        {/* Like Button */}\n        {currentUserId && (\n          <div className=\"flex items-center gap-2 mt-1\">\n            <button\n              onClick={handleLike}\n              className={`flex items-center gap-1 transition-colors ${\n                optimisticLiked\n                  ? 'text-red-600 hover:text-red-700'\n                  : 'text-gray-500 hover:text-red-600'\n              } ${isLiking ? 'opacity-70' : ''}`}\n              disabled={!onLike || isLiking}\n              aria-label={\n                optimisticLiked\n                  ? `Unlike comment (${optimisticLikeCount} ${optimisticLikeCount === 1 ? 'like' : 'likes'})`\n                  : `Like comment (${optimisticLikeCount} ${optimisticLikeCount === 1 ? 'like' : 'likes'})`\n              }\n            >\n              <Heart\n                className={`w-4 h-4 ${optimisticLiked ? 'fill-current' : ''}`}\n                aria-hidden=\"true\"\n              />\n              {optimisticLikeCount > 0 && (\n                <span className=\"text-xs font-medium\">\n                  {optimisticLikeCount > 1\n                    ? `${optimisticLikeCount} like${optimisticLikeCount > 1 ? 's' : ''}`\n                    : '1 like'}\n                </span>\n              )}\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CommentItem;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/CommentList.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'CommentWithDetails' is defined but never used.",
        "line": 4,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'initialCommentCount' is assigned a value but never used.",
        "line": 25,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 70,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 70,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1865, 1868], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1865, 1868], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 79,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 79,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2111, 2114], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2111, 2114], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport { CommentWithDetails } from '@/types';\nimport { useAuth } from '@/hooks/useAuth';\nimport {\n  useSessionComments,\n  useCreateComment,\n  useDeleteComment,\n  useCommentLike,\n} from '@/features/comments/hooks';\nimport CommentInput from './CommentInput';\nimport CommentItem from './CommentItem';\n\ninterface CommentListProps {\n  sessionId: string;\n  initialCommentCount?: number;\n  onCommentCountChange?: (count: number) => void;\n  showPagination?: boolean;\n  commentsPerPage?: number;\n}\n\nexport const CommentList: React.FC<CommentListProps> = ({\n  sessionId,\n  initialCommentCount = 0,\n  onCommentCountChange,\n}) => {\n  const { user } = useAuth();\n  const [showInput, setShowInput] = useState(false);\n\n  // Use new React Query hooks\n  const {\n    data: commentsResponse,\n    isLoading,\n    error: queryError,\n    refetch,\n  } = useSessionComments(sessionId, 20);\n\n  const createCommentMutation = useCreateComment({\n    onSuccess: () => {\n      setShowInput(false);\n      // Update parent component's count\n      if (onCommentCountChange && commentsResponse) {\n        onCommentCountChange(commentsResponse.comments.length + 1);\n      }\n    },\n  });\n\n  const deleteCommentMutation = useDeleteComment({\n    onSuccess: () => {\n      // Update parent component's count\n      if (onCommentCountChange && commentsResponse) {\n        onCommentCountChange(Math.max(0, commentsResponse.comments.length - 1));\n      }\n    },\n  });\n\n  const likeMutation = useCommentLike(sessionId);\n\n  const comments = commentsResponse?.comments || [];\n  const hasMore = commentsResponse?.hasMore || false;\n  const error = queryError?.message || null;\n\n  const handleCreateComment = async (content: string) => {\n    try {\n      await createCommentMutation.mutateAsync({\n        sessionId,\n        content,\n      });\n    } catch (err: any) {\n      console.error('Failed to create comment:', err);\n      throw err;\n    }\n  };\n\n  const handleDelete = async (commentId: string) => {\n    try {\n      await deleteCommentMutation.mutateAsync({ commentId, sessionId });\n    } catch (err: any) {\n      console.error('Failed to delete comment:', err);\n      throw err;\n    }\n  };\n\n  const handleLike = (commentId: string, action: 'like' | 'unlike') => {\n    likeMutation.mutate({ commentId, action });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-3 py-4\">\n        {[1, 2, 3].map(i => (\n          <div key={i} className=\"flex gap-2.5 animate-pulse\">\n            <div className=\"w-10 h-10 rounded-full bg-gray-200\" />\n            <div className=\"flex-1 space-y-1.5\">\n              <div className=\"h-4 bg-gray-200 rounded w-1/4\" />\n              <div className=\"h-3 bg-gray-200 rounded w-full\" />\n              <div className=\"h-3 bg-gray-200 rounded w-3/4\" />\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"py-4\">\n        <div className=\"text-center text-red-600 mb-4\">{error}</div>\n        <button\n          onClick={() => refetch()}\n          className=\"w-full py-2 text-sm font-medium text-[#007AFF] hover:text-[#0051D5]\"\n        >\n          Try again\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"px-4 py-3 space-y-3\">\n      {/* Comment Count Header */}\n      <div className=\"flex items-center justify-between mb-2\">\n        <h3 className=\"text-base font-semibold text-gray-900\">\n          {comments.length > 0\n            ? `${comments.length} ${comments.length === 1 ? 'Comment' : 'Comments'}`\n            : 'Comments'}\n        </h3>\n      </div>\n\n      {/* Comments List */}\n      {comments.length > 0 ? (\n        <div className=\"space-y-3 mb-3\">\n          {comments.map(comment => (\n            <CommentItem\n              key={comment.id}\n              comment={comment}\n              sessionId={sessionId}\n              onDelete={handleDelete}\n              onLike={handleLike}\n              currentUserId={user?.id}\n            />\n          ))}\n\n          {/* Load More indicator - pagination can be added later if needed */}\n          {hasMore && (\n            <div className=\"text-center text-sm text-gray-500 py-2\">\n              Showing first {comments.length} comments\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"text-center py-6 text-gray-500 text-sm mb-3\">\n          No comments yet. Be the first to comment!\n        </div>\n      )}\n\n      {/* Comment Input - Always at bottom */}\n      <div className=\"border-t border-gray-200 pt-3\">\n        {showInput ? (\n          <CommentInput\n            sessionId={sessionId}\n            placeholder=\"Add a comment, @ to mention\"\n            autoFocus\n            onSubmit={handleCreateComment}\n            onCancel={() => setShowInput(false)}\n          />\n        ) : (\n          <button\n            onClick={() => setShowInput(true)}\n            className=\"w-full text-left px-4 py-3 text-gray-500 border border-gray-300 rounded-lg hover:border-[#007AFF] transition-colors\"\n          >\n            Add a comment, @ to mention\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CommentList;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/CommentsModal.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'refetch'. Either include it or remove the dependency array.",
        "line": 83,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 83,
        "endColumn": 25,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [isOpen, refetch, sessionId]",
            "fix": {
              "range": [2075, 2094],
              "text": "[isOpen, refetch, sessionId]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 108,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 108,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2656, 2659], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2656, 2659], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 117,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 117,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2916, 2919], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2916, 2919], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'formatTimeAgo' is assigned a value but never used.",
        "line": 129,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 129,
        "endColumn": 22
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useEffect, useState } from 'react';\nimport { ChevronLeft, ChevronRight } from 'lucide-react';\nimport { SessionWithDetails } from '@/types';\nimport { useAuth } from '@/hooks/useAuth';\nimport {\n  useSessionComments,\n  useCreateComment,\n  useDeleteComment,\n  useCommentLike,\n} from '@/features/comments/hooks';\nimport CommentItem from './CommentItem';\nimport CommentInput from './CommentInput';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { debug } from '@/lib/debug';\n\ninterface CommentsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  sessionId: string;\n  session?: SessionWithDetails;\n  totalCommentCount: number;\n  onCommentCountChange?: (count: number) => void;\n}\n\nconst COMMENTS_PER_PAGE = 10;\n\nexport const CommentsModal: React.FC<CommentsModalProps> = ({\n  isOpen,\n  onClose,\n  sessionId,\n  session,\n  totalCommentCount,\n  onCommentCountChange,\n}) => {\n  const { user } = useAuth();\n  const [currentPage, setCurrentPage] = useState(1);\n\n  // Fetch comments when modal is open\n  const {\n    data: commentsResponse,\n    isLoading,\n    refetch,\n  } = useSessionComments(sessionId, 100, {\n    enabled: isOpen, // Only fetch when modal is open\n  });\n\n  const createCommentMutation = useCreateComment({\n    onSuccess: () => {\n      if (onCommentCountChange) {\n        onCommentCountChange(totalCommentCount + 1);\n      }\n    },\n  });\n\n  const deleteCommentMutation = useDeleteComment({\n    onSuccess: () => {\n      if (onCommentCountChange) {\n        onCommentCountChange(Math.max(0, totalCommentCount - 1));\n      }\n    },\n  });\n\n  const likeMutation = useCommentLike(sessionId);\n\n  const allComments = commentsResponse?.comments || [];\n  const totalPages = Math.ceil(allComments.length / COMMENTS_PER_PAGE);\n\n  // Calculate paginated comments\n  const comments = allComments.slice(\n    (currentPage - 1) * COMMENTS_PER_PAGE,\n    currentPage * COMMENTS_PER_PAGE\n  );\n\n  // Refetch when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      refetch();\n      setCurrentPage(1); // Reset to first page\n    }\n  }, [isOpen, sessionId]);\n\n  // Handle ESC key to close modal\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape' && isOpen) {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [isOpen, onClose]);\n\n  const handleCreateComment = async (content: string) => {\n    try {\n      await createCommentMutation.mutateAsync({\n        sessionId,\n        content,\n      });\n    } catch (err: any) {\n      debug.error('CommentsModal - Failed to create comment:', err);\n      throw err;\n    }\n  };\n\n  const handleDelete = async (commentId: string) => {\n    try {\n      await deleteCommentMutation.mutateAsync({ commentId, sessionId });\n    } catch (err: any) {\n      debug.error('CommentsModal - Failed to delete comment:', err);\n      throw err;\n    }\n  };\n\n  const handleLike = (commentId: string, action: 'like' | 'unlike') => {\n    likeMutation.mutate({ commentId, action });\n  };\n\n  if (!isOpen) return null;\n\n  const formatTimeAgo = (date: Date): string => {\n    const now = new Date();\n    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n\n    if (diffInSeconds < 60) return 'just now';\n\n    const diffInMinutes = Math.floor(diffInSeconds / 60);\n    if (diffInMinutes < 60) return `${diffInMinutes}m`;\n\n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours < 24) return `${diffInHours}h`;\n\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7)\n      return `${diffInDays} day${diffInDays === 1 ? '' : 's'} ago`;\n\n    const diffInWeeks = Math.floor(diffInDays / 7);\n    if (diffInWeeks < 4) return `${diffInWeeks}w`;\n\n    const diffInMonths = Math.floor(diffInDays / 30);\n    if (diffInMonths < 12) return `${diffInMonths}mo`;\n\n    const diffInYears = Math.floor(diffInDays / 365);\n    return `${diffInYears}y`;\n  };\n\n  const formatDate = (date: Date): string => {\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n    });\n  };\n\n  const formatDistance = (seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    }\n    return `${minutes}m`;\n  };\n\n  const getUserInitials = (name: string): string => {\n    return name\n      .split(' ')\n      .map(word => word.charAt(0))\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  return (\n    <div\n      className=\"fixed inset-0 z-50 bg-white sm:bg-black/60 sm:flex sm:items-center sm:justify-center sm:p-4\"\n      onClick={e => {\n        // Only close on backdrop click for desktop\n        if (e.target === e.currentTarget) onClose();\n      }}\n    >\n      <div\n        className=\"bg-white w-full h-full sm:rounded-2xl sm:max-w-2xl sm:h-auto sm:max-h-[85vh] flex flex-col\"\n        onClick={e => e.stopPropagation()}\n      >\n        {/* Navigation Header */}\n        <div className=\"flex items-center justify-between px-4 py-2.5 border-b border-gray-200 flex-shrink-0\">\n          <button\n            onClick={onClose}\n            className=\"flex items-center gap-1.5 -ml-2 p-1.5 hover:bg-gray-100 rounded-lg transition-colors\"\n            aria-label=\"Close comments and return to home\"\n          >\n            <ChevronLeft className=\"w-6 h-6 text-gray-900\" aria-hidden=\"true\" />\n            <span className=\"text-base font-medium text-gray-900\">Home</span>\n          </button>\n          <h1 className=\"text-base font-semibold text-gray-900 absolute left-1/2 transform -translate-x-1/2\">\n            Comments\n          </h1>\n          <div className=\"w-20\"></div> {/* Spacer for centering */}\n        </div>\n\n        {/* Session Info Card */}\n        {session && (\n          <div className=\"px-4 py-2.5 border-b border-gray-200 flex-shrink-0\">\n            <div>\n              <h2 className=\"text-base font-bold text-gray-900 mb-1.5\">\n                {session.title || 'Focus Session'}\n              </h2>\n              <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                <Link\n                  href={`/profile/${session.user.username}`}\n                  className=\"flex items-center gap-2 hover:text-gray-900\"\n                >\n                  {session.user.profilePicture ? (\n                    <Image\n                      src={session.user.profilePicture}\n                      alt={session.user.name}\n                      width={20}\n                      height={20}\n                      className=\"w-5 h-5 rounded-full object-cover\"\n                    />\n                  ) : (\n                    <div className=\"w-5 h-5 rounded-full bg-gray-100 flex items-center justify-center\">\n                      <span className=\"text-[10px] font-semibold text-gray-600\">\n                        {getUserInitials(session.user.name)}\n                      </span>\n                    </div>\n                  )}\n                  <span className=\"font-medium\">{session.user.name}</span>\n                </Link>\n                <span>·</span>\n                <span>{formatDate(session.createdAt)}</span>\n                {session.duration && (\n                  <>\n                    <span>·</span>\n                    <span>{formatDistance(session.duration)}</span>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Comments list - scrollable area */}\n        <div className=\"flex-1 overflow-y-auto overscroll-contain\">\n          <div className=\"p-4\">\n            {isLoading ? (\n              <div className=\"flex items-center justify-center py-8\">\n                <div className=\"w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\" />\n              </div>\n            ) : comments.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-500 text-sm\">\n                No comments yet. Be the first to comment!\n              </div>\n            ) : (\n              <div className=\"space-y-5\">\n                {comments.map(comment => (\n                  <CommentItem\n                    key={comment.id}\n                    comment={comment}\n                    sessionId={sessionId}\n                    onDelete={handleDelete}\n                    onLike={handleLike}\n                    currentUserId={user?.id}\n                  />\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Pagination */}\n        {totalPages > 1 && (\n          <div className=\"flex items-center justify-between px-4 py-3 border-t border-gray-200 flex-shrink-0\">\n            <button\n              onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n              disabled={currentPage === 1}\n              className=\"flex items-center gap-2 px-4 py-2 rounded-lg hover:bg-gray-100 disabled:opacity-30 disabled:cursor-not-allowed transition-colors\"\n              aria-label=\"Previous page\"\n            >\n              <ChevronLeft className=\"w-5 h-5\" aria-hidden=\"true\" />\n              <span className=\"text-sm font-medium\">Previous</span>\n            </button>\n\n            <span className=\"text-sm text-gray-600 font-medium\">\n              Page {currentPage} of {totalPages}\n            </span>\n\n            <button\n              onClick={() =>\n                setCurrentPage(prev => Math.min(totalPages, prev + 1))\n              }\n              disabled={currentPage === totalPages}\n              className=\"flex items-center gap-2 px-4 py-2 rounded-lg hover:bg-gray-100 disabled:opacity-30 disabled:cursor-not-allowed transition-colors\"\n              aria-label=\"Next page\"\n            >\n              <span className=\"text-sm font-medium\">Next</span>\n              <ChevronRight className=\"w-5 h-5\" aria-hidden=\"true\" />\n            </button>\n          </div>\n        )}\n\n        {/* Comment Input - Fixed at bottom, above nav bar */}\n        <div className=\"px-4 pb-3 bg-white flex-shrink-0\">\n          <CommentInput\n            sessionId={sessionId}\n            placeholder=\"Add a comment\"\n            onSubmit={handleCreateComment}\n            autoFocus={false}\n          />\n        </div>\n        {/* Safe area padding for mobile bottom navigation */}\n        <div className=\"h-20 sm:h-0 flex-shrink-0 bg-white\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default CommentsModal;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ComparativeAnalytics.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'userId' is defined but never used.",
        "line": 12,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 12,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'selectedProjects' is assigned a value but never used.",
        "line": 14,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setSelectedProjects' is assigned a value but never used.",
        "line": 14,
        "column": 28,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 47
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'index' is defined but never used.",
        "line": 219,
        "column": 83,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 219,
        "endColumn": 88
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport { TrendingUp, Award, Calendar } from 'lucide-react';\nimport { ActivityChart } from './ActivityChart';\n\ninterface ComparativeAnalyticsProps {\n  userId: string;\n}\n\nexport const ComparativeAnalytics: React.FC<ComparativeAnalyticsProps> = ({\n  userId\n}) => {\n  const [selectedProjects, setSelectedProjects] = useState<string[]>([]);\n\n  // Mock data\n  const mockData = {\n    projects: [\n      { projectId: '1', projectName: 'Web Development', hours: 45, sessions: 28, tasks: 156 },\n      { projectId: '2', projectName: 'Mobile App', hours: 32, sessions: 20, tasks: 98 },\n      { projectId: '3', projectName: 'Design Work', hours: 28, sessions: 18, tasks: 67 }\n    ],\n    weekOverWeek: [\n      { week: 'Week 1', hours: 35, change: 0 },\n      { week: 'Week 2', hours: 38, change: 8.6 },\n      { week: 'Week 3', hours: 42, change: 10.5 },\n      { week: 'Week 4', hours: 45, change: 7.1 }\n    ],\n    personalRecords: {\n      longestSession: { duration: 240, date: new Date('2025-09-15'), projectName: 'Web Development' },\n      mostProductiveDay: { hours: 12, date: new Date('2025-09-20'), sessions: 8 },\n      bestWeek: { hours: 52, weekStart: new Date('2025-09-01'), sessions: 32 }\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h2 className=\"text-2xl font-bold text-gray-900\">Comparative Analytics</h2>\n        <p className=\"text-gray-600\">Compare projects and track your progress over time</p>\n      </div>\n\n      {/* Project comparison */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Project Comparison</h3>\n        \n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"border-b border-gray-200\">\n                <th className=\"text-left py-3 px-4 text-sm font-semibold text-gray-700\">Project</th>\n                <th className=\"text-right py-3 px-4 text-sm font-semibold text-gray-700\">Hours</th>\n                <th className=\"text-right py-3 px-4 text-sm font-semibold text-gray-700\">Sessions</th>\n                <th className=\"text-right py-3 px-4 text-sm font-semibold text-gray-700\">Tasks</th>\n                <th className=\"text-right py-3 px-4 text-sm font-semibold text-gray-700\">Avg Session</th>\n              </tr>\n            </thead>\n            <tbody>\n              {mockData.projects.map((project, index) => (\n                <tr key={project.projectId} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                  <td className=\"py-3 px-4\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className={`w-3 h-3 rounded-full ${\n                        index === 0 ? 'bg-blue-500' : index === 1 ? 'bg-green-500' : 'bg-purple-500'\n                      }`} />\n                      <span className=\"font-medium text-gray-900\">{project.projectName}</span>\n                    </div>\n                  </td>\n                  <td className=\"text-right py-3 px-4 font-semibold text-gray-900\">{project.hours}h</td>\n                  <td className=\"text-right py-3 px-4 text-gray-700\">{project.sessions}</td>\n                  <td className=\"text-right py-3 px-4 text-gray-700\">{project.tasks}</td>\n                  <td className=\"text-right py-3 px-4 text-gray-700\">\n                    {(project.hours / project.sessions).toFixed(1)}h\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n\n        {/* Visual comparison */}\n        <div className=\"mt-6\">\n          <ActivityChart\n            data={mockData.projects.map(p => ({\n              label: p.projectName,\n              value: p.hours,\n              secondaryValue: p.sessions\n            }))}\n            type=\"bar\"\n            height={200}\n            valueFormatter={(v) => `${v}h`}\n          />\n        </div>\n      </div>\n\n      {/* Week over week */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Week-over-Week Progress</h3>\n        \n        <ActivityChart\n          data={mockData.weekOverWeek.map(w => ({\n            label: w.week,\n            value: w.hours\n          }))}\n          type=\"line\"\n          height={200}\n          color=\"#3b82f6\"\n          valueFormatter={(v) => `${v}h`}\n        />\n\n        <div className=\"mt-4 grid grid-cols-4 gap-4\">\n          {mockData.weekOverWeek.map((week, index) => (\n            <div key={index} className=\"text-center p-3 bg-gray-50 rounded-lg\">\n              <p className=\"text-xs text-gray-600 mb-1\">{week.week}</p>\n              <p className=\"text-lg font-bold text-gray-900\">{week.hours}h</p>\n              {week.change !== 0 && (\n                <p className={`text-xs font-medium ${week.change > 0 ? 'text-green-600' : 'text-red-600'}`}>\n                  {week.change > 0 ? '+' : ''}{week.change.toFixed(1)}%\n                </p>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Personal records */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"bg-gradient-to-br from-yellow-50 to-orange-50 rounded-lg border border-yellow-200 p-6\">\n          <div className=\"flex items-center gap-3 mb-3\">\n            <Award className=\"w-6 h-6 text-yellow-600\" />\n            <h3 className=\"font-semibold text-gray-900\">Longest Session</h3>\n          </div>\n          <p className=\"text-3xl font-bold text-yellow-600 mb-1\">\n            {Math.floor(mockData.personalRecords.longestSession.duration / 60)}h {mockData.personalRecords.longestSession.duration % 60}m\n          </p>\n          <p className=\"text-sm text-gray-600\">\n            {mockData.personalRecords.longestSession.projectName}\n          </p>\n          <p className=\"text-xs text-gray-500 mt-1\">\n            {mockData.personalRecords.longestSession.date.toLocaleDateString()}\n          </p>\n        </div>\n\n        <div className=\"bg-gradient-to-br from-blue-50 to-purple-50 rounded-lg border border-blue-200 p-6\">\n          <div className=\"flex items-center gap-3 mb-3\">\n            <TrendingUp className=\"w-6 h-6 text-blue-600\" />\n            <h3 className=\"font-semibold text-gray-900\">Most Productive Day</h3>\n          </div>\n          <p className=\"text-3xl font-bold text-blue-600 mb-1\">\n            {mockData.personalRecords.mostProductiveDay.hours}h\n          </p>\n          <p className=\"text-sm text-gray-600\">\n            {mockData.personalRecords.mostProductiveDay.sessions} sessions\n          </p>\n          <p className=\"text-xs text-gray-500 mt-1\">\n            {mockData.personalRecords.mostProductiveDay.date.toLocaleDateString()}\n          </p>\n        </div>\n\n        <div className=\"bg-gradient-to-br from-green-50 to-teal-50 rounded-lg border border-green-200 p-6\">\n          <div className=\"flex items-center gap-3 mb-3\">\n            <Calendar className=\"w-6 h-6 text-green-600\" />\n            <h3 className=\"font-semibold text-gray-900\">Best Week</h3>\n          </div>\n          <p className=\"text-3xl font-bold text-green-600 mb-1\">\n            {mockData.personalRecords.bestWeek.hours}h\n          </p>\n          <p className=\"text-sm text-gray-600\">\n            {mockData.personalRecords.bestWeek.sessions} sessions\n          </p>\n          <p className=\"text-xs text-gray-500 mt-1\">\n            Week of {mockData.personalRecords.bestWeek.weekStart.toLocaleDateString()}\n          </p>\n        </div>\n      </div>\n\n      {/* Productivity patterns */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Productivity Patterns</h3>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Time of Day</h4>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600\">Morning (6-12)</span>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-32 h-2 bg-gray-200 rounded-full overflow-hidden\">\n                    <div className=\"h-full bg-blue-500 rounded-full\" style={{ width: '65%' }} />\n                  </div>\n                  <span className=\"text-sm font-medium text-gray-900\">65%</span>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600\">Afternoon (12-18)</span>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-32 h-2 bg-gray-200 rounded-full overflow-hidden\">\n                    <div className=\"h-full bg-green-500 rounded-full\" style={{ width: '85%' }} />\n                  </div>\n                  <span className=\"text-sm font-medium text-gray-900\">85%</span>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600\">Evening (18-24)</span>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-32 h-2 bg-gray-200 rounded-full overflow-hidden\">\n                    <div className=\"h-full bg-purple-500 rounded-full\" style={{ width: '45%' }} />\n                  </div>\n                  <span className=\"text-sm font-medium text-gray-900\">45%</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <h4 className=\"text-sm font-medium text-gray-700 mb-3\">Day of Week</h4>\n            <div className=\"space-y-2\">\n              {['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'].map((day, index) => {\n                const percentage = 60 + Math.random() * 30;\n                return (\n                  <div key={day} className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">{day}</span>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-32 h-2 bg-gray-200 rounded-full overflow-hidden\">\n                        <div \n                          className=\"h-full bg-orange-500 rounded-full\" \n                          style={{ width: `${percentage}%` }} \n                        />\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-900\">{Math.round(percentage)}%</span>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ConfirmDialog.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/CreateChallengeModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Badge' is defined but never used.",
        "line": 6,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Calendar' is defined but never used.",
        "line": 13,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Users' is defined but never used.",
        "line": 14,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 143,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 143,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3759, 3762], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3759, 3762], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SelectedIcon' is assigned a value but never used.",
        "line": 183,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 183,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport { CreateChallengeData, Project } from '@/types';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { \n  X, \n  Target,\n  TrendingUp,\n  Zap,\n  Timer,\n  Calendar,\n  Users,\n  Award,\n  Plus,\n  Trash2\n} from 'lucide-react';\n\ninterface CreateChallengeModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (data: CreateChallengeData) => Promise<void>;\n  groupId?: string;\n  projects: Project[];\n  isLoading: boolean;\n}\n\nconst challengeTypes = [\n  {\n    type: 'most-activity' as const,\n    label: 'Most Activity',\n    icon: TrendingUp,\n    description: 'Compete to log the most productive hours',\n    goalLabel: 'Target Hours',\n    goalPlaceholder: 'e.g., 40'\n  },\n  {\n    type: 'fastest-effort' as const,\n    label: 'Fastest Effort',\n    icon: Zap,\n    description: 'Achieve the best tasks-per-hour ratio',\n    goalLabel: 'Target Ratio',\n    goalPlaceholder: 'e.g., 5.0'\n  },\n  {\n    type: 'longest-session' as const,\n    label: 'Longest Session',\n    icon: Timer,\n    description: 'Record the longest single work session',\n    goalLabel: 'Target Hours',\n    goalPlaceholder: 'e.g., 8'\n  },\n  {\n    type: 'group-goal' as const,\n    label: 'Group Goal',\n    icon: Target,\n    description: 'Work together to reach a collective target',\n    goalLabel: 'Total Hours Goal',\n    goalPlaceholder: 'e.g., 1000'\n  }\n];\n\nexport default function CreateChallengeModal({\n  isOpen,\n  onClose,\n  onSubmit,\n  groupId,\n  projects,\n  isLoading\n}: CreateChallengeModalProps) {\n  const [formData, setFormData] = useState<CreateChallengeData>({\n    groupId,\n    name: '',\n    description: '',\n    type: 'most-activity',\n    startDate: new Date(),\n    endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 1 week from now\n    goalValue: undefined,\n    rules: '',\n    projectIds: [],\n    rewards: []\n  });\n\n  const [newReward, setNewReward] = useState('');\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  // Handle ESC key to close modal\n  React.useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape' && isOpen) {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [isOpen, onClose]);\n\n  if (!isOpen) return null;\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.name.trim()) {\n      newErrors.name = 'Challenge name is required';\n    } else if (formData.name.length < 3) {\n      newErrors.name = 'Challenge name must be at least 3 characters';\n    } else if (formData.name.length > 100) {\n      newErrors.name = 'Challenge name must be less than 100 characters';\n    }\n\n    if (!formData.description.trim()) {\n      newErrors.description = 'Challenge description is required';\n    } else if (formData.description.length < 10) {\n      newErrors.description = 'Description must be at least 10 characters';\n    } else if (formData.description.length > 500) {\n      newErrors.description = 'Description must be less than 500 characters';\n    }\n\n    if (formData.startDate >= formData.endDate) {\n      newErrors.endDate = 'End date must be after start date';\n    }\n\n    const now = new Date();\n    if (formData.startDate < now) {\n      newErrors.startDate = 'Start date cannot be in the past';\n    }\n\n    if (formData.goalValue !== undefined && formData.goalValue <= 0) {\n      newErrors.goalValue = 'Goal value must be greater than 0';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleInputChange = (field: string, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    try {\n      await onSubmit(formData);\n      onClose();\n      // Reset form\n      setFormData({\n        groupId,\n        name: '',\n        description: '',\n        type: 'most-activity',\n        startDate: new Date(),\n        endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n        goalValue: undefined,\n        rules: '',\n        projectIds: [],\n        rewards: []\n      });\n      setNewReward('');\n      setErrors({});\n    } catch (error) {\n      console.error('Failed to create challenge:', error);\n      setErrors({ submit: 'Failed to create challenge. Please try again.' });\n    }\n  };\n\n  const selectedType = challengeTypes.find(t => t.type === formData.type)!;\n  const SelectedIcon = selectedType.icon;\n\n  const addReward = () => {\n    if (newReward.trim() && !formData.rewards?.includes(newReward.trim())) {\n      setFormData(prev => ({\n        ...prev,\n        rewards: [...(prev.rewards || []), newReward.trim()]\n      }));\n      setNewReward('');\n    }\n  };\n\n  const removeReward = (index: number) => {\n    setFormData(prev => ({\n      ...prev,\n      rewards: prev.rewards?.filter((_, i) => i !== index) || []\n    }));\n  };\n\n  const toggleProject = (projectId: string) => {\n    setFormData(prev => ({\n      ...prev,\n      projectIds: prev.projectIds?.includes(projectId)\n        ? prev.projectIds.filter(id => id !== projectId)\n        : [...(prev.projectIds || []), projectId]\n    }));\n  };\n\n  return (\n    <div\n      className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\"\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-labelledby=\"create-challenge-title\"\n    >\n      <div className=\"bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"flex items-center justify-between p-4 sm:p-6 border-b border-gray-200\">\n          <h2 id=\"create-challenge-title\" className=\"text-lg sm:text-xl font-semibold text-gray-900\">Create New Challenge</h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600 transition-colors p-2 rounded-lg hover:bg-gray-100\"\n            aria-label=\"Close dialog\"\n          >\n            <X className=\"w-6 h-6\" aria-hidden=\"true\" />\n          </button>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\n          {/* Error Banner */}\n          {errors.submit && (\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n              <p className=\"text-red-600 text-sm\">{errors.submit}</p>\n            </div>\n          )}\n\n          {/* Basic Info */}\n          <div className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"challenge-name\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Challenge Name *\n              </label>\n              <input\n                type=\"text\"\n                id=\"challenge-name\"\n                value={formData.name}\n                onChange={(e) => handleInputChange('name', e.target.value)}\n                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                  errors.name ? 'border-red-500' : 'border-gray-300'\n                }`}\n                placeholder=\"Enter challenge name\"\n                aria-required=\"true\"\n                aria-invalid={!!errors.name}\n                aria-describedby={errors.name ? 'challenge-name-error' : undefined}\n                autoFocus\n              />\n              {errors.name && (\n                <p id=\"challenge-name-error\" className=\"text-red-500 text-sm mt-1\" role=\"alert\">{errors.name}</p>\n              )}\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Description *\n              </label>\n              <textarea\n                value={formData.description}\n                onChange={(e) => handleInputChange('description', e.target.value)}\n                rows={3}\n                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                  errors.description ? 'border-red-500' : 'border-gray-300'\n                }`}\n                placeholder=\"Describe what this challenge is about\"\n              />\n              {errors.description && (\n                <p className=\"text-red-500 text-sm mt-1\">{errors.description}</p>\n              )}\n              <p className=\"text-sm text-gray-500 mt-1\">\n                {formData.description.length}/500 characters\n              </p>\n            </div>\n          </div>\n\n          {/* Challenge Type */}\n          <div>\n            <label id=\"challenge-type-label\" className=\"block text-sm font-medium text-gray-700 mb-3\">\n              Challenge Type *\n            </label>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\" role=\"radiogroup\" aria-labelledby=\"challenge-type-label\">\n              {challengeTypes.map((type) => {\n                const Icon = type.icon;\n                const isSelected = formData.type === type.type;\n\n                return (\n                  <button\n                    key={type.type}\n                    type=\"button\"\n                    role=\"radio\"\n                    aria-checked={isSelected}\n                    onClick={() => setFormData(prev => ({ ...prev, type: type.type }))}\n                    className={`p-4 border-2 rounded-lg text-left transition-colors ${\n                      isSelected\n                        ? 'border-blue-500 bg-blue-50'\n                        : 'border-gray-200 hover:border-gray-300'\n                    }`}\n                    aria-label={`${type.label}: ${type.description}`}\n                  >\n                    <div className=\"flex items-center gap-3 mb-2\">\n                      <Icon className={`w-5 h-5 ${isSelected ? 'text-blue-600' : 'text-gray-500'}`} aria-hidden=\"true\" />\n                      <span className={`font-medium ${isSelected ? 'text-blue-900' : 'text-gray-900'}`}>\n                        {type.label}\n                      </span>\n                    </div>\n                    <p className={`text-sm ${isSelected ? 'text-blue-700' : 'text-gray-600'}`}>\n                      {type.description}\n                    </p>\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Goal Value */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              {selectedType.goalLabel} (Optional)\n            </label>\n            <input\n              type=\"number\"\n              step=\"0.1\"\n              min=\"0\"\n              value={formData.goalValue || ''}\n              onChange={(e) => handleInputChange('goalValue', e.target.value ? parseFloat(e.target.value) : undefined)}\n              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                errors.goalValue ? 'border-red-500' : 'border-gray-300'\n              }`}\n              placeholder={selectedType.goalPlaceholder}\n            />\n            {errors.goalValue && (\n              <p className=\"text-red-500 text-sm mt-1\">{errors.goalValue}</p>\n            )}\n            <p className=\"text-sm text-gray-500 mt-1\">\n              Leave empty for no specific target goal\n            </p>\n          </div>\n\n          {/* Date Range */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Start Date *\n              </label>\n              <input\n                type=\"datetime-local\"\n                value={formData.startDate.toISOString().slice(0, 16)}\n                onChange={(e) => handleInputChange('startDate', new Date(e.target.value))}\n                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                  errors.startDate ? 'border-red-500' : 'border-gray-300'\n                }`}\n              />\n              {errors.startDate && (\n                <p className=\"text-red-500 text-sm mt-1\">{errors.startDate}</p>\n              )}\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                End Date *\n              </label>\n              <input\n                type=\"datetime-local\"\n                value={formData.endDate.toISOString().slice(0, 16)}\n                onChange={(e) => handleInputChange('endDate', new Date(e.target.value))}\n                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n                  errors.endDate ? 'border-red-500' : 'border-gray-300'\n                }`}\n              />\n              {errors.endDate && (\n                <p className=\"text-red-500 text-sm mt-1\">{errors.endDate}</p>\n              )}\n            </div>\n          </div>\n\n          {/* Project Filter */}\n          {projects.length > 0 && (\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Eligible Projects (Optional)\n              </label>\n              <p className=\"text-sm text-gray-500 mb-3\">\n                Select which projects count toward this challenge. Leave empty to include all projects.\n              </p>\n              <div className=\"flex flex-wrap gap-2\">\n                {projects.map((project) => (\n                  <button\n                    key={project.id}\n                    type=\"button\"\n                    onClick={() => toggleProject(project.id)}\n                    className={`px-3 py-1 rounded-full text-sm border transition-colors ${\n                      formData.projectIds?.includes(project.id)\n                        ? 'bg-blue-100 text-blue-800 border-blue-300'\n                        : 'bg-gray-100 text-gray-700 border-gray-300 hover:bg-gray-200'\n                    }`}\n                  >\n                    {project.icon} {project.name}\n                  </button>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Rules */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Rules & Requirements (Optional)\n            </label>\n            <textarea\n              value={formData.rules || ''}\n              onChange={(e) => setFormData(prev => ({ ...prev, rules: e.target.value }))}\n              rows={3}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              placeholder=\"Any specific rules or requirements for this challenge\"\n            />\n          </div>\n\n          {/* Rewards */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Rewards (Optional)\n            </label>\n            <div className=\"space-y-2\">\n              <div className=\"flex gap-2\">\n                <input\n                  type=\"text\"\n                  value={newReward}\n                  onChange={(e) => setNewReward(e.target.value)}\n                  className=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                  placeholder=\"Add a reward (e.g., Badge, Recognition, Prize)\"\n                  onKeyPress={(e) => e.key === 'Enter' && (e.preventDefault(), addReward())}\n                />\n                <Button type=\"button\" onClick={addReward} size=\"sm\">\n                  <Plus className=\"w-4 h-4\" />\n                </Button>\n              </div>\n              {formData.rewards && formData.rewards.length > 0 && (\n                <div className=\"space-y-1\">\n                  {formData.rewards.map((reward, index) => (\n                    <div key={index} className=\"flex items-center justify-between bg-yellow-50 px-3 py-2 rounded-md\">\n                      <div className=\"flex items-center gap-2\">\n                        <Award className=\"w-4 h-4 text-yellow-600\" />\n                        <span className=\"text-sm text-yellow-800\">{reward}</span>\n                      </div>\n                      <button\n                        type=\"button\"\n                        onClick={() => removeReward(index)}\n                        className=\"text-yellow-600 hover:text-yellow-800\"\n                      >\n                        <Trash2 className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Actions */}\n          <div className=\"flex items-center justify-end gap-3 pt-4 border-t border-gray-200\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              disabled={isLoading}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isLoading}\n            >\n              {isLoading ? 'Creating...' : 'Create Challenge'}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/CreateGroupModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 71,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 71,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2030, 2033], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2030, 2033], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport { CreateGroupData } from '@/types';\nimport { Globe, Lock } from 'lucide-react';\n\ninterface CreateGroupModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (data: CreateGroupData) => Promise<void>;\n  isLoading?: boolean;\n  isFullPage?: boolean; // New prop to control full-page vs modal rendering\n}\n\n// Preset icons (same as CreateProjectModal)\nconst availableIcons = [\n  '💻', '⚛️', '💪', '📚', '🎨', '🏃', '🎵', '🔬', '📝', '🚀'\n];\n\n// Preset colors (same as CreateProjectModal)\nconst availableColors = [\n  { name: 'orange', class: 'bg-orange-500', hex: '#f97316' },\n  { name: 'blue', class: 'bg-blue-500', hex: '#3b82f6' },\n  { name: 'green', class: 'bg-green-500', hex: '#22c55e' },\n  { name: 'purple', class: 'bg-purple-500', hex: '#a855f7' },\n  { name: 'red', class: 'bg-red-500', hex: '#ef4444' },\n  { name: 'yellow', class: 'bg-yellow-500', hex: '#eab308' },\n  { name: 'pink', class: 'bg-pink-500', hex: '#ec4899' },\n  { name: 'indigo', class: 'bg-indigo-500', hex: '#6366f1' },\n];\n\nexport default function CreateGroupModal({\n  isOpen,\n  onClose,\n  onSubmit,\n  isLoading = false,\n  isFullPage = false\n}: CreateGroupModalProps) {\n  const [formData, setFormData] = useState<CreateGroupData>({\n    name: '',\n    description: '',\n    icon: '💻',\n    color: 'orange',\n    category: 'other',\n    type: 'just-for-fun',\n    privacySetting: 'public',\n    location: '',\n    imageUrl: '',\n    bannerUrl: ''\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  // Handle ESC key to close modal\n  React.useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape' && isOpen && !isLoading) {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [isOpen, isLoading, onClose]);\n\n  const handleInputChange = (field: keyof CreateGroupData, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.name.trim()) {\n      newErrors.name = 'Group name is required';\n    } else if (formData.name.length < 3) {\n      newErrors.name = 'Group name must be at least 3 characters';\n    } else if (formData.name.length > 50) {\n      newErrors.name = 'Group name must be less than 50 characters';\n    }\n\n    if (!formData.description.trim()) {\n      newErrors.description = 'Group description is required';\n    } else if (formData.description.length < 10) {\n      newErrors.description = 'Description must be at least 10 characters';\n    } else if (formData.description.length > 500) {\n      newErrors.description = 'Description must be less than 500 characters';\n    }\n\n    if (formData.location && formData.location.length > 100) {\n      newErrors.location = 'Location must be less than 100 characters';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    try {\n      await onSubmit(formData);\n      // Reset form on success\n      setFormData({\n        name: '',\n        description: '',\n        icon: '💻',\n        color: 'orange',\n        category: 'other',\n        type: 'just-for-fun',\n        privacySetting: 'public',\n        location: '',\n        imageUrl: '',\n        bannerUrl: ''\n      });\n      setErrors({});\n    } catch (error) {\n      console.error('Error creating group:', error);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  // Shared form content\n  const formContent = (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Group Preview */}\n            <div className=\"flex flex-col items-center pb-6 border-b border-gray-200\">\n              <div className={`w-24 h-24 ${availableColors.find(c => c.name === formData.color)?.class || 'bg-orange-500'} rounded-xl flex items-center justify-center text-white text-4xl mb-3 shadow-md`}>\n                {formData.icon}\n              </div>\n              <h3 className=\"text-xl font-bold text-gray-900\">\n                {formData.name || 'Group Name'}\n              </h3>\n              <p className=\"text-sm text-gray-500 mt-1 text-center max-w-md\">\n                {formData.description || 'Group description'}\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Name */}\n              <div>\n                <label htmlFor=\"name\" className=\"block text-sm font-semibold text-gray-900 mb-2\">\n                  Group Name *\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => handleInputChange('name', e.target.value)}\n                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] transition-colors ${\n                    errors.name ? 'border-red-500' : 'border-gray-300'\n                  }`}\n                  placeholder=\"Enter group name\"\n                  maxLength={50}\n                  aria-required=\"true\"\n                  aria-invalid={!!errors.name}\n                  aria-describedby={errors.name ? 'name-error' : undefined}\n                  autoFocus\n                />\n                {errors.name && (\n                  <p id=\"name-error\" className=\"mt-1 text-sm text-red-600\" role=\"alert\">{errors.name}</p>\n                )}\n              </div>\n\n              {/* Description */}\n              <div>\n                <label htmlFor=\"description\" className=\"block text-sm font-semibold text-gray-900 mb-2\">\n                  Description *\n                </label>\n                <textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => handleInputChange('description', e.target.value)}\n                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] resize-none transition-colors ${\n                    errors.description ? 'border-red-500' : 'border-gray-300'\n                  }`}\n                  placeholder=\"Describe what this group is about\"\n                  rows={3}\n                  maxLength={500}\n                />\n                {errors.description && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.description}</p>\n                )}\n                <p className=\"mt-1 text-xs text-gray-500\">\n                  {formData.description.length}/500 characters\n                </p>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n              {/* Icon Picker */}\n              <div>\n                <label id=\"icon-picker-label\" className=\"block text-sm font-semibold text-gray-900 mb-3\">\n                  Icon\n                </label>\n                <div className=\"grid grid-cols-5 gap-3\" role=\"radiogroup\" aria-labelledby=\"icon-picker-label\">\n                  {availableIcons.map((icon) => (\n                    <button\n                      key={icon}\n                      type=\"button\"\n                      role=\"radio\"\n                      aria-checked={formData.icon === icon}\n                      onClick={() => handleInputChange('icon', icon)}\n                      className={`w-14 h-14 rounded-lg border-2 flex items-center justify-center text-2xl transition-all ${\n                        formData.icon === icon\n                          ? 'border-[#007AFF] bg-blue-50 shadow-md'\n                          : 'border-gray-200 hover:border-gray-300 hover:shadow-sm'\n                      }`}\n                      aria-label={`Select ${icon} icon`}\n                    >\n                      {icon}\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Color Picker */}\n              <div>\n                <label id=\"color-picker-label\" className=\"block text-sm font-semibold text-gray-900 mb-3\">\n                  Color\n                </label>\n                <div className=\"grid grid-cols-4 gap-3\" role=\"radiogroup\" aria-labelledby=\"color-picker-label\">\n                  {availableColors.map((color) => (\n                    <button\n                      key={color.name}\n                      type=\"button\"\n                      role=\"radio\"\n                      aria-checked={formData.color === color.name}\n                      onClick={() => handleInputChange('color', color.name)}\n                      className={`w-14 h-14 rounded-lg border-2 transition-all ${\n                        formData.color === color.name\n                          ? 'border-gray-800 scale-110 shadow-lg'\n                          : 'border-gray-200 hover:border-gray-300 hover:scale-105'\n                      }`}\n                      style={{ backgroundColor: color.hex }}\n                      aria-label={`Select ${color.name} color`}\n                    >\n                      {formData.color === color.name && (\n                        <svg className=\"w-6 h-6 text-white drop-shadow-md\" fill=\"currentColor\" viewBox=\"0 0 20 20\" aria-hidden=\"true\">\n                          <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                        </svg>\n                      )}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            {/* Privacy Setting */}\n            <div className=\"pt-6 border-t border-gray-200\">\n              <label id=\"privacy-label\" className=\"block text-sm font-semibold text-gray-900 mb-3\">\n                Privacy Setting *\n              </label>\n              <div className=\"space-y-3\" role=\"radiogroup\" aria-labelledby=\"privacy-label\">\n                <label className={`flex items-start gap-3 p-4 border-2 rounded-lg cursor-pointer transition-all ${\n                  formData.privacySetting === 'public'\n                    ? 'border-[#007AFF] bg-blue-50'\n                    : 'border-gray-200 hover:border-gray-300'\n                }`}>\n                  <input\n                    type=\"radio\"\n                    name=\"privacySetting\"\n                    value=\"public\"\n                    checked={formData.privacySetting === 'public'}\n                    onChange={(e) => handleInputChange('privacySetting', e.target.value)}\n                    className=\"mt-1\"\n                  />\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <Globe className=\"w-5 h-5 text-green-600\" />\n                      <span className=\"font-semibold text-gray-900\">Public</span>\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">Anyone can join instantly</p>\n                  </div>\n                </label>\n                <label className={`flex items-start gap-3 p-4 border-2 rounded-lg cursor-pointer transition-all ${\n                  formData.privacySetting === 'approval-required'\n                    ? 'border-[#007AFF] bg-blue-50'\n                    : 'border-gray-200 hover:border-gray-300'\n                }`}>\n                  <input\n                    type=\"radio\"\n                    name=\"privacySetting\"\n                    value=\"approval-required\"\n                    checked={formData.privacySetting === 'approval-required'}\n                    onChange={(e) => handleInputChange('privacySetting', e.target.value)}\n                    className=\"mt-1\"\n                  />\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <Lock className=\"w-5 h-5 text-orange-600\" />\n                      <span className=\"font-semibold text-gray-900\">Approval Required</span>\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">Admins must approve new members</p>\n                  </div>\n                </label>\n              </div>\n            </div>\n\n      {/* Actions */}\n      <div className=\"flex gap-4 pt-6 border-t border-gray-200\">\n        <button\n          type=\"button\"\n          onClick={onClose}\n          className=\"flex-1 px-6 py-3 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors font-medium\"\n          disabled={isLoading}\n        >\n          Cancel\n        </button>\n        <button\n          type=\"submit\"\n          disabled={isLoading}\n          className=\"flex-1 px-6 py-3 bg-[#007AFF] text-white rounded-lg hover:bg-[#0056D6] transition-colors disabled:opacity-50 disabled:cursor-not-allowed font-medium shadow-md\"\n        >\n          {isLoading ? 'Creating...' : 'Create Group'}\n        </button>\n      </div>\n    </form>\n  );\n\n  // Full-page view (rendered inline within the page)\n  if (isFullPage) {\n    return (\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n          <div className=\"p-4 sm:p-8\">\n            <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900 mb-6 sm:mb-8\">Create New Group</h2>\n            {formContent}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Modal view (popup style)\n  return (\n    <div\n      className=\"fixed inset-0 bg-gray-500 bg-opacity-30 flex items-center justify-center z-40 p-4\"\n      onClick={(e) => {\n        if (e.target === e.currentTarget) {\n          onClose();\n        }\n      }}\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-labelledby=\"create-group-title\"\n    >\n      <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto shadow-xl\">\n        <div className=\"p-4 sm:p-8\">\n          {/* Header */}\n          <div className=\"flex justify-between items-center mb-6 sm:mb-8\">\n            <h2 id=\"create-group-title\" className=\"text-xl sm:text-2xl font-bold text-gray-900\">Create New Group</h2>\n            <button\n              onClick={onClose}\n              className=\"text-gray-400 hover:text-gray-600 transition-colors p-2 rounded-lg hover:bg-gray-100\"\n              aria-label=\"Close dialog\"\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n          </div>\n          {formContent}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/CreateProjectModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 137,
        "column": 69,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 137,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4081, 4084], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4081, 4084], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport { CreateProjectData } from '@/types';\nimport { useCreateActivity } from '@/hooks/useActivitiesQuery';\nimport { toast } from 'sonner';\n\ninterface CreateProjectModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSuccess?: (projectId: string) => void;\n}\n\nexport const CreateProjectModal: React.FC<CreateProjectModalProps> = ({\n  isOpen,\n  onClose,\n  onSuccess,\n}) => {\n  const createProject = useCreateActivity();\n  const [formData, setFormData] = useState<CreateProjectData>({\n    name: '',\n    description: '',\n    icon: '💻',\n    color: 'orange',\n    weeklyTarget: undefined,\n    totalTarget: undefined,\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [errors, setErrors] = useState<Partial<Record<keyof CreateProjectData, string>>>({});\n\n  // Handle ESC key to close modal\n  React.useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape' && isOpen) {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [isOpen, onClose]);\n\n  // Preset icons\n  const availableIcons = [\n    '💻', '⚛️', '💪', '📚', '🎨', '🏃', '🎵', '🔬', '📝', '🚀'\n  ];\n\n  // Preset colors\n  const availableColors = [\n    { name: 'orange', class: 'bg-orange-500', hex: '#f97316' },\n    { name: 'blue', class: 'bg-blue-500', hex: '#3b82f6' },\n    { name: 'green', class: 'bg-green-500', hex: '#22c55e' },\n    { name: 'purple', class: 'bg-purple-500', hex: '#a855f7' },\n    { name: 'red', class: 'bg-red-500', hex: '#ef4444' },\n    { name: 'yellow', class: 'bg-yellow-500', hex: '#eab308' },\n    { name: 'pink', class: 'bg-pink-500', hex: '#ec4899' },\n    { name: 'indigo', class: 'bg-indigo-500', hex: '#6366f1' },\n  ];\n\n  const validateForm = (): boolean => {\n    const newErrors: Partial<Record<keyof CreateProjectData, string>> = {};\n\n    if (!formData.name.trim()) {\n      newErrors.name = 'Project name is required';\n    } else if (formData.name.length > 50) {\n      newErrors.name = 'Project name must be less than 50 characters';\n    }\n\n    if (formData.description.trim() && formData.description.length > 200) {\n      newErrors.description = 'Description must be less than 200 characters';\n    }\n\n    if (formData.weeklyTarget && (formData.weeklyTarget < 0 || formData.weeklyTarget > 168)) {\n      newErrors.weeklyTarget = 'Weekly target must be between 0 and 168 hours';\n    }\n\n    if (formData.totalTarget && (formData.totalTarget < 0 || formData.totalTarget > 10000)) {\n      newErrors.totalTarget = 'Total target must be between 0 and 10,000 hours';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    if (!createProject) {\n      toast.error('Create project function is not available');\n      return;\n    }\n\n    try {\n      setIsSubmitting(true);\n      const project = await createProject.mutateAsync({\n        ...formData,\n        name: formData.name.trim(),\n        description: formData.description.trim(),\n        weeklyTarget: formData.weeklyTarget || undefined,\n        totalTarget: formData.totalTarget || undefined,\n      });\n\n      // Show success message\n      toast.success(`Project \"${project.name}\" created!`);\n\n      // Reset form\n      setFormData({\n        name: '',\n        description: '',\n        icon: '💻',\n        color: 'orange',\n        weeklyTarget: undefined,\n        totalTarget: undefined,\n      });\n      setErrors({});\n\n      onSuccess?.(project.id);\n      onClose();\n    } catch (error) {\n      console.error('Failed to create project:', error);\n      toast.error('Failed to create project. Please try again.');\n      setErrors({ name: 'Failed to create project. Please try again.' });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleInputChange = (field: keyof CreateProjectData, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: undefined }));\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div\n      className=\"fixed inset-0 bg-gray-500 bg-opacity-30 flex items-center justify-center z-40 p-4\"\n      onClick={(e) => {\n        if (e.target === e.currentTarget) {\n          onClose();\n        }\n      }}\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-labelledby=\"create-project-title\"\n    >\n      <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto shadow-xl\">\n        <div className=\"p-4 sm:p-8\">\n          {/* Header */}\n          <div className=\"flex justify-between items-center mb-6 sm:mb-8\">\n            <h2 id=\"create-project-title\" className=\"text-xl sm:text-2xl font-bold text-gray-900\">Create New Project</h2>\n            <button\n              onClick={onClose}\n              className=\"text-gray-400 hover:text-gray-600 transition-colors p-2 rounded-lg hover:bg-gray-100\"\n              aria-label=\"Close dialog\"\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n          </div>\n\n          {/* Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Project Preview */}\n            <div className=\"flex flex-col items-center pb-6 border-b border-gray-200\">\n              <div className={`w-24 h-24 ${availableColors.find(c => c.name === formData.color)?.class || 'bg-orange-500'} rounded-xl flex items-center justify-center text-white text-4xl mb-3 shadow-md`}>\n                {formData.icon}\n              </div>\n              <h3 className=\"text-xl font-bold text-gray-900\">\n                {formData.name || 'Project Name'}\n              </h3>\n              <p className=\"text-sm text-gray-500 mt-1\">\n                {formData.description || 'Project description'}\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Name */}\n              <div>\n                <label htmlFor=\"name\" className=\"block text-sm font-semibold text-gray-900 mb-2\">\n                  Project Name *\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => handleInputChange('name', e.target.value)}\n                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] transition-colors ${\n                    errors.name ? 'border-red-500' : 'border-gray-300'\n                  }`}\n                  placeholder=\"Enter project name\"\n                  maxLength={50}\n                  aria-required=\"true\"\n                  aria-invalid={!!errors.name}\n                  aria-describedby={errors.name ? 'name-error' : undefined}\n                  autoFocus\n                />\n                {errors.name && (\n                  <p id=\"name-error\" className=\"mt-1 text-sm text-red-600\" role=\"alert\">{errors.name}</p>\n                )}\n              </div>\n\n              {/* Description */}\n              <div>\n                <label htmlFor=\"description\" className=\"block text-sm font-semibold text-gray-900 mb-2\">\n                  Description\n                </label>\n                <textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => handleInputChange('description', e.target.value)}\n                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] resize-none transition-colors ${\n                    errors.description ? 'border-red-500' : 'border-gray-300'\n                  }`}\n                  placeholder=\"Describe your project (optional)\"\n                  rows={3}\n                  maxLength={200}\n                />\n                {errors.description && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.description}</p>\n                )}\n                <p className=\"mt-1 text-xs text-gray-500\">\n                  {formData.description.length}/200 characters\n                </p>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n              {/* Icon Picker */}\n              <div>\n                <label id=\"icon-picker-label\" className=\"block text-sm font-semibold text-gray-900 mb-3\">\n                  Icon\n                </label>\n                <div className=\"grid grid-cols-5 gap-3\" role=\"radiogroup\" aria-labelledby=\"icon-picker-label\">\n                  {availableIcons.map((icon) => (\n                    <button\n                      key={icon}\n                      type=\"button\"\n                      role=\"radio\"\n                      aria-checked={formData.icon === icon}\n                      onClick={() => handleInputChange('icon', icon)}\n                      className={`w-14 h-14 rounded-lg border-2 flex items-center justify-center text-2xl transition-all ${\n                        formData.icon === icon\n                          ? 'border-[#007AFF] bg-blue-50 shadow-md'\n                          : 'border-gray-200 hover:border-gray-300 hover:shadow-sm'\n                      }`}\n                      aria-label={`Select ${icon} icon`}\n                    >\n                      {icon}\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Color Picker */}\n              <div>\n                <label id=\"color-picker-label\" className=\"block text-sm font-semibold text-gray-900 mb-3\">\n                  Color\n                </label>\n                <div className=\"grid grid-cols-4 gap-3\" role=\"radiogroup\" aria-labelledby=\"color-picker-label\">\n                  {availableColors.map((color) => (\n                    <button\n                      key={color.name}\n                      type=\"button\"\n                      role=\"radio\"\n                      aria-checked={formData.color === color.name}\n                      onClick={() => handleInputChange('color', color.name)}\n                      className={`w-14 h-14 rounded-lg border-2 transition-all ${\n                        formData.color === color.name\n                          ? 'border-gray-800 scale-110 shadow-lg'\n                          : 'border-gray-200 hover:border-gray-300 hover:scale-105'\n                      }`}\n                      style={{ backgroundColor: color.hex }}\n                      aria-label={`Select ${color.name} color`}\n                    >\n                      {formData.color === color.name && (\n                        <svg className=\"w-6 h-6 text-white drop-shadow-md\" fill=\"currentColor\" viewBox=\"0 0 20 20\" aria-hidden=\"true\">\n                          <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                        </svg>\n                      )}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            {/* Targets */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 pt-6 border-t border-gray-200\">\n              <div>\n                <label htmlFor=\"weeklyTarget\" className=\"block text-sm font-semibold text-gray-900 mb-2\">\n                  Weekly Target (hours)\n                </label>\n                <input\n                  type=\"number\"\n                  id=\"weeklyTarget\"\n                  value={formData.weeklyTarget || ''}\n                  onChange={(e) => handleInputChange('weeklyTarget', e.target.value ? Number(e.target.value) : undefined)}\n                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] transition-colors ${\n                    errors.weeklyTarget ? 'border-red-500' : 'border-gray-300'\n                  }`}\n                  placeholder=\"Optional\"\n                  min=\"0\"\n                  max=\"168\"\n                  step=\"0.5\"\n                />\n                {errors.weeklyTarget && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.weeklyTarget}</p>\n                )}\n                <p className=\"mt-1 text-xs text-gray-500\">Set a weekly goal for this project</p>\n              </div>\n\n              <div>\n                <label htmlFor=\"totalTarget\" className=\"block text-sm font-semibold text-gray-900 mb-2\">\n                  Total Target (hours)\n                </label>\n                <input\n                  type=\"number\"\n                  id=\"totalTarget\"\n                  value={formData.totalTarget || ''}\n                  onChange={(e) => handleInputChange('totalTarget', e.target.value ? Number(e.target.value) : undefined)}\n                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] transition-colors ${\n                    errors.totalTarget ? 'border-red-500' : 'border-gray-300'\n                  }`}\n                  placeholder=\"Optional\"\n                  min=\"0\"\n                  max=\"10000\"\n                  step=\"1\"\n                />\n                {errors.totalTarget && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.totalTarget}</p>\n                )}\n                <p className=\"mt-1 text-xs text-gray-500\">Set an overall project goal</p>\n              </div>\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex gap-4 pt-6 border-t border-gray-200\">\n              <button\n                type=\"button\"\n                onClick={onClose}\n                className=\"flex-1 px-6 py-3 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors font-medium\"\n                disabled={isSubmitting}\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"flex-1 px-6 py-3 bg-[#007AFF] text-white rounded-lg hover:bg-[#0056D6] transition-colors disabled:opacity-50 disabled:cursor-not-allowed font-medium shadow-md\"\n              >\n                {isSubmitting ? 'Creating...' : 'Create Project'}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/DailyGoals.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'activitiesLoading' is assigned a value but never used.",
        "line": 19,
        "column": 45,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 19,
        "endColumn": 62
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 67,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 67,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1873, 1876], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1873, 1876], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport Link from 'next/link';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useActivities } from '@/hooks/useActivitiesQuery';\nimport { useState, useEffect } from 'react';\nimport { IconRenderer } from './IconRenderer';\nimport { Activity } from '@/types';\n\ninterface DailyGoalProgress {\n  activity: Activity;\n  dailyGoal: number; // in hours\n  currentProgress: number; // in hours\n  percentage: number;\n}\n\nfunction DailyGoals() {\n  const { user } = useAuth();\n  const { data: activities = [], isLoading: activitiesLoading } =\n    useActivities();\n  const [goals, setGoals] = useState<DailyGoalProgress[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const loadDailyGoals = async () => {\n      if (!user) {\n        setIsLoading(false);\n        return;\n      }\n\n      try {\n        setIsLoading(true);\n\n        // Filter activities with weekly targets\n        const activitiesWithGoals = activities.filter(\n          activity => activity.weeklyTarget && activity.weeklyTarget > 0\n        );\n\n        if (activitiesWithGoals.length === 0) {\n          setGoals([]);\n          setIsLoading(false);\n          return;\n        }\n\n        // Get today's start time (midnight)\n        const todayStart = new Date();\n        todayStart.setHours(0, 0, 0, 0);\n\n        // Fetch today's sessions\n        const { db } = await import('@/lib/firebase');\n        const { collection, getDocs, query, where } = await import(\n          'firebase/firestore'\n        );\n\n        const q = query(\n          collection(db, 'sessions'),\n          where('userId', '==', user.id),\n          where('startTime', '>=', todayStart)\n        );\n\n        const snapshot = await getDocs(q);\n\n        // Calculate progress for each activity\n        const progressMap = new Map<string, number>();\n\n        snapshot.forEach(doc => {\n          const data: any = doc.data();\n          const activityId = data.activityId || data.projectId;\n          if (!activityId) return;\n\n          const duration = Number(data.duration) || 0;\n          const currentHours = progressMap.get(activityId) || 0;\n          progressMap.set(activityId, currentHours + duration / 3600);\n        });\n\n        // Build daily goals array\n        const dailyGoals: DailyGoalProgress[] = activitiesWithGoals.map(\n          activity => {\n            const dailyGoal = (activity.weeklyTarget || 0) / 7;\n            const currentProgress = progressMap.get(activity.id) || 0;\n            const percentage = Math.min(\n              (currentProgress / dailyGoal) * 100,\n              100\n            );\n\n            return {\n              activity,\n              dailyGoal,\n              currentProgress,\n              percentage,\n            };\n          }\n        );\n\n        setGoals(dailyGoals);\n      } catch (error) {\n        console.error('Failed to load daily goals:', error);\n        setGoals([]);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadDailyGoals();\n  }, [user, activities]);\n\n  // Format time display\n  const formatProgress = (current: number, goal: number) => {\n    // If daily goal is less than 1 hour, show in minutes\n    if (goal < 1) {\n      const currentMin = Math.round(current * 60);\n      const goalMin = Math.round(goal * 60);\n      return `${currentMin} / ${goalMin} min`;\n    }\n\n    // Otherwise show in hours\n    return `${current.toFixed(1)} / ${goal.toFixed(1)} hrs`;\n  };\n\n  // Show empty state if no goals\n  if (goals.length === 0 && !isLoading) {\n    return (\n      <div className=\"flex justify-center mt-8 mr-4\">\n        <Link\n          href=\"/activities/new\"\n          className=\"inline-flex items-center gap-2 px-5 py-2.5 bg-[#007AFF] text-white rounded-lg font-semibold text-sm hover:bg-[#0056D6] transition-colors shadow-md hover:shadow-lg\"\n        >\n          <svg\n            className=\"w-5 h-5\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2.5}\n              d=\"M12 4v16m8-8H4\"\n            />\n          </svg>\n          Create Your First Activity\n        </Link>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-5\">\n      <h3 className=\"text-base font-semibold text-gray-900 mb-4\">\n        Today's Goals\n      </h3>\n\n      {isLoading ? (\n        <div className=\"space-y-4\">\n          {[1, 2].map(i => (\n            <div key={i} className=\"animate-pulse flex items-center gap-4\">\n              <div className=\"w-[60px] h-[60px] bg-gray-200 rounded-full\"></div>\n              <div className=\"flex-1\">\n                <div className=\"h-4 bg-gray-200 rounded mb-2 w-28\"></div>\n                <div className=\"h-3 bg-gray-200 rounded w-20\"></div>\n              </div>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          {goals.map(goal => {\n            const radius = 26;\n            const circumference = 2 * Math.PI * radius;\n            const strokeDashoffset =\n              circumference - (goal.percentage / 100) * circumference;\n\n            return (\n              <div key={goal.activity.id} className=\"flex items-center gap-4\">\n                {/* Circular Progress Indicator */}\n                <div\n                  className=\"relative flex-shrink-0\"\n                  style={{ width: 60, height: 60 }}\n                >\n                  {/* Background circle */}\n                  <svg\n                    className=\"absolute inset-0 -rotate-90\"\n                    width=\"60\"\n                    height=\"60\"\n                  >\n                    <circle\n                      cx=\"30\"\n                      cy=\"30\"\n                      r={radius}\n                      fill=\"none\"\n                      stroke=\"#D1D5DB\"\n                      strokeWidth=\"4.5\"\n                    />\n                    {/* Progress circle */}\n                    <circle\n                      cx=\"30\"\n                      cy=\"30\"\n                      r={radius}\n                      fill=\"none\"\n                      stroke=\"#007AFF\"\n                      strokeWidth=\"4.5\"\n                      strokeDasharray={circumference}\n                      strokeDashoffset={strokeDashoffset}\n                      strokeLinecap=\"round\"\n                      className=\"transition-all duration-500 ease-out\"\n                    />\n                  </svg>\n                  {/* Icon in center */}\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <IconRenderer\n                      iconName={goal.activity.icon}\n                      size={26}\n                      className=\"text-gray-700\"\n                    />\n                  </div>\n                </div>\n\n                {/* Activity name and percentage */}\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center justify-between gap-2 mb-1\">\n                    <span className=\"text-sm font-semibold text-gray-900 truncate\">\n                      {goal.activity.name}\n                    </span>\n                    <span className=\"text-sm font-semibold flex-shrink-0 text-gray-500\">\n                      {Math.round(goal.percentage)}%\n                    </span>\n                  </div>\n                  <span className=\"text-xs text-gray-500\">\n                    {formatProgress(goal.currentProgress, goal.dailyGoal)}\n                  </span>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default DailyGoals;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/DataExport.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'userId' is defined but never used.",
        "line": 10,
        "column": 57,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 63
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 37,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 37,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 82,
        "column": 55,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 82,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2831, 2834], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2831, 2834], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport { Download, Calendar, FileText, Database } from 'lucide-react';\n\ninterface DataExportProps {\n  userId: string;\n}\n\nexport const DataExport: React.FC<DataExportProps> = ({ userId }) => {\n  const [exportType, setExportType] = useState<'sessions' | 'projects' | 'tasks' | 'all'>('all');\n  const [dateFrom, setDateFrom] = useState<string>('');\n  const [dateTo, setDateTo] = useState<string>('');\n  const [format, setFormat] = useState<'csv' | 'json'>('csv');\n  const [includePrivate, setIncludePrivate] = useState(false);\n  const [isExporting, setIsExporting] = useState(false);\n  const [exportStatus, setExportStatus] = useState<string>('');\n\n  const handleExport = async () => {\n    setIsExporting(true);\n    setExportStatus('Preparing your export...');\n\n    try {\n      // Simulate export process\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // In real implementation, call API:\n      // await firebaseApi.analytics.exportData({\n      //   type: exportType,\n      //   dateFrom: new Date(dateFrom),\n      //   dateTo: new Date(dateTo),\n      //   format,\n      //   includePrivate\n      // });\n\n      setExportStatus('Export complete! Check your email for the download link.');\n    } catch (error) {\n      setExportStatus('Export failed. Please try again.');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const getDefaultDates = () => {\n    const today = new Date();\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(today.getDate() - 30);\n    \n    return {\n      from: thirtyDaysAgo.toISOString().split('T')[0],\n      to: today.toISOString().split('T')[0]\n    };\n  };\n\n  const defaults = getDefaultDates();\n\n  return (\n    <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n      <div className=\"flex items-center gap-3 mb-6\">\n        <Download className=\"w-6 h-6 text-blue-600\" />\n        <div>\n          <h2 className=\"text-xl font-bold text-gray-900\">Export Data</h2>\n          <p className=\"text-sm text-gray-600\">Download your productivity data</p>\n        </div>\n      </div>\n\n      <div className=\"space-y-6\">\n        {/* Export type */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n            What to export\n          </label>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n            {[\n              { value: 'all', label: 'Everything', icon: Database },\n              { value: 'sessions', label: 'Sessions', icon: Calendar },\n              { value: 'projects', label: 'Projects', icon: FileText },\n              { value: 'tasks', label: 'Tasks', icon: FileText }\n            ].map(({ value, label, icon: Icon }) => (\n              <button\n                key={value}\n                onClick={() => setExportType(value as any)}\n                className={`flex flex-col items-center gap-2 p-4 rounded-lg border-2 transition-all ${\n                  exportType === value\n                    ? 'border-blue-500 bg-blue-50'\n                    : 'border-gray-200 hover:border-gray-300'\n                }`}\n              >\n                <Icon className={`w-6 h-6 ${exportType === value ? 'text-blue-600' : 'text-gray-400'}`} />\n                <span className={`text-sm font-medium ${exportType === value ? 'text-blue-600' : 'text-gray-700'}`}>\n                  {label}\n                </span>\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Date range */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              From Date\n            </label>\n            <input\n              type=\"date\"\n              value={dateFrom || defaults.from}\n              onChange={(e) => setDateFrom(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              To Date\n            </label>\n            <input\n              type=\"date\"\n              value={dateTo || defaults.to}\n              onChange={(e) => setDateTo(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n        </div>\n\n        {/* Format */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n            Format\n          </label>\n          <div className=\"flex gap-3\">\n            <button\n              onClick={() => setFormat('csv')}\n              className={`flex-1 px-4 py-3 rounded-lg border-2 transition-all ${\n                format === 'csv'\n                  ? 'border-blue-500 bg-blue-50 text-blue-600'\n                  : 'border-gray-200 text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              <span className=\"font-medium\">CSV</span>\n              <p className=\"text-xs mt-1\">Excel compatible</p>\n            </button>\n            <button\n              onClick={() => setFormat('json')}\n              className={`flex-1 px-4 py-3 rounded-lg border-2 transition-all ${\n                format === 'json'\n                  ? 'border-blue-500 bg-blue-50 text-blue-600'\n                  : 'border-gray-200 text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              <span className=\"font-medium\">JSON</span>\n              <p className=\"text-xs mt-1\">Developer friendly</p>\n            </button>\n          </div>\n        </div>\n\n        {/* Options */}\n        <div>\n          <label className=\"flex items-center gap-2 cursor-pointer\">\n            <input\n              type=\"checkbox\"\n              checked={includePrivate}\n              onChange={(e) => setIncludePrivate(e.target.checked)}\n              className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n            />\n            <span className=\"text-sm text-gray-700\">Include private sessions and notes</span>\n          </label>\n        </div>\n\n        {/* Export button */}\n        <button\n          onClick={handleExport}\n          disabled={isExporting}\n          className=\"w-full flex items-center justify-center gap-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors font-medium\"\n        >\n          <Download className=\"w-5 h-5\" />\n          {isExporting ? 'Exporting...' : 'Export Data'}\n        </button>\n\n        {/* Status message */}\n        {exportStatus && (\n          <div className={`p-4 rounded-lg ${\n            exportStatus.includes('failed') \n              ? 'bg-red-50 text-red-700' \n              : 'bg-green-50 text-green-700'\n          }`}>\n            <p className=\"text-sm\">{exportStatus}</p>\n          </div>\n        )}\n\n        {/* Info */}\n        <div className=\"p-4 bg-gray-50 rounded-lg\">\n          <p className=\"text-sm text-gray-600\">\n            <strong>Note:</strong> For security reasons, we'll email you a download link instead of \n            downloading directly. The link will expire after 24 hours.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/DataPrefetcher.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'useEffect' is defined but never used.",
        "line": 10,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\n/**\n * DataPrefetcher Component\n *\n * Prefetches commonly needed data in the background to improve perceived performance.\n * This component doesn't render anything - it just triggers data fetching.\n */\n\nimport { useEffect } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useFollowingList } from '@/features/search/hooks/useFollowingList';\n\nexport function DataPrefetcher() {\n  const { user } = useAuth();\n\n  // Prefetch following list immediately when user is authenticated\n  // This ensures it's available instantly when they navigate to search\n  useFollowingList({\n    userId: user?.id,\n    enabled: !!user,\n  });\n\n  return null; // This component doesn't render anything\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/DayOverview.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadTodayStats'. Either include it or remove the dependency array.",
        "line": 22,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 22,
        "endColumn": 12,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadTodayStats, user]",
            "fix": { "range": [582, 588], "text": "[loadTodayStats, user]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { firebaseSessionApi, firebaseUserApi } from '@/lib/api';\nimport { Clock, Flame, Target, TrendingUp } from 'lucide-react';\nimport Link from 'next/link';\n\nexport default function DayOverview() {\n  const { user } = useAuth();\n  const [todayStats, setTodayStats] = useState({\n    totalTime: 0,\n    sessionsCount: 0,\n    currentStreak: 0,\n  });\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    if (user) {\n      loadTodayStats();\n    }\n  }, [user]);\n\n  const loadTodayStats = async () => {\n    if (!user) return;\n\n    try {\n      setIsLoading(true);\n      \n      // Get today's sessions\n      const sessions = await firebaseSessionApi.getUserSessions(user.id, 50, true);\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      \n      const todaySessions = sessions.filter(session => {\n        const sessionDate = session.createdAt instanceof Date\n          ? session.createdAt\n          : new Date(session.createdAt);\n        const sessionDay = new Date(sessionDate);\n        sessionDay.setHours(0, 0, 0, 0);\n        return sessionDay.getTime() === today.getTime();\n      });\n\n      // Calculate total time\n      const totalSeconds = todaySessions.reduce((sum, session) => sum + session.duration, 0);\n      \n      // Get streak\n      const stats = await firebaseUserApi.getUserStats(user.id);\n      \n      setTodayStats({\n        totalTime: totalSeconds,\n        sessionsCount: todaySessions.length,\n        currentStreak: stats?.currentStreak || 0,\n      });\n    } catch (error) {\n      console.error('Failed to load today stats:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const formatTime = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    }\n    return `${minutes}m`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"md:hidden bg-white border-b border-gray-200 px-4 py-3\">\n        <div className=\"animate-pulse flex gap-3\">\n          <div className=\"h-16 bg-gray-200 rounded-lg flex-1\"></div>\n          <div className=\"h-16 bg-gray-200 rounded-lg flex-1\"></div>\n          <div className=\"h-16 bg-gray-200 rounded-lg flex-1\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Link href=\"/you?tab=progress\" className=\"md:hidden block bg-white border-b border-gray-200 px-4 py-4\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <h3 className=\"text-sm font-semibold text-gray-900\">Today's Progress</h3>\n        <TrendingUp className=\"w-5 h-5 text-[#007AFF]\" />\n      </div>\n\n      <div className=\"grid grid-cols-3 gap-3\">\n        {/* Total Time */}\n        <div className=\"bg-gray-50 rounded-lg p-3 border border-gray-200\">\n          <Clock className=\"w-5 h-5 text-[#007AFF] mb-2\" />\n          <div className=\"text-lg font-bold text-gray-900\">\n            {formatTime(todayStats.totalTime)}\n          </div>\n          <div className=\"text-xs text-gray-500\">Time</div>\n        </div>\n\n        {/* Sessions */}\n        <div className=\"bg-gray-50 rounded-lg p-3 border border-gray-200\">\n          <Target className=\"w-5 h-5 text-[#22C55E] mb-2\" />\n          <div className=\"text-lg font-bold text-gray-900\">\n            {todayStats.sessionsCount}\n          </div>\n          <div className=\"text-xs text-gray-500\">Sessions</div>\n        </div>\n\n        {/* Streak */}\n        <div className=\"bg-gray-50 rounded-lg p-3 border border-gray-200\">\n          <Flame className=\"w-5 h-5 text-[#FC4C02] mb-2\" />\n          <div className=\"text-lg font-bold text-gray-900\">\n            {todayStats.currentStreak}\n          </div>\n          <div className=\"text-xs text-gray-500\">Day Streak</div>\n        </div>\n      </div>\n    </Link>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/EditProfileModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 88,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 88,
        "endColumn": 23
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { UserProfile } from '@/types';\nimport { firebaseUserApi } from '@/lib/api';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectItem } from '@/components/ui/select';\nimport { X, User, MapPin, FileText, Globe } from 'lucide-react';\nimport { toast } from 'sonner';\nimport { ImageUpload } from '@/components/ImageUpload';\n\ninterface EditProfileModalProps {\n  profile: UserProfile;\n  isOpen: boolean;\n  onClose: () => void;\n  onProfileUpdate: (updatedProfile: UserProfile) => void;\n}\n\nexport const EditProfileModal: React.FC<EditProfileModalProps> = ({\n  profile,\n  isOpen,\n  onClose,\n  onProfileUpdate,\n}) => {\n  const [formData, setFormData] = useState({\n    name: profile.name,\n    bio: profile.bio || '',\n    location: profile.location || '',\n    profilePicture: profile.profilePicture || '',\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [profileVisibility, setProfileVisibility] = useState<'everyone' | 'followers' | 'private'>('everyone');\n  const [profileImageFile, setProfileImageFile] = useState<File[]>([]);\n  const [profileImagePreview, setProfileImagePreview] = useState<string[]>(\n    profile.profilePicture ? [profile.profilePicture] : []\n  );\n\n  // Handle ESC key to close modal\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape' && isOpen && !isLoading) {\n        // Reset form data to original values\n        setFormData({\n          name: profile.name,\n          bio: profile.bio || '',\n          location: profile.location || '',\n          profilePicture: profile.profilePicture || '',\n        });\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [isOpen, isLoading, onClose, profile]);\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleProfileImageChange = (images: File[], previewUrls: string[]) => {\n    setProfileImageFile(images);\n    setProfileImagePreview(previewUrls);\n  };\n\n  const handleProfileImageUpload = async (files: File[]): Promise<string[]> => {\n    const file = files[0];\n    if (!file) return [];\n\n    try {\n      toast.loading('Uploading profile picture...', { id: 'upload-profile-pic' });\n\n      // Upload to Firebase Storage\n      const downloadURL = await firebaseUserApi.uploadProfilePicture(file);\n\n      // Delete old profile picture if it exists and is a Firebase Storage URL\n      if (profile.profilePicture && profile.profilePicture.includes('firebasestorage.googleapis.com')) {\n        try {\n          await firebaseUserApi.deleteProfilePicture(profile.profilePicture);\n        } catch (error) {\n          // Silently fail - old picture deletion is not critical\n        }\n      }\n\n      setFormData(prev => ({ ...prev, profilePicture: downloadURL }));\n      toast.success('Profile picture uploaded successfully', { id: 'upload-profile-pic' });\n\n      return [downloadURL];\n    } catch (error) {\n      console.error('File upload error:', error);\n      toast.error('Failed to upload image', { id: 'upload-profile-pic' });\n      throw error;\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      setIsLoading(true);\n      \n      const updatedProfile = await firebaseUserApi.updateProfile(formData);\n      onProfileUpdate(updatedProfile);\n      onClose();\n      toast.success('Profile updated successfully');\n    } catch (error: unknown) {\n      console.error('Profile update error:', error);\n      toast.error('Failed to update profile');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleClose = () => {\n    if (!isLoading) {\n      // Reset form data to original values\n      setFormData({\n        name: profile.name,\n        bio: profile.bio || '',\n        location: profile.location || '',\n        profilePicture: profile.profilePicture || '',\n      });\n      onClose();\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"max-w-2xl w-full mx-auto p-4\">\n      <div className=\"bg-background rounded-lg shadow-xl w-full\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-border\">\n          <h2 className=\"text-xl font-semibold text-foreground\">Edit Profile</h2>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleClose}\n            disabled={isLoading}\n            className=\"h-8 w-8 p-0\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"p-6 space-y-6\">\n          {/* Profile Picture */}\n          <div className=\"space-y-4\">\n            <ImageUpload\n              label=\"Profile Picture\"\n              singleImage={true}\n              maxSizeMB={5}\n              images={profileImageFile}\n              previewUrls={profileImagePreview}\n              onImagesChange={handleProfileImageChange}\n              uploadMode=\"instant\"\n              onUpload={handleProfileImageUpload}\n              showProgress={true}\n              placeholder=\"Upload profile picture\"\n              disabled={isLoading}\n            />\n          </div>\n\n          {/* Name */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\" className=\"text-base font-medium\">\n              <User className=\"w-4 h-4 inline mr-2\" />\n              Name\n            </Label>\n            <Input\n              id=\"name\"\n              type=\"text\"\n              value={formData.name}\n              onChange={(e) => handleInputChange('name', e.target.value)}\n              placeholder=\"Your full name\"\n              required\n              disabled={isLoading}\n              className=\"text-base\"\n            />\n          </div>\n\n          {/* Bio */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"bio\" className=\"text-base font-medium\">\n              <FileText className=\"w-4 h-4 inline mr-2\" />\n              Bio\n            </Label>\n            <Textarea\n              id=\"bio\"\n              value={formData.bio}\n              onChange={(e) => handleInputChange('bio', e.target.value)}\n              placeholder=\"Tell us about yourself...\"\n              rows={4}\n              maxLength={160}\n              disabled={isLoading}\n              className=\"text-base resize-none\"\n            />\n            <div className=\"text-sm text-muted-foreground text-right\">\n              {formData.bio.length}/160\n            </div>\n          </div>\n\n          {/* Location */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"location\" className=\"text-base font-medium\">\n              <MapPin className=\"w-4 h-4 inline mr-2\" />\n              Location\n            </Label>\n            <Input\n              id=\"location\"\n              type=\"text\"\n              value={formData.location}\n              onChange={(e) => handleInputChange('location', e.target.value)}\n              placeholder=\"City, Country\"\n              disabled={isLoading}\n              className=\"text-base\"\n            />\n          </div>\n\n          {/* Privacy Settings */}\n          <div className=\"space-y-4 pt-4 border-t border-border\">\n            <h3 className=\"text-lg font-semibold text-foreground\">Privacy Settings</h3>\n            \n          <div className=\"space-y-2\">\n              <Label className=\"text-base font-medium\">\n                <Globe className=\"w-4 h-4 inline mr-2\" />\n                Profile Visibility\n              </Label>\n            <Select value={profileVisibility} onChange={(e) => setProfileVisibility(e.target.value as 'everyone' | 'followers' | 'private')}>\n              <SelectItem value=\"everyone\">Everyone</SelectItem>\n              <SelectItem value=\"followers\">Followers only</SelectItem>\n              <SelectItem value=\"private\">Private</SelectItem>\n            </Select>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end gap-3 pt-6 border-t border-border\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n              disabled={isLoading}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"min-w-[100px]\"\n            >\n              {isLoading ? (\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                  Saving...\n                </div>\n              ) : (\n                'Save Changes'\n              )}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/EditSessionModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'XCircle' is defined but never used.",
        "line": 6,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 20
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'session.description', 'session.duration', 'session.images', 'session.projectId', 'session.startTime', 'session.title', and 'session.visibility'. Either include them or remove the dependency array. If 'setTitle' needs the current value of 'session.title', you can also switch to useReducer instead of useState and read 'session.title' in the reducer.",
        "line": 92,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 92,
        "endColumn": 18,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [session.description, session.duration, session.id, session.images, session.projectId, session.startTime, session.title, session.visibility]",
            "fix": {
              "range": [3251, 3263],
              "text": "[session.description, session.duration, session.id, session.images, session.projectId, session.startTime, session.title, session.visibility]"
            }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'imagePreviewUrls'. Either include it or remove the dependency array.",
        "line": 241,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 241,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [imagePreviewUrls]",
            "fix": { "range": [7468, 7470], "text": "[imagePreviewUrls]" }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 483,
        "column": 60,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 483,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17025, 17028], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17025, 17028], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport Image from 'next/image';\nimport { Session } from '@/types';\nimport { X, XCircle, Image as ImageIcon } from 'lucide-react';\nimport { uploadImages } from '@/lib/imageUpload';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useActivities } from '@/hooks/useActivitiesQuery';\nimport { parseLocalDateTime, cn } from '@/lib/utils';\n\ninterface EditSessionModalProps {\n  session: Session;\n  onClose: () => void;\n  onSave: (\n    sessionId: string,\n    data: {\n      title: string;\n      description?: string;\n      projectId?: string;\n      tags?: string[];\n      visibility?: 'everyone' | 'followers' | 'private';\n      images?: string[];\n      startTime?: Date;\n      duration?: number;\n    }\n  ) => Promise<void>;\n  isPage?: boolean;\n}\n\nexport const EditSessionModal: React.FC<EditSessionModalProps> = ({\n  session,\n  onClose,\n  onSave,\n  isPage = false,\n}) => {\n  const { user } = useAuth();\n  const { data: projects = [] } = useActivities(user?.id);\n\n  const [title, setTitle] = useState(session.title || '');\n  const [description, setDescription] = useState(session.description || '');\n  const [selectedProjectId, setSelectedProjectId] = useState(\n    session.projectId || ''\n  );\n  const [visibility, setVisibility] = useState<\n    'everyone' | 'followers' | 'private'\n  >(session.visibility || 'everyone');\n  const [existingImages, setExistingImages] = useState<string[]>(\n    session.images || []\n  );\n  const [selectedImages, setSelectedImages] = useState<File[]>([]);\n  const [imagePreviewUrls, setImagePreviewUrls] = useState<string[]>([]);\n  const [isUploading, setIsUploading] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n\n  // Date/time state\n  const [sessionDate, setSessionDate] = useState(() => {\n    const date = new Date(session.startTime);\n    return date.toISOString().split('T')[0];\n  });\n  const [startTime, setStartTime] = useState(() => {\n    const date = new Date(session.startTime);\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    return `${hours}:${minutes}`;\n  });\n  const [durationHours, setDurationHours] = useState(() => {\n    return String(Math.floor(session.duration / 3600));\n  });\n  const [durationMinutes, setDurationMinutes] = useState(() => {\n    return String(Math.floor((session.duration % 3600) / 60));\n  });\n\n  // Update state when session prop changes (important for modal reuse)\n  useEffect(() => {\n    setTitle(session.title || '');\n    setDescription(session.description || '');\n    setSelectedProjectId(session.projectId || '');\n    setVisibility(session.visibility || 'everyone');\n    setExistingImages(session.images || []);\n    setSelectedImages([]);\n    setImagePreviewUrls([]);\n\n    // Update date/time fields\n    const date = new Date(session.startTime);\n    setSessionDate(date.toISOString().split('T')[0]);\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    setStartTime(`${hours}:${minutes}`);\n    setDurationHours(String(Math.floor(session.duration / 3600)));\n    setDurationMinutes(String(Math.floor((session.duration % 3600) / 60)));\n  }, [session.id]);\n\n  // Handle ESC key to close modal\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        onClose();\n      }\n    };\n\n    document.addEventListener('keydown', handleEscape);\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [onClose]);\n\n  const handleImageSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n\n    const totalImages =\n      existingImages.length + selectedImages.length + files.length;\n\n    if (totalImages > 3) {\n      alert('Maximum 3 images allowed');\n      return;\n    }\n\n    const maxSize = 5 * 1024 * 1024; // 5MB\n    const validFiles: File[] = [];\n    const previewUrls: string[] = [];\n\n    for (const file of files) {\n      // Check if it's HEIC - we'll handle conversion during upload\n      const isHeic =\n        file.type === 'image/heic' ||\n        file.type === 'image/heif' ||\n        file.name.toLowerCase().endsWith('.heic') ||\n        file.name.toLowerCase().endsWith('.heif');\n\n      if (file.size > maxSize) {\n        const sizeMB = (file.size / 1024 / 1024).toFixed(1);\n        alert(\n          `Image \"${file.name}\" is too large (${sizeMB}MB). Maximum size is 5MB.`\n        );\n        continue;\n      }\n\n      // Allow HEIC files as well as regular images\n      if (!file.type.startsWith('image/') && !isHeic) {\n        alert(`\"${file.name}\" is not an image file.`);\n        continue;\n      }\n\n      const previewUrl = URL.createObjectURL(file);\n      validFiles.push(file);\n      previewUrls.push(previewUrl);\n    }\n\n    if (validFiles.length > 0) {\n      setSelectedImages(prev => [...prev, ...validFiles]);\n      setImagePreviewUrls(prev => [...prev, ...previewUrls]);\n    }\n  };\n\n  const handleRemoveExistingImage = (index: number) => {\n    setExistingImages(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleRemoveNewImage = (index: number) => {\n    setSelectedImages(prev => prev.filter((_, i) => i !== index));\n    setImagePreviewUrls(prev => {\n      const newUrls = prev.filter((_, i) => i !== index);\n      const urlToRevoke = prev[index];\n      if (urlToRevoke) {\n        URL.revokeObjectURL(urlToRevoke);\n      }\n      return newUrls;\n    });\n  };\n\n  const handleSave = async () => {\n    if (!title.trim()) {\n      alert('Please enter a title');\n      return;\n    }\n\n    // Validate duration\n    const hours = parseInt(durationHours) || 0;\n    const minutes = parseInt(durationMinutes) || 0;\n    const totalDuration = hours * 3600 + minutes * 60;\n\n    if (totalDuration <= 0) {\n      alert('Duration must be greater than 0');\n      return;\n    }\n\n    setIsSaving(true);\n    try {\n      // Upload new images if any\n      let newImageUrls: string[] = [];\n      if (selectedImages.length > 0) {\n        setIsUploading(true);\n        try {\n          const uploadResults = await uploadImages(selectedImages);\n          newImageUrls = uploadResults.map(result => result.url);\n        } catch (error) {\n          console.error('Failed to upload images:', error);\n          alert('Failed to upload images. Please try again.');\n          setIsSaving(false);\n          setIsUploading(false);\n          return;\n        } finally {\n          setIsUploading(false);\n        }\n      }\n\n      // Combine existing and new images\n      const allImages = [...existingImages, ...newImageUrls];\n\n      // Parse the new start time\n      const newStartTime = parseLocalDateTime(\n        sessionDate || '',\n        startTime || ''\n      );\n\n      await onSave(session.id, {\n        title,\n        description: description || undefined,\n        projectId: selectedProjectId || undefined,\n        visibility,\n        images: allImages.length > 0 ? allImages : undefined,\n        startTime: newStartTime,\n        duration: totalDuration,\n      });\n\n      onClose();\n    } catch (error) {\n      console.error('Failed to save session:', error);\n      alert('Failed to save session. Please try again.');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  // Clean up preview URLs on unmount\n  useEffect(() => {\n    return () => {\n      imagePreviewUrls.forEach(url => URL.revokeObjectURL(url));\n    };\n  }, []);\n\n  const totalImages = existingImages.length + selectedImages.length;\n\n  const formContent = (\n    <>\n      {/* Header */}\n      {!isPage && (\n        <div className=\"sticky top-0 bg-white border-b border-gray-200 px-6 py-4 flex items-center justify-between\">\n          <h2 className=\"text-xl font-bold text-gray-900\">Edit Session</h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n            aria-label=\"Close modal\"\n          >\n            <X className=\"w-6 h-6\" aria-hidden=\"true\" />\n          </button>\n        </div>\n      )}\n      {isPage && (\n        <div className=\"px-4 md:px-0 py-4\">\n          <h2 className=\"text-2xl font-bold text-gray-900\">Edit Session</h2>\n        </div>\n      )}\n\n      {/* Content */}\n      <div className={cn('px-4 md:px-0 space-y-6')}>\n        {/* Title */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Session Title *\n          </label>\n          <input\n            type=\"text\"\n            value={title}\n            onChange={e => setTitle(e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF]\"\n            placeholder=\"Enter session title\"\n          />\n        </div>\n\n        {/* Description */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Description\n          </label>\n          <textarea\n            value={description}\n            onChange={e => setDescription(e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF]\"\n            rows={3}\n            placeholder=\"How did the session go? What did you accomplish?\"\n          />\n        </div>\n\n        {/* Date and Time Section */}\n        <div>\n          <h3 className=\"text-sm font-semibold text-gray-900 mb-3\">\n            Session Timing\n          </h3>\n\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4\">\n            {/* Date */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Date *\n              </label>\n              <input\n                type=\"date\"\n                value={sessionDate}\n                onChange={e => setSessionDate(e.target.value)}\n                max={new Date().toISOString().split('T')[0]}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#007AFF]\"\n                required\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">Date of your session</p>\n            </div>\n\n            {/* Start Time */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Start Time\n              </label>\n              <input\n                type=\"time\"\n                value={startTime}\n                onChange={e => setStartTime(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#007AFF]\"\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">When you started</p>\n            </div>\n          </div>\n\n          {/* Duration */}\n          <div className=\"mt-3 sm:mt-4\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Duration *\n            </label>\n            <div className=\"flex gap-2 sm:gap-3\">\n              <div className=\"flex-1\">\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"23\"\n                  value={durationHours}\n                  onChange={e => setDurationHours(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#007AFF]\"\n                  placeholder=\"0\"\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">Hours</p>\n              </div>\n              <div className=\"flex-1\">\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"59\"\n                  value={durationMinutes}\n                  onChange={e => setDurationMinutes(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#007AFF]\"\n                  placeholder=\"0\"\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">Minutes</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Images */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Images (Optional, max 3)\n            {/* Debug info */}\n            <span className=\"ml-2 text-xs text-gray-400\">\n              ({existingImages.length} existing, {selectedImages.length} new)\n            </span>\n          </label>\n          <div className=\"space-y-3\">\n            {/* Existing & New Image Previews */}\n            {(existingImages.length > 0 || imagePreviewUrls.length > 0) && (\n              <div className=\"grid grid-cols-3 gap-2\">\n                {/* Existing images */}\n                {existingImages.map((url, index) => (\n                  <div\n                    key={`existing-${index}`}\n                    className=\"relative aspect-square rounded-lg overflow-hidden bg-gray-100\"\n                  >\n                    <Image\n                      src={url}\n                      alt={`Image ${index + 1}`}\n                      width={300}\n                      height={300}\n                      quality={90}\n                      className=\"w-full h-full object-cover\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => handleRemoveExistingImage(index)}\n                      className=\"absolute top-2 right-2 w-6 h-6 flex items-center justify-center bg-red-500 text-white rounded-full hover:bg-red-600 transition-colors shadow-md\"\n                      aria-label=\"Remove image\"\n                    >\n                      <X className=\"w-4 h-4 flex-shrink-0\" aria-hidden=\"true\" />\n                    </button>\n                  </div>\n                ))}\n                {/* New images */}\n                {imagePreviewUrls.map((url, index) => (\n                  <div\n                    key={`new-${index}`}\n                    className=\"relative aspect-square rounded-lg overflow-hidden bg-gray-100\"\n                  >\n                    <Image\n                      src={url}\n                      alt={`Preview ${index + 1}`}\n                      width={300}\n                      height={300}\n                      quality={90}\n                      className=\"w-full h-full object-cover\"\n                      unoptimized\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => handleRemoveNewImage(index)}\n                      className=\"absolute top-2 right-2 w-6 h-6 flex items-center justify-center bg-red-500 text-white rounded-full hover:bg-red-600 transition-colors shadow-md\"\n                      aria-label=\"Remove image\"\n                    >\n                      <X className=\"w-4 h-4 flex-shrink-0\" aria-hidden=\"true\" />\n                    </button>\n                  </div>\n                ))}\n              </div>\n            )}\n\n            {/* Upload Button */}\n            {totalImages < 3 && (\n              <label className=\"flex flex-col items-center justify-center gap-2 px-4 py-8 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-[#007AFF] hover:bg-gray-50 transition-colors min-h-[120px]\">\n                <ImageIcon className=\"w-8 h-8 text-gray-400\" />\n                <span className=\"text-sm font-medium text-gray-600\">\n                  {totalImages === 0\n                    ? 'Add images'\n                    : `Add ${3 - totalImages} more`}\n                </span>\n                <span className=\"text-xs text-gray-400\">\n                  JPG, PNG, HEIC (max 5MB each)\n                </span>\n                <input\n                  type=\"file\"\n                  accept=\"image/*,.heic,.heif\"\n                  multiple\n                  onChange={handleImageSelect}\n                  className=\"hidden\"\n                />\n              </label>\n            )}\n          </div>\n        </div>\n\n        {/* Project Selection */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Project\n          </label>\n          <select\n            value={selectedProjectId}\n            onChange={e => setSelectedProjectId(e.target.value)}\n            className=\"w-full pl-3 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] bg-white text-sm appearance-none\"\n          >\n            <option value=\"\">Unassigned</option>\n            {projects?.map(project => (\n              <option key={project.id} value={project.id}>\n                {project.name}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Visibility */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Visibility\n          </label>\n          <select\n            value={visibility}\n            onChange={e => setVisibility(e.target.value as any)}\n            className=\"w-full pl-3 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] bg-white appearance-none\"\n          >\n            <option value=\"everyone\">Everyone</option>\n            <option value=\"followers\">Followers</option>\n            <option value=\"private\">Only You</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div\n        className={cn(\n          'flex gap-3',\n          isPage\n            ? 'px-4 md:px-0 py-6'\n            : 'sticky bottom-0 bg-white border-t border-gray-200 px-6 py-4'\n        )}\n      >\n        <button\n          onClick={onClose}\n          disabled={isSaving || isUploading}\n          className=\"flex-1 px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors disabled:opacity-50\"\n        >\n          Cancel\n        </button>\n        <button\n          onClick={handleSave}\n          disabled={!title.trim() || isSaving || isUploading}\n          className=\"flex-1 px-4 py-2 bg-[#007AFF] text-white rounded-lg hover:bg-[#0056D6] transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          {isUploading\n            ? 'Uploading Images...'\n            : isSaving\n              ? 'Saving...'\n              : 'Save Changes'}\n        </button>\n      </div>\n    </>\n  );\n\n  if (isPage) {\n    return <>{formContent}</>;\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 z-[9999] flex items-center justify-center p-4\">\n      <div className=\"bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        {formContent}\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ErrorBoundary.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/FABMenu.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 19,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 19,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [516, 519], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [516, 519], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'session' is assigned a value but never used.",
        "line": 26,
        "column": 17,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'post' is assigned a value but never used.",
        "line": 26,
        "column": 26,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'session' is assigned a value but never used.",
        "line": 33,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 22
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport { ManualEntry } from './ManualEntry';\nimport { firebaseApi } from '@/lib/api';\n\nexport const FABMenu: React.FC = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [showManualEntry, setShowManualEntry] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n\n  const handleManualEntry = () => {\n    setShowManualEntry(true);\n    setIsOpen(false);\n  };\n\n  const handleSaveSession = async (data: any) => {\n    try {\n      setIsLoading(true);\n      \n      // Create session and post if visibility allows\n      if (data.visibility !== 'private') {\n        // Create session with post for non-private sessions\n        const { session, post } = await firebaseApi.session.createSessionWithPost(\n          data,\n          data.description || `Completed ${data.title}`,\n          data.visibility\n        );\n      } else {\n        // Create private session only\n        const session = await firebaseApi.session.createSession(data);\n      }\n      \n      setShowManualEntry(false);\n    } catch (error) {\n      console.error('Failed to save session:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <>\n      {/* Floating Action Button Menu */}\n      <div className=\"fixed bottom-6 right-6 z-40\">\n        {/* Menu Items */}\n        <div className={`absolute bottom-16 right-0 mb-2 space-y-2 transition-all duration-200 ${\n          isOpen ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-2 pointer-events-none'\n        }`}>\n          {/* Manual Entry */}\n          <button\n            onClick={handleManualEntry}\n            className=\"flex items-center space-x-3 bg-white text-gray-700 px-4 py-3 rounded-lg shadow-lg hover:bg-gray-50 transition-colors\"\n            aria-label=\"Create manual session entry\"\n          >\n            <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n              <svg className=\"w-5 h-5 text-blue-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n              </svg>\n            </div>\n            <span className=\"font-medium\">Manual Entry</span>\n          </button>\n\n          {/* Session History */}\n          <Link\n            href=\"/sessions\"\n            className=\"flex items-center space-x-3 bg-white text-gray-700 px-4 py-3 rounded-lg shadow-lg hover:bg-gray-50 transition-colors\"\n            aria-label=\"View session history\"\n          >\n            <div className=\"w-10 h-10 bg-green-100 rounded-full flex items-center justify-center\">\n              <svg className=\"w-5 h-5 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n            </div>\n            <span className=\"font-medium\">Session History</span>\n          </Link>\n\n          {/* Timer */}\n          <Link\n            href=\"/timer\"\n            className=\"flex items-center space-x-3 bg-white text-gray-700 px-4 py-3 rounded-lg shadow-lg hover:bg-gray-50 transition-colors\"\n            aria-label=\"Start new session timer\"\n          >\n            <div className=\"w-10 h-10 bg-purple-100 rounded-full flex items-center justify-center\">\n              <svg className=\"w-5 h-5 text-purple-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n              </svg>\n            </div>\n            <span className=\"font-medium\">Start Timer</span>\n          </Link>\n        </div>\n\n        {/* Main FAB Button */}\n        <button\n          onClick={() => setIsOpen(!isOpen)}\n          className={`w-14 h-14 bg-blue-600 text-white rounded-full shadow-lg hover:bg-blue-700 transition-all duration-200 flex items-center justify-center ${\n            isOpen ? 'rotate-45' : ''\n          }`}\n          aria-label={isOpen ? 'Close quick actions menu' : 'Open quick actions menu'}\n          aria-expanded={isOpen}\n          aria-haspopup=\"true\"\n        >\n          <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n          </svg>\n        </button>\n      </div>\n\n      {/* Manual Entry Modal */}\n      {showManualEntry && (\n        <ManualEntry\n          onSave={handleSaveSession}\n          onCancel={() => setShowManualEntry(false)}\n          isLoading={isLoading}\n        />\n      )}\n    </>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/Feed.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'initialLimit' is assigned a value but never used.",
        "line": 67,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 165,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 165,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5573, 5576], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5573, 5576], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'err' is defined but never used.",
        "line": 184,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 184,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 242,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 242,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7906, 7909], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7906, 7909], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'err' is defined but never used.",
        "line": 263,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 263,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 263,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 263,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8475, 8478], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8475, 8478], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'updates' is defined but never used.",
        "line": 295,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 295,
        "endColumn": 14
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'allSessions.length'. Either include it or remove the dependency array.",
        "line": 302,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 302,
        "endColumn": 29,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [allSessions.length, top10SessionIdsString]",
            "fix": {
              "range": [9989, 10012],
              "text": "[allSessions.length, top10SessionIdsString]"
            }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { SessionWithDetails, FeedFilters } from '@/types';\nimport { firebaseApi } from '@/lib/api';\nimport SessionCard from './SessionCard';\nimport { useFeedInfinite, FeedResult } from '@/features/feed/hooks';\nimport { useSupportSession, useDeleteSession } from '@/features/sessions/hooks';\nimport { useAuth } from '@/hooks/useAuth';\nimport ConfirmDialog from './ConfirmDialog';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { AlertTriangle, Users, Search, ChevronUp } from 'lucide-react';\n\n// Session Card Skeleton Component\nconst SessionCardSkeleton: React.FC = () => (\n  <div className=\"bg-white border-b md:border md:border-gray-200 md:rounded-lg p-4 animate-pulse\">\n    {/* Header - User Info */}\n    <div className=\"flex items-center space-x-3 mb-4\">\n      <div className=\"w-10 h-10 bg-gray-200 rounded-full flex-shrink-0\"></div>\n      <div className=\"flex-1 space-y-2\">\n        <div className=\"h-4 bg-gray-200 rounded w-32\"></div>\n        <div className=\"h-3 bg-gray-200 rounded w-24\"></div>\n      </div>\n    </div>\n\n    {/* Session Title */}\n    <div className=\"mb-3\">\n      <div className=\"h-5 bg-gray-200 rounded w-3/4 mb-2\"></div>\n    </div>\n\n    {/* Description */}\n    <div className=\"space-y-2 mb-4\">\n      <div className=\"h-4 bg-gray-200 rounded w-full\"></div>\n      <div className=\"h-4 bg-gray-200 rounded w-5/6\"></div>\n    </div>\n\n    {/* Stats Bar */}\n    <div className=\"flex items-center gap-4 py-3 mb-3 border-t border-b border-gray-100\">\n      <div className=\"h-4 bg-gray-200 rounded w-20\"></div>\n      <div className=\"h-4 bg-gray-200 rounded w-24\"></div>\n      <div className=\"h-4 bg-gray-200 rounded w-16\"></div>\n    </div>\n\n    {/* Action Buttons */}\n    <div className=\"flex items-center justify-between\">\n      <div className=\"flex gap-4\">\n        <div className=\"h-8 bg-gray-200 rounded w-16\"></div>\n        <div className=\"h-8 bg-gray-200 rounded w-20\"></div>\n      </div>\n      <div className=\"h-8 bg-gray-200 rounded w-12\"></div>\n    </div>\n  </div>\n);\n\ninterface FeedProps {\n  filters?: FeedFilters;\n  className?: string;\n  initialLimit?: number;\n  showEndMessage?: boolean;\n  showGroupInfo?: boolean;\n}\n\nexport const Feed: React.FC<FeedProps> = ({\n  filters = {},\n  className = '',\n  initialLimit = 10,\n  showEndMessage = true,\n  showGroupInfo = false,\n}) => {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [hasNewSessions, setHasNewSessions] = useState(false);\n  const [newSessionsCount, setNewSessionsCount] = useState(0);\n  const [deleteConfirmSession, setDeleteConfirmSession] = useState<\n    string | null\n  >(null);\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  // Ref for infinite scroll trigger element\n  const loadMoreTriggerRef = React.useRef<HTMLDivElement>(null);\n\n  // Use new infinite scroll hook\n  const {\n    data,\n    isLoading,\n    error,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    refetch,\n  } = useFeedInfinite(user?.id || '', filters);\n\n  // Flatten pages into allSessions\n  // Note: Casting to SessionWithDetails[] for compatibility during architecture migration\n  // The data structure comes from useFeedInfinite which returns InfiniteData<FeedResult>\n  // where each page is a FeedResult with sessions: Session[] property\n  const allSessions = useMemo(() => {\n    if (!data?.pages) return [];\n    // TypeScript can't infer the page type from useInfiniteQuery, so we cast\n    return (data.pages as FeedResult[]).flatMap(page => {\n      return page.sessions || [];\n    }) as unknown as SessionWithDetails[];\n  }, [data]);\n\n  const hasMore = hasNextPage || false;\n  const isLoadingMore = isFetchingNextPage;\n\n  // New mutations using feature hooks\n  const supportMutation = useSupportSession(user?.id);\n  const deleteSessionMutation = useDeleteSession();\n\n  // Refresh sessions and invalidate cache\n  const refreshSessions = useCallback(() => {\n    setHasNewSessions(false);\n    setNewSessionsCount(0);\n    // Invalidate all feed caches to force refetch\n    queryClient.invalidateQueries({ queryKey: ['feed'] });\n    refetch();\n  }, [refetch, queryClient]);\n\n  // Auto-refresh feed when coming from session creation\n  useEffect(() => {\n    const shouldRefresh = searchParams?.get('refresh');\n    if (shouldRefresh === 'true') {\n      // Clear the URL parameter\n      router.replace('/', { scroll: false });\n      // Trigger immediate refresh\n      refreshSessions();\n    }\n  }, [searchParams, router, refreshSessions]);\n\n  // Load more sessions - now uses React Query infinite scroll\n  const loadMore = useCallback(() => {\n    if (!isLoadingMore && hasMore) {\n      fetchNextPage();\n    }\n  }, [isLoadingMore, hasMore, fetchNextPage]);\n\n  // Check for new sessions periodically - only when page is visible\n  useEffect(() => {\n    if (allSessions.length === 0) return;\n\n    // Track if page is currently visible\n    let isPageVisible = !document.hidden;\n\n    const checkForNewSessions = async () => {\n      // Skip check if page is not visible\n      if (!isPageVisible) return;\n\n      try {\n        // Use queryClient to check cache first, then fetch if stale\n        const cachedData = queryClient.getQueryData([\n          'feed',\n          'sessions',\n          5,\n          undefined,\n          filters,\n        ]);\n\n        let response;\n        if (cachedData) {\n          response = cachedData as { sessions: any[] };\n        } else {\n          response = await firebaseApi.post.getFeedSessions(\n            5,\n            undefined,\n            filters\n          );\n        }\n\n        const newSessionIds = response.sessions.map(s => s.id);\n        const currentSessionIds = allSessions.slice(0, 5).map(s => s.id);\n\n        const newCount = newSessionIds.filter(\n          id => !currentSessionIds.includes(id)\n        ).length;\n        if (newCount > 0) {\n          setHasNewSessions(true);\n          setNewSessionsCount(newCount);\n        }\n      } catch (err) {\n        // Silently fail\n      }\n    };\n\n    // Update visibility state when page visibility changes\n    const handleVisibilityChange = () => {\n      isPageVisible = !document.hidden;\n      // Check immediately when page becomes visible\n      if (isPageVisible) {\n        checkForNewSessions();\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n\n    // Check every 2 minutes when visible (reduced frequency saves resources)\n    const interval = setInterval(checkForNewSessions, 120000);\n\n    return () => {\n      clearInterval(interval);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [allSessions, filters, queryClient]);\n\n  // Handle support with optimistic updates via React Query\n  const handleSupport = useCallback(\n    async (sessionId: string) => {\n      supportMutation.mutate({ sessionId, action: 'support' });\n    },\n    [supportMutation]\n  );\n\n  // Handle remove support with optimistic updates via React Query\n  const handleRemoveSupport = useCallback(\n    async (sessionId: string) => {\n      supportMutation.mutate({ sessionId, action: 'unsupport' });\n    },\n    [supportMutation]\n  );\n\n  // Handle share\n  const handleShare = useCallback(async (sessionId: string) => {\n    try {\n      const sessionUrl = `${window.location.origin}/sessions/${sessionId}`;\n\n      if (navigator.share) {\n        // Use native share API on mobile\n        await navigator.share({\n          title: 'Check out this session on Ambira',\n          text: 'Look at this productive session!',\n          url: sessionUrl,\n        });\n      } else {\n        // Fallback to clipboard\n        await navigator.clipboard.writeText(sessionUrl);\n        // Could show success toast here\n      }\n    } catch (err: any) {\n      // Silently ignore if user cancels the share dialog\n      if (err.name === 'AbortError') {\n        return;\n      }\n      // Could show error toast here\n    }\n  }, []);\n\n  // Handle delete\n  const handleDelete = useCallback(async (sessionId: string) => {\n    setDeleteConfirmSession(sessionId);\n  }, []);\n\n  const confirmDelete = useCallback(async () => {\n    if (!deleteConfirmSession) return;\n\n    try {\n      setIsDeleting(true);\n      await deleteSessionMutation.mutateAsync(deleteConfirmSession);\n      setDeleteConfirmSession(null);\n    } catch (err: any) {\n      // Could show error toast here\n    } finally {\n      setIsDeleting(false);\n    }\n  }, [deleteConfirmSession, deleteSessionMutation]);\n\n  // Memoize top 10 session IDs string to create stable dependency\n  // This prevents useEffect from re-running when sessions array changes but top 10 IDs remain same\n  const top10SessionIdsString = useMemo(() => {\n    const MAX_LISTENERS = 10;\n    return allSessions\n      .slice(0, MAX_LISTENERS)\n      .map(session => session.id)\n      .join(',');\n  }, [allSessions]);\n\n  // Real-time updates for support counts (throttled to reduce reads)\n  // Only listen to the first 10 sessions to reduce overhead\n  // Note: React Query handles optimistic updates through mutations\n  // This listener is kept for reference but real-time updates happen via queryClient updates\n  useEffect(() => {\n    if (allSessions.length === 0 || !top10SessionIdsString) return;\n\n    // Parse session IDs from memoized string\n    const sessionIds = top10SessionIdsString.split(',').filter(Boolean);\n    if (sessionIds.length === 0) return;\n\n    // Register listener but don't update state directly\n    // React Query mutations handle support count updates via cache invalidation\n    const unsubscribe = firebaseApi.post.listenToSessionUpdates(\n      sessionIds,\n      updates => {\n        // Updates are handled by React Query's optimistic updates in supportMutation\n        // This listener can be used for real-time notifications in the future\n      }\n    );\n\n    return unsubscribe;\n  }, [top10SessionIdsString]); // Only re-run when top 10 IDs change\n\n  // Infinite scroll using IntersectionObserver\n  useEffect(() => {\n    const trigger = loadMoreTriggerRef.current;\n    if (!trigger) return;\n\n    const observer = new IntersectionObserver(\n      entries => {\n        const entry = entries[0];\n        if (!entry) return;\n\n        if (entry.isIntersecting && hasMore && !isLoadingMore) {\n          loadMore();\n        }\n      },\n      {\n        root: null, // viewport\n        rootMargin: '200px', // Trigger 200px before reaching the element\n        threshold: 0,\n      }\n    );\n\n    observer.observe(trigger);\n\n    return () => {\n      if (trigger) {\n        observer.unobserve(trigger);\n      }\n    };\n  }, [loadMore, hasMore, isLoadingMore]);\n\n  if (isLoading) {\n    return (\n      <div className={`space-y-4 ${className}`}>\n        {[...Array(3)].map((_, i) => (\n          <SessionCardSkeleton key={i} />\n        ))}\n      </div>\n    );\n  }\n\n  if (error) {\n    const errorMessage = String(error);\n    const isPermissionError =\n      errorMessage.includes('permission') ||\n      errorMessage.includes('insufficient');\n\n    return (\n      <div\n        className={`text-center py-8 px-4 ${className}`}\n        role=\"alert\"\n        aria-live=\"polite\"\n      >\n        <div className=\"text-red-600 mb-4\">\n          <AlertTriangle\n            className=\"w-12 h-12 mx-auto mb-2\"\n            aria-hidden=\"true\"\n          />\n          <p className=\"font-medium text-sm sm:text-base\">\n            Failed to load sessions\n          </p>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            {isPermissionError\n              ? 'There was a permissions issue loading the feed. This may be due to security rules that need updating.'\n              : errorMessage}\n          </p>\n          {isPermissionError && (\n            <p className=\"text-xs text-gray-500 mt-2\">\n              If you're the app administrator, try deploying the latest\n              Firestore security rules.\n            </p>\n          )}\n        </div>\n        <button\n          onClick={refreshSessions}\n          className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200\"\n        >\n          Try Again\n        </button>\n      </div>\n    );\n  }\n\n  if (allSessions.length === 0) {\n    // Determine empty state content based on feed type\n    const feedType = filters?.type || 'all';\n\n    let emptyStateContent = {\n      title: 'Your feed is empty',\n      message:\n        'Follow people to see their productive sessions in your feed and get inspired by their work!',\n      buttonText: 'Find People to Follow',\n      buttonAction: () => router.push('/discover/people'),\n    };\n\n    if (feedType === 'group-members-unfollowed') {\n      emptyStateContent = {\n        title: 'No sessions yet',\n        message:\n          \"When group members you don't follow post sessions, they'll appear here!\",\n        buttonText: 'Discover Groups',\n        buttonAction: () => router.push('/groups'),\n      };\n    } else if (feedType === 'user') {\n      emptyStateContent = {\n        title: 'No sessions yet',\n        message:\n          'Start tracking your productive sessions to build your profile!',\n        buttonText: 'Start a Session',\n        buttonAction: () => router.push('/timer'),\n      };\n    } else if (feedType === 'following') {\n      emptyStateContent = {\n        title: 'Your feed is empty',\n        message:\n          'Follow people to see their productive sessions in your feed and get inspired by their work!',\n        buttonText: 'Find People to Follow',\n        buttonAction: () => router.push('/discover/people'),\n      };\n    }\n\n    return (\n      <div className={`text-center py-12 px-4 ${className}`}>\n        <div className=\"max-w-md mx-auto\">\n          <div className=\"text-gray-500 mb-8\">\n            <Users className=\"w-20 h-20 mx-auto mb-4 text-gray-400\" />\n            <h3 className=\"font-bold text-xl text-gray-900 mb-2\">\n              {emptyStateContent.title}\n            </h3>\n            <p className=\"text-base text-gray-600 leading-relaxed\">\n              {emptyStateContent.message}\n            </p>\n          </div>\n\n          {/* Action Button */}\n          <button\n            onClick={emptyStateContent.buttonAction}\n            className=\"inline-flex items-center justify-center gap-2 px-6 py-3 bg-[#007AFF] text-white rounded-lg hover:bg-[#0051D5] transition-colors duration-200 font-semibold text-base shadow-md hover:shadow-lg\"\n          >\n            <Search className=\"w-5 h-5\" />\n            {emptyStateContent.buttonText}\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={className}>\n      {/* New sessions indicator */}\n      {hasNewSessions && (\n        <div className=\"mb-4 sticky top-0 z-10\">\n          <button\n            onClick={refreshSessions}\n            className=\"w-full py-3 px-3 sm:px-4 bg-gradient-to-r from-[#007AFF] to-[#0051D5] text-white rounded-lg shadow-lg hover:shadow-xl transition-colors duration-200 flex items-center justify-center gap-2 font-medium text-sm sm:text-base\"\n            aria-label={`${newSessionsCount} new sessions available, click to refresh`}\n          >\n            <ChevronUp className=\"w-5 h-5 flex-shrink-0\" aria-hidden=\"true\" />\n            <span className=\"truncate\">\n              {newSessionsCount} new{' '}\n              {newSessionsCount === 1 ? 'session' : 'sessions'} - Click to\n              refresh\n            </span>\n          </button>\n        </div>\n      )}\n\n      {/* Sessions */}\n      <div className=\"space-y-0 md:space-y-0\">\n        {allSessions.map((session, index) => {\n          const isOwnSession = user && session.userId === user.id;\n          // First 2 sessions are above the fold on most screens\n          const isAboveFold = index < 2;\n          return (\n            <SessionCard\n              key={session.id}\n              session={session}\n              onSupport={handleSupport}\n              onRemoveSupport={handleRemoveSupport}\n              onShare={handleShare}\n              onEdit={\n                isOwnSession\n                  ? sessionId => router.push(`/sessions/${sessionId}/edit`)\n                  : undefined\n              }\n              onDelete={isOwnSession ? handleDelete : undefined}\n              showGroupInfo={showGroupInfo}\n              isAboveFold={isAboveFold}\n              priority={isAboveFold}\n            />\n          );\n        })}\n      </div>\n\n      {/* Infinite scroll trigger element */}\n      {hasMore && !isLoadingMore && (\n        <div ref={loadMoreTriggerRef} className=\"h-4\" aria-hidden=\"true\" />\n      )}\n\n      {/* Load more indicator */}\n      {isLoadingMore && (\n        <div className=\"text-center py-4\" role=\"status\" aria-live=\"polite\">\n          <div className=\"inline-flex items-center space-x-2 text-gray-600\">\n            <div\n              className=\"w-4 h-4 border-2 border-gray-300 border-t-blue-600 rounded-full animate-spin\"\n              aria-hidden=\"true\"\n            ></div>\n            <span className=\"text-sm\">Loading more sessions...</span>\n          </div>\n        </div>\n      )}\n\n      {/* Delete Confirmation Dialog */}\n      <ConfirmDialog\n        isOpen={deleteConfirmSession !== null}\n        onClose={() => setDeleteConfirmSession(null)}\n        onConfirm={confirmDelete}\n        title=\"Delete Session\"\n        message=\"Are you sure you want to delete this session? This action cannot be undone and all associated data will be permanently removed.\"\n        confirmText=\"Delete Session\"\n        cancelText=\"Cancel\"\n        variant=\"danger\"\n        isLoading={isDeleting}\n      />\n\n      {/* End of feed */}\n      {showEndMessage && !hasMore && allSessions.length > 0 && (\n        <div className=\"text-center py-4 text-gray-500 text-sm\">\n          You've reached the end of the feed\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Feed;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/FeedCarousel.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'handleSwipe' is assigned a value but never used.",
        "line": 13,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 20
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\n\nexport const FeedCarousel: React.FC = () => {\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const totalSlides = 3;\n\n  const handleDotClick = (index: number) => {\n    setCurrentSlide(index);\n  };\n\n  const handleSwipe = (direction: 'left' | 'right') => {\n    if (direction === 'left' && currentSlide < totalSlides - 1) {\n      setCurrentSlide(currentSlide + 1);\n    } else if (direction === 'right' && currentSlide > 0) {\n      setCurrentSlide(currentSlide - 1);\n    }\n  };\n\n  return (\n    <div className=\"mb-6\">\n      {/* Carousel Container */}\n      <div className=\"relative overflow-hidden\">\n        <div\n          className=\"flex transition-transform duration-300 ease-out\"\n          style={{ transform: `translateX(-${currentSlide * 100}%)` }}\n        >\n          {/* Slide 1: Weekly Snapshot */}\n          <div className=\"w-full flex-shrink-0 px-4 md:px-0\">\n            <div className=\"bg-white rounded-2xl border border-gray-100 shadow-sm p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-bold text-gray-900\">Your Weekly Snapshot</h3>\n                <button className=\"text-[#007AFF] text-sm font-medium hover:text-[#0056D6]\">\n                  View Details\n                </button>\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <div className=\"text-xs text-gray-500 uppercase tracking-wide mb-1\">Activities</div>\n                  <div className=\"flex items-baseline gap-2\">\n                    <span className=\"text-2xl font-bold text-gray-900\">12</span>\n                    <span className=\"text-sm text-green-600 flex items-center\">\n                      <svg className=\"w-3 h-3 mr-0.5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 10l7-7m0 0l7 7m-7-7v18\" />\n                      </svg>\n                      +3\n                    </span>\n                  </div>\n                </div>\n\n                <div>\n                  <div className=\"text-xs text-gray-500 uppercase tracking-wide mb-1\">Time</div>\n                  <div className=\"flex items-baseline gap-2\">\n                    <span className=\"text-2xl font-bold text-gray-900\">24h</span>\n                    <span className=\"text-sm text-green-600 flex items-center\">\n                      <svg className=\"w-3 h-3 mr-0.5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 10l7-7m0 0l7 7m-7-7v18\" />\n                      </svg>\n                      +5h\n                    </span>\n                  </div>\n                </div>\n\n                <div>\n                  <div className=\"text-xs text-gray-500 uppercase tracking-wide mb-1\">Projects</div>\n                  <div className=\"flex items-baseline gap-2\">\n                    <span className=\"text-2xl font-bold text-gray-900\">5</span>\n                    <span className=\"text-sm text-gray-500 flex items-center\">\n                      <svg className=\"w-3 h-3 mr-0.5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M20 12H4\" />\n                      </svg>\n                      0\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mt-4 pt-4 border-t border-gray-100\">\n                <p className=\"text-xs text-gray-500\">Compared to last week</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Slide 2: Your Streak */}\n          <div className=\"w-full flex-shrink-0 px-4 md:px-0\">\n            <div className=\"bg-gradient-to-br from-orange-500 to-red-500 rounded-2xl shadow-sm p-6 text-white\">\n              <h3 className=\"text-lg font-bold mb-4\">Your streak</h3>\n\n              <div className=\"flex items-end justify-between mb-6\">\n                <div>\n                  <div className=\"text-5xl font-bold mb-1\">4</div>\n                  <div className=\"text-sm opacity-90\">weeks</div>\n                </div>\n                <div className=\"text-6xl opacity-20\">🔥</div>\n              </div>\n\n              <button className=\"w-full bg-white text-orange-600 font-semibold py-3 px-4 rounded-lg hover:bg-gray-50 transition-colors\">\n                Record now to continue\n              </button>\n            </div>\n          </div>\n\n          {/* Slide 3: Suggested Goal */}\n          <div className=\"w-full flex-shrink-0 px-4 md:px-0\">\n            <div className=\"bg-white rounded-2xl border border-gray-100 shadow-sm p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-bold text-gray-900\">Suggested Goal</h3>\n                <button className=\"text-[#007AFF] text-sm font-medium hover:text-[#0056D6]\">\n                  Customize\n                </button>\n              </div>\n\n              <div className=\"bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl p-4 mb-4\">\n                <div className=\"flex items-center gap-3 mb-3\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full flex items-center justify-center text-2xl\">\n                    🎯\n                  </div>\n                  <div>\n                    <h4 className=\"font-bold text-gray-900\">25 Hours This Week</h4>\n                    <p className=\"text-xs text-gray-600\">Track 25 hours of focused work</p>\n                  </div>\n                </div>\n\n                <div className=\"mb-2\">\n                  <div className=\"flex justify-between text-xs text-gray-600 mb-1\">\n                    <span>Progress</span>\n                    <span className=\"font-semibold\">16h / 25h</span>\n                  </div>\n                  <div className=\"w-full bg-white rounded-full h-2 overflow-hidden\">\n                    <div className=\"bg-gradient-to-r from-blue-500 to-indigo-600 h-full rounded-full\" style={{ width: '64%' }}></div>\n                  </div>\n                </div>\n              </div>\n\n              <button className=\"w-full bg-[#007AFF] text-white font-semibold py-3 px-4 rounded-lg hover:bg-[#0056D6] transition-colors\">\n                Set Goal\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Pill Indicators */}\n      <div className=\"flex justify-center gap-2 mt-4\">\n        {[...Array(totalSlides)].map((_, index) => (\n          <button\n            key={index}\n            onClick={() => handleDotClick(index)}\n            className={`h-1.5 rounded-full transition-all duration-300 ${\n              currentSlide === index\n                ? 'w-8 bg-[#007AFF]'\n                : 'w-8 bg-gray-300'\n            }`}\n            aria-label={`Go to slide ${index + 1}`}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default FeedCarousel;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/FeedFilterDropdown.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/FeedLayout.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'suggestedUsers' is assigned a value but never used.",
        "line": 19,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 19,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'handleFeedTypeChange' is assigned a value but never used.",
        "line": 24,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { firebaseApi } from '@/lib/api';\nimport { UserStats, SuggestedUser, FeedFilters } from '@/types';\nimport Feed from './Feed';\nimport SuggestedUsers from './SuggestedUsers';\n\ntype FeedType = 'recent' | 'following' | 'trending';\n\ninterface FeedLayoutProps {\n  className?: string;\n}\n\nexport const FeedLayout: React.FC<FeedLayoutProps> = ({ className = '' }) => {\n  const { user } = useAuth();\n  const [userStats, setUserStats] = useState<UserStats | null>(null);\n  const [suggestedUsers, setSuggestedUsers] = useState<SuggestedUser[]>([]);\n  const [isLoadingStats, setIsLoadingStats] = useState(true);\n  const [feedType, setFeedType] = useState<FeedType>('recent');\n  const [filters, setFilters] = useState<FeedFilters>({ type: 'recent' });\n\n  const handleFeedTypeChange = (type: FeedType) => {\n    setFeedType(type);\n    setFilters({ type });\n  };\n\n  // Load user stats and suggestions\n  React.useEffect(() => {\n    const loadData = async () => {\n      if (!user) return;\n\n      try {\n        const [stats, suggestions] = await Promise.all([\n          firebaseApi.user.getUserStats(user.id),\n          firebaseApi.user.getSuggestedUsers(5)\n        ]);\n        \n        setUserStats(stats);\n        setSuggestedUsers(suggestions);\n      } catch (error) {\n        console.error('Failed to load feed data:', error);\n      } finally {\n        setIsLoadingStats(false);\n      }\n    };\n\n    loadData();\n  }, [user]);\n\n  const formatTime = (seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    }\n    return `${minutes}m`;\n  };\n\n  return (\n    <div className={`max-w-7xl mx-auto px-0 md:px-4 sm:px-6 lg:px-8 py-0 md:py-6 ${className}`}>\n      <div className=\"grid grid-cols-1 lg:grid-cols-12 gap-0 md:gap-6\">\n        {/* Left Sidebar - Personal Stats */}\n        <div className=\"lg:col-span-3 order-2 lg:order-1 hidden lg:block\">\n          <div className=\"sticky top-6 space-y-6\">\n            {/* Personal Stats Widget */}\n            {user && (\n              <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                  Your Stats\n                </h3>\n                \n                {isLoadingStats ? (\n                  <div className=\"space-y-3\">\n                    {[...Array(4)].map((_, i) => (\n                      <div key={i} className=\"h-4 bg-gray-200 rounded animate-pulse\"></div>\n                    ))}\n                  </div>\n                ) : userStats ? (\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">Total Hours</span>\n                      <span className=\"font-semibold text-gray-900\">\n                        {userStats.totalHours.toFixed(1)}h\n                      </span>\n                    </div>\n                    \n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">This Week</span>\n                      <span className=\"font-semibold text-gray-900\">\n                        {userStats.weeklyHours.toFixed(1)}h\n                      </span>\n                    </div>\n                    \n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">Current Streak</span>\n                      <span className=\"font-semibold text-gray-900\">\n                        {userStats.currentStreak} days\n                      </span>\n                    </div>\n                    \n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">Sessions This Week</span>\n                      <span className=\"font-semibold text-gray-900\">\n                        {userStats.sessionsThisWeek}\n                      </span>\n                    </div>\n                    \n                    {userStats.favoriteProject && (\n                      <div className=\"pt-3 border-t border-gray-200\">\n                        <span className=\"text-sm text-gray-600 block mb-1\">\n                          Favorite Project\n                        </span>\n                        <span className=\"font-semibold text-gray-900\">\n                          {userStats.favoriteProject.name}\n                        </span>\n                        <span className=\"text-sm text-gray-600 ml-2\">\n                          ({formatTime(userStats.favoriteProject.hours * 3600)})\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"text-center text-gray-500 text-sm\">\n                    No stats available\n                  </div>\n                )}\n              </div>\n            )}\n\n            {/* Quick Actions */}\n            <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                Quick Actions\n              </h3>\n              \n              <div className=\"space-y-3\">\n                <button className=\"w-full text-left px-4 py-3 bg-blue-50 hover:bg-blue-100 rounded-lg transition-colors\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center\">\n                      <svg className=\"w-4 h-4 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n                      </svg>\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-gray-900\">Start Timer</div>\n                      <div className=\"text-sm text-gray-600\">Begin a new session</div>\n                    </div>\n                  </div>\n                </button>\n                \n                <button className=\"w-full text-left px-4 py-3 bg-green-50 hover:bg-green-100 rounded-lg transition-colors\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-green-500 rounded-full flex items-center justify-center\">\n                      <svg className=\"w-4 h-4 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4\" />\n                      </svg>\n                    </div>\n                    <div>\n                      <div className=\"font-medium text-gray-900\">Add Task</div>\n                      <div className=\"text-sm text-gray-600\">Create a new task</div>\n                    </div>\n                  </div>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Center - Feed */}\n        <div className=\"lg:col-span-6 order-1 lg:order-2 w-full\">\n          {/* Feed Type Tabs */}\n          <div className=\"bg-white md:rounded-lg md:border border-gray-200 mb-0 md:mb-4\">\n            <div className=\"flex gap-0 border-b border-gray-200\">\n              <button\n                onClick={() => setFeedType('recent')}\n                className={`flex-1 px-6 py-4 font-medium transition-all ${\n                  feedType === 'recent'\n                    ? 'text-orange-600 border-b-2 border-orange-600 bg-orange-50'\n                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'\n                }`}\n              >\n                Recent\n              </button>\n              <button\n                onClick={() => setFeedType('following')}\n                className={`flex-1 px-6 py-4 font-medium transition-all ${\n                  feedType === 'following'\n                    ? 'text-orange-600 border-b-2 border-orange-600 bg-orange-50'\n                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'\n                }`}\n              >\n                Following\n              </button>\n              <button\n                onClick={() => setFeedType('trending')}\n                className={`flex-1 px-6 py-4 font-medium transition-all ${\n                  feedType === 'trending'\n                    ? 'text-orange-600 border-b-2 border-orange-600 bg-orange-50'\n                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'\n                }`}\n              >\n                🔥 Trending\n              </button>\n            </div>\n          </div>\n\n          <Feed filters={filters} key={feedType} />\n        </div>\n\n        {/* Right Sidebar - Suggestions */}\n        <div className=\"lg:col-span-3 order-3 hidden lg:block\">\n          <div className=\"sticky top-6 space-y-6\">\n            {/* Suggested Users */}\n            <SuggestedUsers />\n\n            {/* Feed Tips */}\n            <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200 p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                💡 Feed Tips\n              </h3>\n              <p className=\"text-sm text-gray-700 mb-3\">\n                Share your productive sessions to inspire others and build your network!\n              </p>\n              <ul className=\"text-sm text-gray-600 space-y-1\">\n                <li>• Use meaningful descriptions</li>\n                <li>• Tag relevant skills</li>\n                <li>• Rate how you felt</li>\n                <li>• Support others' work</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FeedLayout;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/FeedPost.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/Footer.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/GroupAnalytics.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'BarChart3' is defined but never used.",
        "line": 5,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Users' is defined but never used.",
        "line": 5,
        "column": 33,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Clock' is defined but never used.",
        "line": 5,
        "column": 40,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 45
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Calendar' is defined but never used.",
        "line": 5,
        "column": 47,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 55
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Legend' is defined but never used.",
        "line": 15,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isLoading' is assigned a value but never used.",
        "line": 37,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 37,
        "endColumn": 19
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadAnalytics'. Either include it or remove the dependency array.",
        "line": 41,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 41,
        "endColumn": 26,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [groupId, loadAnalytics, timeRange]",
            "fix": {
              "range": [932, 952],
              "text": "[groupId, loadAnalytics, timeRange]"
            }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { GroupStats } from '@/types';\nimport { BarChart3, TrendingUp, Users, Clock, Calendar } from 'lucide-react';\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Area,\n  AreaChart,\n} from 'recharts';\n\ninterface GroupAnalyticsProps {\n  groupId: string;\n  stats: GroupStats | null | undefined;\n}\n\nexport default function GroupAnalytics({\n  groupId,\n  stats,\n}: GroupAnalyticsProps) {\n  const [timeRange, setTimeRange] = useState<'week' | 'month' | 'year'>(\n    'month'\n  );\n  const [analyticsData, setAnalyticsData] = useState<{\n    hoursData: Array<{ date: string; hours: number; members: number }>;\n    membershipGrowth: Array<{ date: string; members: number }>;\n  } | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    loadAnalytics();\n  }, [groupId, timeRange]);\n\n  const loadAnalytics = async () => {\n    try {\n      setIsLoading(true);\n      const { firebaseApi } = await import('@/lib/api');\n      const data = await firebaseApi.group.getGroupAnalytics(\n        groupId,\n        timeRange\n      );\n      setAnalyticsData(data);\n    } catch (error) {\n      console.error('Failed to load analytics:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const hoursData = analyticsData?.hoursData || [];\n  const membershipGrowth = analyticsData?.membershipGrowth || [];\n\n  const projectDistribution =\n    stats?.topProjects.slice(0, 5).map(project => ({\n      name:\n        project.projectName.length > 15\n          ? project.projectName.substring(0, 15) + '...'\n          : project.projectName,\n      hours: project.hours,\n      members: project.memberCount,\n    })) || [];\n\n  return (\n    <div className=\"space-y-6 pb-20\">\n      {/* Time Range Selector */}\n      <div className=\"bg-white rounded-xl p-4 border border-gray-200\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">\n            Activity Over Time\n          </h3>\n          <div className=\"flex gap-2\">\n            {(['week', 'month', 'year'] as const).map(range => (\n              <button\n                key={range}\n                onClick={() => setTimeRange(range)}\n                className={`px-3 py-1.5 text-sm font-medium rounded-lg transition-colors ${\n                  timeRange === range\n                    ? 'bg-[#007AFF] text-white'\n                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n                }`}\n              >\n                {range.charAt(0).toUpperCase() + range.slice(1)}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Hours Chart */}\n        <div className=\"h-64\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <AreaChart data={hoursData}>\n              <defs>\n                <linearGradient id=\"colorHours\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"#007AFF\" stopOpacity={0.3} />\n                  <stop offset=\"95%\" stopColor=\"#007AFF\" stopOpacity={0} />\n                </linearGradient>\n              </defs>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n              <XAxis\n                dataKey=\"date\"\n                stroke=\"#9ca3af\"\n                style={{ fontSize: '12px' }}\n              />\n              <YAxis stroke=\"#9ca3af\" style={{ fontSize: '12px' }} />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: '#fff',\n                  border: '1px solid #e5e7eb',\n                  borderRadius: '8px',\n                  fontSize: '12px',\n                }}\n              />\n              <Area\n                type=\"monotone\"\n                dataKey=\"hours\"\n                stroke=\"#007AFF\"\n                strokeWidth={2}\n                fillOpacity={1}\n                fill=\"url(#colorHours)\"\n                name=\"Hours\"\n              />\n            </AreaChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n\n      {/* Membership Growth */}\n      <div className=\"bg-white rounded-xl p-4 border border-gray-200\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n          Membership Growth\n        </h3>\n        <div className=\"h-64\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={membershipGrowth}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n              <XAxis\n                dataKey=\"date\"\n                stroke=\"#9ca3af\"\n                style={{ fontSize: '12px' }}\n              />\n              <YAxis\n                stroke=\"#9ca3af\"\n                style={{ fontSize: '12px' }}\n                allowDecimals={false}\n              />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: '#fff',\n                  border: '1px solid #e5e7eb',\n                  borderRadius: '8px',\n                  fontSize: '12px',\n                }}\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"members\"\n                stroke=\"#10b981\"\n                strokeWidth={3}\n                dot={{ fill: '#10b981', r: 4 }}\n                activeDot={{ r: 6 }}\n                name=\"Members\"\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n\n      {/* Top Projects */}\n      {projectDistribution.length > 0 && (\n        <div className=\"bg-white rounded-xl p-4 border border-gray-200\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Top Projects by Hours\n          </h3>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={projectDistribution}>\n                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                <XAxis\n                  dataKey=\"name\"\n                  stroke=\"#9ca3af\"\n                  style={{ fontSize: '11px' }}\n                  angle={-45}\n                  textAnchor=\"end\"\n                  height={80}\n                />\n                <YAxis stroke=\"#9ca3af\" style={{ fontSize: '12px' }} />\n                <Tooltip\n                  contentStyle={{\n                    backgroundColor: '#fff',\n                    border: '1px solid #e5e7eb',\n                    borderRadius: '8px',\n                    fontSize: '12px',\n                  }}\n                />\n                <Bar\n                  dataKey=\"hours\"\n                  fill=\"#8b5cf6\"\n                  radius={[8, 8, 0, 0]}\n                  name=\"Hours\"\n                />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n      )}\n\n      {/* Insights */}\n      <div className=\"bg-gradient-to-br from-blue-50 to-indigo-50 rounded-xl p-6 border border-blue-100\">\n        <div className=\"flex items-start gap-3\">\n          <div className=\"p-2 bg-blue-500 rounded-lg\">\n            <TrendingUp className=\"w-5 h-5 text-white\" />\n          </div>\n          <div>\n            <h4 className=\"font-semibold text-gray-900 mb-1\">Group Insights</h4>\n            <ul className=\"space-y-2 text-sm text-gray-700\">\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-blue-500 mt-0.5\">•</span>\n                <span>\n                  Average{' '}\n                  {(\n                    (stats?.totalHours || 0) / (stats?.totalMembers || 1)\n                  ).toFixed(1)}{' '}\n                  hours per member\n                </span>\n              </li>\n              <li className=\"flex items-start gap-2\">\n                <span className=\"text-blue-500 mt-0.5\">•</span>\n                <span>\n                  {stats?.activeMembers || 0} active members this month (\n                  {Math.round(\n                    ((stats?.activeMembers || 0) / (stats?.totalMembers || 1)) *\n                      100\n                  )}\n                  % of total)\n                </span>\n              </li>\n              {stats?.topProjects &&\n                stats.topProjects.length > 0 &&\n                stats.topProjects[0] && (\n                  <li className=\"flex items-start gap-2\">\n                    <span className=\"text-blue-500 mt-0.5\">•</span>\n                    <span>\n                      Most popular project: {stats.topProjects[0]?.projectName}{' '}\n                      ({stats.topProjects[0]?.hours.toFixed(1)} hours)\n                    </span>\n                  </li>\n                )}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/GroupAvatar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/GroupCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/GroupChallenges.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Target' is defined but never used.",
        "line": 15,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Calendar' is defined but never used.",
        "line": 16,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Users' is defined but never used.",
        "line": 17,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'TrendingUp' is defined but never used.",
        "line": 18,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 13
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadGroupChallenges'. Either include it or remove the dependency array.",
        "line": 47,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 47,
        "endColumn": 30,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [group.id, activeFilter, loadGroupChallenges]",
            "fix": {
              "range": [1381, 1405],
              "text": "[group.id, activeFilter, loadGroupChallenges]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 86,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 86,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2528, 2531], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2528, 2531], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 220,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 220,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6800, 6803], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6800, 6803], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useActivities } from '@/hooks/useActivitiesQuery';\nimport { firebaseChallengeApi } from '@/lib/api';\nimport { Challenge, ChallengeProgress, Group } from '@/types';\nimport ChallengeCard from './ChallengeCard';\nimport CreateChallengeModal from './CreateChallengeModal';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Plus,\n  Trophy,\n  Target,\n  Calendar,\n  Users,\n  TrendingUp,\n} from 'lucide-react';\n\ninterface GroupChallengesProps {\n  group: Group;\n  isAdmin: boolean;\n}\n\nexport default function GroupChallenges({\n  group,\n  isAdmin,\n}: GroupChallengesProps) {\n  const { user } = useAuth();\n  const { data: projects = [] } = useActivities(user?.id);\n  const [challenges, setChallenges] = useState<Challenge[]>([]);\n  const [userProgress, setUserProgress] = useState<\n    Record<string, ChallengeProgress>\n  >({});\n  const [participatingChallenges, setParticipatingChallenges] = useState<\n    Set<string>\n  >(new Set());\n  const [isLoading, setIsLoading] = useState(true);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [activeFilter, setActiveFilter] = useState<\n    'all' | 'active' | 'upcoming' | 'completed'\n  >('all');\n\n  useEffect(() => {\n    loadGroupChallenges();\n  }, [group.id, activeFilter]);\n\n  const loadGroupChallenges = async () => {\n    try {\n      setIsLoading(true);\n\n      const filters = {\n        groupId: group.id,\n        status: activeFilter === 'all' ? undefined : activeFilter,\n      };\n\n      const challengesList = await firebaseChallengeApi.getChallenges(filters);\n      setChallenges(challengesList);\n\n      // Load user progress for participating challenges\n      if (user) {\n        const progressMap: Record<string, ChallengeProgress> = {};\n        const participatingSet = new Set<string>();\n\n        for (const challenge of challengesList) {\n          const progress = await firebaseChallengeApi.getChallengeProgress(\n            challenge.id\n          );\n          if (progress) {\n            progressMap[challenge.id] = progress;\n            participatingSet.add(challenge.id);\n          }\n        }\n\n        setUserProgress(progressMap);\n        setParticipatingChallenges(participatingSet);\n      }\n    } catch (error) {\n      console.error('Failed to load group challenges:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleCreateChallenge = async (data: any) => {\n    try {\n      await firebaseChallengeApi.createChallenge({\n        ...data,\n        groupId: group.id,\n      });\n      await loadGroupChallenges();\n      setShowCreateModal(false);\n    } catch (error) {\n      console.error('Failed to create challenge:', error);\n      throw error;\n    }\n  };\n\n  const handleJoinChallenge = async (challengeId: string) => {\n    try {\n      await firebaseChallengeApi.joinChallenge(challengeId);\n      await loadGroupChallenges();\n    } catch (error) {\n      console.error('Failed to join challenge:', error);\n      alert('Failed to join challenge. Please try again.');\n    }\n  };\n\n  const handleLeaveChallenge = async (challengeId: string) => {\n    try {\n      await firebaseChallengeApi.leaveChallenge(challengeId);\n      await loadGroupChallenges();\n    } catch (error) {\n      console.error('Failed to leave challenge:', error);\n      alert('Failed to leave challenge. Please try again.');\n    }\n  };\n\n  const activeChallenges = challenges.filter(c => {\n    const now = new Date();\n    const startDate = new Date(c.startDate);\n    const endDate = new Date(c.endDate);\n    return now >= startDate && now <= endDate && c.isActive;\n  });\n\n  const upcomingChallenges = challenges.filter(c => {\n    const now = new Date();\n    const startDate = new Date(c.startDate);\n    return now < startDate && c.isActive;\n  });\n\n  const completedChallenges = challenges.filter(c => {\n    const now = new Date();\n    const endDate = new Date(c.endDate);\n    return now > endDate || !c.isActive;\n  });\n\n  const getFilteredChallenges = () => {\n    switch (activeFilter) {\n      case 'active':\n        return activeChallenges;\n      case 'upcoming':\n        return upcomingChallenges;\n      case 'completed':\n        return completedChallenges;\n      default:\n        return challenges;\n    }\n  };\n\n  const filteredChallenges = getFilteredChallenges();\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900\">\n            Group Challenges\n          </h3>\n          <p className=\"text-sm text-gray-600\">\n            Compete with group members in productivity challenges\n          </p>\n        </div>\n        {isAdmin && (\n          <Button onClick={() => setShowCreateModal(true)}>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Create Challenge\n          </Button>\n        )}\n      </div>\n\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <div className=\"bg-blue-50 rounded-lg p-4 text-center\">\n          <div className=\"text-2xl font-bold text-blue-600\">\n            {activeChallenges.length}\n          </div>\n          <div className=\"text-sm text-blue-600\">Active</div>\n        </div>\n        <div className=\"bg-green-50 rounded-lg p-4 text-center\">\n          <div className=\"text-2xl font-bold text-green-600\">\n            {upcomingChallenges.length}\n          </div>\n          <div className=\"text-sm text-green-600\">Upcoming</div>\n        </div>\n        <div className=\"bg-purple-50 rounded-lg p-4 text-center\">\n          <div className=\"text-2xl font-bold text-purple-600\">\n            {completedChallenges.length}\n          </div>\n          <div className=\"text-sm text-purple-600\">Completed</div>\n        </div>\n        <div className=\"bg-orange-50 rounded-lg p-4 text-center\">\n          <div className=\"text-2xl font-bold text-orange-600\">\n            {participatingChallenges.size}\n          </div>\n          <div className=\"text-sm text-orange-600\">Participating</div>\n        </div>\n      </div>\n\n      {/* Filter Tabs */}\n      <div className=\"flex flex-wrap gap-2\">\n        {[\n          { key: 'all', label: 'All Challenges', count: challenges.length },\n          { key: 'active', label: 'Active', count: activeChallenges.length },\n          {\n            key: 'upcoming',\n            label: 'Upcoming',\n            count: upcomingChallenges.length,\n          },\n          {\n            key: 'completed',\n            label: 'Completed',\n            count: completedChallenges.length,\n          },\n        ].map(filter => (\n          <button\n            key={filter.key}\n            onClick={() => setActiveFilter(filter.key as any)}\n            className={`flex items-center gap-2 px-4 py-2 rounded-lg font-medium text-sm transition-colors ${\n              activeFilter === filter.key\n                ? 'bg-blue-100 text-blue-700 border border-blue-200'\n                : 'bg-gray-50 text-gray-600 hover:bg-gray-100 border border-transparent'\n            }`}\n          >\n            {filter.label}\n            <Badge variant=\"secondary\" className=\"ml-1\">\n              {filter.count}\n            </Badge>\n          </button>\n        ))}\n      </div>\n\n      {/* Challenges List */}\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <div\n              key={i}\n              className=\"bg-white rounded-lg border border-gray-200 p-6 animate-pulse\"\n            >\n              <div className=\"h-4 bg-gray-200 rounded mb-4\"></div>\n              <div className=\"h-3 bg-gray-200 rounded mb-2\"></div>\n              <div className=\"h-3 bg-gray-200 rounded mb-4\"></div>\n              <div className=\"h-8 bg-gray-200 rounded\"></div>\n            </div>\n          ))}\n        </div>\n      ) : filteredChallenges.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {filteredChallenges.map(challenge => (\n            <ChallengeCard\n              key={challenge.id}\n              challenge={challenge}\n              isParticipating={participatingChallenges.has(challenge.id)}\n              userProgress={userProgress[challenge.id]?.currentValue || 0}\n              onJoin={() => handleJoinChallenge(challenge.id)}\n              onLeave={() => handleLeaveChallenge(challenge.id)}\n              showActions={!!user}\n            />\n          ))}\n        </div>\n      ) : (\n        <div className=\"bg-white rounded-lg border border-gray-200 p-12 text-center\">\n          <Trophy className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n            {activeFilter === 'all'\n              ? 'No challenges yet'\n              : `No ${activeFilter} challenges`}\n          </h3>\n          <p className=\"text-gray-500 mb-6\">\n            {isAdmin\n              ? 'Create the first challenge for your group members to participate in.'\n              : 'Check back later for new challenges to join.'}\n          </p>\n          {isAdmin && activeFilter === 'all' && (\n            <Button onClick={() => setShowCreateModal(true)}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create First Challenge\n            </Button>\n          )}\n        </div>\n      )}\n\n      {/* Create Challenge Modal */}\n      <CreateChallengeModal\n        isOpen={showCreateModal}\n        onClose={() => setShowCreateModal(false)}\n        onSubmit={handleCreateChallenge}\n        groupId={group.id}\n        projects={projects || []}\n        isLoading={false}\n      />\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/GroupHeader.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 7,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Badge' is defined but never used.",
        "line": 8,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Calendar' is defined but never used.",
        "line": 15,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'MoreHorizontal' is defined but never used.",
        "line": 17,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Target' is defined but never used.",
        "line": 20,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ArrowLeft' is defined but never used.",
        "line": 21,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 12
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React from 'react';\nimport Image from 'next/image';\nimport { useRouter } from 'next/navigation';\nimport { Group, GroupStats } from '@/types';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport GroupAvatar from '@/components/GroupAvatar';\nimport {\n  Users,\n  MapPin,\n  Lock,\n  Globe,\n  Calendar,\n  Settings,\n  MoreHorizontal,\n  TrendingUp,\n  Clock,\n  Target,\n  ArrowLeft,\n  ChevronLeft,\n  MessageSquare,\n  UserPlus\n} from 'lucide-react';\n\ninterface GroupHeaderProps {\n  group: Group;\n  stats?: GroupStats;\n  currentUserId?: string;\n  isJoined?: boolean;\n  onJoin?: () => Promise<void>;\n  onLeave?: () => Promise<void>;\n  onSettings?: () => void;\n  onInvite?: () => void;\n  isLoading?: boolean;\n}\n\nconst categoryLabels = {\n  'work': 'Work',\n  'study': 'Study',\n  'side-project': 'Side Project',\n  'learning': 'Learning',\n  'other': 'Other'\n};\n\nconst typeLabels = {\n  'just-for-fun': 'Just for Fun',\n  'professional': 'Professional',\n  'competitive': 'Competitive',\n  'other': 'Other'\n};\n\nexport default function GroupHeader({\n  group,\n  stats,\n  currentUserId,\n  isJoined = false,\n  onJoin,\n  onLeave,\n  onSettings,\n  onInvite,\n  isLoading = false\n}: GroupHeaderProps) {\n  const router = useRouter();\n  const isAdmin = currentUserId && group.adminUserIds.includes(currentUserId);\n  const isCreator = currentUserId && group.createdByUserId === currentUserId;\n  const canJoin = currentUserId && !isJoined && !isAdmin;\n  const canLeave = currentUserId && isJoined && !isAdmin;\n\n  const handleJoin = async () => {\n    if (onJoin && canJoin) {\n      await onJoin();\n    }\n  };\n\n  const handleLeave = async () => {\n    if (onLeave && canLeave) {\n      await onLeave();\n    }\n  };\n\n  return (\n    <div className=\"bg-white md:bg-gray-50\">\n      {/* Mobile Back Button Header */}\n      <div className=\"md:hidden sticky top-0 bg-white border-b border-gray-200 px-4 py-3 z-50 flex items-center gap-3 shadow-sm\">\n        <button\n          onClick={() => router.back()}\n          className=\"p-2 -ml-2 hover:bg-gray-100 rounded-full transition-colors\"\n        >\n          <ChevronLeft className=\"w-6 h-6 text-gray-700\" />\n        </button>\n        <h1 className=\"text-lg font-bold text-gray-900 truncate flex-1\">{group.name}</h1>\n        {(isAdmin || isCreator) && (\n          <button\n            onClick={onSettings}\n            className=\"p-2 hover:bg-gray-100 rounded-full transition-colors\"\n          >\n            <Settings className=\"w-5 h-5 text-gray-600\" />\n          </button>\n        )}\n      </div>\n\n      {/* Content */}\n      <div className=\"md:max-w-4xl md:mx-auto md:pt-6\">\n        <div className=\"bg-white md:rounded-xl md:border md:border-gray-200 p-6\">\n          {/* Group Avatar and Name */}\n          <div className=\"flex items-start gap-4 mb-4\">\n            <GroupAvatar\n              imageUrl={group.imageUrl}\n              name={group.name}\n              size=\"xl\"\n              className=\"flex-shrink-0\"\n            />\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-start justify-between gap-2\">\n                <h1 className=\"text-2xl font-bold text-gray-900\">{group.name}</h1>\n                {(isAdmin || isCreator) && (\n                  <button\n                    onClick={onSettings}\n                    className=\"hidden md:block p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n                  >\n                    <Settings className=\"w-5 h-5 text-gray-600\" />\n                  </button>\n                )}\n              </div>\n              <p className=\"text-gray-600 text-sm mt-1\">{group.description}</p>\n            </div>\n          </div>\n\n          {/* Group Meta */}\n          <div className=\"flex flex-wrap items-center gap-3 mb-4 text-sm\">\n            <div className=\"flex items-center gap-1.5 text-gray-600\">\n              <Users className=\"w-4 h-4\" />\n              <span className=\"font-medium\">{group.memberCount} members</span>\n            </div>\n            {group.location && (\n              <div className=\"flex items-center gap-1.5 text-gray-600\">\n                <MapPin className=\"w-4 h-4\" />\n                <span>{group.location}</span>\n              </div>\n            )}\n            <div className=\"flex items-center gap-1.5\">\n              {group.privacySetting === 'public' ? (\n                <span className=\"inline-flex items-center gap-1 px-2 py-0.5 bg-green-100 text-green-700 rounded-md text-xs font-medium\">\n                  <Globe className=\"w-3 h-3\" />\n                  Public\n                </span>\n              ) : (\n                <span className=\"inline-flex items-center gap-1 px-2 py-0.5 bg-orange-100 text-orange-700 rounded-md text-xs font-medium\">\n                  <Lock className=\"w-3 h-3\" />\n                  Approval Required\n                </span>\n              )}\n            </div>\n          </div>\n\n          {/* Category and Type Tags */}\n          <div className=\"flex flex-wrap gap-2 mb-4\">\n            <span className=\"px-2.5 py-1 bg-gray-100 text-gray-700 rounded-lg text-xs font-medium\">\n              {categoryLabels[group.category]}\n            </span>\n            <span className=\"px-2.5 py-1 bg-gray-100 text-gray-700 rounded-lg text-xs font-medium\">\n              {typeLabels[group.type]}\n            </span>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex items-center gap-2\">\n            {isAdmin ? (\n              <>\n                <button\n                  disabled\n                  className=\"flex-1 py-3 px-4 bg-gray-100 text-gray-500 rounded-xl font-semibold text-sm\"\n                >\n                  Admin\n                </button>\n                {onInvite && (\n                  <button\n                    onClick={onInvite}\n                    className=\"py-3 px-4 bg-[#007AFF] hover:bg-[#0056D6] text-white rounded-xl font-semibold text-sm transition-colors flex items-center gap-2\"\n                  >\n                    <UserPlus className=\"w-4 h-4\" />\n                    Invite\n                  </button>\n                )}\n              </>\n            ) : canJoin ? (\n              <button\n                onClick={handleJoin}\n                disabled={isLoading}\n                className=\"flex-1 py-3 px-4 bg-[#007AFF] hover:bg-[#0056D6] text-white rounded-xl font-semibold text-sm transition-colors disabled:opacity-50\"\n              >\n                {group.privacySetting === 'public' ? 'Join Group' : 'Request to Join'}\n              </button>\n            ) : canLeave ? (\n              <>\n                <button\n                  onClick={handleLeave}\n                  disabled={isLoading}\n                  className=\"flex-1 py-3 px-4 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-xl font-semibold text-sm transition-colors disabled:opacity-50\"\n                >\n                  Leave Group\n                </button>\n                {onInvite && (\n                  <button\n                    onClick={onInvite}\n                    className=\"py-3 px-4 bg-[#007AFF] hover:bg-[#0056D6] text-white rounded-xl font-semibold text-sm transition-colors flex items-center gap-2\"\n                  >\n                    <UserPlus className=\"w-4 h-4\" />\n                    Invite\n                  </button>\n                )}\n              </>\n            ) : null}\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        {stats && (\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 mt-4 md:px-0 px-6\">\n            <div className=\"bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl p-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <div className=\"w-7 h-7 rounded-full bg-[#007AFF] flex items-center justify-center\">\n                  <Users className=\"w-4 h-4 text-white\" />\n                </div>\n                <span className=\"text-xs text-gray-600\">Active Members</span>\n              </div>\n              <div className=\"text-2xl font-bold text-gray-900\">{stats.activeMembers}</div>\n            </div>\n\n            <div className=\"bg-gradient-to-br from-green-50 to-green-100 rounded-xl p-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <div className=\"w-7 h-7 rounded-full bg-green-600 flex items-center justify-center\">\n                  <TrendingUp className=\"w-4 h-4 text-white\" />\n                </div>\n                <span className=\"text-xs text-gray-600\">Weekly Hours</span>\n              </div>\n              <div className=\"text-2xl font-bold text-gray-900\">{stats.weeklyHours.toFixed(1)}h</div>\n            </div>\n\n            <div className=\"bg-gradient-to-br from-purple-50 to-purple-100 rounded-xl p-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <div className=\"w-7 h-7 rounded-full bg-purple-600 flex items-center justify-center\">\n                  <Clock className=\"w-4 h-4 text-white\" />\n                </div>\n                <span className=\"text-xs text-gray-600\">Total Hours</span>\n              </div>\n              <div className=\"text-2xl font-bold text-gray-900\">{stats.totalHours.toFixed(1)}h</div>\n            </div>\n\n            <div className=\"bg-gradient-to-br from-orange-50 to-orange-100 rounded-xl p-4\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <div className=\"w-7 h-7 rounded-full bg-[#FC4C02] flex items-center justify-center\">\n                  <MessageSquare className=\"w-4 h-4 text-white\" />\n                </div>\n                <span className=\"text-xs text-gray-600\">Posts</span>\n              </div>\n              <div className=\"text-2xl font-bold text-gray-900\">{stats.totalPosts}</div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/GroupInviteLanding.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadGroup'. Either include it or remove the dependency array.",
        "line": 25,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 25,
        "endColumn": 15,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [groupId, loadGroup]",
            "fix": { "range": [807, 816], "text": "[groupId, loadGroup]" }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'checkMembershipAndRedirect'. Either include it or remove the dependency array.",
        "line": 32,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 32,
        "endColumn": 32,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [user, authLoading, group, checkMembershipAndRedirect]",
            "fix": {
              "range": [993, 1019],
              "text": "[user, authLoading, group, checkMembershipAndRedirect]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 73,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 73,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2059, 2062], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2059, 2062], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 190,
        "column": 17,
        "nodeType": "JSXOpeningElement",
        "endLine": 194,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Group } from '@/types';\nimport { firebaseApi } from '@/lib/api';\nimport { Users, MapPin, Loader2 } from 'lucide-react';\nimport Image from 'next/image';\n\ninterface GroupInviteLandingProps {\n  groupId: string;\n}\n\nexport default function GroupInviteLanding({ groupId }: GroupInviteLandingProps) {\n  const router = useRouter();\n  const { user, isLoading: authLoading } = useAuth();\n  const [group, setGroup] = useState<Group | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isJoining, setIsJoining] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    loadGroup();\n  }, [groupId]);\n\n  // If user is already logged in, check membership and redirect\n  useEffect(() => {\n    if (!authLoading && user && group) {\n      checkMembershipAndRedirect();\n    }\n  }, [user, authLoading, group]);\n\n  const loadGroup = async () => {\n    try {\n      setIsLoading(true);\n      const groupData = await firebaseApi.group.getGroup(groupId);\n      if (!groupData) {\n        setError('Group not found');\n        return;\n      }\n      setGroup(groupData);\n    } catch (err) {\n      console.error('Error loading group:', err);\n      setError('Failed to load group information');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const checkMembershipAndRedirect = async () => {\n    if (!user || !group) return;\n\n    // Check if user is already a member\n    if (group.memberIds.includes(user.id)) {\n      // Already a member, redirect to group\n      router.push(`/groups/${groupId}`);\n      return;\n    }\n\n    // Not a member, auto-join them\n    await handleJoinGroup();\n  };\n\n  const handleJoinGroup = async () => {\n    if (!user || !group) return;\n\n    try {\n      setIsJoining(true);\n      await firebaseApi.group.joinGroup(group.id, user.id);\n      // Redirect to group page\n      router.push(`/groups/${groupId}`);\n    } catch (err: any) {\n      console.error('Error joining group:', err);\n      setError(err.message || 'Failed to join group');\n    } finally {\n      setIsJoining(false);\n    }\n  };\n\n  const handleSignUp = () => {\n    // Store invite context in sessionStorage for post-signup redirect\n    if (typeof window !== 'undefined') {\n      sessionStorage.setItem('inviteContext', JSON.stringify({\n        type: 'group',\n        groupId: groupId,\n      }));\n    }\n    router.push('/signup');\n  };\n\n  const handleLogin = () => {\n    // Store invite context in sessionStorage for post-login redirect\n    if (typeof window !== 'undefined') {\n      sessionStorage.setItem('inviteContext', JSON.stringify({\n        type: 'group',\n        groupId: groupId,\n      }));\n    }\n    router.push('/login');\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'work':\n        return '💼';\n      case 'study':\n        return '📚';\n      case 'side-project':\n        return '💻';\n      case 'learning':\n        return '🎓';\n      default:\n        return '📌';\n    }\n  };\n\n  if (isLoading || authLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"w-12 h-12 animate-spin text-[#007AFF] mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Loading group...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !group) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center px-4\">\n        <div className=\"max-w-md w-full bg-white rounded-2xl shadow-xl p-8 text-center\">\n          <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <span className=\"text-3xl\">❌</span>\n          </div>\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Group Not Found</h1>\n          <p className=\"text-gray-600 mb-6\">\n            {error || \"The group you're looking for doesn't exist or has been deleted.\"}\n          </p>\n          <button\n            onClick={() => router.push('/')}\n            className=\"bg-[#007AFF] text-white px-6 py-3 rounded-lg hover:bg-[#0051D5] transition-colors font-medium\"\n          >\n            Go to Home\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  // If user is logged in and joining, show loading state\n  if (user && isJoining) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"w-12 h-12 animate-spin text-[#007AFF] mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Joining {group.name}...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show invite landing page for non-logged-in users\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center px-4 py-8\">\n      <div className=\"max-w-2xl w-full\">\n        {/* Logo */}\n        <div className=\"text-center mb-8\">\n          <div className=\"w-16 h-16 mx-auto mb-4\">\n            <Image\n              src=\"/logo.svg\"\n              alt=\"Ambira\"\n              width={64}\n              height={64}\n              className=\"w-16 h-16\"\n            />\n          </div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">\n            Join Ambira\n          </h1>\n        </div>\n\n        {/* Group Card */}\n        <div className=\"bg-white rounded-2xl shadow-xl overflow-hidden mb-6\">\n          {/* Group Header */}\n          <div className=\"bg-gradient-to-r from-[#007AFF] to-[#0051D5] px-8 py-12 text-center\">\n            {/* Group Avatar */}\n            <div className=\"w-24 h-24 mx-auto mb-4 bg-white rounded-full flex items-center justify-center\">\n              {group.imageUrl ? (\n                <img\n                  src={group.imageUrl}\n                  alt={group.name}\n                  className=\"w-full h-full rounded-full object-cover\"\n                />\n              ) : (\n                <Users className=\"w-12 h-12 text-[#007AFF]\" />\n              )}\n            </div>\n\n            <h2 className=\"text-3xl font-bold text-white mb-2\">\n              Join {group.name}\n            </h2>\n            <p className=\"text-blue-100 text-lg\">\n              on Ambira\n            </p>\n          </div>\n\n          {/* Group Details */}\n          <div className=\"px-8 py-6\">\n            {/* Description */}\n            {group.description && (\n              <div className=\"mb-6\">\n                <p className=\"text-gray-700 text-center leading-relaxed\">\n                  {group.description}\n                </p>\n              </div>\n            )}\n\n            {/* Meta Information */}\n            <div className=\"flex items-center justify-center gap-6 mb-8 text-sm text-gray-600\">\n              {/* Category */}\n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-xl\">{getCategoryIcon(group.category)}</span>\n                <span className=\"capitalize\">{group.category.replace('-', ' ')}</span>\n              </div>\n\n              {/* Member Count */}\n              <div className=\"flex items-center gap-2\">\n                <Users className=\"w-4 h-4\" />\n                <span>{group.memberCount} {group.memberCount === 1 ? 'member' : 'members'}</span>\n              </div>\n\n              {/* Location */}\n              {group.location && (\n                <div className=\"flex items-center gap-2\">\n                  <MapPin className=\"w-4 h-4\" />\n                  <span>{group.location}</span>\n                </div>\n              )}\n            </div>\n\n            {/* CTA Buttons */}\n            <div className=\"space-y-3\">\n              <button\n                onClick={handleSignUp}\n                className=\"w-full bg-[#007AFF] text-white px-6 py-4 rounded-lg hover:bg-[#0051D5] transition-colors font-semibold text-lg shadow-md hover:shadow-lg\"\n              >\n                Sign Up to Join {group.name}\n              </button>\n\n              <div className=\"text-center\">\n                <p className=\"text-sm text-gray-600\">\n                  Already have an account?{' '}\n                  <button\n                    onClick={handleLogin}\n                    className=\"text-[#007AFF] hover:underline font-medium\"\n                  >\n                    Log in\n                  </button>\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* What is Ambira section */}\n        <div className=\"bg-white/80 backdrop-blur rounded-xl p-6 text-center\">\n          <h3 className=\"font-semibold text-gray-900 mb-2\">What is Ambira?</h3>\n          <p className=\"text-gray-600 text-sm\">\n            Ambira is a social productivity tracking app that helps you track work sessions,\n            build streaks, and compete with friends. Think Strava, but for productivity.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/GroupInviteModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'err' is defined but never used.",
        "line": 48,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 48,
        "endColumn": 19
      },
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 167,
        "column": 17,
        "nodeType": "JSXOpeningElement",
        "endLine": 171,
        "endColumn": 19
      },
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 298,
        "column": 25,
        "nodeType": "JSXOpeningElement",
        "endLine": 302,
        "endColumn": 27
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useRef } from 'react';\nimport { Group } from '@/types';\nimport { X, Copy, Check, Share2, Download, QrCode, Image as ImageIcon } from 'lucide-react';\nimport { QRCodeCanvas } from 'qrcode.react';\n\ninterface GroupInviteModalProps {\n  group: Group;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\ntype ShareTab = 'link' | 'qr' | 'image';\n\nexport default function GroupInviteModal({ group, isOpen, onClose }: GroupInviteModalProps) {\n  const [copied, setCopied] = useState(false);\n  const [activeTab, setActiveTab] = useState<ShareTab>('link');\n  const qrCodeRef = useRef<HTMLDivElement>(null);\n  const inviteCardRef = useRef<HTMLDivElement>(null);\n\n  if (!isOpen) return null;\n\n  const baseUrl = typeof window !== 'undefined'\n    ? window.location.origin\n    : process.env.NEXT_PUBLIC_BASE_URL || 'https://ambira.com';\n\n  const inviteLink = `${baseUrl}/invite/group/${group.id}`;\n\n  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(inviteLink);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      console.error('Failed to copy:', err);\n    }\n  };\n\n  const handleShare = async () => {\n    if (navigator.share) {\n      try {\n        await navigator.share({\n          title: `Join ${group.name} on Ambira`,\n          text: `I'd like to invite you to join ${group.name} on Ambira!`,\n          url: inviteLink,\n        });\n      } catch (err) {\n        // User cancelled or error occurred\n      }\n    } else {\n      // Fallback to copy\n      handleCopy();\n    }\n  };\n\n  const handleDownloadQR = () => {\n    const canvas = qrCodeRef.current?.querySelector('canvas');\n    if (!canvas) return;\n\n    canvas.toBlob((blob) => {\n      if (!blob) return;\n      const url = URL.createObjectURL(blob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `${group.name.replace(/\\s+/g, '-').toLowerCase()}-qr-code.png`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      URL.revokeObjectURL(url);\n    });\n  };\n\n  const handleDownloadInviteCard = async () => {\n    if (!inviteCardRef.current) return;\n\n    try {\n      // Use html2canvas for better rendering\n      const html2canvas = (await import('html2canvas')).default;\n      const canvas = await html2canvas(inviteCardRef.current, {\n        backgroundColor: '#ffffff',\n        scale: 2,\n        logging: false,\n      });\n\n      canvas.toBlob((blob) => {\n        if (!blob) return;\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement('a');\n        link.href = url;\n        link.download = `${group.name.replace(/\\s+/g, '-').toLowerCase()}-invite.png`;\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n      });\n    } catch (err) {\n      console.error('Failed to download invite card:', err);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/50 backdrop-blur-sm\">\n      <div className=\"bg-white rounded-2xl shadow-2xl max-w-2xl w-full overflow-hidden max-h-[90vh] flex flex-col\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <h2 className=\"text-xl font-bold text-gray-900\">Invite People</h2>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n          >\n            <X className=\"w-5 h-5 text-gray-600\" />\n          </button>\n        </div>\n\n        {/* Tabs */}\n        <div className=\"border-b border-gray-200 px-6\">\n          <div className=\"flex gap-6\">\n            <button\n              onClick={() => setActiveTab('link')}\n              className={`pb-3 px-1 text-sm font-medium border-b-2 transition-colors ${\n                activeTab === 'link'\n                  ? 'border-[#007AFF] text-[#007AFF]'\n                  : 'border-transparent text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              <div className=\"flex items-center gap-2\">\n                <Copy className=\"w-4 h-4\" />\n                Link\n              </div>\n            </button>\n            <button\n              onClick={() => setActiveTab('qr')}\n              className={`pb-3 px-1 text-sm font-medium border-b-2 transition-colors ${\n                activeTab === 'qr'\n                  ? 'border-[#007AFF] text-[#007AFF]'\n                  : 'border-transparent text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              <div className=\"flex items-center gap-2\">\n                <QrCode className=\"w-4 h-4\" />\n                QR Code\n              </div>\n            </button>\n            <button\n              onClick={() => setActiveTab('image')}\n              className={`pb-3 px-1 text-sm font-medium border-b-2 transition-colors ${\n                activeTab === 'image'\n                  ? 'border-[#007AFF] text-[#007AFF]'\n                  : 'border-transparent text-gray-600 hover:text-gray-900'\n              }`}\n            >\n              <div className=\"flex items-center gap-2\">\n                <ImageIcon className=\"w-4 h-4\" />\n                Share Image\n              </div>\n            </button>\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6 space-y-6 overflow-y-auto\">\n          {/* Group Info */}\n          <div className=\"flex items-center gap-3 p-4 bg-gray-50 rounded-lg\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-[#007AFF] to-[#0051D5] rounded-full flex items-center justify-center flex-shrink-0\">\n              {group.imageUrl ? (\n                <img\n                  src={group.imageUrl}\n                  alt={group.name}\n                  className=\"w-full h-full rounded-full object-cover\"\n                />\n              ) : (\n                <span className=\"text-xl\">💼</span>\n              )}\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-semibold text-gray-900 truncate\">{group.name}</h3>\n              <p className=\"text-sm text-gray-600 truncate\">\n                {group.memberCount} {group.memberCount === 1 ? 'member' : 'members'}\n              </p>\n            </div>\n          </div>\n\n          {/* Tab Content */}\n          {activeTab === 'link' && (\n            <div className=\"space-y-4\">\n              {/* Invite Link */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Share this invite link\n                </label>\n                <div className=\"flex gap-2\">\n                  <input\n                    type=\"text\"\n                    value={inviteLink}\n                    readOnly\n                    className=\"flex-1 px-4 py-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-700 text-sm font-mono focus:outline-none focus:ring-2 focus:ring-[#007AFF]\"\n                    onClick={(e) => e.currentTarget.select()}\n                  />\n                  <button\n                    onClick={handleCopy}\n                    className=\"px-4 py-3 bg-[#007AFF] text-white rounded-lg hover:bg-[#0051D5] transition-colors flex items-center gap-2 font-medium whitespace-nowrap\"\n                  >\n                    {copied ? (\n                      <>\n                        <Check className=\"w-4 h-4\" />\n                        Copied\n                      </>\n                    ) : (\n                      <>\n                        <Copy className=\"w-4 h-4\" />\n                        Copy\n                      </>\n                    )}\n                  </button>\n                </div>\n              </div>\n\n              {/* Share Button (shows on mobile with Web Share API support) */}\n              {typeof navigator !== 'undefined' && typeof navigator.share !== 'undefined' && (\n                <button\n                  onClick={handleShare}\n                  className=\"w-full px-4 py-3 bg-gray-100 text-gray-900 rounded-lg hover:bg-gray-200 transition-colors flex items-center justify-center gap-2 font-medium\"\n                >\n                  <Share2 className=\"w-4 h-4\" />\n                  Share Link\n                </button>\n              )}\n\n              {/* Info Text */}\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <p className=\"text-sm text-blue-900\">\n                  Anyone with this link can join <strong>{group.name}</strong>. They'll need to sign up or log in to Ambira first.\n                </p>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'qr' && (\n            <div className=\"space-y-4\">\n              {/* QR Code */}\n              <div className=\"flex flex-col items-center\">\n                <div ref={qrCodeRef} className=\"p-6 bg-white border-2 border-gray-200 rounded-2xl\">\n                  <QRCodeCanvas\n                    value={inviteLink}\n                    size={256}\n                    level=\"H\"\n                    includeMargin={true}\n                    imageSettings={{\n                      src: '/logo.png',\n                      excavate: true,\n                      width: 40,\n                      height: 40,\n                    }}\n                  />\n                </div>\n                <p className=\"text-sm text-gray-600 mt-4 text-center\">\n                  Scan this QR code with a mobile device to join <strong>{group.name}</strong>\n                </p>\n              </div>\n\n              {/* Download Button */}\n              <button\n                onClick={handleDownloadQR}\n                className=\"w-full px-4 py-3 bg-[#007AFF] text-white rounded-lg hover:bg-[#0051D5] transition-colors flex items-center justify-center gap-2 font-medium\"\n              >\n                <Download className=\"w-4 h-4\" />\n                Download QR Code\n              </button>\n\n              {/* Info Text */}\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <p className=\"text-sm text-blue-900\">\n                  Share this QR code in presentations, posters, or print materials. Anyone can scan it to join your group.\n                </p>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'image' && (\n            <div className=\"space-y-4\">\n              {/* Invite Card Preview */}\n              <div className=\"flex flex-col items-center\">\n                <div\n                  ref={inviteCardRef}\n                  className=\"w-full max-w-lg bg-gradient-to-br from-[#007AFF] to-[#0051D5] rounded-2xl p-8 text-white\"\n                >\n                  {/* Logo/Branding */}\n                  <div className=\"text-center mb-6\">\n                    <h3 className=\"text-2xl font-bold mb-2\">Join us on Ambira</h3>\n                    <div className=\"h-1 w-16 bg-white/50 mx-auto rounded-full\"></div>\n                  </div>\n\n                  {/* Group Info */}\n                  <div className=\"bg-white/10 backdrop-blur-sm rounded-xl p-6 mb-6 text-center\">\n                    <div className=\"w-20 h-20 bg-white rounded-full flex items-center justify-center mx-auto mb-4\">\n                      {group.imageUrl ? (\n                        <img\n                          src={group.imageUrl}\n                          alt={group.name}\n                          className=\"w-full h-full rounded-full object-cover\"\n                        />\n                      ) : (\n                        <span className=\"text-4xl\">💼</span>\n                      )}\n                    </div>\n                    <h2 className=\"text-3xl font-bold mb-2\">{group.name}</h2>\n                    {group.description && (\n                      <p className=\"text-white/90 text-sm line-clamp-2 mb-3\">{group.description}</p>\n                    )}\n                    <div className=\"flex items-center justify-center gap-4 text-sm text-white/80\">\n                      <span>{group.memberCount} members</span>\n                      {group.location && (\n                        <>\n                          <span>•</span>\n                          <span>{group.location}</span>\n                        </>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* QR Code */}\n                  <div className=\"bg-white rounded-xl p-4 mb-4\">\n                    <QRCodeCanvas\n                      value={inviteLink}\n                      size={200}\n                      level=\"H\"\n                      style={{ width: '100%', height: 'auto' }}\n                    />\n                  </div>\n\n                  {/* Footer */}\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-white/80 mb-1\">Scan to join the group</p>\n                    <p className=\"text-xs text-white/60 font-mono break-all\">{inviteLink}</p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex gap-3\">\n                <button\n                  onClick={handleDownloadInviteCard}\n                  className=\"flex-1 px-4 py-3 bg-[#007AFF] text-white rounded-lg hover:bg-[#0051D5] transition-colors flex items-center justify-center gap-2 font-medium\"\n                >\n                  <Download className=\"w-4 h-4\" />\n                  Download Image\n                </button>\n                {typeof navigator !== 'undefined' && typeof navigator.share !== 'undefined' && (\n                  <button\n                    onClick={handleShare}\n                    className=\"flex-1 px-4 py-3 bg-gray-100 text-gray-900 rounded-lg hover:bg-gray-200 transition-colors flex items-center justify-center gap-2 font-medium\"\n                  >\n                    <Share2 className=\"w-4 h-4\" />\n                    Share\n                  </button>\n                )}\n              </div>\n\n              {/* Info Text */}\n              <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <p className=\"text-sm text-blue-900\">\n                  Download and share this invite card on social media, messaging apps, or email to invite people to join <strong>{group.name}</strong>.\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/GroupListItem.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/GroupSettings.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Select' is defined but never used.",
        "line": 9,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Switch' is defined but never used.",
        "line": 11,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Settings' is defined but never used.",
        "line": 13,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Users' is defined but never used.",
        "line": 14,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Upload' is defined but never used.",
        "line": 16,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'X' is defined but never used.",
        "line": 20,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport Image from 'next/image';\nimport { Group, UpdateGroupData, User } from '@/types';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport {\n  Settings,\n  Users,\n  Trash2,\n  Upload,\n  Save,\n  AlertTriangle,\n  Image as ImageIcon,\n  X,\n  ChevronLeft\n} from 'lucide-react';\nimport { useRouter } from 'next/navigation';\n\ninterface GroupSettingsProps {\n  group: Group;\n  admins: User[];\n  onUpdate: (data: UpdateGroupData) => Promise<void>;\n  onDelete: () => Promise<void>;\n  onAddAdmin: (userId: string) => Promise<void>;\n  onRemoveAdmin: (userId: string) => Promise<void>;\n  isLoading?: boolean;\n}\n\nconst categoryOptions = [\n  { value: 'work', label: 'Work' },\n  { value: 'study', label: 'Study' },\n  { value: 'side-project', label: 'Side Project' },\n  { value: 'learning', label: 'Learning' },\n  { value: 'other', label: 'Other' }\n];\n\nconst typeOptions = [\n  { value: 'just-for-fun', label: 'Just for Fun' },\n  { value: 'professional', label: 'Professional' },\n  { value: 'competitive', label: 'Competitive' },\n  { value: 'other', label: 'Other' }\n];\n\nexport default function GroupSettings({\n  group,\n  admins,\n  onUpdate,\n  onDelete,\n  onAddAdmin,\n  onRemoveAdmin,\n  isLoading = false\n}: GroupSettingsProps) {\n  const router = useRouter();\n  const [formData, setFormData] = useState<UpdateGroupData>({\n    name: group.name,\n    description: group.description,\n    category: group.category,\n    type: group.type,\n    privacySetting: group.privacySetting,\n    location: group.location || '',\n    imageUrl: group.imageUrl || '',\n    bannerUrl: group.bannerUrl || ''\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n  const [newAdminUsername, setNewAdminUsername] = useState('');\n\n  const handleInputChange = (field: keyof UpdateGroupData, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.name?.trim()) {\n      newErrors.name = 'Group name is required';\n    } else if (formData.name.length < 3) {\n      newErrors.name = 'Group name must be at least 3 characters';\n    } else if (formData.name.length > 50) {\n      newErrors.name = 'Group name must be less than 50 characters';\n    }\n\n    if (!formData.description?.trim()) {\n      newErrors.description = 'Group description is required';\n    } else if (formData.description.length < 10) {\n      newErrors.description = 'Description must be at least 10 characters';\n    } else if (formData.description.length > 500) {\n      newErrors.description = 'Description must be less than 500 characters';\n    }\n\n    if (formData.location && formData.location.length > 100) {\n      newErrors.location = 'Location must be less than 100 characters';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSave = async () => {\n    if (!validateForm()) {\n      return;\n    }\n\n    try {\n      await onUpdate(formData);\n    } catch (error) {\n      console.error('Error updating group:', error);\n    }\n  };\n\n  const handleImageUpload = (type: 'imageUrl' | 'bannerUrl', file: File) => {\n    // In a real implementation, you would upload the file to a storage service\n    const url = URL.createObjectURL(file);\n    handleInputChange(type, url);\n  };\n\n  const handleAddAdmin = async () => {\n    if (!newAdminUsername.trim()) return;\n    \n    try {\n      await onAddAdmin(newAdminUsername.trim());\n      setNewAdminUsername('');\n    } catch (error) {\n      console.error('Error adding admin:', error);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Mobile Header */}\n      <div className=\"md:hidden sticky top-0 bg-white border-b border-gray-200 px-4 py-3 z-50 flex items-center gap-3\">\n        <button\n          onClick={() => router.back()}\n          className=\"p-2 -ml-2 hover:bg-gray-100 rounded-full transition-colors\"\n        >\n          <ChevronLeft className=\"w-6 h-6 text-gray-700\" />\n        </button>\n        <h1 className=\"text-lg font-bold text-gray-900 flex-1\">Edit Group</h1>\n        <button\n          onClick={handleSave}\n          disabled={isLoading}\n          className=\"px-4 py-2 bg-[#007AFF] text-white rounded-lg font-semibold text-sm hover:bg-[#0056D6] transition-colors disabled:opacity-50\"\n        >\n          Save\n        </button>\n      </div>\n\n      {/* Desktop Header */}\n      <div className=\"hidden md:block bg-white border-b border-gray-200\">\n        <div className=\"max-w-4xl mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <button\n                onClick={() => router.back()}\n                className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n              >\n                <ChevronLeft className=\"w-6 h-6 text-gray-700\" />\n              </button>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Edit Group</h1>\n            </div>\n            <button\n              onClick={handleSave}\n              disabled={isLoading}\n              className=\"px-6 py-2.5 bg-[#007AFF] text-white rounded-xl font-semibold hover:bg-[#0056D6] transition-colors disabled:opacity-50\"\n            >\n              <Save className=\"w-4 h-4 inline mr-2\" />\n              Save Changes\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-4xl mx-auto px-4 md:px-6 py-6 space-y-4\">\n\n        {/* Basic Information */}\n        <div className=\"bg-white rounded-xl border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-bold text-gray-900 mb-4\">Basic Information</h3>\n        \n        <div className=\"space-y-4\">\n          {/* Group Name */}\n          <div>\n            <Label htmlFor=\"name\">Group Name *</Label>\n            <Input\n              id=\"name\"\n              value={formData.name || ''}\n              onChange={(e) => handleInputChange('name', e.target.value)}\n              className={errors.name ? 'border-red-500' : ''}\n            />\n            {errors.name && (\n              <p className=\"text-sm text-red-600 mt-1\">{errors.name}</p>\n            )}\n          </div>\n\n          {/* Description */}\n          <div>\n            <Label htmlFor=\"description\">Description *</Label>\n            <Textarea\n              id=\"description\"\n              value={formData.description || ''}\n              onChange={(e) => handleInputChange('description', e.target.value)}\n              rows={4}\n              className={errors.description ? 'border-red-500' : ''}\n            />\n            <div className=\"flex justify-between mt-1\">\n              {errors.description && (\n                <p className=\"text-sm text-red-600\">{errors.description}</p>\n              )}\n              <p className=\"text-sm text-gray-500 ml-auto\">\n                {(formData.description || '').length}/500\n              </p>\n            </div>\n          </div>\n\n          {/* Category and Type */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"category\">Category *</Label>\n              <select\n                id=\"category\"\n                value={formData.category || 'other'}\n                onChange={(e) => handleInputChange('category', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-transparent\"\n              >\n                {categoryOptions.map((option) => (\n                  <option key={option.value} value={option.value}>\n                    {option.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"type\">Type *</Label>\n              <select\n                id=\"type\"\n                value={formData.type || 'just-for-fun'}\n                onChange={(e) => handleInputChange('type', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-transparent\"\n              >\n                {typeOptions.map((option) => (\n                  <option key={option.value} value={option.value}>\n                    {option.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n\n          {/* Privacy Setting */}\n          <div>\n            <Label htmlFor=\"privacySetting\">Privacy Setting *</Label>\n            <select\n              id=\"privacySetting\"\n              value={formData.privacySetting || 'public'}\n              onChange={(e) => handleInputChange('privacySetting', e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-transparent\"\n            >\n              <option value=\"public\">Public - Anyone can join</option>\n              <option value=\"approval-required\">Approval Required - Admins must approve</option>\n            </select>\n          </div>\n\n          {/* Location */}\n          <div>\n            <Label htmlFor=\"location\">Location</Label>\n            <Input\n              id=\"location\"\n              value={formData.location || ''}\n              onChange={(e) => handleInputChange('location', e.target.value)}\n              placeholder=\"City, Country\"\n            />\n            {errors.location && (\n              <p className=\"text-sm text-red-600 mt-1\">{errors.location}</p>\n            )}\n          </div>\n          </div>\n        </div>\n\n        {/* Group Images */}\n        <div className=\"bg-white rounded-xl border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-bold text-gray-900 mb-4\">Group Images</h3>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          {/* Group Avatar */}\n          <div>\n            <Label>Group Avatar</Label>\n            <div className=\"mt-2\">\n              {formData.imageUrl ? (\n                <div className=\"relative w-20 h-20 rounded-lg overflow-hidden border\">\n                  <Image\n                    src={formData.imageUrl}\n                    alt=\"Group avatar\"\n                    fill\n                    className=\"object-cover\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => handleInputChange('imageUrl', '')}\n                    className=\"absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs hover:bg-red-600\"\n                  >\n                    ×\n                  </button>\n                </div>\n              ) : (\n                <label className=\"flex items-center justify-center w-20 h-20 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-gray-400\">\n                  <input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={(e) => {\n                      const file = e.target.files?.[0];\n                      if (file) handleImageUpload('imageUrl', file);\n                    }}\n                    className=\"hidden\"\n                  />\n                  <ImageIcon className=\"w-6 h-6 text-gray-400\" />\n                </label>\n              )}\n            </div>\n          </div>\n\n          {/* Group Banner */}\n          <div>\n            <Label>Group Banner</Label>\n            <div className=\"mt-2\">\n              {formData.bannerUrl ? (\n                <div className=\"relative w-full h-20 rounded-lg overflow-hidden border\">\n                  <Image\n                    src={formData.bannerUrl}\n                    alt=\"Group banner\"\n                    fill\n                    className=\"object-cover\"\n                  />\n                  <button\n                    type=\"button\"\n                    onClick={() => handleInputChange('bannerUrl', '')}\n                    className=\"absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs hover:bg-red-600\"\n                  >\n                    ×\n                  </button>\n                </div>\n              ) : (\n                <label className=\"flex items-center justify-center w-full h-20 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-gray-400\">\n                  <input\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={(e) => {\n                      const file = e.target.files?.[0];\n                      if (file) handleImageUpload('bannerUrl', file);\n                    }}\n                    className=\"hidden\"\n                  />\n                  <ImageIcon className=\"w-6 h-6 text-gray-400\" />\n                </label>\n              )}\n            </div>\n          </div>\n          </div>\n        </div>\n\n        {/* Administrators */}\n        <div className=\"bg-white rounded-xl border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-bold text-gray-900 mb-4\">Administrators</h3>\n        \n        {/* Current Admins */}\n        <div className=\"space-y-3 mb-4\">\n          {admins.map((admin) => (\n            <div key={admin.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-blue-400 to-purple-500 flex items-center justify-center text-white text-sm font-medium\">\n                  {admin.name.charAt(0).toUpperCase()}\n                </div>\n                <div>\n                  <p className=\"font-medium text-gray-900\">{admin.name}</p>\n                  <p className=\"text-sm text-gray-500\">@{admin.username}</p>\n                </div>\n              </div>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => onRemoveAdmin(admin.id)}\n                disabled={admins.length === 1} // Can't remove the last admin\n              >\n                Remove\n              </Button>\n            </div>\n          ))}\n        </div>\n\n        {/* Add New Admin */}\n        <div className=\"flex gap-2\">\n          <Input\n            placeholder=\"Enter username to add as admin\"\n            value={newAdminUsername}\n            onChange={(e) => setNewAdminUsername(e.target.value)}\n          />\n          <Button onClick={handleAddAdmin} disabled={!newAdminUsername.trim()}>\n            Add Admin\n          </Button>\n          </div>\n        </div>\n\n        {/* Danger Zone */}\n        <div className=\"bg-white rounded-xl border border-red-200 p-6\">\n          <h3 className=\"text-lg font-bold text-red-900 mb-4\">Danger Zone</h3>\n        \n        <div className=\"flex items-center justify-between p-4 bg-red-50 rounded-lg\">\n          <div>\n            <h4 className=\"font-medium text-red-900\">Delete Group</h4>\n            <p className=\"text-sm text-red-700 mt-1\">\n              Once you delete a group, there is no going back. Please be certain.\n            </p>\n          </div>\n          <Button\n            variant=\"destructive\"\n            onClick={() => setShowDeleteConfirm(true)}\n          >\n            <Trash2 className=\"w-4 h-4 mr-2\" />\n            Delete Group\n          </Button>\n        </div>\n\n        {showDeleteConfirm && (\n          <div className=\"mt-4 p-4 bg-red-50 border border-red-200 rounded-lg\">\n            <div className=\"flex items-start gap-3\">\n              <AlertTriangle className=\"w-5 h-5 text-red-600 mt-0.5\" />\n              <div className=\"flex-1\">\n                <h4 className=\"font-medium text-red-900\">Are you absolutely sure?</h4>\n                <p className=\"text-sm text-red-700 mt-1\">\n                  This action cannot be undone. This will permanently delete the group and remove all associated data.\n                </p>\n                <div className=\"flex gap-2 mt-3\">\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={onDelete}\n                    disabled={isLoading}\n                  >\n                    Yes, delete the group\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setShowDeleteConfirm(false)}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/GroupTabs.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Button' is defined but never used.",
        "line": 4,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ChevronDown' is defined but never used.",
        "line": 10,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'groupId' is defined but never used.",
        "line": 60,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 60,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isAdmin' is assigned a value but never used.",
        "line": 62,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 62,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isMobileMenuOpen' is assigned a value but never used.",
        "line": 64,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 64,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setIsMobileMenuOpen' is assigned a value but never used.",
        "line": 64,
        "column": 28,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 64,
        "endColumn": 47
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { \n  MessageSquare, \n  Users, \n  Trophy, \n  Target,\n  ChevronDown,\n  BarChart3\n} from 'lucide-react';\n\nexport type GroupTab = 'posts' | 'members' | 'challenges' | 'leaderboard' | 'analytics' | 'about';\n\ninterface GroupTabsProps {\n  activeTab: GroupTab;\n  onTabChange: (tab: GroupTab) => void;\n  groupId: string;\n  memberCount: number;\n  isAdmin?: boolean;\n}\n\nconst tabConfig = {\n  posts: {\n    label: 'Posts',\n    icon: MessageSquare,\n    description: 'Group discussions and updates'\n  },\n  members: {\n    label: 'Members',\n    icon: Users,\n    description: 'Group members and their activity'\n  },\n  challenges: {\n    label: 'Challenges',\n    icon: Target,\n    description: 'Group challenges and competitions'\n  },\n  leaderboard: {\n    label: 'Leaderboard',\n    icon: Trophy,\n    description: 'Member rankings and achievements'\n  },\n  analytics: {\n    label: 'Analytics',\n    icon: BarChart3,\n    description: 'Group statistics and insights'\n  },\n  about: {\n    label: 'About',\n    icon: MessageSquare,\n    description: 'Group information and details'\n  }\n};\n\nexport default function GroupTabs({ \n  activeTab, \n  onTabChange, \n  groupId, \n  memberCount,\n  isAdmin = false \n}: GroupTabsProps) {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const tabs = Object.entries(tabConfig) as [GroupTab, typeof tabConfig[GroupTab]][];\n\n  return (\n    <div className=\"sticky top-12 md:top-0 bg-white border-b border-gray-200 z-30\">\n      <div className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8\">\n        {/* Tabs - Responsive */}\n        <div className=\"flex md:gap-8\">\n          <nav className=\"flex md:space-x-8 overflow-x-auto scrollbar-hide\" aria-label=\"Group tabs\">\n            {tabs.map(([tabKey, config]) => {\n              const Icon = config.icon;\n              const isActive = activeTab === tabKey;\n              \n              return (\n                <button\n                  key={tabKey}\n                  onClick={() => onTabChange(tabKey)}\n                  className={`\n                    flex-1 md:flex-initial flex items-center justify-center gap-2 py-3 md:py-4 px-1 text-sm md:text-base font-medium border-b-2 transition-colors whitespace-nowrap\n                    ${isActive \n                      ? 'border-[#007AFF] text-[#007AFF] md:text-gray-900' \n                      : 'border-transparent text-gray-500 md:text-gray-600 hover:text-gray-700 md:hover:text-gray-900'\n                    }\n                  `}\n                >\n                  <Icon className=\"w-4 h-4 md:inline hidden\" />\n                  {config.label}\n                  {tabKey === 'members' && (\n                    <span className=\"ml-1 bg-gray-100 text-gray-600 text-xs px-2 py-0.5 rounded-full\">\n                      {memberCount}\n                    </span>\n                  )}\n                </button>\n              );\n            })}\n          </nav>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/HeaderComponent.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/HeatmapCalendar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/IconRenderer.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 25,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 25,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [982, 985], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [982, 985], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport * as Icons from 'lucide-react';\nimport { Icon } from '@iconify/react';\n\ninterface IconRendererProps {\n  iconName: string;\n  className?: string;\n  size?: number;\n  style?: React.CSSProperties;\n}\n\n/**\n * Dynamically renders an icon based on the icon name string\n * Supports both Iconify icons (e.g., \"flat-color-icons:briefcase\") and legacy Lucide icons (e.g., \"Briefcase\")\n * Falls back to Briefcase icon if the icon name is not found\n */\nexport const IconRenderer: React.FC<IconRendererProps> = ({ iconName, className = '', size = 24, style }) => {\n  // Check if it's an Iconify icon (contains a colon, e.g., \"flat-color-icons:briefcase\")\n  if (iconName && iconName.includes(':')) {\n    return <Icon icon={iconName} width={size} height={size} className={className} style={style} />;\n  }\n\n  // Legacy Lucide icon support (e.g., \"Briefcase\")\n  // If iconName is empty or invalid, fall back to Briefcase\n  const IconComponent = (iconName && (Icons as any)[iconName]) || Icons.Briefcase;\n  return <IconComponent className={className} size={size} style={style} />;\n};\n\nexport default IconRenderer;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/IconSelector.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ImageGallery.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ImageLightbox.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ImageUpload.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'showTypeHint' is assigned a value but never used.",
        "line": 104,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 104,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useRef } from 'react';\nimport Image from 'next/image';\nimport { ImageIcon, X, AlertCircle, Loader2 } from 'lucide-react';\n\ninterface DeleteConfirmProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onDelete: () => void;\n}\n\nconst DeleteConfirm: React.FC<DeleteConfirmProps> = ({\n  isOpen,\n  onClose,\n  onDelete,\n}) => {\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div\n        className=\"fixed inset-0 bg-black/60 z-50 md:hidden flex items-center justify-center p-4\"\n        onClick={onClose}\n      >\n        {/* Modal */}\n        <div\n          className=\"bg-white rounded-lg p-5 w-full max-w-sm shadow-xl\"\n          onClick={e => e.stopPropagation()}\n        >\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n            Delete Image?\n          </h3>\n          <p className=\"text-sm text-gray-600 mb-6\">\n            This image will be removed from your session.\n          </p>\n\n          <div className=\"flex gap-3\">\n            <button\n              onClick={onClose}\n              className=\"flex-1 px-4 py-2.5 bg-gray-200 text-gray-800 rounded-lg font-medium hover:bg-gray-300 active:bg-gray-300 transition-colors\"\n            >\n              Cancel\n            </button>\n            <button\n              onClick={() => {\n                onDelete();\n                onClose();\n              }}\n              className=\"flex-1 px-4 py-2.5 bg-red-600 text-white rounded-lg font-medium hover:bg-red-700 active:bg-red-700 transition-colors\"\n            >\n              Delete\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\ninterface ImageUploadProps {\n  /** Maximum number of images allowed */\n  maxImages?: number;\n  /** Maximum file size in MB */\n  maxSizeMB?: number;\n  /** Accepted file types (e.g., ['image/jpeg', 'image/png']) */\n  acceptedTypes?: string[];\n  /** Show accepted types hint */\n  showTypeHint?: boolean;\n  /** Current images (for controlled component) */\n  images?: File[];\n  /** Preview URLs (for controlled component) */\n  previewUrls?: string[];\n  /** Callback when images change */\n  onImagesChange?: (images: File[], previewUrls: string[]) => void;\n  /** Upload mode: 'instant' uploads immediately, 'deferred' waits for form submission */\n  uploadMode?: 'instant' | 'deferred';\n  /** Upload function for instant mode */\n  onUpload?: (files: File[]) => Promise<string[]>;\n  /** Label text */\n  label?: string;\n  /** Show upload progress */\n  showProgress?: boolean;\n  /** Custom placeholder text */\n  placeholder?: string;\n  /** Disabled state */\n  disabled?: boolean;\n  /** Show as single image picker (for profile pictures) */\n  singleImage?: boolean;\n}\n\nexport const ImageUpload: React.FC<ImageUploadProps> = ({\n  maxImages = 3,\n  maxSizeMB = 5,\n  acceptedTypes = [\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n    'image/heic',\n    'image/heif',\n  ],\n  showTypeHint = true,\n  images = [],\n  previewUrls = [],\n  onImagesChange,\n  uploadMode = 'deferred',\n  onUpload,\n  label,\n  showProgress = true,\n  placeholder,\n  disabled = false,\n  singleImage = false,\n}) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [error, setError] = useState<string>('');\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState<number>(0);\n  const [actionSheetIndex, setActionSheetIndex] = useState<number | null>(null);\n\n  const maxSize = maxSizeMB * 1024 * 1024;\n  const effectiveMaxImages = singleImage ? 1 : maxImages;\n\n  const formatFileTypes = () => {\n    const types = acceptedTypes.map(type => {\n      const ext = type.split('/')[1]?.toUpperCase();\n      if (ext === 'JPEG') return 'JPG';\n      return ext;\n    });\n    return types.join(', ');\n  };\n\n  const validateFile = (file: File): { valid: boolean; error?: string } => {\n    // Check file size\n    if (file.size > maxSize) {\n      const sizeMB = (file.size / 1024 / 1024).toFixed(1);\n      return {\n        valid: false,\n        error: `\"${file.name}\" is too large (${sizeMB}MB). Maximum size is ${maxSizeMB}MB.`,\n      };\n    }\n\n    // Check file type\n    const isHeic =\n      file.type === 'image/heic' ||\n      file.type === 'image/heif' ||\n      file.name.toLowerCase().endsWith('.heic') ||\n      file.name.toLowerCase().endsWith('.heif');\n\n    if (\n      !acceptedTypes.includes(file.type) &&\n      !isHeic &&\n      !file.type.startsWith('image/')\n    ) {\n      return {\n        valid: false,\n        error: `\"${file.name}\" is not a supported file type. Please use ${formatFileTypes()}.`,\n      };\n    }\n\n    return { valid: true };\n  };\n\n  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    setError('');\n\n    if (files.length + images.length > effectiveMaxImages) {\n      setError(\n        `Maximum ${effectiveMaxImages} ${effectiveMaxImages === 1 ? 'image' : 'images'} allowed`\n      );\n      return;\n    }\n\n    const validFiles: File[] = [];\n    const newPreviewUrls: string[] = [];\n\n    // Validate each file\n    for (const file of files) {\n      const validation = validateFile(file);\n      if (!validation.valid) {\n        setError(validation.error || 'Invalid file');\n        continue;\n      }\n\n      validFiles.push(file);\n\n      // Create preview URL\n      const previewUrl = URL.createObjectURL(file);\n      newPreviewUrls.push(previewUrl);\n    }\n\n    if (validFiles.length === 0) {\n      return;\n    }\n\n    // Handle instant upload mode\n    if (uploadMode === 'instant' && onUpload) {\n      try {\n        setIsUploading(true);\n        setUploadProgress(0);\n\n        // Simulate progress (you can replace with actual upload progress)\n        const progressInterval = setInterval(() => {\n          setUploadProgress(prev => Math.min(prev + 10, 90));\n        }, 200);\n\n        const uploadedUrls = await onUpload(validFiles);\n\n        clearInterval(progressInterval);\n        setUploadProgress(100);\n\n        // Call onChange with uploaded URLs (you might want to handle this differently)\n        onImagesChange?.(\n          [...images, ...validFiles],\n          [...previewUrls, ...uploadedUrls]\n        );\n\n        setTimeout(() => {\n          setIsUploading(false);\n          setUploadProgress(0);\n        }, 500);\n      } catch (err: unknown) {\n        setError((err as Error).message || 'Failed to upload images');\n        setIsUploading(false);\n        setUploadProgress(0);\n        // Clean up preview URLs on error\n        newPreviewUrls.forEach(url => URL.revokeObjectURL(url));\n      }\n    } else {\n      // Deferred mode - just store files and previews\n      onImagesChange?.(\n        [...images, ...validFiles],\n        [...previewUrls, ...newPreviewUrls]\n      );\n    }\n\n    // Reset file input\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const handleRemoveImage = (index: number) => {\n    const newImages = images.filter((_, i) => i !== index);\n    const newPreviewUrls = previewUrls.filter((_, i) => {\n      if (i === index) {\n        // Revoke object URL to free memory\n        const url = previewUrls[i];\n        if (url) {\n          URL.revokeObjectURL(url);\n        }\n        return false;\n      }\n      return true;\n    });\n\n    onImagesChange?.(newImages, newPreviewUrls);\n    setError('');\n  };\n\n  const getPlaceholderText = () => {\n    if (placeholder) return placeholder;\n    if (singleImage) return 'Upload profile picture';\n    if (previewUrls.length === 0) return 'Add images';\n    return `Add ${effectiveMaxImages - previewUrls.length} more`;\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      {label && (\n        <label className=\"block text-sm font-medium text-gray-700\">\n          {label}\n        </label>\n      )}\n\n      {/* Error Message */}\n      {error && (\n        <div className=\"flex items-center gap-2 p-3 bg-red-50 border border-red-200 rounded-lg text-sm text-red-700\">\n          <AlertCircle className=\"w-4 h-4 flex-shrink-0\" />\n          <span>{error}</span>\n        </div>\n      )}\n\n      {/* Image Previews */}\n      {previewUrls.length > 0 && (\n        <div\n          className={`grid gap-2 ${singleImage ? 'grid-cols-1' : 'grid-cols-3'}`}\n        >\n          {previewUrls.map((url, index) => (\n            <div\n              key={index}\n              className={`relative rounded-lg overflow-hidden bg-gray-100 ${\n                singleImage ? 'aspect-square max-w-[200px]' : 'aspect-square'\n              }`}\n            >\n              <Image\n                src={url}\n                alt={`Preview ${index + 1}`}\n                width={300}\n                height={300}\n                quality={90}\n                className=\"w-full h-full object-cover\"\n                unoptimized\n                onClick={() => !disabled && setActionSheetIndex(index)}\n              />\n              {!disabled && (\n                <>\n                  {/* Desktop X button */}\n                  <button\n                    type=\"button\"\n                    onClick={() => handleRemoveImage(index)}\n                    className=\"hidden md:block absolute top-1 right-1 p-0.5 text-white hover:text-red-500 transition-colors\"\n                    aria-label=\"Remove image\"\n                    style={{\n                      filter: 'drop-shadow(0 1px 2px rgb(0 0 0 / 0.9))',\n                    }}\n                  >\n                    <X className=\"w-5 h-5\" strokeWidth={3} />\n                  </button>\n\n                  {/* Mobile tap indicator */}\n                  <div className=\"md:hidden absolute inset-0 flex items-center justify-center pointer-events-none\">\n                    <div className=\"opacity-0 hover:opacity-100 transition-opacity\">\n                      <div className=\"bg-black/20 rounded-full p-2\">\n                        <X className=\"w-6 h-6 text-white\" strokeWidth={2} />\n                      </div>\n                    </div>\n                  </div>\n                </>\n              )}\n              {/* File size indicator */}\n              {images[index] && (\n                <div className=\"absolute bottom-1 left-1 px-2 py-0.5 bg-black/60 text-white text-xs rounded\">\n                  {(images[index].size / 1024 / 1024).toFixed(1)}MB\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Delete confirmation modal */}\n      <DeleteConfirm\n        isOpen={actionSheetIndex !== null}\n        onClose={() => setActionSheetIndex(null)}\n        onDelete={() => {\n          if (actionSheetIndex !== null) {\n            handleRemoveImage(actionSheetIndex);\n            setActionSheetIndex(null);\n          }\n        }}\n      />\n\n      {/* Upload Progress */}\n      {isUploading && showProgress && (\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between text-sm text-gray-600\">\n            <span>Uploading...</span>\n            <span>{uploadProgress}%</span>\n          </div>\n          <div className=\"h-2 bg-gray-200 rounded-full overflow-hidden\">\n            <div\n              className=\"h-full bg-blue-500 transition-all duration-300 ease-out\"\n              style={{ width: `${uploadProgress}%` }}\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Upload Button */}\n      {previewUrls.length < effectiveMaxImages && !disabled && (\n        <label\n          className={`flex flex-col items-center justify-center gap-2 px-8 py-8 border-[3px] border-dashed rounded-lg cursor-pointer transition-colors max-w-[240px] ${\n            isUploading\n              ? 'border-blue-300 bg-blue-50 cursor-not-allowed'\n              : 'border-[#007AFF] hover:border-[#0051D5] hover:bg-gray-50'\n          }`}\n        >\n          {isUploading ? (\n            <>\n              <Loader2 className=\"w-8 h-8 text-blue-500 animate-spin\" />\n              <span className=\"text-sm font-medium text-blue-600\">\n                Uploading...\n              </span>\n            </>\n          ) : (\n            <>\n              <ImageIcon className=\"w-8 h-8 text-[#007AFF]\" />\n              <span className=\"text-sm font-medium text-[#007AFF]\">\n                {getPlaceholderText()}\n              </span>\n            </>\n          )}\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            accept={acceptedTypes.join(',') + ',.heic,.heif'}\n            multiple={!singleImage}\n            onChange={handleFileSelect}\n            className=\"hidden\"\n            disabled={disabled || isUploading}\n          />\n        </label>\n      )}\n\n      {/* Helper text for max images */}\n      {!singleImage &&\n        previewUrls.length > 0 &&\n        previewUrls.length < effectiveMaxImages && (\n          <p className=\"text-xs text-gray-500 text-center\">\n            {previewUrls.length} of {effectiveMaxImages} images selected\n          </p>\n        )}\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/LandingPage.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'user' is assigned a value but never used.",
        "line": 13,
        "column": 44,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 48
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isAuthenticated' is assigned a value but never used.",
        "line": 13,
        "column": 50,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 65
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'authIsLoading' is assigned a value but never used.",
        "line": 13,
        "column": 78,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 91
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 42,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 42,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1770, 1773], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1770, 1773], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'handleLoginWithEmail' is assigned a value but never used.",
        "line": 54,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 54,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 110,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 110,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3776, 3779], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3776, 3779], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 176,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 176,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 176,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 176,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5933, 5936], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5933, 5936], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 247,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 247,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8465, 8468], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8465, 8468], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'carouselIndex' is assigned a value but never used.",
        "line": 265,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 265,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setCarouselIndex' is assigned a value but never used.",
        "line": 265,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 265,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'benefits' is assigned a value but never used.",
        "line": 267,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 267,
        "endColumn": 17
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 12,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { useAuth } from '@/hooks/useAuth';\nimport { SignupCredentials } from '@/types';\nimport { firebaseUserApi } from '@/lib/api';\nimport Header from './HeaderComponent';\nimport PWAInstallPrompt from './PWAInstallPrompt';\n\nexport const LandingPage: React.FC = () => {\n  const { login, signup, signInWithGoogle, user, isAuthenticated, isLoading: authIsLoading } = useAuth();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [showSignup, setShowSignup] = useState(false);\n  const [showLogin, setShowLogin] = useState(false);\n  const [loginData, setLoginData] = useState({\n    email: '',\n    password: '',\n  });\n  const [signupData, setSignupData] = useState<SignupCredentials>({\n    email: '',\n    password: '',\n    name: '',\n    username: '',\n  });\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [signupErrors, setSignupErrors] = useState<Partial<SignupCredentials & { confirmPassword: string }>>({});\n  const [loginErrors, setLoginErrors] = useState<{email?: string; password?: string}>({});\n  const [usernameCheckLoading, setUsernameCheckLoading] = useState(false);\n  const [usernameAvailable, setUsernameAvailable] = useState<boolean | null>(null);\n\n  const handleGoogleSignIn = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      await signInWithGoogle();\n      // Navigation is handled by AuthContext after successful authentication\n      // No need to manually navigate here - AuthContext will update isAuthenticated\n      // and the page component will automatically show the authenticated view\n    } catch (err: any) {\n      console.error('Google sign-in error:', err);\n      // Don't show error or clear loading if redirect is in progress\n      // (user is being redirected to Google)\n      if (err?.message !== 'REDIRECT_IN_PROGRESS') {\n        setError(err?.message || 'Failed to sign in with Google. Please try again.');\n        setIsLoading(false);\n      }\n      // If REDIRECT_IN_PROGRESS, keep loading state - browser will redirect\n    }\n  };\n\n  const handleLoginWithEmail = () => {\n    setShowLogin(true);\n    setError(null);\n  };\n\n  const handleSignupWithEmail = () => {\n    setShowSignup(true);\n    setError(null);\n  };\n\n  const handleLoginChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setLoginData(prev => ({ ...prev, [name]: value }));\n    \n    // Clear field-specific error when user starts typing\n    if (loginErrors[name as keyof typeof loginErrors]) {\n      setLoginErrors(prev => ({ ...prev, [name]: undefined }));\n    }\n    \n    // Clear submit error\n    if (error) {\n      setError('');\n    }\n  };\n\n  const validateLoginForm = (): boolean => {\n    const newErrors: {email?: string; password?: string} = {};\n\n    if (!loginData.email) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(loginData.email)) {\n      newErrors.email = 'Email is invalid';\n    }\n\n    if (!loginData.password) {\n      newErrors.password = 'Password is required';\n    }\n\n    setLoginErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleLoginSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateLoginForm()) {\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n      await login(loginData);\n      // Navigation is handled by AuthContext after successful authentication\n      // No need to manually navigate here - AuthContext will update isAuthenticated\n      // and the page component will automatically show the authenticated view\n    } catch (err: any) {\n      console.error('Login error:', err);\n\n      // Handle specific Firebase errors with user-friendly messages\n      if (err.message?.includes('auth/user-not-found')) {\n        setError('No account found with this email address. Please sign up or check your email.');\n      } else if (err.message?.includes('auth/wrong-password')) {\n        setError('Incorrect password. Please try again.');\n      } else if (err.message?.includes('auth/invalid-email')) {\n        setError('Please enter a valid email address.');\n      } else if (err.message?.includes('auth/too-many-requests')) {\n        setError('Too many failed attempts. Please try again later.');\n      } else {\n        setError('Failed to sign in. Please check your credentials and try again.');\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSignupChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    if (name === 'confirmPassword') {\n      setConfirmPassword(value);\n    } else {\n      setSignupData(prev => ({ ...prev, [name]: value }));\n    }\n\n    // Clear field-specific error when user starts typing\n    if (signupErrors[name as keyof (SignupCredentials & { confirmPassword: string })]) {\n      setSignupErrors(prev => ({ ...prev, [name]: undefined }));\n    }\n\n    // Clear submit error\n    if (error) {\n      setError('');\n    }\n\n    // Reset username availability when username changes\n    if (name === 'username') {\n      setUsernameAvailable(null);\n    }\n  };\n\n  // Debounced username availability check\n  useEffect(() => {\n    const checkUsername = async () => {\n      const username = signupData.username.trim();\n\n      // Only check if username meets minimum requirements\n      if (username.length < 3) {\n        setUsernameAvailable(null);\n        return;\n      }\n\n      // Validate username format\n      if (!/^[a-zA-Z0-9_]+$/.test(username)) {\n        setUsernameAvailable(null);\n        return;\n      }\n\n      setUsernameCheckLoading(true);\n      try {\n        const available = await firebaseUserApi.checkUsernameAvailability(username);\n        setUsernameAvailable(available);\n      } catch (error: any) {\n        // Set to null to indicate check couldn't be completed\n        // Registration will still proceed with server-side validation\n        setUsernameAvailable(null);\n      } finally {\n        setUsernameCheckLoading(false);\n      }\n    };\n\n    // Debounce: wait 1000ms after user stops typing\n    const timeoutId = setTimeout(checkUsername, 1000);\n    return () => clearTimeout(timeoutId);\n  }, [signupData.username]);\n\n  const validateSignupForm = (): boolean => {\n    const newErrors: Partial<SignupCredentials & { confirmPassword: string }> = {};\n\n    if (!signupData.name.trim()) {\n      newErrors.name = 'Name is required';\n    } else if (signupData.name.trim().length < 2) {\n      newErrors.name = 'Name must be at least 2 characters';\n    }\n\n    if (!signupData.username.trim()) {\n      newErrors.username = 'Username is required';\n    } else if (signupData.username.trim().length < 3) {\n      newErrors.username = 'Username must be at least 3 characters';\n    } else if (!/^[a-zA-Z0-9_]+$/.test(signupData.username.trim())) {\n      newErrors.username = 'Username can only contain letters, numbers, and underscores';\n    } else if (usernameAvailable === false) {\n      newErrors.username = 'Username is already taken';\n    } else if (usernameCheckLoading) {\n      newErrors.username = 'Checking username availability...';\n    }\n\n    if (!signupData.email) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(signupData.email)) {\n      newErrors.email = 'Email is invalid';\n    }\n\n    if (!signupData.password) {\n      newErrors.password = 'Password is required';\n    } else if (signupData.password.length < 6) {\n      newErrors.password = 'Password must be at least 6 characters';\n    }\n\n    if (!confirmPassword) {\n      newErrors.confirmPassword = 'Please confirm your password';\n    } else if (signupData.password !== confirmPassword) {\n      newErrors.confirmPassword = 'Passwords do not match';\n    }\n\n    setSignupErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSignupSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateSignupForm()) {\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n      await signup(signupData);\n      // Navigation is handled by AuthContext after successful authentication\n      // No need to manually navigate here - AuthContext will update isAuthenticated\n      // and the page component will automatically show the authenticated view\n    } catch (err: any) {\n      console.error('Signup error:', err);\n\n      // Handle specific Firebase errors with user-friendly messages\n      if (err.message?.includes('auth/email-already-in-use')) {\n        setError('This email address is already registered. Please try logging in instead or use a different email.');\n      } else if (err.message?.includes('auth/weak-password')) {\n        setError('Password is too weak. Please choose a stronger password with at least 6 characters.');\n      } else if (err.message?.includes('auth/invalid-email')) {\n        setError('Please enter a valid email address.');\n      } else {\n        setError('Failed to create account. Please try again.');\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const [carouselIndex, setCarouselIndex] = useState(0);\n\n  const benefits = [\n    {\n      title: \"Track your active life in one place\",\n      description: \"Record all your productivity sessions and track your progress over time\",\n      image: \"📊\"\n    },\n    {\n      title: \"Stay motivated with friends\",\n      description: \"Share your achievements and compete in challenges with your community\",\n      image: \"🏆\"\n    },\n    {\n      title: \"Build lasting habits\",\n      description: \"Track streaks and celebrate milestones as you reach your goals\",\n      image: \"🔥\"\n    },\n    {\n      title: \"Join groups & challenges\",\n      description: \"Connect with like-minded people and push each other to succeed\",\n      image: \"👥\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Hide header on mobile */}\n      <div className=\"hidden md:block\">\n        <Header />\n      </div>\n\n      {/* Hero Section - Full screen on mobile, with header space on desktop */}\n      <main className=\"min-h-screen md:h-[calc(100vh-56px)] flex flex-col md:items-center md:justify-center px-4 md:px-8 py-8 md:pt-0\">\n        {/* Mobile View - Compact version similar to desktop */}\n        {!showLogin && !showSignup && (\n          <div className=\"md:hidden w-full max-w-md mx-auto flex flex-col justify-center min-h-[calc(100vh-4rem)]\">\n            {/* Logo and Welcome */}\n            <div className=\"text-center mb-6\">\n              <div className=\"w-32 h-32 flex items-center justify-center mx-auto mb-4\">\n                <Image\n                  src=\"/logo.svg\"\n                  alt=\"Ambira Logo\"\n                  width={128}\n                  height={128}\n                  priority={true}\n                />\n              </div>\n              <h1 className=\"text-2xl font-bold text-gray-900 mb-1\">Welcome to Ambira</h1>\n              <p className=\"text-base text-gray-600\">\n                Study, work, and build with your friends.\n              </p>\n            </div>\n\n            {/* Already a Member Header */}\n            <div className=\"text-center mb-4\">\n              <p className=\"text-lg text-gray-600\">\n                Already a Member?{' '}\n                <button\n                  onClick={() => setShowLogin(true)}\n                  className=\"text-[#007AFF] font-semibold hover:text-[#0056D6] transition-colors\"\n                >\n                  Log In\n                </button>\n              </p>\n            </div>\n\n            {/* CTA Buttons */}\n            <div className=\"space-y-3\">\n              {/* Google Sign Up Button */}\n              <button\n                onClick={handleGoogleSignIn}\n                disabled={isLoading}\n                className=\"w-full flex items-center justify-center px-4 py-3 border-2 border-gray-300 text-gray-900 font-semibold rounded-lg hover:border-gray-400 hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                <svg className=\"w-5 h-5 mr-2\" viewBox=\"0 0 24 24\">\n                  <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                  <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                  <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                  <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                </svg>\n                Sign Up With Google\n              </button>\n\n              {/* Email Sign Up Button */}\n              <button\n                onClick={handleSignupWithEmail}\n                disabled={isLoading}\n                className=\"w-full flex items-center justify-center px-4 py-3 bg-[#007AFF] text-white font-semibold rounded-lg hover:bg-[#0056D6] transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {isLoading ? (\n                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"></div>\n                ) : (\n                  'Sign Up With Email'\n                )}\n              </button>\n            </div>\n\n            {/* Legal Text */}\n            <p className=\"text-sm text-gray-600 text-center mt-6\">\n              By continuing, you are agreeing to our{' '}\n              <Link href=\"/terms\" className=\"text-[#007AFF]\">Terms of Service</Link>\n              {' '}and{' '}\n              <Link href=\"/privacy\" className=\"text-[#007AFF]\">Privacy Policy</Link>.\n            </p>\n          </div>\n        )}\n\n        {/* Mobile Auth Forms */}\n        {(showLogin || showSignup) && (\n          <div className=\"md:hidden flex-1 flex flex-col py-6 px-2 overflow-y-auto\">\n            {/* Close Button and Title */}\n            <div className=\"mb-4 relative\">\n              <button\n                onClick={() => {\n                  setShowLogin(false);\n                  setShowSignup(false);\n                }}\n                className=\"absolute right-0 top-0 text-gray-600 p-2\"\n                aria-label=\"Close form\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              </button>\n              <h1 className=\"text-2xl font-bold text-gray-900 pt-2\">\n                {showLogin ? 'Log In to Ambira' : 'Create Your Account'}\n              </h1>\n            </div>\n\n            {/* Forms content from desktop view will be duplicated here */}\n            <div className=\"flex-1\">\n              {showLogin ? (\n                <form onSubmit={handleLoginSubmit} className=\"space-y-3\">\n                  {/* OAuth Buttons */}\n                  <button\n                    onClick={handleGoogleSignIn}\n                    type=\"button\"\n                    disabled={isLoading}\n                    className=\"w-full flex items-center justify-center py-3 border-2 border-gray-300 text-gray-900 rounded-lg font-medium text-sm hover:border-gray-400 hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <svg className=\"w-5 h-5 mr-2\" viewBox=\"0 0 24 24\">\n                      <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                      <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                      <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                      <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                    </svg>\n                    Continue with Google\n                  </button>\n\n                  <div className=\"flex items-center gap-3 my-3\">\n                    <div className=\"flex-1 border-t border-gray-300\"></div>\n                    <span className=\"text-gray-500 text-xs\">or</span>\n                    <div className=\"flex-1 border-t border-gray-300\"></div>\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"mobile-login-email\" className=\"block text-xs font-medium text-gray-700 mb-1\">\n                      Email\n                    </label>\n                    <input\n                      id=\"mobile-login-email\"\n                      name=\"email\"\n                      type=\"email\"\n                      value={loginData.email}\n                      onChange={handleLoginChange}\n                      className=\"w-full px-3 py-2.5 border border-gray-300 rounded-md text-base focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2\"\n                      placeholder=\"Email\"\n                    />\n                  </div>\n                  <div>\n                    <label htmlFor=\"mobile-login-password\" className=\"block text-xs font-medium text-gray-700 mb-1\">\n                      Password\n                    </label>\n                    <input\n                      id=\"mobile-login-password\"\n                      name=\"password\"\n                      type=\"password\"\n                      value={loginData.password}\n                      onChange={handleLoginChange}\n                      className=\"w-full px-3 py-2.5 border border-gray-300 rounded-md text-base focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2\"\n                      placeholder=\"Password\"\n                    />\n                  </div>\n                  <button\n                    type=\"submit\"\n                    disabled={isLoading}\n                    className=\"w-full py-4 bg-[#007AFF] text-white font-semibold rounded-lg hover:bg-[#0056D6] transition-colors min-h-[44px]\"\n                  >\n                    {isLoading ? 'Logging in...' : 'Log In'}\n                  </button>\n                </form>\n              ) : (\n                <form onSubmit={handleSignupSubmit} className=\"space-y-3\">\n                  {/* Google Button */}\n                  <button\n                    onClick={handleGoogleSignIn}\n                    type=\"button\"\n                    disabled={isLoading}\n                    className=\"w-full flex items-center justify-center py-3 border-2 border-gray-300 text-gray-900 rounded-lg font-medium hover:border-gray-400 hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed min-h-[44px]\"\n                  >\n                    <svg className=\"w-5 h-5 mr-2\" viewBox=\"0 0 24 24\">\n                      <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                      <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                      <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                      <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                    </svg>\n                    Continue with Google\n                  </button>\n\n                  <div className=\"flex items-center gap-3 my-3\">\n                    <div className=\"flex-1 border-t border-gray-300\"></div>\n                    <span className=\"text-gray-500 text-sm\">or</span>\n                    <div className=\"flex-1 border-t border-gray-300\"></div>\n                  </div>\n\n                  {error && (\n                    <div className=\"bg-red-50 border border-red-200 text-red-600 px-3 py-2 rounded-lg text-sm\">\n                      {error}\n                    </div>\n                  )}\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Full Name</label>\n                    <input\n                      name=\"name\"\n                      type=\"text\"\n                      autoComplete=\"name\"\n                      value={signupData.name}\n                      onChange={handleSignupChange}\n                      className={`w-full px-4 py-3 border rounded-md text-base focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2 ${\n                        signupErrors.name ? 'border-red-300' : 'border-gray-300'\n                      }`}\n                      placeholder=\"Enter your full name\"\n                    />\n                    {signupErrors.name && (\n                      <p className=\"mt-1 text-xs text-red-600\">{signupErrors.name}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Username</label>\n                    <div className=\"relative\">\n                      <input\n                        name=\"username\"\n                        type=\"text\"\n                        autoComplete=\"username\"\n                        value={signupData.username}\n                        onChange={handleSignupChange}\n                        className={`w-full px-4 py-3 pr-10 border rounded-md text-base focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2 ${\n                          signupErrors.username ? 'border-red-300' :\n                          usernameAvailable === true ? 'border-green-300' :\n                          usernameAvailable === false ? 'border-red-300' : 'border-gray-300'\n                        }`}\n                        placeholder=\"Choose a username\"\n                      />\n                      {usernameCheckLoading && (\n                        <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500\"></div>\n                        </div>\n                      )}\n                      {!usernameCheckLoading && usernameAvailable === true && signupData.username.trim().length >= 3 && (\n                        <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 transition-opacity duration-200\">\n                          <svg className=\"h-4 w-4 text-green-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                          </svg>\n                        </div>\n                      )}\n                      {!usernameCheckLoading && usernameAvailable === false && (\n                        <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 transition-opacity duration-200\">\n                          <svg className=\"h-4 w-4 text-red-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                          </svg>\n                        </div>\n                      )}\n                    </div>\n                    {signupErrors.username && (\n                      <p className=\"mt-1 text-xs text-red-600\">{signupErrors.username}</p>\n                    )}\n                    {!signupErrors.username && usernameAvailable === true && signupData.username.trim().length >= 3 && (\n                      <p className=\"mt-1 text-xs text-green-600\">Username is available!</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Email address</label>\n                    <input\n                      name=\"email\"\n                      type=\"email\"\n                      autoComplete=\"email\"\n                      value={signupData.email}\n                      onChange={handleSignupChange}\n                      className={`w-full px-4 py-3 border rounded-md text-base focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2 ${\n                        signupErrors.email ? 'border-red-300' : 'border-gray-300'\n                      }`}\n                      placeholder=\"Enter your email\"\n                    />\n                    {signupErrors.email && (\n                      <p className=\"mt-1 text-xs text-red-600\">{signupErrors.email}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Password</label>\n                    <input\n                      name=\"password\"\n                      type=\"password\"\n                      autoComplete=\"new-password\"\n                      value={signupData.password}\n                      onChange={handleSignupChange}\n                      className={`w-full px-4 py-3 border rounded-md text-base focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2 ${\n                        signupErrors.password ? 'border-red-300' : 'border-gray-300'\n                      }`}\n                      placeholder=\"Create a password\"\n                    />\n                    {signupErrors.password && (\n                      <p className=\"mt-1 text-xs text-red-600\">{signupErrors.password}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-1\">Confirm Password</label>\n                    <input\n                      name=\"confirmPassword\"\n                      type=\"password\"\n                      autoComplete=\"new-password\"\n                      value={confirmPassword}\n                      onChange={handleSignupChange}\n                      className={`w-full px-4 py-3 border rounded-md text-base focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2 ${\n                        signupErrors.confirmPassword ? 'border-red-300' : 'border-gray-300'\n                      }`}\n                      placeholder=\"Confirm your password\"\n                    />\n                    {signupErrors.confirmPassword && (\n                      <p className=\"mt-1 text-xs text-red-600\">{signupErrors.confirmPassword}</p>\n                    )}\n                  </div>\n\n                  <button\n                    type=\"submit\"\n                    disabled={isLoading}\n                    className=\"w-full py-4 bg-[#007AFF] text-white font-semibold text-lg rounded-lg hover:bg-[#0056D6] transition-colors disabled:opacity-50 disabled:cursor-not-allowed min-h-[44px]\"\n                  >\n                    {isLoading ? (\n                      <div className=\"flex items-center justify-center\">\n                        <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                        Creating account...\n                      </div>\n                    ) : (\n                      'Create account'\n                    )}\n                  </button>\n                </form>\n              )}\n            </div>\n\n            {/* Legal Text */}\n            <p className=\"text-sm text-gray-600 text-center mt-6\">\n              By continuing, you are agreeing to our{' '}\n              <Link href=\"/terms\" className=\"text-[#007AFF]\">Terms of Service</Link>\n              {' '}and{' '}\n              <Link href=\"/privacy\" className=\"text-[#007AFF]\">Privacy Policy</Link>.\n            </p>\n          </div>\n        )}\n\n        {/* Desktop View */}\n        <div className=\"hidden md:block max-w-md w-full\">\n          {/* Logo and Welcome - Hide when login form is active */}\n          {!showLogin && !showSignup && (\n            <>\n              <div className=\"text-center mb-8\">\n                <div className=\"w-48 h-48 flex items-center justify-center mx-auto mb-6\">\n                  <Image\n                    src=\"/logo.svg\"\n                    alt=\"Ambira Logo\"\n                    width={192}\n                    height={192}\n                    priority={true}\n                  />\n                </div>\n                <h1 className=\"text-4xl font-bold text-gray-900 mb-2\">Welcome to Ambira</h1>\n                <p className=\"text-lg text-gray-600\">\n                  Study, work, and build with your friends.\n                </p>\n              </div>\n\n              {/* Already a Member Header */}\n              <div className=\"text-center mb-6\">\n                <p className=\"text-2xl text-gray-600\">\n                  Already a Member?{' '}\n                  <button\n                    onClick={() => setShowLogin(true)}\n                    className=\"text-[#007AFF] font-semibold hover:text-[#0056D6] transition-colors\"\n                  >\n                    Log In\n                  </button>\n                </p>\n              </div>\n            </>\n          )}\n\n          {/* Login Form Header - Show when login form is active */}\n          {showLogin && (\n            <div className=\"text-center mb-8\">\n              <div className=\"w-48 h-48 flex items-center justify-center mx-auto mb-6\">\n                <Image\n                  src=\"/logo.svg\"\n                  alt=\"Ambira Logo\"\n                  width={192}\n                  height={192}\n                  priority={true}\n                />\n              </div>\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Welcome Back</h1>\n              <p className=\"text-lg text-gray-600\">\n                Sign in to your account\n              </p>\n            </div>\n          )}\n\n          {/* Signup Form Header - Show when signup form is active */}\n          {showSignup && (\n            <div className=\"text-center mb-8\">\n              <div className=\"w-48 h-48 flex items-center justify-center mx-auto mb-6\">\n                <Image\n                  src=\"/logo.svg\"\n                  alt=\"Ambira Logo\"\n                  width={192}\n                  height={192}\n                  priority={true}\n                />\n              </div>\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Create Your Account</h1>\n              <p className=\"text-lg text-gray-600\">\n                Join Ambira and start tracking your productivity\n              </p>\n            </div>\n          )}\n\n          {/* Auth Card */}\n          <div className=\"p-8 mb-6\">\n            {!showSignup && !showLogin ? (\n              <>\n                {/* Sign-in Options - Only show when not in login or signup mode */}\n                <div className=\"space-y-4\">\n                  {/* Google Sign Up Button */}\n                  <button\n                    onClick={handleGoogleSignIn}\n                    disabled={isLoading}\n                    className=\"w-full flex items-center justify-center px-6 py-4 border-2 border-gray-300 text-gray-900 font-semibold text-lg rounded-lg hover:border-gray-400 hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <svg className=\"w-6 h-6 mr-3\" viewBox=\"0 0 24 24\">\n                      <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                      <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                      <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                      <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                    </svg>\n                    Sign Up With Google\n                  </button>\n\n                  {/* Email Sign Up Button */}\n                  <button\n                    onClick={handleSignupWithEmail}\n                    disabled={isLoading}\n                    className=\"w-full flex items-center justify-center px-6 py-4 bg-[#007AFF] text-white font-semibold text-lg rounded-lg hover:bg-[#0056D6] transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isLoading ? (\n                      <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-white\"></div>\n                    ) : (\n                      'Sign Up With Email'\n                    )}\n                  </button>\n                </div>\n              </>\n            ) : showLogin ? (\n              <>\n                {/* Email Login Form - Show only when in login mode */}\n                <div className=\"flex items-center justify-between mb-6\">\n                  <button\n                    onClick={() => setShowLogin(false)}\n                    className=\"text-gray-400 hover:text-gray-600\"\n                    type=\"button\"\n                    aria-label=\"Go back to login options\"\n                  >\n                    <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n                    </svg>\n                  </button>\n                </div>\n                <form onSubmit={handleLoginSubmit} className=\"space-y-6\">\n                  {/* Google Sign-In Button */}\n                  <button\n                    onClick={handleGoogleSignIn}\n                    type=\"button\"\n                    disabled={isLoading}\n                    className=\"w-full flex items-center justify-center px-6 py-4 border-2 border-gray-300 text-gray-900 font-semibold text-lg rounded-lg hover:border-gray-400 hover:bg-gray-50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <svg className=\"w-6 h-6 mr-3\" viewBox=\"0 0 24 24\">\n                      <path fill=\"#4285F4\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                      <path fill=\"#34A853\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                      <path fill=\"#FBBC05\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                      <path fill=\"#EA4335\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                    </svg>\n                    Continue with Google\n                  </button>\n\n                  <div className=\"flex items-center gap-3 my-4\">\n                    <div className=\"flex-1 border-t border-gray-300\"></div>\n                    <span className=\"text-gray-500 text-sm\">or</span>\n                    <div className=\"flex-1 border-t border-gray-300\"></div>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"login_email\">Email address</label>\n                    <input\n                      id=\"login_email\"\n                      name=\"email\"\n                      type=\"email\"\n                      autoComplete=\"email\"\n                      value={loginData.email}\n                      onChange={handleLoginChange}\n                      className={`w-full px-4 py-4 text-lg border rounded-md focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2 ${loginErrors.email ? 'border-red-300' : 'border-gray-300'}`}\n                      placeholder=\"Enter your email\"\n                    />\n                    {loginErrors.email && <p className=\"mt-2 text-sm text-red-600\">{loginErrors.email}</p>}\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\" htmlFor=\"login_password\">Password</label>\n                    <input\n                      id=\"login_password\"\n                      name=\"password\"\n                      type=\"password\"\n                      autoComplete=\"current-password\"\n                      value={loginData.password}\n                      onChange={handleLoginChange}\n                      className={`w-full px-4 py-4 text-lg border rounded-md focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2 ${loginErrors.password ? 'border-red-300' : 'border-gray-300'}`}\n                      placeholder=\"Enter your password\"\n                    />\n                    {loginErrors.password && <p className=\"mt-2 text-sm text-red-600\">{loginErrors.password}</p>}\n                  </div>\n\n                  {/* Error Message - Display before submit button */}\n                  {error && (\n                    <div className=\"p-3 bg-red-50 border border-red-200 rounded-lg text-red-600 text-sm\">\n                      {error}\n                    </div>\n                  )}\n\n                  <button\n                    type=\"submit\"\n                    disabled={isLoading}\n                    className=\"w-full flex justify-center py-4 px-4 rounded-lg text-lg font-semibold text-white bg-[#007AFF] hover:bg-[#0056D6] focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-[#007AFF] disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isLoading ? 'Signing in...' : 'Sign In'}\n                  </button>\n                </form>\n              </>\n            ) : (\n              <>\n                <div className=\"flex items-center justify-between mb-6\">\n                  <button\n                    onClick={() => setShowSignup(false)}\n                    className=\"text-gray-400 hover:text-gray-600\"\n                    type=\"button\"\n                    aria-label=\"Go back to signup options\"\n                  >\n                    <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n                    </svg>\n                  </button>\n                </div>\n\n                {/* Signup Form */}\n                <form onSubmit={handleSignupSubmit} className=\"space-y-4\">\n                  <div>\n                    <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Full Name\n                    </label>\n                    <input\n                      id=\"name\"\n                      name=\"name\"\n                      type=\"text\"\n                      autoComplete=\"name\"\n                      value={signupData.name}\n                      onChange={handleSignupChange}\n                      className={`w-full px-3 py-2 border rounded-md shadow-sm placeholder-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2 ${\n                        signupErrors.name ? 'border-red-300' : 'border-gray-300'\n                      }`}\n                      placeholder=\"Enter your full name\"\n                    />\n                    {signupErrors.name && (\n                      <p className=\"mt-1 text-sm text-red-600\">{signupErrors.name}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"username\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Username\n                    </label>\n                    <div className=\"relative\">\n                      <input\n                        id=\"username\"\n                        name=\"username\"\n                        type=\"text\"\n                        autoComplete=\"username\"\n                        value={signupData.username}\n                        onChange={handleSignupChange}\n                        className={`w-full px-3 py-2 pr-10 border rounded-md shadow-sm placeholder-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2 ${\n                          signupErrors.username ? 'border-red-300' :\n                          usernameAvailable === true ? 'border-green-300' :\n                          usernameAvailable === false ? 'border-red-300' : 'border-gray-300'\n                        }`}\n                        placeholder=\"Choose a username\"\n                      />\n                      {usernameCheckLoading && (\n                        <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                          <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500\"></div>\n                        </div>\n                      )}\n                      {!usernameCheckLoading && usernameAvailable === true && signupData.username.trim().length >= 3 && (\n                        <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 transition-opacity duration-200\">\n                          <svg className=\"h-4 w-4 text-green-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n                          </svg>\n                        </div>\n                      )}\n                      {!usernameCheckLoading && usernameAvailable === false && (\n                        <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 transition-opacity duration-200\">\n                          <svg className=\"h-4 w-4 text-red-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                          </svg>\n                        </div>\n                      )}\n                    </div>\n                    {signupErrors.username && (\n                      <p className=\"mt-1 text-sm text-red-600\">{signupErrors.username}</p>\n                    )}\n                    {!signupErrors.username && usernameAvailable === true && signupData.username.trim().length >= 3 && (\n                      <p className=\"mt-1 text-sm text-green-600\">Username is available!</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Email address\n                    </label>\n                    <input\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      autoComplete=\"email\"\n                      value={signupData.email}\n                      onChange={handleSignupChange}\n                      className={`w-full px-3 py-2 border rounded-md shadow-sm placeholder-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2 ${\n                        signupErrors.email ? 'border-red-300' : 'border-gray-300'\n                      }`}\n                      placeholder=\"Enter your email\"\n                    />\n                    {signupErrors.email && (\n                      <p className=\"mt-1 text-sm text-red-600\">{signupErrors.email}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Password\n                    </label>\n                    <input\n                      id=\"password\"\n                      name=\"password\"\n                      type=\"password\"\n                      autoComplete=\"new-password\"\n                      value={signupData.password}\n                      onChange={handleSignupChange}\n                      className={`w-full px-3 py-2 border rounded-md shadow-sm placeholder-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2 ${\n                        signupErrors.password ? 'border-red-300' : 'border-gray-300'\n                      }`}\n                      placeholder=\"Create a password\"\n                    />\n                    {signupErrors.password && (\n                      <p className=\"mt-1 text-sm text-red-600\">{signupErrors.password}</p>\n                    )}\n                  </div>\n\n                  <div>\n                    <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                      Confirm Password\n                    </label>\n                    <input\n                      id=\"confirmPassword\"\n                      name=\"confirmPassword\"\n                      type=\"password\"\n                      autoComplete=\"new-password\"\n                      value={confirmPassword}\n                      onChange={handleSignupChange}\n                      className={`w-full px-3 py-2 border rounded-md shadow-sm placeholder-gray-400 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[#007AFF] focus-visible:ring-offset-2 ${\n                        signupErrors.confirmPassword ? 'border-red-300' : 'border-gray-300'\n                      }`}\n                      placeholder=\"Confirm your password\"\n                    />\n                    {signupErrors.confirmPassword && (\n                      <p className=\"mt-1 text-sm text-red-600\">{signupErrors.confirmPassword}</p>\n                    )}\n                  </div>\n\n                  <button\n                    type=\"submit\"\n                    disabled={isLoading}\n                    className=\"w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-[#007AFF] hover:bg-[#0056D6] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#007AFF] disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isLoading ? (\n                      <div className=\"flex items-center\">\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        Creating account...\n                      </div>\n                    ) : (\n                      'Create account'\n                    )}\n                  </button>\n\n\n                </form>\n              </>\n            )}\n          </div>\n\n          {/* Legal Text */}\n          <p className=\"text-sm text-gray-900 text-center\">\n            By continuing, you are agreeing to our{' '}\n            <Link href=\"/terms\" className=\"text-[#007AFF] hover:underline\">Terms of Service</Link>\n            {' '}and{' '}\n            <Link href=\"/privacy\" className=\"text-[#007AFF] hover:underline\">Privacy Policy</Link>\n            .\n          </p>\n        </div>\n      </main>\n\n      {/* Footer */}\n      {/* Hide footer on mobile when in login/signup mode */}\n      <footer className={`bg-white border-t border-gray-200 py-12 ${(showLogin || showSignup) ? 'hidden md:block' : ''}`}>\n        <div className=\"max-w-6xl mx-auto px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n            {/* Brand */}\n            <div className=\"md:col-span-1\">\n              <div className=\"flex items-center space-x-2 mb-4\">\n                <div className=\"w-8 h-8 flex items-center justify-center\">\n                  <Image\n                    src=\"/logo.svg\"\n                    alt=\"Ambira Logo\"\n                    width={32}\n                    height={32}\n                  />\n                </div>\n                <span className=\"text-xl font-bold text-[#007AFF]\">Ambira</span>\n              </div>\n              <p className=\"text-sm text-gray-600 max-w-xs mb-4\">\n                Track focus sessions, hit goals, and share progress with friends.\n              </p>\n              {/* Discord Button */}\n              <a\n                href=\"https://discord.gg/wFMeNmCpdQ\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"inline-flex items-center gap-2 px-4 py-2 bg-[#5865F2] hover:bg-[#4752C4] text-white font-semibold rounded-lg transition-colors\"\n              >\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 71 55\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  <g clipPath=\"url(#clip0)\">\n                    <path d=\"M60.1045 4.8978C55.5792 2.8214 50.7265 1.2916 45.6527 0.41542C45.5603 0.39851 45.468 0.440769 45.4204 0.525289C44.7963 1.6353 44.105 3.0834 43.6209 4.2216C38.1637 3.4046 32.7345 3.4046 27.3892 4.2216C26.905 3.0581 26.1886 1.6353 25.5617 0.525289C25.5141 0.443589 25.4218 0.40133 25.3294 0.41542C20.2584 1.2888 15.4057 2.8186 10.8776 4.8978C10.8384 4.9147 10.8048 4.9429 10.7825 4.9795C1.57795 18.7309 -0.943561 32.1443 0.293408 45.3914C0.299005 45.4562 0.335386 45.5182 0.385761 45.5576C6.45866 50.0174 12.3413 52.7249 18.1147 54.5195C18.2071 54.5477 18.305 54.5139 18.3638 54.4378C19.7295 52.5728 20.9469 50.6063 21.9907 48.5383C22.0523 48.4172 21.9935 48.2735 21.8676 48.2256C19.9366 47.4931 18.0979 46.6 16.3292 45.5858C16.1893 45.5041 16.1781 45.304 16.3068 45.2082C16.679 44.9293 17.0513 44.6391 17.4067 44.3461C17.471 44.2926 17.5606 44.2813 17.6362 44.3151C29.2558 49.6202 41.8354 49.6202 53.3179 44.3151C53.3935 44.2785 53.4831 44.2898 53.5502 44.3433C53.9057 44.6363 54.2779 44.9293 54.6529 45.2082C54.7816 45.304 54.7732 45.5041 54.6333 45.5858C52.8646 46.6197 51.0259 47.4931 49.0921 48.2228C48.9662 48.2707 48.9102 48.4172 48.9718 48.5383C50.038 50.6034 51.2554 52.5699 52.5959 54.435C52.6519 54.5139 52.7526 54.5477 52.845 54.5195C58.6464 52.7249 64.529 50.0174 70.6019 45.5576C70.6551 45.5182 70.6887 45.459 70.6943 45.3942C72.1747 30.0791 68.2147 16.7757 60.1968 4.9823C60.1772 4.9429 60.1437 4.9147 60.1045 4.8978ZM23.7259 37.3253C20.2276 37.3253 17.3451 34.1136 17.3451 30.1693C17.3451 26.225 20.1717 23.0133 23.7259 23.0133C27.308 23.0133 30.1626 26.2532 30.1066 30.1693C30.1066 34.1136 27.28 37.3253 23.7259 37.3253ZM47.3178 37.3253C43.8196 37.3253 40.9371 34.1136 40.9371 30.1693C40.9371 26.225 43.7636 23.0133 47.3178 23.0133C50.9 23.0133 53.7545 26.2532 53.6986 30.1693C53.6986 34.1136 50.9 37.3253 47.3178 37.3253Z\" fill=\"currentColor\"/>\n                  </g>\n                  <defs>\n                    <clipPath id=\"clip0\">\n                      <rect width=\"71\" height=\"55\" fill=\"white\"/>\n                    </clipPath>\n                  </defs>\n                </svg>\n                Community\n              </a>\n            </div>\n\n            {/* Link Columns */}\n            <div className=\"md:col-span-3 grid grid-cols-2 md:grid-cols-4 gap-8\">\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-3\">Product</h3>\n                <ul className=\"space-y-2 text-sm\">\n                  <li><Link href=\"/features\" className=\"text-gray-600 hover:text-[#007AFF]\">Features</Link></li>\n                  <li><Link href=\"/activities\" className=\"text-gray-600 hover:text-[#007AFF]\">Activities</Link></li>\n                  <li><Link href=\"/groups\" className=\"text-gray-600 hover:text-[#007AFF]\">Groups</Link></li>\n                  <li><Link href=\"/challenges\" className=\"text-gray-600 hover:text-[#007AFF]\">Challenges</Link></li>\n                </ul>\n              </div>\n\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-3\">Resources</h3>\n                <ul className=\"space-y-2 text-sm\">\n                  <li><Link href=\"/about\" className=\"text-gray-600 hover:text-[#007AFF]\">About</Link></li>\n                  <li><Link href=\"/feed\" className=\"text-gray-600 hover:text-[#007AFF]\">Community</Link></li>\n                  <li><Link href=\"/sessions\" className=\"text-gray-600 hover:text-[#007AFF]\">Sessions</Link></li>\n                  <li><Link href=\"/tasks\" className=\"text-gray-600 hover:text-[#007AFF]\">Tasks</Link></li>\n                </ul>\n              </div>\n\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-3\">Support</h3>\n                <ul className=\"space-y-2 text-sm\">\n                  <li><Link href=\"/help\" className=\"text-gray-600 hover:text-[#007AFF]\">Help Center</Link></li>\n                  <li><Link href=\"/contact\" className=\"text-gray-600 hover:text-[#007AFF]\">Contact</Link></li>\n                  <li><Link href=\"/status\" className=\"text-gray-600 hover:text-[#007AFF]\">Status</Link></li>\n                </ul>\n              </div>\n\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-3\">Legal</h3>\n                <ul className=\"space-y-2 text-sm\">\n                  <li><Link href=\"/privacy\" className=\"text-gray-600 hover:text-[#007AFF]\">Privacy</Link></li>\n                  <li><Link href=\"/terms\" className=\"text-gray-600 hover:text-[#007AFF]\">Terms</Link></li>\n                  <li><Link href=\"/cookies\" className=\"text-gray-600 hover:text-[#007AFF]\">Cookie Policy</Link></li>\n                </ul>\n              </div>\n            </div>\n          </div>\n\n          {/* Bottom row */}\n          <div className=\"mt-10 pt-6 border-t border-gray-200 flex flex-col md:flex-row items-center justify-between text-sm text-gray-500\">\n            <span>© {new Date().getFullYear()} Ambira, Inc.</span>\n            <div className=\"space-x-4 mt-2 md:mt-0\">\n              <Link href=\"/privacy\" className=\"hover:text-[#007AFF]\">Privacy</Link>\n              <Link href=\"/terms\" className=\"hover:text-[#007AFF]\">Terms</Link>\n              <Link href=\"/contact\" className=\"hover:text-[#007AFF]\">Contact</Link>\n            </div>\n          </div>\n        </div>\n      </footer>\n\n      {/* PWA Install Prompt - Always show on mobile when in login/signup mode */}\n      <PWAInstallPrompt alwaysShowOnMobile={showLogin || showSignup} />\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/Layout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/LeftSidebar.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'WeekStreakCalendar' is defined but never used.",
        "line": 7,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ChevronRight' is defined but never used.",
        "line": 8,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Link' is defined but never used.",
        "line": 9,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used.",
        "line": 10,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'profile' is assigned a value but never used.",
        "line": 16,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'stats' is assigned a value but never used.",
        "line": 17,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isLoading' is assigned a value but never used.",
        "line": 18,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useAuth } from '@/hooks/useAuth';\nimport { useState, useEffect } from 'react';\nimport { firebaseApi } from '@/lib/api';\nimport { UserProfile, UserStats } from '@/types';\nimport { WeekStreakCalendar } from './WeekStreakCalendar';\nimport { ChevronRight } from 'lucide-react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport DailyGoals from './DailyGoals';\nimport { StreakCard } from './StreakCard';\n\nfunction LeftSidebar() {\n  const { user } = useAuth();\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [stats, setStats] = useState<UserStats | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const loadUserData = async () => {\n      if (user?.username) {\n        try {\n          setIsLoading(true);\n          const [profileData, statsData] = await Promise.all([\n            firebaseApi.user.getUserProfile(user.username),\n            firebaseApi.user.getUserStats(user.id)\n          ]);\n          setProfile(profileData);\n          setStats(statsData);\n        } catch (error) {\n          console.error('Failed to load user data:', error);\n          // Set default values if user data doesn't exist yet\n          setProfile({\n            id: user.id,\n            username: user.username,\n            name: user.name,\n            bio: '',\n            location: '',\n            profilePicture: undefined,\n            followersCount: 0,\n            followingCount: 0,\n            totalHours: 0,\n            isFollowing: false,\n            isPrivate: false,\n            createdAt: new Date(),\n            updatedAt: new Date()\n          });\n          setStats({\n            totalHours: 0,\n            weeklyHours: 0,\n            monthlyHours: 0,\n            sessionsThisWeek: 0,\n            sessionsThisMonth: 0,\n            currentStreak: 0,\n            longestStreak: 0,\n            averageSessionDuration: 0,\n            mostProductiveHour: 14\n          });\n        } finally {\n          setIsLoading(false);\n        }\n      }\n    };\n\n    loadUserData();\n  }, [user]);\n  return (\n    <aside className=\"hidden lg:block w-[340px] flex-shrink-0\" aria-label=\"User sidebar\">\n      <div className=\"space-y-4 h-full overflow-y-auto scrollbar-hide pt-12 pb-6\">\n        {/* Streak Card */}\n        {user && <StreakCard userId={user.id} variant=\"compact\" showProgress={false} />}\n\n        {/* Daily Goals */}\n        <DailyGoals />\n      </div>\n    </aside>\n  );\n}\n\nexport default LeftSidebar;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/LikesModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'totalLikes' is defined but never used.",
        "line": 24,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 13
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'loadUsers' and 'userIds.length'. Either include them or remove the dependency array.",
        "line": 41,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 41,
        "endColumn": 33,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [isOpen, loadUsers, userIds.length]",
            "fix": {
              "range": [981, 1008],
              "text": "[isOpen, loadUsers, userIds.length]"
            }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.",
        "line": 41,
        "column": 15,
        "nodeType": "CallExpression",
        "endLine": 41,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 81,
        "column": 22,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 81,
        "endColumn": 27
      },
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 172,
        "column": 25,
        "nodeType": "JSXOpeningElement",
        "endLine": 176,
        "endColumn": 27
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useEffect, useState } from 'react';\nimport { X } from 'lucide-react';\nimport { User } from '@/types';\nimport { firebaseApi } from '@/lib/api';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface LikesModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  userIds: string[];\n  totalLikes: number;\n}\n\ninterface UserWithFollowStatus extends User {\n  isFollowing?: boolean;\n}\n\nexport const LikesModal: React.FC<LikesModalProps> = ({\n  isOpen,\n  onClose,\n  userIds,\n  totalLikes,\n}) => {\n  const { user: currentUser } = useAuth();\n  const [users, setUsers] = useState<UserWithFollowStatus[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [followingStates, setFollowingStates] = useState<\n    Record<string, boolean>\n  >({});\n\n  useEffect(() => {\n    if (isOpen && userIds.length > 0) {\n      loadUsers();\n    } else if (!isOpen) {\n      // Reset state when modal closes\n      setUsers([]);\n      setFollowingStates({});\n    }\n  }, [isOpen, userIds.join(',')]); // Use join to properly detect array changes\n\n  // Handle ESC key to close modal\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape' && isOpen) {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [isOpen, onClose]);\n\n  const loadUsers = async () => {\n    setIsLoading(true);\n    try {\n      // Fetch user data for each user ID\n      const userPromises = userIds.map(userId =>\n        firebaseApi.user.getUserById(userId).catch(() => null)\n      );\n      const loadedUsers = await Promise.all(userPromises);\n      const validUsers = loadedUsers.filter((u): u is User => u !== null);\n\n      // Check follow status for each user\n      if (currentUser) {\n        const followStatuses: Record<string, boolean> = {};\n        await Promise.all(\n          validUsers.map(async user => {\n            try {\n              const isFollowing = await firebaseApi.user.isFollowing(\n                currentUser.id,\n                user.id\n              );\n              followStatuses[user.id] = isFollowing;\n            } catch (error) {\n              followStatuses[user.id] = false;\n            }\n          })\n        );\n        setFollowingStates(followStatuses);\n      }\n\n      setUsers(validUsers);\n    } catch (error) {\n      console.error('Failed to load users:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleFollowToggle = async (userId: string) => {\n    if (!currentUser) return;\n\n    const isCurrentlyFollowing = followingStates[userId] || false;\n\n    // Optimistic update\n    setFollowingStates(prev => ({\n      ...prev,\n      [userId]: !isCurrentlyFollowing,\n    }));\n\n    try {\n      if (isCurrentlyFollowing) {\n        await firebaseApi.user.unfollowUser(userId);\n      } else {\n        await firebaseApi.user.followUser(userId);\n      }\n    } catch (error) {\n      console.error('Failed to toggle follow:', error);\n      // Revert on error\n      setFollowingStates(prev => {\n        const newState: Record<string, boolean> = { ...prev };\n        newState[userId] = isCurrentlyFollowing ?? false;\n        return newState;\n      });\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div\n      className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/60\"\n      onClick={onClose}\n    >\n      <div\n        className=\"bg-white rounded-2xl w-full max-w-md max-h-[70vh] flex flex-col\"\n        onClick={e => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n          <h2 className=\"text-gray-900 font-semibold text-center flex-1\">\n            Likes\n          </h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-900 transition-colors\"\n            aria-label=\"Close likes modal\"\n          >\n            <X className=\"w-6 h-6\" aria-hidden=\"true\" />\n          </button>\n        </div>\n\n        {/* Users list */}\n        <div className=\"flex-1 overflow-y-auto\">\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"w-8 h-8 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\" />\n            </div>\n          ) : users.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">No likes yet</div>\n          ) : (\n            <div className=\"divide-y divide-gray-100\">\n              {users.map(user => {\n                const isOwnProfile = currentUser?.id === user.id;\n                const isFollowing = followingStates[user.id] ?? false;\n\n                return (\n                  <div\n                    key={user.id}\n                    className=\"flex items-center gap-3 p-4 hover:bg-gray-50 transition-colors\"\n                  >\n                    {/* Profile picture */}\n                    <div className=\"w-11 h-11 rounded-full bg-gradient-to-br from-orange-500 to-orange-600 flex items-center justify-center text-white font-semibold flex-shrink-0\">\n                      {user.profilePicture ? (\n                        <img\n                          src={user.profilePicture}\n                          alt={user.name}\n                          className=\"w-full h-full rounded-full object-cover\"\n                        />\n                      ) : (\n                        user.name.charAt(0).toUpperCase()\n                      )}\n                    </div>\n\n                    {/* User info */}\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"text-gray-900 font-medium truncate\">\n                        {user.username}\n                      </div>\n                      <div className=\"text-gray-500 text-sm truncate\">\n                        {user.name}\n                      </div>\n                    </div>\n\n                    {/* Follow button */}\n                    {!isOwnProfile && (\n                      <button\n                        onClick={() => handleFollowToggle(user.id)}\n                        className={`px-4 py-1.5 text-sm font-medium rounded-lg transition-colors ${\n                          isFollowing\n                            ? 'bg-gray-200 hover:bg-gray-300 text-gray-900'\n                            : 'bg-blue-600 hover:bg-blue-700 text-white'\n                        }`}\n                      >\n                        {isFollowing ? 'Following' : 'Follow'}\n                      </button>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LikesModal;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/LoginForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ManualEntry.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'token' is assigned a value but never used.",
        "line": 76,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 76,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 120,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 120,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3594, 3597], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3594, 3597], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { SessionFormData, Project } from '@/types';\nimport { parseLocalDateTime } from '@/lib/utils';\nimport { ERROR_MESSAGES } from '@/config/errorMessages';\n\ninterface ManualEntryProps {\n  onSave: (data: SessionFormData) => Promise<void>;\n  onCancel: () => void;\n  isLoading?: boolean;\n}\n\nconst TAGS = [\n  'Study',\n  'Work',\n  'Side Project',\n  'Reading',\n  'Learning',\n  'Exercise',\n  'Creative',\n  'Other',\n];\n\nconst PRIVACY_OPTIONS = [\n  { value: 'everyone', label: 'Everyone', description: 'Visible to all users' },\n  {\n    value: 'followers',\n    label: 'Followers',\n    description: 'Visible to your followers',\n  },\n  { value: 'private', label: 'Only You', description: 'Private to you only' },\n];\n\nexport const ManualEntry: React.FC<ManualEntryProps> = ({\n  onSave,\n  onCancel,\n  isLoading = false,\n}) => {\n  const [formData, setFormData] = useState<SessionFormData>({\n    activityId: '',\n    projectId: '',\n    title: '',\n    description: '',\n    duration: 0,\n    startTime: new Date(),\n    tags: [],\n    visibility: 'everyone',\n    howFelt: 3,\n    privateNotes: '',\n  });\n\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  // Time inputs\n  const [durationHours, setDurationHours] = useState(0);\n  const [durationMinutes, setDurationMinutes] = useState(0);\n  const [durationSeconds, setDurationSeconds] = useState(0);\n  const [startDate, setStartDate] = useState(\n    new Date().toISOString().split('T')[0]\n  );\n  const [startTime, setStartTime] = useState('12:00');\n\n  // TODO: Implement Firebase API calls\n  // Helper function to get auth token\n  const getAuthToken = (): string => {\n    // For now, return empty string since we're not using Firebase sessions yet\n    return '';\n  };\n\n  // Load projects on mount\n  useEffect(() => {\n    const loadProjects = async () => {\n      try {\n        const token = getAuthToken();\n        // TODO: Load projects from Firebase\n        const projectList: Project[] = []; // await mockProjectApiLocal.getProjects(token);\n        setProjects(projectList);\n      } catch (error) {\n        console.error('Failed to load projects:', error);\n      }\n    };\n\n    loadProjects();\n  }, []);\n\n  // Update duration when time inputs change\n  useEffect(() => {\n    const totalSeconds =\n      durationHours * 3600 + durationMinutes * 60 + durationSeconds;\n    setFormData(prev => ({ ...prev, duration: totalSeconds }));\n  }, [durationHours, durationMinutes, durationSeconds]);\n\n  // Update start time when date/time inputs change\n  useEffect(() => {\n    // Parse date and time in local timezone to avoid UTC interpretation issues\n    const dateTime = parseLocalDateTime(startDate || '', startTime || '00:00');\n    setFormData(prev => ({ ...prev, startTime: dateTime }));\n  }, [startDate, startTime]);\n\n  // Generate smart title based on time of day and project\n  useEffect(() => {\n    if (!formData.title && formData.projectId) {\n      const project = projects.find(p => p.id === formData.projectId);\n      const hour = new Date().getHours();\n\n      let timeOfDay = '';\n      if (hour < 12) timeOfDay = 'Morning';\n      else if (hour < 17) timeOfDay = 'Afternoon';\n      else timeOfDay = 'Evening';\n\n      const smartTitle = project\n        ? `${timeOfDay} ${project.name} Session`\n        : `${timeOfDay} Work Session`;\n      setFormData(prev => ({ ...prev, title: smartTitle }));\n    }\n  }, [formData.projectId, formData.title, projects]);\n\n  const handleInputChange = (field: keyof SessionFormData, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const handleTagToggle = (tag: string) => {\n    const tags = formData.tags || [];\n    const isSelected = tags.includes(tag);\n    const newTags = isSelected ? tags.filter(t => t !== tag) : [...tags, tag];\n\n    setFormData(prev => ({ ...prev, tags: newTags }));\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.projectId) {\n      newErrors.projectId = 'Please select a project';\n    }\n\n    if (!formData.title.trim()) {\n      newErrors.title = 'Please enter a session title';\n    }\n\n    if (formData.duration <= 0) {\n      newErrors.duration = 'Duration must be greater than 0';\n    }\n\n    if (!startDate) {\n      newErrors.startDate = 'Please select a date';\n    }\n\n    if (!startTime) {\n      newErrors.startTime = 'Please select a time';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    try {\n      await onSave(formData);\n    } catch (error) {\n      console.error('Failed to save session:', error);\n      setErrors({ submit: ERROR_MESSAGES.SESSION_SAVE_FAILED });\n    }\n  };\n\n  const formatDuration = (seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n\n    if (hours > 0) {\n      return `${hours}h ${minutes}m ${secs}s`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${secs}s`;\n    } else {\n      return `${secs}s`;\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <div className=\"p-6\">\n          <h2 className=\"text-2xl font-bold mb-6\">Add Manual Session</h2>\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Project Selection */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Project *\n              </label>\n              <select\n                value={formData.projectId}\n                onChange={e => handleInputChange('projectId', e.target.value)}\n                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                  errors.projectId ? 'border-red-500' : 'border-gray-300'\n                }`}\n                disabled={isLoading}\n              >\n                <option value=\"\">Select a project...</option>\n                {projects.map(project => (\n                  <option key={project.id} value={project.id}>\n                    {project.name}\n                  </option>\n                ))}\n              </select>\n              {errors.projectId && (\n                <p className=\"text-red-500 text-sm mt-1\">{errors.projectId}</p>\n              )}\n            </div>\n\n            {/* Session Title */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Session Title *\n              </label>\n              <input\n                type=\"text\"\n                value={formData.title}\n                onChange={e => handleInputChange('title', e.target.value)}\n                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                  errors.title ? 'border-red-500' : 'border-gray-300'\n                }`}\n                placeholder=\"What did you work on?\"\n                disabled={isLoading}\n              />\n              {errors.title && (\n                <p className=\"text-red-500 text-sm mt-1\">{errors.title}</p>\n              )}\n            </div>\n\n            {/* Date and Time */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Date *\n                </label>\n                <input\n                  type=\"date\"\n                  value={startDate}\n                  onChange={e => setStartDate(e.target.value)}\n                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                    errors.startDate ? 'border-red-500' : 'border-gray-300'\n                  }`}\n                  disabled={isLoading}\n                />\n                {errors.startDate && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {errors.startDate}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Time *\n                </label>\n                <select\n                  value={startTime}\n                  onChange={e => setStartTime(e.target.value)}\n                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                    errors.startTime ? 'border-red-500' : 'border-gray-300'\n                  }`}\n                  disabled={isLoading}\n                >\n                  {Array.from({ length: 48 }, (_, i) => {\n                    const hour = Math.floor(i / 2);\n                    const minute = (i % 2) * 30;\n                    const timeString = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n                    return (\n                      <option key={i} value={timeString}>\n                        {timeString}\n                      </option>\n                    );\n                  })}\n                </select>\n                {errors.startTime && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {errors.startTime}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            {/* Duration Input */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Duration *\n              </label>\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <label className=\"block text-xs text-gray-500 mb-1\">\n                    Hours\n                  </label>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"24\"\n                    value={durationHours}\n                    onChange={e =>\n                      setDurationHours(parseInt(e.target.value) || 0)\n                    }\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    disabled={isLoading}\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-xs text-gray-500 mb-1\">\n                    Minutes\n                  </label>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"59\"\n                    value={durationMinutes}\n                    onChange={e =>\n                      setDurationMinutes(parseInt(e.target.value) || 0)\n                    }\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    disabled={isLoading}\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-xs text-gray-500 mb-1\">\n                    Seconds\n                  </label>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"59\"\n                    value={durationSeconds}\n                    onChange={e =>\n                      setDurationSeconds(parseInt(e.target.value) || 0)\n                    }\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    disabled={isLoading}\n                  />\n                </div>\n              </div>\n              {formData.duration > 0 && (\n                <p className=\"text-sm text-gray-600 mt-2\">\n                  Total: {formatDuration(formData.duration)}\n                </p>\n              )}\n              {errors.duration && (\n                <p className=\"text-red-500 text-sm mt-1\">{errors.duration}</p>\n              )}\n            </div>\n\n            {/* Description */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Description\n              </label>\n              <textarea\n                value={formData.description || ''}\n                onChange={e => handleInputChange('description', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                rows={3}\n                placeholder=\"What did you accomplish?\"\n                disabled={isLoading}\n              />\n            </div>\n\n            {/* Tags */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Tags\n              </label>\n              <div className=\"flex flex-wrap gap-2\">\n                {TAGS.map(tag => (\n                  <button\n                    key={tag}\n                    type=\"button\"\n                    onClick={() => handleTagToggle(tag)}\n                    className={`px-3 py-1 rounded-full text-sm transition-colors ${\n                      (formData.tags || []).includes(tag)\n                        ? 'bg-blue-600 text-white'\n                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n                    }`}\n                    disabled={isLoading}\n                  >\n                    {tag}\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Privacy Settings */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Privacy\n              </label>\n              <select\n                value={formData.visibility}\n                onChange={e =>\n                  handleInputChange(\n                    'visibility',\n                    e.target.value as 'everyone' | 'followers' | 'private'\n                  )\n                }\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                disabled={isLoading}\n              >\n                {PRIVACY_OPTIONS.map(option => (\n                  <option key={option.value} value={option.value}>\n                    {option.label} - {option.description}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            {/* How did it feel? */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                How did it feel? (Private)\n              </label>\n              <div className=\"flex space-x-2\">\n                {[1, 2, 3, 4, 5].map(rating => (\n                  <button\n                    key={rating}\n                    type=\"button\"\n                    onClick={() => handleInputChange('howFelt', rating)}\n                    className={`w-10 h-10 rounded-full border-2 transition-colors ${\n                      formData.howFelt === rating\n                        ? 'border-blue-500 bg-blue-500 text-white'\n                        : 'border-gray-300 text-gray-600 hover:border-gray-400'\n                    }`}\n                    disabled={isLoading}\n                  >\n                    {rating}\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Private Notes */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Private Notes\n              </label>\n              <textarea\n                value={formData.privateNotes || ''}\n                onChange={e =>\n                  handleInputChange('privateNotes', e.target.value)\n                }\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                rows={2}\n                placeholder=\"Any private notes about this session...\"\n                disabled={isLoading}\n              />\n            </div>\n\n            {/* Error Messages */}\n            {errors.submit && (\n              <div className=\"text-red-500 text-sm\">{errors.submit}</div>\n            )}\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end space-x-3 pt-4 border-t\">\n              <button\n                type=\"button\"\n                onClick={onCancel}\n                className=\"px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors\"\n                disabled={isLoading}\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                disabled={isLoading}\n                className=\"px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-300 transition-colors\"\n              >\n                {isLoading ? 'Saving...' : 'Save Session'}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ManualSessionRecorder.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SessionFormData' is defined but never used.",
        "line": 6,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ArrowLeft' is defined but never used.",
        "line": 10,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Check' is defined but never used.",
        "line": 10,
        "column": 21,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Link' is defined but never used.",
        "line": 11,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'compressImage' is defined but never used.",
        "line": 13,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 37
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setPrivateNotes' is assigned a value but never used.",
        "line": 89,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 89,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'endTime' is assigned a value but never used.",
        "line": 101,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 101,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setEndTime' is assigned a value but never used.",
        "line": 101,
        "column": 19,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 101,
        "endColumn": 29
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'title'. Either include it or remove the dependency array.",
        "line": 143,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 143,
        "endColumn": 27,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [projectId, projects, title]",
            "fix": {
              "range": [4633, 4654],
              "text": "[projectId, projects, title]"
            }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { SessionFormData, Project, CreateSessionData } from '@/types';\nimport { firebaseApi } from '@/lib/api';\nimport { useAuth } from '@/hooks/useAuth';\nimport { toast } from 'sonner';\nimport { ArrowLeft, Check, Image as ImageIcon, X } from 'lucide-react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { uploadImages, compressImage } from '@/lib/imageUpload';\nimport { parseLocalDateTime } from '@/lib/utils';\nimport Header from '@/components/HeaderComponent';\nimport { debug } from '@/lib/debug';\n\ninterface DeleteConfirmProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onDelete: () => void;\n}\n\nconst DeleteConfirm: React.FC<DeleteConfirmProps> = ({\n  isOpen,\n  onClose,\n  onDelete,\n}) => {\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div\n        className=\"fixed inset-0 bg-black/60 z-50 md:hidden flex items-center justify-center p-4\"\n        onClick={onClose}\n      >\n        {/* Modal */}\n        <div\n          className=\"bg-white rounded-lg p-5 w-full max-w-sm shadow-xl\"\n          onClick={e => e.stopPropagation()}\n        >\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n            Delete Image?\n          </h3>\n          <p className=\"text-sm text-gray-600 mb-6\">\n            This image will be removed from your session.\n          </p>\n\n          <div className=\"flex gap-3\">\n            <button\n              onClick={onClose}\n              className=\"flex-1 px-4 py-2.5 bg-gray-200 text-gray-800 rounded-lg font-medium hover:bg-gray-300 active:bg-gray-300 transition-colors\"\n            >\n              Cancel\n            </button>\n            <button\n              onClick={() => {\n                onDelete();\n                onClose();\n              }}\n              className=\"flex-1 px-4 py-2.5 bg-red-600 text-white rounded-lg font-medium hover:bg-red-700 active:bg-red-700 transition-colors\"\n            >\n              Delete\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default function ManualSessionRecorder() {\n  const router = useRouter();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  // Form state\n  const [projectId, setProjectId] = useState('');\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [visibility, setVisibility] = useState<\n    'everyone' | 'followers' | 'private'\n  >('everyone');\n  const [privateNotes, setPrivateNotes] = useState('');\n\n  // Manual time inputs\n  const [sessionDate, setSessionDate] = useState(\n    new Date().toISOString().split('T')[0]\n  );\n  const [startTime, setStartTime] = useState(() => {\n    const now = new Date();\n    const hours = String(now.getHours()).padStart(2, '0');\n    const minutes = String(now.getMinutes()).padStart(2, '0');\n    return `${hours}:${minutes}`;\n  });\n  const [endTime, setEndTime] = useState('10:00');\n  const [manualDurationHours, setManualDurationHours] = useState('1');\n  const [manualDurationMinutes, setManualDurationMinutes] = useState('0');\n\n  // Image upload state\n  const [selectedImages, setSelectedImages] = useState<File[]>([]);\n  const [imagePreviewUrls, setImagePreviewUrls] = useState<string[]>([]);\n  const [isUploadingImages, setIsUploadingImages] = useState(false);\n  const [actionSheetIndex, setActionSheetIndex] = useState<number | null>(null);\n\n  // Load projects on mount\n  useEffect(() => {\n    const loadProjects = async () => {\n      if (!user) return;\n\n      try {\n        const projectList = await firebaseApi.project.getProjects();\n        setProjects(projectList);\n      } catch (error) {\n        debug.error('ManualSessionRecorder - Failed to load projects:', error);\n      }\n    };\n\n    loadProjects();\n  }, [user]);\n\n  // Auto-generate title based on time of day and project\n  useEffect(() => {\n    if (!title && projectId) {\n      const project = projects.find(p => p.id === projectId);\n      const hour = new Date().getHours();\n\n      let timeOfDay = '';\n      if (hour < 12) timeOfDay = 'Morning';\n      else if (hour < 17) timeOfDay = 'Afternoon';\n      else timeOfDay = 'Evening';\n\n      const smartTitle = project\n        ? `${timeOfDay} ${project.name} Session`\n        : `${timeOfDay} Work Session`;\n      setTitle(smartTitle);\n    }\n  }, [projectId, projects]);\n\n  const handleImageSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n\n    if (files.length + selectedImages.length > 3) {\n      alert('Maximum 3 images allowed');\n      return;\n    }\n\n    const validFiles: File[] = [];\n    const previewUrls: string[] = [];\n\n    for (const file of files) {\n      try {\n        // Convert HEIC to JPEG first\n        let processedFile = file;\n\n        // Check if it's HEIC and convert\n        const isHeic =\n          file.name.toLowerCase().endsWith('.heic') ||\n          file.name.toLowerCase().endsWith('.heif') ||\n          file.type === 'image/heic' ||\n          file.type === 'image/heif';\n\n        if (isHeic) {\n          try {\n            // Dynamically import heic2any - handle both default and named exports\n            const heic2anyModule = await import('heic2any');\n            const heic2any = heic2anyModule.default || heic2anyModule;\n\n            const convertedBlob = await heic2any({\n              blob: file,\n              toType: 'image/jpeg',\n              quality: 0.9,\n            });\n            const blob = Array.isArray(convertedBlob)\n              ? convertedBlob[0]\n              : convertedBlob;\n\n            if (!blob) {\n              throw new Error('Failed to convert HEIC file');\n            }\n\n            processedFile = new File(\n              [blob],\n              file.name.replace(/\\.heic$/i, '.jpg').replace(/\\.heif$/i, '.jpg'),\n              { type: 'image/jpeg' }\n            );\n          } catch (error) {\n            debug.error(\n              'ManualSessionRecorder - Error converting HEIC:',\n              error\n            );\n            // More helpful error message\n            alert(\n              `HEIC conversion is currently unavailable. Please convert ${file.name} to JPG or PNG before uploading, or try refreshing the page.`\n            );\n            continue;\n          }\n        }\n\n        if (!processedFile.type.startsWith('image/')) {\n          alert(`${file.name} is not an image file`);\n          continue;\n        }\n\n        if (processedFile.size > 10 * 1024 * 1024) {\n          alert(`${file.name} is too large. Maximum size is 10MB`);\n          continue;\n        }\n\n        validFiles.push(processedFile);\n        const previewUrl = URL.createObjectURL(processedFile);\n        previewUrls.push(previewUrl);\n      } catch (error) {\n        debug.error('ManualSessionRecorder - Error processing image:', error);\n        alert(`Failed to process ${file.name}`);\n      }\n    }\n\n    if (validFiles.length > 0) {\n      setSelectedImages(prev => [...prev, ...validFiles]);\n      setImagePreviewUrls(prev => [...prev, ...previewUrls]);\n    }\n  };\n\n  const handleRemoveImage = (index: number) => {\n    const imageUrl = imagePreviewUrls[index];\n    if (imageUrl) {\n      URL.revokeObjectURL(imageUrl);\n    }\n    setSelectedImages(prev => prev.filter((_, i) => i !== index));\n    setImagePreviewUrls(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const calculateDuration = (): number => {\n    // Use manual duration input\n    const hours = parseInt(manualDurationHours) || 0;\n    const minutes = parseInt(manualDurationMinutes) || 0;\n    return hours * 3600 + minutes * 60;\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!projectId) {\n      newErrors.projectId = 'Please select a project';\n    }\n\n    if (!title.trim()) {\n      newErrors.title = 'Please enter a session title';\n    }\n\n    const duration = calculateDuration();\n    if (duration <= 0) {\n      newErrors.duration = 'Duration must be greater than 0';\n    }\n\n    if (!sessionDate) {\n      newErrors.sessionDate = 'Please select a date';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm() || !user) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const duration = calculateDuration();\n\n      // Parse the session date and start time in local timezone\n      // NOTE: Using parseLocalDateTime to avoid UTC interpretation issues\n      if (!sessionDate || !startTime) {\n        setErrors({ sessionDate: 'Date and time are required' });\n        setIsLoading(false);\n        return;\n      }\n      const sessionDateTime = parseLocalDateTime(sessionDate, startTime);\n\n      // Upload images first if any\n      let imageUrls: string[] = [];\n      if (selectedImages.length > 0) {\n        setIsUploadingImages(true);\n        try {\n          const uploadResults = await uploadImages(selectedImages);\n          imageUrls = uploadResults.map(result => result.url);\n        } catch (error) {\n          debug.error(\n            'ManualSessionRecorder - Failed to upload images:',\n            error\n          );\n          setErrors({ submit: 'Failed to upload images. Please try again.' });\n          setIsUploadingImages(false);\n          setIsLoading(false);\n          return;\n        }\n        setIsUploadingImages(false);\n      }\n\n      const formData: CreateSessionData = {\n        activityId: '',\n        projectId,\n        title,\n        description,\n        duration,\n        startTime: sessionDateTime,\n        tags: [],\n        visibility,\n        privateNotes,\n        images: imageUrls,\n      };\n\n      // Create session with post\n      await firebaseApi.session.createSessionWithPost(\n        formData,\n        description,\n        visibility\n      );\n\n      // Invalidate caches to refresh UI immediately\n      if (user) {\n        queryClient.invalidateQueries({\n          queryKey: ['user', 'sessions', user.id],\n        });\n        queryClient.invalidateQueries({ queryKey: ['user', 'stats', user.id] });\n        queryClient.invalidateQueries({ queryKey: ['streak', user.id] });\n        queryClient.invalidateQueries({ queryKey: ['feed'] });\n        queryClient.invalidateQueries({ queryKey: ['sessions', 'feed'] });\n      }\n\n      // Show success message\n      toast.success('Session created successfully!');\n\n      // Redirect to home feed\n      router.push('/');\n    } catch (error) {\n      debug.error(\n        'ManualSessionRecorder - Failed to create manual session:',\n        error\n      );\n      toast.error('Failed to create session. Please try again.');\n      setErrors({ submit: 'Failed to create session. Please try again.' });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Main Header - hidden on mobile */}\n      <div className=\"hidden md:block\">\n        <Header />\n      </div>\n\n      {/* Header with Cancel and Save Session title */}\n      <div className=\"max-w-2xl mx-auto px-4 sm:px-6 pt-4\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <button\n            onClick={() => router.back()}\n            className=\"text-[#007AFF] hover:text-[#0051D5] font-semibold text-base\"\n            disabled={isLoading}\n          >\n            Cancel\n          </button>\n          <h3 className=\"text-base font-semibold text-gray-900\">\n            Log Manual Session\n          </h3>\n          <div className=\"w-16\"></div> {/* Spacer for centering */}\n        </div>\n      </div>\n\n      {/* Form */}\n      <div className=\"max-w-2xl mx-auto px-4 sm:px-6\">\n        <form onSubmit={handleSubmit} className=\"space-y-3 sm:space-y-4\">\n          {/* Session Title */}\n          <input\n            type=\"text\"\n            value={title}\n            onChange={e => setTitle(e.target.value)}\n            className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] text-base ${\n              errors.title ? 'border-red-500' : 'border-gray-300'\n            }`}\n            placeholder=\"Afternoon Work Session\"\n            disabled={isLoading}\n          />\n          {errors.title && (\n            <p className=\"text-red-500 text-sm -mt-2\">{errors.title}</p>\n          )}\n\n          {/* Description */}\n          <textarea\n            value={description}\n            onChange={e => setDescription(e.target.value)}\n            rows={3}\n            className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] text-base\"\n            placeholder=\"How'd it go? Share more about your session.\"\n            disabled={isLoading}\n          />\n\n          {/* Project Selection */}\n          <select\n            value={projectId}\n            onChange={e => setProjectId(e.target.value)}\n            className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] bg-white text-base ${\n              errors.projectId ? 'border-red-500' : 'border-gray-300'\n            }`}\n            disabled={isLoading}\n          >\n            <option value=\"\">Select an activity</option>\n            {projects.map(project => (\n              <option key={project.id} value={project.id}>\n                {project.name}\n              </option>\n            ))}\n          </select>\n          {errors.projectId && (\n            <p className=\"text-red-500 text-sm -mt-2\">{errors.projectId}</p>\n          )}\n\n          {/* Image Upload */}\n          <div className=\"max-w-md\">\n            <div className=\"space-y-3\">\n              {/* Image Previews */}\n              {imagePreviewUrls.length > 0 && (\n                <div className=\"grid grid-cols-3 gap-2\">\n                  {imagePreviewUrls.map((url, index) => (\n                    <div\n                      key={index}\n                      className=\"relative aspect-square rounded-lg overflow-hidden bg-gray-100\"\n                    >\n                      <Image\n                        src={url}\n                        alt={`Preview ${index + 1}`}\n                        width={300}\n                        height={300}\n                        quality={90}\n                        className=\"w-full h-full object-cover\"\n                        unoptimized\n                        onClick={() => setActionSheetIndex(index)}\n                      />\n                      {/* Desktop X button */}\n                      <button\n                        type=\"button\"\n                        onClick={() => handleRemoveImage(index)}\n                        className=\"hidden md:block absolute top-1 right-1 p-0.5 text-white hover:text-red-500 transition-colors\"\n                        aria-label=\"Remove image\"\n                        style={{\n                          filter: 'drop-shadow(0 1px 2px rgb(0 0 0 / 0.9))',\n                        }}\n                      >\n                        <X\n                          className=\"w-5 h-5\"\n                          strokeWidth={3}\n                          aria-hidden=\"true\"\n                        />\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              {/* Delete confirmation modal */}\n              <DeleteConfirm\n                isOpen={actionSheetIndex !== null}\n                onClose={() => setActionSheetIndex(null)}\n                onDelete={() => {\n                  if (actionSheetIndex !== null) {\n                    handleRemoveImage(actionSheetIndex);\n                    setActionSheetIndex(null);\n                  }\n                }}\n              />\n\n              {/* Upload Button */}\n              {selectedImages.length < 3 && (\n                <label className=\"flex flex-col items-center justify-center gap-2 px-8 py-8 border-[3px] border-dashed border-[#007AFF] rounded-lg cursor-pointer hover:border-[#0051D5] hover:bg-gray-50 transition-colors max-w-[240px]\">\n                  <ImageIcon className=\"w-8 h-8 text-[#007AFF]\" />\n                  <span className=\"text-sm font-medium text-[#007AFF]\">\n                    {imagePreviewUrls.length === 0\n                      ? 'Add images'\n                      : `Add ${3 - imagePreviewUrls.length} more`}\n                  </span>\n                  <input\n                    type=\"file\"\n                    accept=\"image/*,.heic,.heif\"\n                    multiple\n                    onChange={handleImageSelect}\n                    className=\"hidden\"\n                  />\n                </label>\n              )}\n            </div>\n          </div>\n\n          {/* Date and Time Section */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n              Date & Time\n            </label>\n\n            <div className=\"space-y-3\">\n              {/* Date */}\n              <div>\n                <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                  Date\n                </label>\n                <input\n                  type=\"date\"\n                  value={sessionDate}\n                  onChange={e => setSessionDate(e.target.value)}\n                  max={new Date().toISOString().split('T')[0]}\n                  className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] text-sm ${\n                    errors.sessionDate ? 'border-red-500' : 'border-gray-300'\n                  }`}\n                  disabled={isLoading}\n                  required\n                />\n                {errors.sessionDate && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {errors.sessionDate}\n                  </p>\n                )}\n              </div>\n\n              {/* Start Time */}\n              <div>\n                <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                  Start Time\n                </label>\n                <input\n                  type=\"time\"\n                  value={startTime}\n                  onChange={e => setStartTime(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] text-sm\"\n                  disabled={isLoading}\n                />\n              </div>\n\n              {/* Duration */}\n              <div>\n                <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                  Duration\n                </label>\n                <div className=\"flex gap-3\">\n                  <div className=\"flex-1\">\n                    <input\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"23\"\n                      value={manualDurationHours}\n                      onChange={e => setManualDurationHours(e.target.value)}\n                      className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] text-sm ${\n                        errors.duration ? 'border-red-500' : 'border-gray-300'\n                      }`}\n                      placeholder=\"Hours\"\n                      disabled={isLoading}\n                    />\n                  </div>\n                  <div className=\"flex-1\">\n                    <input\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"59\"\n                      value={manualDurationMinutes}\n                      onChange={e => setManualDurationMinutes(e.target.value)}\n                      className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] text-sm ${\n                        errors.duration ? 'border-red-500' : 'border-gray-300'\n                      }`}\n                      placeholder=\"Minutes\"\n                      disabled={isLoading}\n                    />\n                  </div>\n                </div>\n                {errors.duration && (\n                  <p className=\"text-red-500 text-sm mt-1\">{errors.duration}</p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Visibility */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Visibility\n            </label>\n            <select\n              value={visibility}\n              onChange={e =>\n                setVisibility(\n                  e.target.value as 'everyone' | 'followers' | 'private'\n                )\n              }\n              className=\"w-full pl-3 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] appearance-none bg-white min-h-[44px]\"\n              style={{\n                backgroundImage:\n                  \"url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='%23666' d='M6 9L1 4h10z'/%3E%3C/svg%3E\\\")\",\n                backgroundRepeat: 'no-repeat',\n                backgroundPosition: 'right 0.75rem center',\n              }}\n              disabled={isLoading}\n            >\n              <option value=\"everyone\">Everyone</option>\n              <option value=\"followers\">Followers</option>\n              <option value=\"private\">Only You</option>\n            </select>\n          </div>\n\n          {/* Error Message */}\n          {errors.submit && (\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n              <p className=\"text-red-600 text-sm\">{errors.submit}</p>\n            </div>\n          )}\n\n          {/* Save Button */}\n          <button\n            type=\"submit\"\n            className=\"w-full px-4 py-3 bg-[#007AFF] text-white rounded-lg hover:bg-[#0051D5] transition-colors disabled:opacity-50 disabled:cursor-not-allowed font-semibold text-base mt-4\"\n            disabled={isLoading || isUploadingImages}\n          >\n            {isUploadingImages\n              ? 'Uploading...'\n              : isLoading\n                ? 'Creating...'\n                : 'Create Session'}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/MobileHeader.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/NotificationIcon.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/NotificationSettings.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Heart' is defined but never used.",
        "line": 16,
        "column": 32,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 37
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'MessageCircle' is defined but never used.",
        "line": 16,
        "column": 39,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 52
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Flame' is defined but never used.",
        "line": 16,
        "column": 72,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 77
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { NotificationPreferences } from '@/types';\nimport { Button } from '@/components/ui/button';\nimport { Switch } from '@/components/ui/switch';\nimport {\n  SettingsSection,\n  SettingsHeader,\n  SettingsCard,\n  SettingsCardHeader,\n  SettingsCardContent,\n  SettingsRow,\n  SettingsRowGroup\n} from '@/components/ui/settings-section';\nimport { Bell, Mail, BellRing, Heart, MessageCircle, UserPlus, Trophy, Flame, Users } from 'lucide-react';\nimport { debug } from '@/lib/debug';\n\ninterface NotificationSettingsProps {\n  onClose?: () => void;\n  isModal?: boolean;\n}\n\nconst defaultPreferences: NotificationPreferences = {\n  email: {\n    follows: true,\n    supports: true,\n    comments: true,\n    mentions: true,\n    replies: true,\n    achievements: true,\n    streaks: true,\n    groupPosts: false,\n    challenges: true,\n  },\n  inApp: {\n    follows: true,\n    supports: true,\n    comments: true,\n    mentions: true,\n    replies: true,\n    achievements: true,\n    streaks: true,\n    groupPosts: true,\n    challenges: true,\n  }\n};\n\nexport const NotificationSettings: React.FC<NotificationSettingsProps> = ({ \n  onClose, \n  isModal = false \n}) => {\n  const [preferences, setPreferences] = useState<NotificationPreferences>(defaultPreferences);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n\n  useEffect(() => {\n    loadPreferences();\n  }, []);\n\n  const loadPreferences = async () => {\n    try {\n      setIsLoading(true);\n      // TODO: Implement notification preferences API in firebaseUserApi\n      // Need to create getNotificationPreferences() and updateNotificationPreferences() methods\n      // For now, use defaults\n      setPreferences(defaultPreferences);\n    } catch (error) {\n      debug.error('NotificationSettings - Failed to load notification preferences:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleToggle = (\n    category: 'email' | 'inApp',\n    key: keyof NotificationPreferences['email']\n  ) => {\n    setPreferences(prev => ({\n      ...prev,\n      [category]: {\n        ...prev[category],\n        [key]: !prev[category][key]\n      }\n    }));\n  };\n\n  const handleSave = async () => {\n    try {\n      setIsSaving(true);\n      // TODO: Implement notification preferences save API in firebaseUserApi\n      // Need updateNotificationPreferences() method to persist to Firestore\n      alert('Notification preferences saved successfully!');\n    } catch (error) {\n      debug.error('NotificationSettings - Failed to save notification preferences:', error);\n      alert('Failed to save notification preferences');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const NotificationToggle = ({\n    label,\n    description,\n    emailEnabled,\n    inAppEnabled,\n    settingKey\n  }: {\n    label: string;\n    description: string;\n    emailEnabled: boolean;\n    inAppEnabled: boolean;\n    settingKey: keyof NotificationPreferences['email'];\n  }) => (\n    <SettingsRow label={label} description={description}>\n      <div className=\"flex gap-4 items-center\">\n        <div className=\"flex items-center gap-2\">\n          <Mail className=\"w-4 h-4 text-gray-400\" />\n          <Switch\n            checked={emailEnabled}\n            onCheckedChange={() => handleToggle('email', settingKey)}\n          />\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Bell className=\"w-4 h-4 text-gray-400\" />\n          <Switch\n            checked={inAppEnabled}\n            onCheckedChange={() => handleToggle('inApp', settingKey)}\n          />\n        </div>\n      </div>\n    </SettingsRow>\n  );\n\n  if (isLoading) {\n    return (\n      <SettingsSection>\n        {[1, 2].map((i) => (\n          <SettingsCard key={i} className=\"animate-pulse\">\n            <SettingsCardHeader title=\"\" description=\"\" />\n            <SettingsCardContent>\n              <div className=\"space-y-3\">\n                <div className=\"h-10 bg-gray-200 rounded\" />\n                <div className=\"h-10 bg-gray-200 rounded\" />\n                <div className=\"h-10 bg-gray-200 rounded\" />\n              </div>\n            </SettingsCardContent>\n          </SettingsCard>\n        ))}\n      </SettingsSection>\n    );\n  }\n\n  return (\n    <SettingsSection>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <SettingsHeader\n          icon={BellRing}\n          title=\"Email Notifications\"\n          description=\"Choose how you want to be notified about activity\"\n        />\n        {isModal && onClose && (\n          <Button variant=\"ghost\" onClick={onClose}>\n            Close\n          </Button>\n        )}\n      </div>\n\n      {/* Legend */}\n      <SettingsCard>\n        <SettingsCardContent>\n          <div className=\"flex items-center justify-end gap-6 text-sm text-gray-600\">\n            <div className=\"flex items-center gap-2\">\n              <Mail className=\"w-4 h-4\" />\n              <span>Email</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Bell className=\"w-4 h-4\" />\n              <span>In-App</span>\n            </div>\n          </div>\n        </SettingsCardContent>\n      </SettingsCard>\n\n      {/* Social Notifications */}\n      <SettingsCard>\n        <SettingsCardHeader\n          icon={UserPlus}\n          title=\"Social Notifications\"\n          description=\"Get notified when people interact with you\"\n        />\n        <SettingsCardContent>\n          <SettingsRowGroup>\n            <NotificationToggle\n              label=\"New Followers\"\n              description=\"Someone starts following you\"\n              emailEnabled={preferences.email.follows}\n              inAppEnabled={preferences.inApp.follows}\n              settingKey=\"follows\"\n            />\n            <NotificationToggle\n              label=\"Post Support\"\n              description=\"Someone gives support to your post\"\n              emailEnabled={preferences.email.supports}\n              inAppEnabled={preferences.inApp.supports}\n              settingKey=\"supports\"\n            />\n            <NotificationToggle\n              label=\"Comments\"\n              description=\"Someone comments on your post\"\n              emailEnabled={preferences.email.comments}\n              inAppEnabled={preferences.inApp.comments}\n              settingKey=\"comments\"\n            />\n            <NotificationToggle\n              label=\"Mentions\"\n              description=\"Someone mentions you in a comment\"\n              emailEnabled={preferences.email.mentions}\n              inAppEnabled={preferences.inApp.mentions}\n              settingKey=\"mentions\"\n            />\n            <NotificationToggle\n              label=\"Replies\"\n              description=\"Someone replies to your comment\"\n              emailEnabled={preferences.email.replies}\n              inAppEnabled={preferences.inApp.replies}\n              settingKey=\"replies\"\n            />\n          </SettingsRowGroup>\n        </SettingsCardContent>\n      </SettingsCard>\n\n      {/* Activity Notifications */}\n      <SettingsCard>\n        <SettingsCardHeader\n          icon={Trophy}\n          title=\"Activity Notifications\"\n          description=\"Get notified about your productivity milestones\"\n        />\n        <SettingsCardContent>\n          <SettingsRowGroup>\n            <NotificationToggle\n              label=\"Achievements\"\n              description=\"You unlock a new achievement\"\n              emailEnabled={preferences.email.achievements}\n              inAppEnabled={preferences.inApp.achievements}\n              settingKey=\"achievements\"\n            />\n            <NotificationToggle\n              label=\"Streak Reminders\"\n              description=\"Daily reminder to maintain your streak\"\n              emailEnabled={preferences.email.streaks}\n              inAppEnabled={preferences.inApp.streaks}\n              settingKey=\"streaks\"\n            />\n          </SettingsRowGroup>\n        </SettingsCardContent>\n      </SettingsCard>\n\n      {/* Group Notifications */}\n      <SettingsCard>\n        <SettingsCardHeader\n          icon={Users}\n          title=\"Group & Challenge Notifications\"\n          description=\"Get notified about group activities and challenges\"\n        />\n        <SettingsCardContent>\n          <SettingsRowGroup>\n            <NotificationToggle\n              label=\"Group Posts\"\n              description=\"New posts in your groups\"\n              emailEnabled={preferences.email.groupPosts}\n              inAppEnabled={preferences.inApp.groupPosts}\n              settingKey=\"groupPosts\"\n            />\n            <NotificationToggle\n              label=\"Challenges\"\n              description=\"Challenge invitations and updates\"\n              emailEnabled={preferences.email.challenges}\n              inAppEnabled={preferences.inApp.challenges}\n              settingKey=\"challenges\"\n            />\n          </SettingsRowGroup>\n        </SettingsCardContent>\n      </SettingsCard>\n\n      {/* Save Button */}\n      <div className=\"flex justify-end pt-2\">\n        <Button\n          onClick={handleSave}\n          disabled={isSaving}\n          className=\"min-w-[120px] bg-[#007AFF] hover:bg-[#0051D5]\"\n        >\n          {isSaving ? (\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n              Saving...\n            </div>\n          ) : (\n            'Save Preferences'\n          )}\n        </Button>\n      </div>\n    </SettingsSection>\n  );\n};\n\nexport default NotificationSettings;\n\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/NotificationsPanel.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'X' is defined but never used.",
        "line": 24,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 4
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isLoading' is assigned a value but never used.",
        "line": 60,
        "column": 37,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 60,
        "endColumn": 46
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport {\n  useNotifications,\n  useUnreadCount,\n  useMarkNotificationRead,\n  useMarkAllNotificationsRead,\n  useDeleteNotification,\n  useClearAllNotifications,\n} from '@/hooks/useNotifications';\nimport { useRouter } from 'next/navigation';\nimport { formatDistanceToNow } from 'date-fns';\nimport {\n  Bell,\n  Heart,\n  MessageCircle,\n  UserPlus,\n  Users,\n  Trophy,\n  Reply,\n  AtSign,\n  Check,\n  X,\n  Trash2,\n} from 'lucide-react';\nimport { Notification } from '@/types';\n\ninterface NotificationsPanelProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst getNotificationIcon = (type: Notification['type']) => {\n  const iconClass = \"w-5 h-5 text-gray-600\";\n\n  switch (type) {\n    case 'follow':\n      return <UserPlus className={iconClass} />;\n    case 'support':\n      return <Heart className={iconClass} />;\n    case 'comment':\n      return <MessageCircle className={iconClass} />;\n    case 'reply':\n      return <Reply className={iconClass} />;\n    case 'mention':\n      return <AtSign className={iconClass} />;\n    case 'group':\n      return <Users className={iconClass} />;\n    case 'challenge':\n      return <Trophy className={iconClass} />;\n    default:\n      return <Bell className={iconClass} />;\n  }\n};\n\n\nexport default function NotificationsPanel({ isOpen, onClose }: NotificationsPanelProps) {\n  // Enable real-time updates for notifications panel\n  const { data: notifications = [], isLoading } = useNotifications({ realtime: true });\n  const unreadCount = useUnreadCount();\n  const markAsReadMutation = useMarkNotificationRead();\n  const markAllAsReadMutation = useMarkAllNotificationsRead();\n  const deleteNotificationMutation = useDeleteNotification();\n  const clearAllNotificationsMutation = useClearAllNotifications();\n  const router = useRouter();\n  const [deletingIds, setDeletingIds] = useState<Set<string>>(new Set());\n  const [hoveredId, setHoveredId] = useState<string | null>(null);\n\n  const handleNotificationClick = (notification: Notification) => {\n    // Close panel and navigate immediately for better UX\n    onClose();\n\n    // Navigate to the link\n    if (notification.linkUrl) {\n      router.push(notification.linkUrl);\n    }\n\n    // Mark as read in the background (don't await) - using React Query mutation\n    if (!notification.isRead) {\n      markAsReadMutation.mutate(notification.id);\n    }\n  };\n\n  const handleDelete = async (e: React.MouseEvent, notificationId: string) => {\n    e.stopPropagation();\n\n    // Get the current mouse position\n    const mouseY = e.clientY;\n\n    setDeletingIds((prev) => new Set(prev).add(notificationId));\n\n    // Use React Query mutation with optimistic updates\n    await deleteNotificationMutation.mutateAsync(notificationId);\n\n    setDeletingIds((prev) => {\n      const next = new Set(prev);\n      next.delete(notificationId);\n      return next;\n    });\n\n    // After deletion, check which notification is now under the mouse cursor\n    const elementAtPoint = document.elementFromPoint(e.clientX, mouseY);\n    const notificationElement = elementAtPoint?.closest('[data-notification-id]');\n    if (notificationElement) {\n      const newNotificationId = notificationElement.getAttribute('data-notification-id');\n      if (newNotificationId) {\n        setHoveredId(newNotificationId);\n      }\n    }\n  };\n\n  const handleMarkAllRead = async () => {\n    await markAllAsReadMutation.mutateAsync();\n  };\n\n  const handleClearAll = async () => {\n    await clearAllNotificationsMutation.mutateAsync();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div\n        className=\"fixed inset-0 z-40\"\n        onClick={onClose}\n      />\n\n      {/* Dropdown Panel */}\n      <div className=\"absolute top-12 right-0 w-[400px] max-h-[500px] bg-white z-50 shadow-2xl rounded-lg border border-gray-200 flex flex-col\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between px-4 py-3 border-b border-gray-200\">\n          <div className=\"flex items-center gap-2\">\n            <h3 className=\"text-base font-semibold text-gray-900\">Notifications</h3>\n            {unreadCount > 0 && (\n              <span className=\"bg-[#007AFF] text-white text-xs font-semibold px-2 py-0.5 rounded-full\">\n                {unreadCount}\n              </span>\n            )}\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {unreadCount > 0 && (\n              <button\n                onClick={handleMarkAllRead}\n                className=\"text-xs text-[#007AFF] hover:text-[#0051D5] font-medium flex items-center gap-1\"\n              >\n                <Check className=\"w-3 h-3\" />\n                Mark all read\n              </button>\n            )}\n            {notifications.length > 0 && (\n              <button\n                onClick={handleClearAll}\n                className=\"text-xs text-gray-600 hover:text-gray-900 font-medium flex items-center gap-1\"\n              >\n                <Trash2 className=\"w-3 h-3\" />\n                Clear all\n              </button>\n            )}\n          </div>\n        </div>\n\n        {/* Notifications list */}\n        <div className=\"flex-1 overflow-y-auto\">\n          {notifications.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center py-12 text-center px-4\">\n              <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mb-3\">\n                <Bell className=\"w-6 h-6 text-gray-400\" />\n              </div>\n              <p className=\"text-sm text-gray-500\">No notifications yet</p>\n            </div>\n          ) : (\n            <div className=\"divide-y divide-gray-100\">\n              {notifications.map((notification) => (\n                <div\n                  key={notification.id}\n                  data-notification-id={notification.id}\n                  onClick={() => handleNotificationClick(notification)}\n                  onMouseEnter={() => setHoveredId(notification.id)}\n                  onMouseLeave={() => setHoveredId(null)}\n                  className={`px-4 py-3 hover:bg-gray-50 cursor-pointer transition-colors relative ${\n                    !notification.isRead ? 'bg-gray-100' : ''\n                  } ${deletingIds.has(notification.id) ? 'opacity-50' : ''}`}\n                >\n                  <div className=\"flex items-start gap-3\">\n                    {/* Icon */}\n                    <div className=\"flex-shrink-0 w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center\">\n                      {getNotificationIcon(notification.type)}\n                    </div>\n\n                    {/* Content */}\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-semibold text-gray-900\">\n                        {notification.title}\n                      </p>\n                      <p className=\"text-sm text-gray-700 mt-0.5\">\n                        {notification.message}\n                      </p>\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        {formatDistanceToNow(notification.createdAt, { addSuffix: true })}\n                      </p>\n                    </div>\n\n                    {/* Delete button (shown on hover) or Unread indicator */}\n                    <div className=\"flex-shrink-0\">\n                      {hoveredId === notification.id ? (\n                        <button\n                          onClick={(e) => handleDelete(e, notification.id)}\n                          className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n                          disabled={deletingIds.has(notification.id)}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </button>\n                      ) : (\n                        !notification.isRead && (\n                          <div className=\"w-2 h-2 bg-[#007AFF] rounded-full mt-2\" />\n                        )\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/PWAInstallPrompt.tsx",
    "messages": [
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 88,
        "column": 15,
        "nodeType": "JSXOpeningElement",
        "endLine": 92,
        "endColumn": 17
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { X, Share, Plus, MoreVertical, Square } from 'lucide-react';\n\ntype Platform = 'ios' | 'android' | 'unknown';\n\ninterface PWAInstallPromptProps {\n  /**\n   * If true, always show the prompt on mobile browsers, ignoring localStorage dismissal\n   * Useful for sign in/sign up pages where we want to encourage PWA installation\n   */\n  alwaysShowOnMobile?: boolean;\n}\n\nexport const PWAInstallPrompt: React.FC<PWAInstallPromptProps> = ({ alwaysShowOnMobile = false }) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const [platform, setPlatform] = useState<Platform>('unknown');\n  const [activeTab, setActiveTab] = useState<'ios' | 'android'>('ios');\n\n  useEffect(() => {\n    // Check if already installed as PWA\n    const isStandalone = window.matchMedia('(display-mode: standalone)').matches;\n    if (isStandalone) {\n      return;\n    }\n\n    // Check if user has already dismissed the prompt\n    // Even with alwaysShowOnMobile, we respect user dismissal to avoid annoying them\n    const hasSeenPrompt = localStorage.getItem('pwa-install-prompt-dismissed');\n    if (hasSeenPrompt === 'true') {\n      return;\n    }\n\n    // Detect platform\n    const userAgent = navigator.userAgent.toLowerCase();\n    const isIOS = /iphone|ipad|ipod/.test(userAgent);\n    const isAndroid = /android/.test(userAgent);\n\n    if (isIOS) {\n      setPlatform('ios');\n      setActiveTab('ios');\n    } else if (isAndroid) {\n      setPlatform('android');\n      setActiveTab('android');\n    } else {\n      // Desktop or unknown - don't show prompt\n      return;\n    }\n\n    // Show prompt immediately\n    setIsVisible(true);\n  }, [alwaysShowOnMobile]);\n\n  const handleDismiss = () => {\n    setIsVisible(false);\n    // Always save dismissal state to respect user preference\n    localStorage.setItem('pwa-install-prompt-dismissed', 'true');\n  };\n\n  if (!isVisible || platform === 'unknown') {\n    return null;\n  }\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center pointer-events-none p-4\">\n      {/* Dark overlay */}\n      <div \n        className=\"absolute inset-0 bg-black/60 backdrop-blur-sm pointer-events-auto\"\n        onClick={handleDismiss}\n      />\n\n      {/* Popup */}\n      <div className=\"relative w-full max-w-lg bg-white rounded-2xl shadow-2xl pointer-events-auto animate-slide-up\">\n        {/* Close button */}\n        <button\n          onClick={handleDismiss}\n          className=\"absolute top-4 right-4 p-2 rounded-full hover:bg-gray-100 transition-colors z-10\"\n          aria-label=\"Close\"\n        >\n          <X className=\"w-5 h-5 text-gray-500\" />\n        </button>\n\n        {/* Header */}\n        <div className=\"px-6 pt-6 pb-4\">\n          <div className=\"flex items-center gap-3 mb-2\">\n            <div className=\"w-12 h-12 rounded-xl overflow-hidden shadow-lg\">\n              <img \n                src=\"/icon-512x512.png\" \n                alt=\"Ambira Logo\" \n                className=\"w-full h-full object-cover\"\n              />\n            </div>\n            <div>\n              <h3 className=\"text-xl font-bold text-gray-900\">Install Ambira</h3>\n              <p className=\"text-sm text-gray-600\">Add to your home screen</p>\n            </div>\n          </div>\n          <p className=\"text-sm text-gray-600\">\n            Get quick access and a better experience with our app\n          </p>\n        </div>\n\n        {/* Tabs */}\n        <div className=\"flex border-b border-gray-200 px-6\">\n          <button\n            onClick={() => setActiveTab('ios')}\n            className={`flex-1 py-3 text-sm font-medium border-b-2 transition-colors ${\n              activeTab === 'ios'\n                ? 'border-[#007AFF] text-[#007AFF]'\n                : 'border-transparent text-gray-500 hover:text-gray-700'\n            }`}\n          >\n            iPhone / iPad\n          </button>\n          <button\n            onClick={() => setActiveTab('android')}\n            className={`flex-1 py-3 text-sm font-medium border-b-2 transition-colors ${\n              activeTab === 'android'\n                ? 'border-[#007AFF] text-[#007AFF]'\n                : 'border-transparent text-gray-500 hover:text-gray-700'\n            }`}\n          >\n            Android\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"px-6 py-6\">\n          {activeTab === 'ios' ? (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"flex-shrink-0 w-10 h-10 bg-[#007AFF]/10 rounded-full flex items-center justify-center\">\n                  <span className=\"text-[#007AFF] font-semibold text-lg\">1</span>\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-gray-900 font-semibold text-lg mb-2\">Press the Share button</p>\n                  <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                    <div className=\"relative w-5 h-5\">\n                      <Square className=\"w-5 h-5 absolute\" />\n                      <Share className=\"w-3 h-3 absolute top-1 left-1\" />\n                    </div>\n                    <span>in your browser</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-4\">\n                <div className=\"flex-shrink-0 w-10 h-10 bg-[#007AFF]/10 rounded-full flex items-center justify-center\">\n                  <span className=\"text-[#007AFF] font-semibold text-lg\">2</span>\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-gray-900 font-semibold text-lg mb-2\">Select \"Add to Home Screen\"</p>\n                  <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                    <Plus className=\"w-5 h-5\" />\n                    <span>Scroll down if you don't see it</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-4\">\n                <div className=\"flex-shrink-0 w-10 h-10 bg-[#007AFF]/10 rounded-full flex items-center justify-center\">\n                  <span className=\"text-[#007AFF] font-semibold text-lg\">3</span>\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-gray-900 font-semibold text-lg mb-2\">Tap \"Add\" to confirm</p>\n                  <p className=\"text-base text-gray-600\">The app will appear on your home screen</p>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-start gap-4\">\n                <div className=\"flex-shrink-0 w-10 h-10 bg-[#007AFF]/10 rounded-full flex items-center justify-center\">\n                  <span className=\"text-[#007AFF] font-semibold text-lg\">1</span>\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-gray-900 font-semibold text-lg mb-2\">Tap the menu button</p>\n                  <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                    <MoreVertical className=\"w-5 h-5\" />\n                    <span>in the top-right corner</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-4\">\n                <div className=\"flex-shrink-0 w-10 h-10 bg-[#007AFF]/10 rounded-full flex items-center justify-center\">\n                  <span className=\"text-[#007AFF] font-semibold text-lg\">2</span>\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-gray-900 font-semibold text-lg mb-2\">Select \"Add to Home screen\"</p>\n                  <div className=\"flex items-center gap-2 text-base text-gray-600\">\n                    <Plus className=\"w-5 h-5\" />\n                    <span>or \"Install app\"</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-start gap-4\">\n                <div className=\"flex-shrink-0 w-10 h-10 bg-[#007AFF]/10 rounded-full flex items-center justify-center\">\n                  <span className=\"text-[#007AFF] font-semibold text-lg\">3</span>\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-gray-900 font-semibold text-lg mb-2\">Tap \"Install\" to confirm</p>\n                  <p className=\"text-base text-gray-600\">The app will appear on your home screen</p>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PWAInstallPrompt;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/PWAInstaller.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'registration' is defined but never used.",
        "line": 11,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 13,
        "column": 19,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 24
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useEffect } from 'react';\n\nexport default function PWAInstaller() {\n  useEffect(() => {\n    if ('serviceWorker' in navigator) {\n      window.addEventListener('load', () => {\n        navigator.serviceWorker\n          .register('/sw.js')\n          .then((registration) => {\n          })\n          .catch((error) => {\n          });\n      });\n    }\n  }, []);\n\n  return null;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/PersonalAnalyticsDashboard.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'StreakDisplay' is defined but never used.",
        "line": 15,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 23
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadSessions'. Either include it or remove the dependency array.",
        "line": 44,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 44,
        "endColumn": 41,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [selectedPeriod, userId, projectId, loadSessions]",
            "fix": {
              "range": [1267, 1302],
              "text": "[selectedPeriod, userId, projectId, loadSessions]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 49,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 49,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1400, 1403], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1400, 1403], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Clock,\n  Target,\n  CheckSquare,\n  Flame,\n  Calendar,\n  TrendingUp,\n} from 'lucide-react';\nimport { StatsCard } from './StatsCard';\nimport { ActivityChart } from './ActivityChart';\nimport { HeatmapCalendar } from './HeatmapCalendar';\nimport { StreakDisplay } from './StreakDisplay';\nimport { AnalyticsPeriod, Session } from '@/types';\nimport { firebaseSessionApi } from '@/lib/api';\n\ninterface PersonalAnalyticsDashboardProps {\n  userId: string;\n  projectId?: string;\n}\n\nconst PERIODS: AnalyticsPeriod[] = [\n  { label: '7 Days', value: '7d', days: 7 },\n  { label: '1 Month', value: '1m', days: 30 },\n  { label: '3 Months', value: '3m', days: 90 },\n  { label: '6 Months', value: '6m', days: 180 },\n  { label: '1 Year', value: '1y', days: 365 },\n  { label: 'All Time', value: 'all', days: 9999 },\n];\n\nexport const PersonalAnalyticsDashboard: React.FC<\n  PersonalAnalyticsDashboardProps\n> = ({ userId, projectId }) => {\n  const [selectedPeriod, setSelectedPeriod] = useState<AnalyticsPeriod>(\n    PERIODS[1]!\n  ); // Default to 1 month\n  const [isLoading, setIsLoading] = useState(true);\n  const [sessions, setSessions] = useState<Session[]>([]);\n\n  useEffect(() => {\n    loadSessions();\n  }, [selectedPeriod, userId, projectId]);\n\n  const loadSessions = async () => {\n    try {\n      setIsLoading(true);\n      const filters: any = {};\n      if (projectId) {\n        filters.projectId = projectId;\n      }\n\n      const response = await firebaseSessionApi.getSessions(1, 500, filters);\n\n      // Filter by selected period\n      const cutoffDate = new Date();\n      if (selectedPeriod?.value !== 'all') {\n        cutoffDate.setDate(cutoffDate.getDate() - (selectedPeriod?.days || 0));\n      } else {\n        cutoffDate.setFullYear(2000); // Get all sessions\n      }\n\n      const filteredSessions = response.sessions.filter(\n        session =>\n          new Date(session.createdAt) >= cutoffDate && session.userId === userId\n      );\n\n      setSessions(filteredSessions);\n    } catch (error) {\n      console.error('Failed to load sessions:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const calculateAnalytics = () => {\n    // Calculate total hours\n    const totalSeconds = sessions.reduce(\n      (sum, s) => sum + (s.duration || 0),\n      0\n    );\n    const totalHours = totalSeconds / 3600;\n\n    // Calculate sessions\n    const totalSessions = sessions.length;\n\n    // Calculate tasks (tasks tracking not implemented at session level)\n    const totalTasks = 0;\n\n    // Calculate average session duration in minutes\n    const averageSessionDuration =\n      totalSessions > 0 ? totalSeconds / totalSessions / 60 : 0;\n\n    // Calculate streak\n    const sortedSessions = [...sessions].sort(\n      (a, b) =>\n        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n\n    let currentStreak = 0;\n    let longestStreak = 0;\n    let tempStreak = 0;\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const sessionsByDate = new Map<string, boolean>();\n    sortedSessions.forEach(s => {\n      const date = new Date(s.createdAt);\n      date.setHours(0, 0, 0, 0);\n      const dateStr = date.toISOString().split('T')[0] || '';\n      sessionsByDate.set(dateStr, true);\n    });\n\n    // Calculate current streak\n    const checkDate = new Date(today);\n    while (true) {\n      const dateStr = checkDate.toISOString().split('T')[0] || '';\n      if (sessionsByDate.has(dateStr)) {\n        currentStreak++;\n        checkDate.setDate(checkDate.getDate() - 1);\n      } else {\n        break;\n      }\n    }\n\n    // Calculate longest streak\n    const allDates = Array.from(sessionsByDate.keys()).sort().reverse();\n    tempStreak = 0;\n    let lastDate: Date | null = null;\n\n    allDates.forEach(dateStr => {\n      const date = new Date(dateStr);\n      if (!lastDate) {\n        tempStreak = 1;\n      } else {\n        const diffDays = Math.round(\n          (lastDate.getTime() - date.getTime()) / (1000 * 60 * 60 * 24)\n        );\n        if (diffDays === 1) {\n          tempStreak++;\n        } else {\n          longestStreak = Math.max(longestStreak, tempStreak);\n          tempStreak = 1;\n        }\n      }\n      lastDate = date;\n    });\n    longestStreak = Math.max(longestStreak, tempStreak);\n\n    // Calculate activity by day of week\n    const activityByDay = [\n      { day: 'Sun', hours: 0, sessions: 0 },\n      { day: 'Mon', hours: 0, sessions: 0 },\n      { day: 'Tue', hours: 0, sessions: 0 },\n      { day: 'Wed', hours: 0, sessions: 0 },\n      { day: 'Thu', hours: 0, sessions: 0 },\n      { day: 'Fri', hours: 0, sessions: 0 },\n      { day: 'Sat', hours: 0, sessions: 0 },\n    ];\n\n    sessions.forEach(s => {\n      const dayOfWeek = new Date(s.createdAt).getDay();\n      if (activityByDay[dayOfWeek]) {\n        activityByDay[dayOfWeek].hours += (s.duration || 0) / 3600;\n        activityByDay[dayOfWeek].sessions += 1;\n      }\n    });\n\n    // Calculate activity by hour\n    const activityByHour = Array.from({ length: 24 }, (_, i) => ({\n      hour: i,\n      sessions: 0,\n    }));\n\n    sessions.forEach(s => {\n      const hour = new Date(s.createdAt).getHours();\n      if (activityByHour[hour]) {\n        activityByHour[hour].sessions += 1;\n      }\n    });\n\n    // Most productive day\n    const maxDayActivity = Math.max(...activityByDay.map(d => d.hours));\n    const mostProductiveDay =\n      activityByDay.find(d => d.hours === maxDayActivity)?.day || 'N/A';\n\n    // Most productive hour\n    const maxHourActivity = Math.max(...activityByHour.map(h => h.sessions));\n    const mostProductiveHour =\n      activityByHour.find(h => h.sessions === maxHourActivity)?.hour || 0;\n\n    // Generate heatmap data\n    const heatmapData: Array<{ date: string; value: number }> = [];\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 90);\n\n    for (let i = 0; i < 90; i++) {\n      const date = new Date(startDate);\n      date.setDate(date.getDate() + i);\n      const dateStr = date.toISOString().split('T')[0] || '';\n\n      const daySessions = sessions.filter(s => {\n        const sessionDate =\n          new Date(s.createdAt).toISOString().split('T')[0] || '';\n        return sessionDate === dateStr;\n      });\n\n      const dayHours =\n        daySessions.reduce((sum, s) => sum + (s.duration || 0), 0) / 3600;\n      heatmapData.push({ date: dateStr, value: dayHours });\n    }\n\n    // Calculate comparison with previous period (mock for now)\n    const previousHours = totalHours * 0.8;\n    const previousSessions = Math.floor(totalSessions * 0.85);\n    const previousTasks = Math.floor(totalTasks * 0.9);\n\n    const hoursChange = totalHours - previousHours;\n    const hoursChangePercent =\n      previousHours > 0 ? (hoursChange / previousHours) * 100 : 0;\n\n    const sessionsChange = totalSessions - previousSessions;\n    const sessionsChangePercent =\n      previousSessions > 0 ? (sessionsChange / previousSessions) * 100 : 0;\n\n    const tasksChange = totalTasks - previousTasks;\n    const tasksChangePercent =\n      previousTasks > 0 ? (tasksChange / previousTasks) * 100 : 0;\n\n    return {\n      totalHours: {\n        current: totalHours,\n        previous: previousHours,\n        change: hoursChange,\n        changePercent: hoursChangePercent,\n        isPositive: hoursChange >= 0,\n      },\n      totalSessions: {\n        current: totalSessions,\n        previous: previousSessions,\n        change: sessionsChange,\n        changePercent: sessionsChangePercent,\n        isPositive: sessionsChange >= 0,\n      },\n      totalTasks: {\n        current: totalTasks,\n        previous: previousTasks,\n        change: tasksChange,\n        changePercent: tasksChangePercent,\n        isPositive: tasksChange >= 0,\n      },\n      averageSessionDuration,\n      currentStreak,\n      longestStreak,\n      mostProductiveDay,\n      mostProductiveHour,\n      activityByDay,\n      activityByHour,\n      heatmapData,\n    };\n  };\n\n  const mockData = calculateAnalytics();\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {[...Array(4)].map((_, i) => (\n            <div\n              key={i}\n              className=\"h-32 bg-gray-100 rounded-lg animate-pulse\"\n            ></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with period selector */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">\n            {projectId ? 'Project Analytics' : 'Personal Analytics'}\n          </h2>\n          <p className=\"text-gray-600\">\n            {projectId\n              ? 'Track your project progress and activity'\n              : 'Track your productivity and progress'}\n          </p>\n        </div>\n\n        <div className=\"flex gap-2\">\n          {PERIODS.map(period => (\n            <button\n              key={period.value}\n              onClick={() => setSelectedPeriod(period)}\n              className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n                selectedPeriod.value === period.value\n                  ? 'bg-blue-600 text-white'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              }`}\n            >\n              {period.label}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Key metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <StatsCard\n          title=\"Total Hours\"\n          value={mockData.totalHours.current}\n          icon={Clock}\n          trend={{\n            value: mockData.totalHours.changePercent,\n            isPositive: mockData.totalHours.isPositive,\n          }}\n          subtitle={`${mockData.totalHours.change.toFixed(1)}h more than last period`}\n          color=\"blue\"\n        />\n\n        <StatsCard\n          title=\"Sessions\"\n          value={mockData.totalSessions.current}\n          icon={Target}\n          trend={{\n            value: mockData.totalSessions.changePercent,\n            isPositive: mockData.totalSessions.isPositive,\n          }}\n          subtitle={`Avg ${mockData.averageSessionDuration.toFixed(0)} min per session`}\n          color=\"green\"\n        />\n\n        <StatsCard\n          title=\"Tasks Completed\"\n          value={mockData.totalTasks.current}\n          icon={CheckSquare}\n          trend={{\n            value: mockData.totalTasks.changePercent,\n            isPositive: mockData.totalTasks.isPositive,\n          }}\n          color=\"purple\"\n        />\n\n        <StatsCard\n          title=\"Current Streak\"\n          value={`${mockData.currentStreak} days`}\n          icon={Flame}\n          subtitle={`Best: ${mockData.longestStreak} days`}\n          color=\"orange\"\n        />\n      </div>\n\n      {/* Activity heatmap */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n          Activity Overview\n        </h3>\n        <HeatmapCalendar data={mockData.heatmapData} months={3} />\n      </div>\n\n      {/* Charts row */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Activity by day */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Activity by Day\n          </h3>\n          <ActivityChart\n            data={mockData.activityByDay.map(d => ({\n              label: d.day,\n              value: d.hours,\n              secondaryValue: d.sessions,\n            }))}\n            type=\"bar\"\n            height={200}\n            valueFormatter={v => `${v}h`}\n          />\n          <div className=\"flex items-center justify-center gap-6 mt-4 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 bg-blue-500 rounded\"></div>\n              <span className=\"text-gray-600\">Hours</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 bg-green-500 rounded\"></div>\n              <span className=\"text-gray-600\">Sessions</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Activity by hour */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Activity by Hour\n          </h3>\n          <ActivityChart\n            data={mockData.activityByHour\n              .filter(d => d.sessions > 0)\n              .map(d => ({\n                label: `${d.hour}:00`,\n                value: d.sessions,\n              }))}\n            type=\"line\"\n            height={200}\n            valueFormatter={v => `${v} sessions`}\n          />\n        </div>\n      </div>\n\n      {/* Insights */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div className=\"bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg p-6 border border-blue-200\">\n          <div className=\"flex items-center gap-3 mb-2\">\n            <Calendar className=\"w-6 h-6 text-blue-600\" />\n            <h3 className=\"font-semibold text-gray-900\">Most Productive Day</h3>\n          </div>\n          <p className=\"text-2xl font-bold text-blue-600\">\n            {mockData.mostProductiveDay}\n          </p>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            You tend to be most productive on {mockData.mostProductiveDay}s\n          </p>\n        </div>\n\n        <div className=\"bg-gradient-to-br from-purple-50 to-purple-100 rounded-lg p-6 border border-purple-200\">\n          <div className=\"flex items-center gap-3 mb-2\">\n            <TrendingUp className=\"w-6 h-6 text-purple-600\" />\n            <h3 className=\"font-semibold text-gray-900\">Peak Hours</h3>\n          </div>\n          <p className=\"text-2xl font-bold text-purple-600\">\n            {mockData.mostProductiveHour}:00 - {mockData.mostProductiveHour + 1}\n            :00\n          </p>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            Your most productive time of day\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/Post.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'variant' is assigned a value but never used.",
        "line": 22,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 10
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React from 'react';\nimport { SessionWithDetails } from '@/types';\nimport PostCard from './PostCard';\n\ninterface PostProps {\n  post: SessionWithDetails;\n  onSupport: (postId: string) => Promise<void>;\n  onRemoveSupport: (postId: string) => Promise<void>;\n  onShare: (postId: string) => Promise<void>;\n  className?: string;\n  variant?: 'full' | 'compact';\n}\n\nexport const Post: React.FC<PostProps> = ({\n  post,\n  onSupport,\n  onRemoveSupport,\n  onShare,\n  className = '',\n  variant = 'full'\n}) => {\n  // For now, we'll use PostCard for both variants\n  // In the future, we could create a more detailed full view\n  return (\n    <PostCard\n      post={post}\n      onSupport={onSupport}\n      onRemoveSupport={onRemoveSupport}\n      onShare={onShare}\n      className={className}\n    />\n  );\n};\n\nexport default Post;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/PostCard.tsx",
    "messages": [
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 109,
        "column": 15,
        "nodeType": "JSXOpeningElement",
        "endLine": 113,
        "endColumn": 17
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport { SessionWithDetails, User } from '@/types';\nimport PostStats from './PostStats';\nimport PostInteractions from './PostInteractions';\nimport CommentList from './CommentList';\n\ninterface PostCardProps {\n  post: SessionWithDetails;\n  onSupport: (postId: string) => Promise<void>;\n  onRemoveSupport: (postId: string) => Promise<void>;\n  onShare: (postId: string) => Promise<void>;\n  className?: string;\n  showComments?: boolean;\n}\n\nexport const PostCard: React.FC<PostCardProps> = ({\n  post,\n  onSupport,\n  onRemoveSupport,\n  onShare,\n  className = '',\n  showComments = false,\n}) => {\n  const [showMenu, setShowMenu] = useState(false);\n  const [showCommentSection, setShowCommentSection] = useState(showComments);\n\n  const formatTimeAgo = (date: Date): string => {\n    const now = new Date();\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    const postDate = new Date(\n      date.getFullYear(),\n      date.getMonth(),\n      date.getDate()\n    );\n\n    // Format time as \"h:mm am/pm\"\n    const timeStr = date.toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true,\n    });\n\n    // Check if today\n    if (postDate.getTime() === today.getTime()) {\n      return `Today at ${timeStr}`;\n    }\n\n    // Check if yesterday\n    if (postDate.getTime() === yesterday.getTime()) {\n      return `Yesterday at ${timeStr}`;\n    }\n\n    // Otherwise show full date: \"Month Day, Year at h:mm am/pm\"\n    const dateStr = date.toLocaleDateString('en-US', {\n      month: 'long',\n      day: 'numeric',\n      year: 'numeric',\n    });\n\n    return `${dateStr} at ${timeStr}`;\n  };\n\n  const getUserInitials = (user: User): string => {\n    return user.name\n      .split(' ')\n      .map(word => word.charAt(0))\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const getUserColor = (userId: string): string => {\n    // Generate consistent color based on user ID\n    const colors = [\n      'bg-gradient-to-br from-orange-400 to-orange-600',\n      'bg-gradient-to-br from-blue-400 to-blue-600',\n      'bg-gradient-to-br from-green-400 to-green-600',\n      'bg-gradient-to-br from-purple-400 to-purple-600',\n      'bg-gradient-to-br from-pink-400 to-pink-600',\n      'bg-gradient-to-br from-indigo-400 to-indigo-600',\n      'bg-gradient-to-br from-teal-400 to-teal-600',\n      'bg-gradient-to-br from-cyan-400 to-cyan-600',\n    ];\n    const hash = (userId || '')\n      .split('')\n      .reduce((a, b) => a + b.charCodeAt(0), 0);\n    return (\n      colors[hash % colors.length] ||\n      colors[0] ||\n      'bg-gradient-to-br from-orange-400 to-orange-600'\n    );\n  };\n\n  return (\n    <article\n      className={`bg-white rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200 overflow-hidden ${className}`}\n    >\n      {/* Post Header */}\n      <div className=\"p-4\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center space-x-3 flex-1 min-w-0\">\n            {/* User Avatar */}\n            {post.user.profilePicture ? (\n              <img\n                src={post.user.profilePicture}\n                alt={post.user.name}\n                className=\"w-12 h-12 rounded-full object-cover border-2 border-gray-100\"\n              />\n            ) : (\n              <div\n                className={`w-12 h-12 ${getUserColor(post.user.id)} rounded-full flex items-center justify-center shadow-sm`}\n              >\n                <span className=\"text-base font-semibold text-white\">\n                  {getUserInitials(post.user)}\n                </span>\n              </div>\n            )}\n\n            {/* User Info */}\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center gap-2\">\n                <h3 className=\"font-bold text-gray-900 hover:text-orange-600 cursor-pointer transition-colors truncate\">\n                  {post.user.name}\n                </h3>\n              </div>\n              <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                <span className=\"hover:text-gray-900 cursor-pointer transition-colors\">\n                  @{post.user.username}\n                </span>\n                <span>•</span>\n                <span>{formatTimeAgo(post.createdAt)}</span>\n                {post.user.location && (\n                  <>\n                    <span>•</span>\n                    <span className=\"truncate\">{post.user.location}</span>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Options Menu */}\n          <div className=\"relative\">\n            <button\n              onClick={() => setShowMenu(!showMenu)}\n              className=\"text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full p-1 transition-colors\"\n            >\n              <svg\n                className=\"w-5 h-5\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z\"\n                />\n              </svg>\n            </button>\n\n            {showMenu && (\n              <div className=\"absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-10\">\n                <button className=\"w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-50\">\n                  Edit post\n                </button>\n                <button className=\"w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-50\">\n                  Delete post\n                </button>\n                <button className=\"w-full px-4 py-2 text-left text-sm text-red-600 hover:bg-gray-50\">\n                  Report post\n                </button>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Post Description */}\n        {post.description && (\n          <div className=\"mt-4\">\n            <p className=\"text-gray-900 leading-relaxed whitespace-pre-wrap\">\n              {post.description}\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Session Stats */}\n      <div className=\"px-4 pb-4\">\n        <PostStats session={post} project={post.activity || post.project} />\n      </div>\n\n      {/* Support Summary */}\n      {post.supportCount > 0 && (\n        <div className=\"px-4 pb-3\">\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <div className=\"flex -space-x-2\">\n              {/* Show first 3 supporter avatars */}\n              {[...Array(Math.min(3, post.supportCount))].map((_, i) => (\n                <div\n                  key={i}\n                  className=\"w-6 h-6 rounded-full bg-gradient-to-br from-orange-400 to-orange-600 border-2 border-white\"\n                />\n              ))}\n            </div>\n            <span className=\"font-medium\">\n              {post.supportCount}{' '}\n              {post.supportCount === 1 ? 'person' : 'people'} gave support\n            </span>\n          </div>\n        </div>\n      )}\n\n      {/* Post Interactions */}\n      <PostInteractions\n        postId={post.id}\n        supportCount={post.supportCount}\n        commentCount={post.commentCount}\n        isSupported={post.isSupported || false}\n        onSupport={onSupport}\n        onRemoveSupport={onRemoveSupport}\n        onShare={onShare}\n        onCommentClick={() => setShowCommentSection(!showCommentSection)}\n      />\n\n      {/* Comments Section */}\n      {showCommentSection && (\n        <div className=\"border-t border-gray-200\">\n          <CommentList\n            sessionId={post.id}\n            initialCommentCount={post.commentCount}\n          />\n        </div>\n      )}\n    </article>\n  );\n};\n\nexport default PostCard;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/PostCreationModal.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/PostInteractions.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'supportCount' is defined but never used.",
        "line": 19,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 19,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\n\ninterface PostInteractionsProps {\n  postId: string;\n  supportCount: number;\n  commentCount: number;\n  isSupported: boolean;\n  onSupport: (postId: string) => Promise<void>;\n  onRemoveSupport: (postId: string) => Promise<void>;\n  onShare: (postId: string) => Promise<void>;\n  onCommentClick?: () => void;\n  className?: string;\n}\n\nexport const PostInteractions: React.FC<PostInteractionsProps> = ({\n  postId,\n  supportCount,\n  commentCount,\n  isSupported,\n  onSupport,\n  onRemoveSupport,\n  onShare,\n  onCommentClick,\n  className = ''\n}) => {\n  const [isSupporting, setIsSupporting] = useState(false);\n  const [isSharing, setIsSharing] = useState(false);\n\n  const handleSupport = async () => {\n    if (isSupporting) return;\n    \n    setIsSupporting(true);\n    try {\n      if (isSupported) {\n        await onRemoveSupport(postId);\n      } else {\n        await onSupport(postId);\n      }\n    } catch (error) {\n      console.error('Failed to update support:', error);\n    } finally {\n      setIsSupporting(false);\n    }\n  };\n\n  const handleShare = async () => {\n    if (isSharing) return;\n    \n    setIsSharing(true);\n    try {\n      await onShare(postId);\n    } catch (error) {\n      console.error('Failed to share post:', error);\n    } finally {\n      setIsSharing(false);\n    }\n  };\n\n  return (\n    <div className={`flex items-center justify-between py-3 px-4 border-t border-gray-200 bg-gray-50/50 ${className}`}>\n      {/* Left side - Support and Comments */}\n      <div className=\"flex items-center gap-1\">\n        {/* Support Button */}\n        <button\n          onClick={handleSupport}\n          disabled={isSupporting}\n          className={`flex items-center gap-1.5 px-3 py-2 rounded-lg font-medium transition-all ${\n            isSupported\n              ? 'text-orange-600 bg-orange-50 hover:bg-orange-100'\n              : 'text-gray-600 hover:bg-gray-100 hover:text-orange-600'\n          } ${isSupporting ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}\n        >\n          <svg\n            className=\"w-5 h-5\"\n            fill={isSupported ? 'currentColor' : 'none'}\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n            strokeWidth={isSupported ? 0 : 2}\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\"\n            />\n          </svg>\n          <span className=\"text-sm\">\n            {isSupported ? 'Supported' : 'Give Support'}\n          </span>\n        </button>\n\n        {/* Comments */}\n        <button\n          onClick={onCommentClick}\n          className=\"flex items-center gap-1.5 px-3 py-2 rounded-lg font-medium text-gray-600 hover:bg-gray-100 hover:text-blue-600 transition-all\"\n        >\n          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" strokeWidth={2}>\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\"\n            />\n          </svg>\n          <span className=\"text-sm\">\n            {commentCount === 1 ? 'Comment' : 'Comments'} {commentCount > 0 && `(${commentCount})`}\n          </span>\n        </button>\n      </div>\n\n      {/* Right side - Share */}\n      <button\n        onClick={handleShare}\n        disabled={isSharing}\n        className={`flex items-center gap-1.5 px-3 py-2 rounded-lg font-medium text-gray-600 hover:bg-gray-100 hover:text-green-600 transition-all ${\n          isSharing ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'\n        }`}\n      >\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" strokeWidth={2}>\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            d=\"M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z\"\n          />\n        </svg>\n        <span className=\"text-sm\">Share</span>\n      </button>\n    </div>\n  );\n};\n\nexport default PostInteractions;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/PostStats.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 30,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 30,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [695, 698], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [695, 698], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport { Session, Project } from '@/types';\n\ninterface PostStatsProps {\n  session: Session;\n  project: Project;\n  className?: string;\n}\n\nexport const PostStats: React.FC<PostStatsProps> = ({ \n  session, \n  project, \n  className = '' \n}) => {\n  const [showAllTasks, setShowAllTasks] = useState(false);\n  \n  const formatDuration = (seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    }\n    return `${minutes}m`;\n  };\n\n  // Task tracking not implemented at session level\n  const completedTasks: any[] = [];\n  const totalTasks = 0;\n\n  return (\n    <div className={`bg-gradient-to-br from-gray-50 to-gray-100 rounded-xl border border-gray-200 overflow-hidden ${className}`}>\n      {/* Session Title with Project Badge */}\n      <div className=\"px-4 py-3 bg-white border-b border-gray-200\">\n        <div className=\"flex items-center gap-3\">\n          <div \n            className=\"w-10 h-10 rounded-lg flex items-center justify-center text-white text-lg font-semibold shadow-sm flex-shrink-0\"\n            style={{ backgroundColor: project.color }}\n          >\n            {project.icon}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"font-bold text-gray-900 text-base leading-tight truncate\">\n              {session.title}\n            </h3>\n            <p className=\"text-sm text-gray-600 truncate\">\n              {project.name}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Stats Grid - Strava Style */}\n      <div className=\"px-4 py-4\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          {/* Duration */}\n          <div>\n            <div className=\"text-xs text-gray-500 uppercase tracking-wide font-medium mb-1\">\n              Duration\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {formatDuration(session.duration)}\n            </div>\n          </div>\n\n          {/* Tasks Completed */}\n          <div>\n            <div className=\"text-xs text-gray-500 uppercase tracking-wide font-medium mb-1\">\n              Tasks\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {completedTasks.length}\n              {totalTasks > 0 && (\n                <span className=\"text-base font-normal text-gray-500 ml-1\">\n                  / {totalTasks}\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Completed Tasks Expandable List */}\n      {completedTasks.length > 0 && (\n        <div className=\"border-t border-gray-200\">\n          <button\n            onClick={() => setShowAllTasks(!showAllTasks)}\n            className=\"w-full px-4 py-3 text-left hover:bg-gray-50 transition-colors flex items-center justify-between group\"\n          >\n            <span className=\"text-sm font-medium text-gray-700\">\n              {completedTasks.length} {completedTasks.length === 1 ? 'task' : 'tasks'} completed\n            </span>\n            <svg\n              className={`w-5 h-5 text-gray-400 transition-transform ${showAllTasks ? 'rotate-180' : ''}`}\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n            </svg>\n          </button>\n\n          {showAllTasks && (\n            <div className=\"px-4 pb-3 space-y-2\">\n              {completedTasks.map((task, index) => (\n                <div key={index} className=\"flex items-start gap-2\">\n                  <div className=\"flex-shrink-0 mt-0.5\">\n                    <svg className=\"w-4 h-4 text-green-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                    </svg>\n                  </div>\n                  <span className=\"text-sm text-gray-700 flex-1\">{task.name}</span>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Tags */}\n      {session.tags && session.tags.length > 0 && (\n        <div className=\"px-4 pb-4\">\n          <div className=\"flex flex-wrap gap-2\">\n            {session.tags.map((tag, index) => (\n              <span\n                key={index}\n                className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-700 border border-orange-200\"\n              >\n                #{tag}\n              </span>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PostStats;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/PrefetchLink.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/PrivacySettings.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'useAuth' is defined but never used.",
        "line": 6,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'loadBlockedUsers' is assigned a value but never used.",
        "line": 67,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'getVisibilityIcon' is assigned a value but never used.",
        "line": 111,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 111,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'getVisibilityDescription' is assigned a value but never used.",
        "line": 124,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 124,
        "endColumn": 33
      },
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 260,
        "column": 23,
        "nodeType": "JSXOpeningElement",
        "endLine": 264,
        "endColumn": 25
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { PrivacySettings as PrivacySettingsType, UserProfile } from '@/types';\nimport { firebaseUserApi } from '@/lib/api';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/button';\nimport {\n  SettingsSection,\n  SettingsHeader,\n  SettingsCard,\n  SettingsCardHeader,\n  SettingsCardContent,\n  SettingsField\n} from '@/components/ui/settings-section';\nimport {\n  Shield,\n  Globe,\n  Users,\n  Lock,\n  Eye,\n  UserX,\n  Check,\n  Activity,\n  FolderKanban\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface PrivacySettingsProps {\n  onClose?: () => void;\n  isModal?: boolean;\n}\n\nexport const PrivacySettings: React.FC<PrivacySettingsProps> = ({ \n  onClose, \n  isModal = false \n}) => {\n  const [settings, setSettings] = useState<PrivacySettingsType>({\n    profileVisibility: 'everyone',\n    activityVisibility: 'everyone',\n    projectVisibility: 'everyone',\n    blockedUsers: [],\n  });\n  const [blockedUsers, setBlockedUsers] = useState<UserProfile[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n\n  useEffect(() => {\n    loadSettings();\n  }, []);\n\n  const loadSettings = async () => {\n    try {\n      setIsLoading(true);\n      // TODO: Implement privacy settings fetching when Firebase getPrivacySettings() is available\n      // Currently uses firebaseUserApi.getPrivacySettings() - verify implementation status\n        const settings = await firebaseUserApi.getPrivacySettings();\n        setSettings(settings);\n    } catch (error) {\n      console.error('Failed to load privacy settings:', error);\n      toast.error('Failed to load privacy settings');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadBlockedUsers = async (): Promise<UserProfile[]> => {\n    try {\n      // This would be a new API endpoint to get blocked users\n      // For now, return empty array\n      return [];\n    } catch (error) {\n      console.error('Failed to load blocked users:', error);\n      return [];\n    }\n  };\n\n  const handleSettingChange = (key: keyof PrivacySettingsType, value: string) => {\n    setSettings(prev => ({ ...prev, [key]: value }));\n  };\n\n  const handleSave = async () => {\n    try {\n      setIsSaving(true);\n      await firebaseUserApi.updatePrivacySettings(settings);\n      toast.success('Privacy settings updated successfully');\n    } catch (error) {\n      console.error('Failed to save privacy settings:', error);\n      toast.error('Failed to save privacy settings');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleUnblockUser = async (userId: string) => {\n    try {\n      // TODO: Implement unblock user API endpoint in firebaseUserApi\n      // Need to add unblockUser() method to handle Firebase user blocking/unblocking\n      setBlockedUsers(prev => prev.filter(user => user.id !== userId));\n      setSettings(prev => ({\n        ...prev,\n        blockedUsers: prev.blockedUsers.filter(id => id !== userId)\n      }));\n      toast.success('User unblocked successfully');\n    } catch (error) {\n      console.error('Failed to unblock user:', error);\n      toast.error('Failed to unblock user');\n    }\n  };\n\n  const getVisibilityIcon = (visibility: string) => {\n    switch (visibility) {\n      case 'everyone':\n        return <Globe className=\"w-4 h-4\" />;\n      case 'followers':\n        return <Users className=\"w-4 h-4\" />;\n      case 'private':\n        return <Lock className=\"w-4 h-4\" />;\n      default:\n        return <Eye className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getVisibilityDescription = (visibility: string, type: string) => {\n    const descriptions = {\n      profileVisibility: {\n        everyone: 'Anyone can view your profile and basic information',\n        followers: 'Only people you follow back can view your profile',\n        private: 'Only you can view your profile'\n      },\n      activityVisibility: {\n        everyone: 'Your activity is visible to everyone',\n        followers: 'Your activity is only visible to your followers',\n        private: 'Your activity is private'\n      },\n      projectVisibility: {\n        everyone: 'Your projects are visible to everyone',\n        followers: 'Your projects are only visible to your followers',\n        private: 'Your projects are private'\n      }\n    };\n\n    return descriptions[type as keyof typeof descriptions]?.[visibility as keyof typeof descriptions.profileVisibility] || '';\n  };\n\n  if (isLoading) {\n    return (\n      <SettingsSection>\n        {[1, 2, 3].map((i) => (\n          <SettingsCard key={i} className=\"animate-pulse\">\n            <SettingsCardHeader title=\"\" description=\"\" />\n            <SettingsCardContent>\n              <div className=\"space-y-3\">\n                <div className=\"h-10 bg-gray-200 rounded\" />\n                <div className=\"h-4 bg-gray-200 rounded w-1/2\" />\n              </div>\n            </SettingsCardContent>\n          </SettingsCard>\n        ))}\n      </SettingsSection>\n    );\n  }\n\n  return (\n    <SettingsSection>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <SettingsHeader\n          icon={Shield}\n          title=\"Privacy Controls\"\n          description=\"Control who can see your profile, activity, and projects\"\n        />\n        {isModal && onClose && (\n          <Button variant=\"ghost\" onClick={onClose}>\n            Close\n          </Button>\n        )}\n      </div>\n\n      {/* Profile Visibility */}\n      <SettingsCard>\n        <SettingsCardHeader\n          icon={Eye}\n          title=\"Profile Visibility\"\n          description=\"Control who can view your profile information\"\n        />\n        <SettingsCardContent>\n          <SettingsField label=\"Profile Access\">\n            <select\n              value={settings.profileVisibility}\n              onChange={(e) => handleSettingChange('profileVisibility', e.target.value)}\n              className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n            >\n              <option value=\"everyone\">Everyone - Anyone can view your profile</option>\n              <option value=\"followers\">Followers Only - Only people you follow back</option>\n              <option value=\"private\">Private - Only you can view your profile</option>\n            </select>\n          </SettingsField>\n        </SettingsCardContent>\n      </SettingsCard>\n\n      {/* Activity Visibility */}\n      <SettingsCard>\n        <SettingsCardHeader\n          icon={Activity}\n          title=\"Activity Visibility\"\n          description=\"Control who can see your productivity activity and sessions\"\n        />\n        <SettingsCardContent>\n          <SettingsField label=\"Activity Access\">\n            <select\n              value={settings.activityVisibility}\n              onChange={(e) => handleSettingChange('activityVisibility', e.target.value)}\n              className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n            >\n              <option value=\"everyone\">Everyone - Your activity is public</option>\n              <option value=\"followers\">Followers Only - Only your followers can see</option>\n              <option value=\"private\">Private - Your activity is completely private</option>\n            </select>\n          </SettingsField>\n        </SettingsCardContent>\n      </SettingsCard>\n\n      {/* Project Visibility */}\n      <SettingsCard>\n        <SettingsCardHeader\n          icon={FolderKanban}\n          title=\"Project Visibility\"\n          description=\"Control who can see your projects and their details\"\n        />\n        <SettingsCardContent>\n          <SettingsField label=\"Project Access\">\n            <select\n              value={settings.projectVisibility}\n              onChange={(e) => handleSettingChange('projectVisibility', e.target.value)}\n              className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n            >\n              <option value=\"everyone\">Everyone - Your projects are public</option>\n              <option value=\"followers\">Followers Only - Only your followers can see</option>\n              <option value=\"private\">Private - Your projects are completely private</option>\n            </select>\n          </SettingsField>\n        </SettingsCardContent>\n      </SettingsCard>\n\n      {/* Blocked Users */}\n      <SettingsCard>\n        <SettingsCardHeader\n          icon={UserX}\n          title=\"Blocked Users\"\n          description=\"Manage users you have blocked from viewing your profile\"\n        />\n        <SettingsCardContent>\n          {blockedUsers.length > 0 ? (\n            <div className=\"space-y-3\">\n              {blockedUsers.map((blockedUser) => (\n                <div key={blockedUser.id} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    {blockedUser.profilePicture ? (\n                      <img\n                        src={blockedUser.profilePicture}\n                        alt={`${blockedUser.name}'s profile picture`}\n                        className=\"w-10 h-10 rounded-full object-cover border border-gray-200\"\n                      />\n                    ) : (\n                      <div className=\"w-10 h-10 bg-gradient-to-br from-[#FC4C02] to-[#FF8800] rounded-full flex items-center justify-center text-white text-sm font-semibold\">\n                        {blockedUser.name.charAt(0).toUpperCase()}\n                      </div>\n                    )}\n                    <div>\n                      <h4 className=\"font-medium text-gray-900\">{blockedUser.name}</h4>\n                      <p className=\"text-sm text-gray-600\">@{blockedUser.username}</p>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleUnblockUser(blockedUser.id)}\n                    className=\"flex items-center gap-1\"\n                  >\n                    <Check className=\"w-3 h-3\" />\n                    Unblock\n                  </Button>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <UserX className=\"w-12 h-12 text-gray-400 mx-auto mb-3\" />\n              <h3 className=\"font-medium text-gray-900 mb-1\">No blocked users</h3>\n              <p className=\"text-sm text-gray-600\">\n                Users you block will appear here\n              </p>\n            </div>\n          )}\n        </SettingsCardContent>\n      </SettingsCard>\n\n      {/* Save Button */}\n      <div className=\"flex justify-end pt-2\">\n        <Button\n          onClick={handleSave}\n          disabled={isSaving}\n          className=\"min-w-[120px] bg-[#007AFF] hover:bg-[#0051D5]\"\n        >\n          {isSaving ? (\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n              Saving...\n            </div>\n          ) : (\n            'Save Settings'\n          )}\n        </Button>\n      </div>\n    </SettingsSection>\n  );\n};\n\n// Modal wrapper\ninterface PrivacySettingsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport const PrivacySettingsModal: React.FC<PrivacySettingsModalProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-background rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"p-6\">\n          <PrivacySettings onClose={onClose} isModal={true} />\n        </div>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ProfileHeader.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used.",
        "line": 4,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Badge' is defined but never used.",
        "line": 9,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Users' is defined but never used.",
        "line": 10,
        "column": 28,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 33
      },
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 96,
        "column": 17,
        "nodeType": "JSXOpeningElement",
        "endLine": 100,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport Image from 'next/image';\nimport { UserProfile } from '@/types';\nimport { firebaseUserApi } from '@/lib/api';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { MapPin, Calendar, Users, Clock, Edit3, UserPlus, Check, LogOut } from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface ProfileHeaderProps {\n  profile: UserProfile;\n  onProfileUpdate?: (updatedProfile: UserProfile) => void;\n  showEditButton?: boolean;\n  onEditClick?: () => void;\n}\n\nexport const ProfileHeader: React.FC<ProfileHeaderProps> = ({\n  profile,\n  onProfileUpdate,\n  showEditButton = false,\n  onEditClick,\n}) => {\n  const { user, logout } = useAuth();\n  const [isFollowing, setIsFollowing] = useState(profile.isFollowing || false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [followersCount, setFollowersCount] = useState(profile.followersCount);\n\n  const isOwnProfile = user?.username === profile.username;\n  const canFollow = !isOwnProfile && user;\n\n  const handleFollow = async () => {\n    if (!canFollow) return;\n\n    try {\n      setIsLoading(true);\n      \n      if (isFollowing) {\n        await firebaseUserApi.unfollowUser(profile.id);\n        setIsFollowing(false);\n        setFollowersCount(prev => Math.max(0, prev - 1));\n        toast.success(`Unfollowed ${profile.name}`);\n      } else {\n        await firebaseUserApi.followUser(profile.id);\n        setIsFollowing(true);\n        setFollowersCount(prev => prev + 1);\n        toast.success(`Following ${profile.name}`);\n      }\n\n      // Update profile data if callback provided\n      if (onProfileUpdate) {\n        const updatedProfile = {\n          ...profile,\n          isFollowing: !isFollowing,\n          followersCount: isFollowing ? followersCount - 1 : followersCount + 1,\n        };\n        onProfileUpdate(updatedProfile);\n      }\n    } catch (error) {\n      console.error('Follow/unfollow error:', error);\n      toast.error('Failed to update follow status');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const formatHours = (hours: number): string => {\n    if (hours < 1) {\n      const minutes = Math.round(hours * 60);\n      return `${minutes}m`;\n    }\n    if (hours < 100) {\n      return `${hours.toFixed(1)}h`;\n    }\n    return `${Math.round(hours)}h`;\n  };\n\n  const formatDate = (date: Date): string => {\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n    });\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm p-8\">\n      <div className=\"flex flex-col gap-6\">\n        {/* Top section: Avatar + Name + Actions */}\n        <div className=\"flex items-start gap-6\">\n          {/* Avatar */}\n          <div className=\"flex-shrink-0\">\n            <div className=\"relative\">\n              {profile.profilePicture ? (\n                <img\n                  src={profile.profilePicture}\n                  alt={`${profile.name}'s profile picture`}\n                  className=\"w-[140px] h-[140px] rounded-full object-cover border-4 border-gray-100\"\n                />\n              ) : (\n                <div className=\"w-[140px] h-[140px] bg-gradient-to-br from-[#FC4C02] to-[#FF8800] rounded-full flex items-center justify-center text-white text-5xl font-bold\">\n                  {profile.name.charAt(0).toUpperCase()}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Name and actions */}\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-start justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900\">\n                  {profile.name}\n                </h1>\n                {profile.location && (\n                  <div className=\"flex items-center gap-1 mt-1 text-gray-600\">\n                    <MapPin className=\"w-4 h-4\" />\n                    <span className=\"text-sm\">{profile.location}</span>\n                  </div>\n                )}\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex gap-2\">\n                {isOwnProfile && showEditButton && onEditClick && (\n                  <Button\n                    onClick={onEditClick}\n                    variant=\"outline\"\n                    className=\"flex items-center gap-2\"\n                  >\n                    <Edit3 className=\"w-4 h-4\" />\n                    <span className=\"hidden md:inline\">Edit Profile</span>\n                  </Button>\n                )}\n                {canFollow && (\n                  <Button\n                    onClick={handleFollow}\n                    disabled={isLoading}\n                    variant={isFollowing ? \"outline\" : \"default\"}\n                    className={`flex items-center gap-2 min-w-[110px] ${\n                      isFollowing \n                        ? 'border-gray-300' \n                        : 'bg-[#FC4C02] hover:bg-[#E04502]'\n                    }`}\n                  >\n                    {isLoading ? (\n                      <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                    ) : isFollowing ? (\n                      <>\n                        <Check className=\"w-4 h-4\" />\n                        Following\n                      </>\n                    ) : (\n                      <>\n                        <UserPlus className=\"w-4 h-4\" />\n                        Follow\n                      </>\n                    )}\n                  </Button>\n                )}\n              </div>\n            </div>\n\n            {/* Stats row */}\n            <div className=\"flex items-center gap-6 mt-4\">\n              <div>\n                <span className=\"text-2xl font-bold text-gray-900\">{followersCount.toLocaleString()}</span>\n                <span className=\"text-sm text-gray-600 ml-1\">Followers</span>\n              </div>\n              <div>\n                <span className=\"text-2xl font-bold text-gray-900\">{profile.followingCount.toLocaleString()}</span>\n                <span className=\"text-sm text-gray-600 ml-1\">Following</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Bio */}\n        {profile.bio && (\n          <div className=\"text-gray-700 leading-relaxed\">\n            {profile.bio}\n          </div>\n        )}\n\n        {/* Additional info */}\n        <div className=\"flex items-center gap-4 text-sm text-gray-600 border-t border-gray-200 pt-4\">\n          <div className=\"flex items-center gap-1\">\n            <Calendar className=\"w-4 h-4\" />\n            <span>Joined {formatDate(profile.createdAt)}</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Clock className=\"w-4 h-4\" />\n            <span>{formatHours(profile.totalHours)} total time</span>\n          </div>\n          {isOwnProfile && (\n            <button\n              onClick={logout}\n              className=\"ml-auto flex items-center gap-1 text-red-600 hover:text-red-700\"\n            >\n              <LogOut className=\"w-4 h-4\" />\n              <span>Logout</span>\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ProfilePicture.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ProfileStats.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isOwnProfile' is assigned a value but never used.",
        "line": 22,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 15
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadActivityData'. Either include it or remove the dependency array.",
        "line": 37,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 37,
        "endColumn": 30,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [userId, selectedPeriod, loadActivityData]",
            "fix": {
              "range": [977, 1001],
              "text": "[userId, selectedPeriod, loadActivityData]"
            }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'loadProjectData' and 'loadWeeklyData'. Either include them or remove the dependency array.",
        "line": 45,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 45,
        "endColumn": 25,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [activeTab, loadProjectData, loadWeeklyData, userId]",
            "fix": {
              "range": [1162, 1181],
              "text": "[activeTab, loadProjectData, loadWeeklyData, userId]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 132,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 132,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3836, 3839], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3836, 3839], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'index' is defined but never used.",
        "line": 740,
        "column": 33,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 740,
        "endColumn": 38
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { ActivityData, WeeklyActivity, ProjectBreakdown } from '@/types';\nimport { firebaseUserApi } from '@/lib/api';\nimport {\n  BarChart3,\n  PieChart,\n  TrendingUp,\n  Clock,\n  Target,\n  Activity,\n} from 'lucide-react';\n\ninterface ProfileStatsProps {\n  userId: string;\n  isOwnProfile?: boolean;\n}\n\nexport const ProfileStats: React.FC<ProfileStatsProps> = ({\n  userId,\n  isOwnProfile = false,\n}) => {\n  const [activeTab, setActiveTab] = useState<'daily' | 'weekly' | 'projects'>(\n    'daily'\n  );\n  const [activityData, setActivityData] = useState<ActivityData[]>([]);\n  const [weeklyData, setWeeklyData] = useState<WeeklyActivity[]>([]);\n  const [projectData, setProjectData] = useState<ProjectBreakdown[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedPeriod, setSelectedPeriod] = useState<'30d' | '90d' | 'year'>(\n    '30d'\n  );\n\n  useEffect(() => {\n    loadActivityData();\n  }, [userId, selectedPeriod]);\n\n  useEffect(() => {\n    if (activeTab === 'weekly') {\n      loadWeeklyData();\n    } else if (activeTab === 'projects') {\n      loadProjectData();\n    }\n  }, [activeTab, userId]);\n\n  const loadActivityData = async () => {\n    try {\n      setIsLoading(true);\n      const year = new Date().getFullYear();\n      const data = await firebaseUserApi.getUserDailyActivity(userId, year);\n      setActivityData(data);\n    } catch (error) {\n      console.error('Failed to load activity data:', error);\n      setActivityData([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadWeeklyData = async () => {\n    try {\n      setIsLoading(true);\n      const data = await firebaseUserApi.getUserWeeklyActivity(userId, 12);\n      setWeeklyData(data);\n    } catch (error) {\n      console.error('Failed to load weekly data:', error);\n      setWeeklyData([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadProjectData = async () => {\n    try {\n      setIsLoading(true);\n      const year = new Date().getFullYear();\n      const data = await firebaseUserApi.getUserProjectBreakdown(userId, year);\n      setProjectData(data);\n    } catch (error) {\n      console.error('Failed to load project data:', error);\n      setProjectData([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const formatHours = (hours: number): string => {\n    if (hours < 1) {\n      const minutes = Math.round(hours * 60);\n      return `${minutes}m`;\n    }\n    return `${hours.toFixed(1)}h`;\n  };\n\n  const tabs = [\n    { id: 'daily', label: 'Daily Activity', icon: Activity },\n    { id: 'weekly', label: 'Weekly Trends', icon: BarChart3 },\n    { id: 'projects', label: 'Project Breakdown', icon: PieChart },\n  ];\n\n  return (\n    <div className=\"bg-card-background rounded-lg border border-border p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-xl font-semibold text-foreground flex items-center gap-2\">\n          <TrendingUp className=\"w-5 h-5\" />\n          Activity Analytics\n        </h2>\n\n        {activeTab === 'daily' && (\n          <select\n            value={selectedPeriod}\n            onChange={e =>\n              setSelectedPeriod(e.target.value as '30d' | '90d' | 'year')\n            }\n            className=\"px-3 py-1 border border-border rounded-md bg-background text-foreground\"\n          >\n            <option value=\"30d\">Last 30 days</option>\n            <option value=\"90d\">Last 90 days</option>\n            <option value=\"year\">This Year</option>\n          </select>\n        )}\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"flex space-x-1 mb-6 border-b border-border\">\n        {tabs.map(tab => {\n          const Icon = tab.icon;\n          return (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id as any)}\n              className={`\n                flex items-center gap-2 px-4 py-2 rounded-none border-b-2 transition-all\n                ${\n                  activeTab === tab.id\n                    ? 'border-primary text-primary'\n                    : 'border-transparent text-muted-foreground hover:text-foreground'\n                }\n              `}\n            >\n              <Icon className=\"w-4 h-4\" />\n              {tab.label}\n            </button>\n          );\n        })}\n      </div>\n\n      {/* Tab Content */}\n      {isLoading ? (\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </div>\n      ) : (\n        <>\n          {activeTab === 'daily' && (\n            <DailyActivityChart\n              data={activityData}\n              selectedPeriod={selectedPeriod}\n              formatHours={formatHours}\n            />\n          )}\n\n          {activeTab === 'weekly' && (\n            <WeeklyChart data={weeklyData} formatHours={formatHours} />\n          )}\n\n          {activeTab === 'projects' && (\n            <ProjectBreakdownChart\n              data={projectData}\n              formatHours={formatHours}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\n// Daily Activity Chart Component\ninterface DailyActivityChartProps {\n  data: ActivityData[];\n  selectedPeriod: '30d' | '90d' | 'year';\n  formatHours: (hours: number) => string;\n}\n\nconst DailyActivityChart: React.FC<DailyActivityChartProps> = ({\n  data,\n  selectedPeriod,\n  formatHours,\n}) => {\n  // Filter data based on selected period\n  const getDaysCount = (period: '30d' | '90d' | 'year'): number => {\n    if (period === '30d') return 30;\n    if (period === '90d') return 90;\n    return 365;\n  };\n\n  const daysCount = getDaysCount(selectedPeriod);\n  const endDate = new Date();\n  const startDate = new Date();\n  startDate.setDate(endDate.getDate() - daysCount);\n\n  const filteredData = data\n    .filter(d => {\n      const date = new Date(d.date);\n      return date >= startDate && date <= endDate;\n    })\n    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n\n  const maxHours = Math.max(...filteredData.map(d => d.hours), 1);\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n\n  // Calculate statistics\n  const totalHours = filteredData.reduce((sum, d) => sum + d.hours, 0);\n  const averageHours =\n    filteredData.length > 0 ? totalHours / filteredData.length : 0;\n  const activeDays = filteredData.filter(d => d.hours > 0).length;\n\n  if (filteredData.length === 0) {\n    return (\n      <div className=\"text-center py-12 text-muted-foreground\">\n        No activity data available for this period\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Summary Stats */}\n      <div className=\"grid grid-cols-3 gap-4\">\n        <div className=\"bg-white rounded-lg p-4 border border-border shadow-sm\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-1\">\n            <Clock className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Total Hours</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">\n            {formatHours(totalHours)}\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg p-4 border border-border shadow-sm\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-1\">\n            <TrendingUp className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Average/Day</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">\n            {formatHours(averageHours)}\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg p-4 border border-border shadow-sm\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-1\">\n            <Target className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Active Days</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">{activeDays}</div>\n        </div>\n      </div>\n\n      {/* Line Chart */}\n      <div className=\"bg-white rounded-lg p-6 border border-border shadow-sm\">\n        <h3 className=\"text-sm font-semibold text-foreground mb-4\">\n          Daily Activity Trend\n        </h3>\n        <div className=\"relative h-64\">\n          {/* Y-axis labels */}\n          <div className=\"absolute left-0 top-0 bottom-8 flex flex-col justify-between text-xs text-muted-foreground w-12\">\n            <span>{formatHours(maxHours)}</span>\n            <span>{formatHours(maxHours * 0.75)}</span>\n            <span>{formatHours(maxHours * 0.5)}</span>\n            <span>{formatHours(maxHours * 0.25)}</span>\n            <span>0h</span>\n          </div>\n\n          {/* Chart area */}\n          <div className=\"absolute left-14 right-0 top-0 bottom-8\">\n            {/* Grid lines */}\n            <div className=\"absolute inset-0 flex flex-col justify-between\">\n              {[0, 1, 2, 3, 4].map(i => (\n                <div key={i} className=\"border-t border-border\" />\n              ))}\n            </div>\n\n            {/* Bars */}\n            <div className=\"absolute inset-0 flex items-end justify-between gap-0.5\">\n              {filteredData.map((day, index) => {\n                const height = (day.hours / maxHours) * 100;\n                const isHovered = hoveredIndex === index;\n\n                return (\n                  <div\n                    key={day.date}\n                    className=\"relative flex-1 group\"\n                    onMouseEnter={() => setHoveredIndex(index)}\n                    onMouseLeave={() => setHoveredIndex(null)}\n                  >\n                    <div\n                      className={`\n                        w-full rounded-t transition-all duration-200\n                        ${\n                          day.hours > 0\n                            ? isHovered\n                              ? 'bg-primary'\n                              : 'bg-primary/70 hover:bg-primary'\n                            : 'bg-gray-100 border border-border'\n                        }\n                      `}\n                      style={{ height: `${height}%` }}\n                    />\n\n                    {/* Tooltip */}\n                    {isHovered && (\n                      <div className=\"absolute bottom-full left-1/2 -translate-x-1/2 mb-2 px-3 py-2 bg-foreground text-background text-xs rounded-lg shadow-lg whitespace-nowrap z-10\">\n                        <div className=\"font-semibold\">\n                          {new Date(day.date).toLocaleDateString('en-US', {\n                            month: 'short',\n                            day: 'numeric',\n                          })}\n                        </div>\n                        <div>{formatHours(day.hours)}</div>\n                        <div className=\"opacity-70\">\n                          {day.sessions} session{day.sessions !== 1 ? 's' : ''}\n                        </div>\n                        <div className=\"absolute top-full left-1/2 -translate-x-1/2 border-4 border-transparent border-t-foreground\" />\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* X-axis */}\n          <div className=\"absolute left-14 right-0 bottom-0 h-6 flex justify-between text-xs text-muted-foreground\">\n            {selectedPeriod === '30d' &&\n              filteredData.length > 0 &&\n              filteredData[0] && (\n                <>\n                  <span>\n                    {new Date(filteredData[0].date).toLocaleDateString(\n                      'en-US',\n                      { month: 'short', day: 'numeric' }\n                    )}\n                  </span>\n                  <span>\n                    {new Date(\n                      filteredData[Math.floor(filteredData.length / 2)]!.date\n                    ).toLocaleDateString('en-US', {\n                      month: 'short',\n                      day: 'numeric',\n                    })}\n                  </span>\n                  <span>\n                    {new Date(\n                      filteredData[filteredData.length - 1]!.date\n                    ).toLocaleDateString('en-US', {\n                      month: 'short',\n                      day: 'numeric',\n                    })}\n                  </span>\n                </>\n              )}\n            {selectedPeriod === '90d' &&\n              filteredData.length > 0 &&\n              filteredData[0] && (\n                <>\n                  <span>\n                    {new Date(filteredData[0].date).toLocaleDateString(\n                      'en-US',\n                      { month: 'short' }\n                    )}\n                  </span>\n                  <span>\n                    {new Date(\n                      filteredData[Math.floor(filteredData.length / 2)]!.date\n                    ).toLocaleDateString('en-US', { month: 'short' })}\n                  </span>\n                  <span>\n                    {new Date(\n                      filteredData[filteredData.length - 1]!.date\n                    ).toLocaleDateString('en-US', { month: 'short' })}\n                  </span>\n                </>\n              )}\n            {selectedPeriod === 'year' && filteredData.length > 0 && (\n              <>\n                <span>Jan</span>\n                <span>Apr</span>\n                <span>Jul</span>\n                <span>Oct</span>\n                <span>Dec</span>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Weekly Chart Component\ninterface WeeklyChartProps {\n  data: WeeklyActivity[];\n  formatHours: (hours: number) => string;\n}\n\nconst WeeklyChart: React.FC<WeeklyChartProps> = ({ data, formatHours }) => {\n  const maxHours = Math.max(...data.map(d => d.hours), 1);\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n\n  // Parse week string (format: \"2025-W40\") to get a readable date range\n  const getWeekLabel = (weekStr: string): string => {\n    const parts = weekStr.split('-W');\n    if (parts.length !== 2 || !parts[0] || !parts[1]) {\n      return 'Invalid week';\n    }\n    const year = parts[0];\n    const weekNum = parts[1];\n    const weekNumber = parseInt(weekNum, 10);\n\n    // Get the first day of the week\n    const firstDay = new Date(parseInt(year, 10), 0, 1 + (weekNumber - 1) * 7);\n    const dayOfWeek = firstDay.getDay();\n    const diff = firstDay.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);\n    const monday = new Date(firstDay.setDate(diff));\n\n    return monday.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  const getWeekRange = (weekStr: string): string => {\n    const parts = weekStr.split('-W');\n    if (parts.length !== 2 || !parts[0] || !parts[1]) {\n      return 'Invalid week range';\n    }\n    const year = parts[0];\n    const weekNum = parts[1];\n    const weekNumber = parseInt(weekNum, 10);\n\n    const firstDay = new Date(parseInt(year, 10), 0, 1 + (weekNumber - 1) * 7);\n    const dayOfWeek = firstDay.getDay();\n    const diff = firstDay.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);\n    const monday = new Date(firstDay.setDate(diff));\n    const sunday = new Date(monday);\n    sunday.setDate(monday.getDate() + 6);\n\n    return `${monday.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - ${sunday.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}`;\n  };\n\n  // Calculate statistics\n  const totalHours = data.reduce((sum, w) => sum + w.hours, 0);\n  const averageHours = data.length > 0 ? totalHours / data.length : 0;\n  const bestWeek = data.reduce(\n    (max, w) => (w.hours > max.hours ? w : max),\n    data[0] || { hours: 0, week: '', sessions: 0 }\n  );\n\n  if (data.length === 0) {\n    return (\n      <div className=\"text-center py-12 text-muted-foreground\">\n        No weekly data available\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Summary Stats */}\n      <div className=\"grid grid-cols-3 gap-4\">\n        <div className=\"bg-white rounded-lg p-4 border border-border shadow-sm\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-1\">\n            <Clock className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Total Hours</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">\n            {formatHours(totalHours)}\n          </div>\n          <div className=\"text-xs text-muted-foreground mt-1\">\n            Last {data.length} weeks\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg p-4 border border-border shadow-sm\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-1\">\n            <TrendingUp className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Avg/Week</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">\n            {formatHours(averageHours)}\n          </div>\n          <div className=\"text-xs text-muted-foreground mt-1\">\n            Weekly average\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg p-4 border border-border shadow-sm\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-1\">\n            <Target className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Best Week</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">\n            {formatHours(bestWeek.hours)}\n          </div>\n          <div className=\"text-xs text-muted-foreground mt-1\">\n            {bestWeek.week && getWeekLabel(bestWeek.week)}\n          </div>\n        </div>\n      </div>\n\n      {/* Bar Chart */}\n      <div className=\"bg-white rounded-lg p-6 border border-border shadow-sm\">\n        <h3 className=\"text-sm font-semibold text-foreground mb-4\">\n          Weekly Activity Comparison\n        </h3>\n        <div className=\"relative h-80\">\n          {/* Y-axis labels */}\n          <div className=\"absolute left-0 top-0 bottom-12 flex flex-col justify-between text-xs text-muted-foreground w-12\">\n            <span>{formatHours(maxHours)}</span>\n            <span>{formatHours(maxHours * 0.75)}</span>\n            <span>{formatHours(maxHours * 0.5)}</span>\n            <span>{formatHours(maxHours * 0.25)}</span>\n            <span>0h</span>\n          </div>\n\n          {/* Chart area */}\n          <div className=\"absolute left-14 right-0 top-0 bottom-12\">\n            {/* Grid lines */}\n            <div className=\"absolute inset-0 flex flex-col justify-between\">\n              {[0, 1, 2, 3, 4].map(i => (\n                <div key={i} className=\"border-t border-border\" />\n              ))}\n            </div>\n\n            {/* Bars */}\n            <div className=\"absolute inset-0 flex items-end justify-between gap-2\">\n              {data.map((week, index) => {\n                const height = (week.hours / maxHours) * 100;\n                const isHovered = hoveredIndex === index;\n\n                return (\n                  <div\n                    key={week.week}\n                    className=\"relative flex-1 group\"\n                    onMouseEnter={() => setHoveredIndex(index)}\n                    onMouseLeave={() => setHoveredIndex(null)}\n                  >\n                    <div\n                      className={`\n                        w-full rounded-t-lg transition-all duration-300\n                        ${\n                          week.hours > 0\n                            ? isHovered\n                              ? 'bg-primary shadow-lg'\n                              : 'bg-primary/80 hover:bg-primary hover:shadow-lg'\n                            : 'bg-gray-100 border border-border'\n                        }\n                      `}\n                      style={{ height: `${Math.max(height, 2)}%` }}\n                    />\n\n                    {/* Tooltip */}\n                    {isHovered && (\n                      <div className=\"absolute bottom-full left-1/2 -translate-x-1/2 mb-3 px-3 py-2 bg-foreground text-background text-xs rounded-lg shadow-xl whitespace-nowrap z-10\">\n                        <div className=\"font-semibold\">\n                          {getWeekRange(week.week)}\n                        </div>\n                        <div className=\"mt-1\">{formatHours(week.hours)}</div>\n                        <div className=\"opacity-70\">\n                          {week.sessions} session\n                          {week.sessions !== 1 ? 's' : ''}\n                        </div>\n                        <div className=\"absolute top-full left-1/2 -translate-x-1/2 border-4 border-transparent border-t-foreground\" />\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* X-axis labels */}\n          <div className=\"absolute left-14 right-0 bottom-0 h-10 flex justify-between text-xs text-muted-foreground items-start pt-2\">\n            {data.map((week, index) => {\n              // Show every other label for better readability\n              if (data.length > 8 && index % 2 !== 0)\n                return <div key={week.week} className=\"flex-1\" />;\n\n              return (\n                <div key={week.week} className=\"flex-1 text-center\">\n                  <div>{getWeekLabel(week.week)}</div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Project Breakdown Chart Component\ninterface ProjectBreakdownChartProps {\n  data: ProjectBreakdown[];\n  formatHours: (hours: number) => string;\n}\n\nconst ProjectBreakdownChart: React.FC<ProjectBreakdownChartProps> = ({\n  data,\n  formatHours,\n}) => {\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n\n  if (data.length === 0) {\n    return (\n      <div className=\"text-center py-8 text-muted-foreground\">\n        No project data available\n      </div>\n    );\n  }\n\n  const totalHours = data.reduce((sum, p) => sum + p.hours, 0);\n  const maxHours = Math.max(...data.map(p => p.hours));\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Summary Stats */}\n      <div className=\"grid grid-cols-3 gap-4\">\n        <div className=\"bg-white rounded-lg p-4 border border-border shadow-sm\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-1\">\n            <PieChart className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Total Projects</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">\n            {data.length}\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg p-4 border border-border shadow-sm\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-1\">\n            <Clock className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Total Hours</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">\n            {formatHours(totalHours)}\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg p-4 border border-border shadow-sm\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-1\">\n            <Target className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Top Project</span>\n          </div>\n          <div className=\"text-lg font-bold text-foreground truncate\">\n            {data[0]?.projectName}\n          </div>\n          <div className=\"text-xs text-muted-foreground\">\n            {data[0] ? formatHours(data[0].hours) : formatHours(0)}\n          </div>\n        </div>\n      </div>\n\n      {/* Horizontal Bar Chart */}\n      <div className=\"bg-white rounded-lg p-6 border border-border shadow-sm\">\n        <h3 className=\"text-sm font-semibold text-foreground mb-4\">\n          Time Distribution by Project\n        </h3>\n        <div className=\"space-y-4\">\n          {data.map((project, index) => {\n            const widthPercentage = (project.hours / maxHours) * 100;\n            const isHovered = hoveredIndex === index;\n\n            return (\n              <div\n                key={project.projectId}\n                className=\"relative\"\n                onMouseEnter={() => setHoveredIndex(index)}\n                onMouseLeave={() => setHoveredIndex(null)}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <div\n                      className=\"w-3 h-3 rounded-full\"\n                      style={{ backgroundColor: project.color }}\n                    />\n                    <span className=\"text-sm font-medium text-foreground\">\n                      {project.projectName}\n                    </span>\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    {formatHours(project.hours)} (\n                    {project.percentage.toFixed(1)}%)\n                  </div>\n                </div>\n                <div className=\"relative\">\n                  <div className=\"w-full bg-gray-100 rounded-full h-8 border border-border\">\n                    <div\n                      className={`h-8 rounded-full transition-all duration-300 flex items-center justify-end pr-3 ${\n                        isHovered ? 'shadow-lg' : 'shadow-sm'\n                      }`}\n                      style={{\n                        width: `${widthPercentage}%`,\n                        backgroundColor: project.color,\n                        minWidth: widthPercentage > 0 ? '2%' : '0%',\n                      }}\n                    >\n                      {widthPercentage > 20 && (\n                        <span className=\"text-xs font-semibold text-white\">\n                          {project.percentage.toFixed(0)}%\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Projects Table */}\n      <div className=\"bg-white rounded-lg border border-border shadow-sm overflow-hidden\">\n        <table className=\"w-full\">\n          <thead className=\"bg-gray-50 border-b border-border\">\n            <tr>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Project\n              </th>\n              <th className=\"px-6 py-3 text-right text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Hours\n              </th>\n              <th className=\"px-6 py-3 text-right text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Percentage\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y divide-border\">\n            {data.map((project, index) => (\n              <tr\n                key={project.projectId}\n                className=\"hover:bg-gray-50 transition-colors\"\n              >\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"flex items-center gap-2\">\n                    <div\n                      className=\"w-3 h-3 rounded-full flex-shrink-0\"\n                      style={{ backgroundColor: project.color }}\n                    />\n                    <span className=\"text-sm font-medium text-foreground\">\n                      {project.projectName}\n                    </span>\n                  </div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-foreground\">\n                  {formatHours(project.hours)}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-muted-foreground\">\n                  {project.percentage.toFixed(1)}%\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ProfileTabs.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'firebaseApi' is defined but never used.",
        "line": 6,
        "column": 30,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Session' is defined but never used.",
        "line": 7,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Project' is defined but never used.",
        "line": 7,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'showPrivateContent' is assigned a value but never used.",
        "line": 44,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 44,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'userId' is defined but never used.",
        "line": 45,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 45,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 304,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 304,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9993, 9996], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9993, 9996], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isLoadingSessions' is assigned a value but never used.",
        "line": 403,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 403,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 414,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 414,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13896, 13899], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13896, 13899], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 419,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 419,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14062, 14065], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14062, 14065], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 439,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 439,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14637, 14640], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14637, 14640], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 452,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 452,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15074, 15077], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15074, 15077], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 463,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 463,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15488, 15491], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15488, 15491], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 481,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 481,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16052, 16055], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16052, 16055], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 13,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { firebaseSessionApi, firebaseApi, firebaseUserApi, firebasePostApi } from '@/lib/api';\nimport { Session, User, Project, SessionWithDetails } from '@/types';\nimport SessionCard from './SessionCard';\nimport ConfirmDialog from './ConfirmDialog';\nimport {\n  BarChart3,\n  Trophy,\n  Users,\n  FileText,\n  Calendar,\n  TrendingUp,\n  Award,\n  Clock\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { debug } from '@/lib/debug';\n\nexport type ProfileTab = 'overview' | 'achievements' | 'followers' | 'following' | 'posts';\n\ninterface ProfileTabsProps {\n  activeTab: ProfileTab;\n  onTabChange: (tab: ProfileTab) => void;\n  stats?: {\n    totalHours: number;\n    currentStreak: number;\n    achievements: number;\n    followers: number;\n    following: number;\n    posts: number;\n  };\n  showPrivateContent?: boolean;\n  userId?: string;\n}\n\nexport const ProfileTabs: React.FC<ProfileTabsProps> = ({\n  activeTab,\n  onTabChange,\n  stats,\n  showPrivateContent = false,\n  userId,\n}) => {\n  const tabs: Array<{\n    id: ProfileTab;\n    label: string;\n    icon: React.ReactNode;\n    badge?: number;\n    disabled?: boolean;\n  }> = [\n    {\n      id: 'overview',\n      label: 'Overview',\n      icon: <BarChart3 className=\"w-4 h-4\" />,\n    },\n    {\n      id: 'achievements',\n      label: 'Achievements',\n      icon: <Trophy className=\"w-4 h-4\" />,\n    },\n    {\n      id: 'followers',\n      label: 'Followers',\n      icon: <Users className=\"w-4 h-4\" />,\n      badge: stats?.followers,\n    },\n    {\n      id: 'following',\n      label: 'Following',\n      icon: <Users className=\"w-4 h-4\" />,\n      badge: stats?.following,\n    },\n    {\n      id: 'posts',\n      label: 'Posts',\n      icon: <FileText className=\"w-4 h-4\" />,\n      badge: stats?.posts,\n    },\n  ];\n\n  return (\n    <div className=\"border-b border-border\">\n      <div className=\"flex space-x-0 overflow-x-auto scrollbar-hide\">\n        {tabs.map((tab) => (\n          <Button\n            key={tab.id}\n            variant={activeTab === tab.id ? \"default\" : \"ghost\"}\n            onClick={() => !tab.disabled && onTabChange(tab.id)}\n            disabled={tab.disabled}\n            className={cn(\n              'flex items-center gap-1.5 md:gap-2 px-3 md:px-4 py-2 rounded-none border-b-2 transition-all flex-shrink-0',\n              activeTab === tab.id\n                ? 'border-primary text-primary bg-primary/5'\n                : 'border-transparent text-muted-foreground hover:text-foreground hover:border-muted-foreground/50',\n              tab.disabled && 'opacity-50 cursor-not-allowed'\n            )}\n          >\n            {tab.icon}\n            <span className=\"hidden md:inline whitespace-nowrap text-sm md:text-base\">{tab.label}</span>\n            {tab.badge !== undefined && (\n              <Badge\n                variant={activeTab === tab.id ? \"secondary\" : \"outline\"}\n                className=\"ml-0.5 md:ml-1 text-xs px-1.5 py-0 md:inline hidden\"\n              >\n                {tab.badge}\n              </Badge>\n            )}\n          </Button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Tab content components\ninterface TabContentProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const TabContent: React.FC<TabContentProps> = ({ children, className = \"\" }) => (\n  <div className={cn('py-6', className)}>\n    {children}\n  </div>\n);\n\n// Overview tab content\ninterface OverviewContentProps {\n  stats?: {\n    totalHours: number;\n    weeklyHours: number;\n    monthlyHours: number;\n    currentStreak: number;\n    longestStreak: number;\n    sessionsThisWeek: number;\n    sessionsThisMonth: number;\n    averageSessionDuration: number;\n    mostProductiveHour: number;\n  };\n}\n\nexport const OverviewContent: React.FC<OverviewContentProps> = ({ stats }) => {\n  if (!stats) {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-4 bg-muted rounded w-3/4 mx-auto mb-4\"></div>\n          <div className=\"h-4 bg-muted rounded w-1/2 mx-auto\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const formatHours = (hours: number | undefined): string => {\n    if (hours === undefined || hours === null || isNaN(hours)) {\n      return '0h';\n    }\n    if (hours < 1) {\n      const minutes = Math.round(hours * 60);\n      return `${minutes}m`;\n    }\n    return `${hours.toFixed(1)}h`;\n  };\n\n  const formatDuration = (minutes: number): string => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    if (hours > 0) {\n      return `${hours}h ${mins}m`;\n    }\n    return `${mins}m`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Key Stats Grid */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <div className=\"bg-card-background p-4 rounded-lg border border-border\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-2\">\n            <Clock className=\"w-4 h-4\" />\n            <span className=\"text-sm\">Total Hours</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">\n            {formatHours(stats.totalHours)}\n          </div>\n        </div>\n\n        <div className=\"bg-card-background p-4 rounded-lg border border-border\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-2\">\n            <TrendingUp className=\"w-4 h-4\" />\n            <span className=\"text-sm\">Current Streak</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">\n            {stats.currentStreak} days\n          </div>\n        </div>\n\n        <div className=\"bg-card-background p-4 rounded-lg border border-border\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-2\">\n            <Calendar className=\"w-4 h-4\" />\n            <span className=\"text-sm\">This Week</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">\n            {formatHours(stats.weeklyHours)}\n          </div>\n        </div>\n\n        <div className=\"bg-card-background p-4 rounded-lg border border-border\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-2\">\n            <Award className=\"w-4 h-4\" />\n            <span className=\"text-sm\">Longest Streak</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">\n            {stats.longestStreak} days\n          </div>\n        </div>\n      </div>\n\n      {/* Additional Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div className=\"bg-card-background p-6 rounded-lg border border-border\">\n          <h3 className=\"font-semibold text-foreground mb-4\">Activity Summary</h3>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Sessions this week:</span>\n              <span className=\"font-medium\">{stats.sessionsThisWeek}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Sessions this month:</span>\n              <span className=\"font-medium\">{stats.sessionsThisMonth}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Avg session duration:</span>\n              <span className=\"font-medium\">{formatDuration(stats.averageSessionDuration)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Most productive hour:</span>\n              <span className=\"font-medium\">{stats.mostProductiveHour}:00</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-card-background p-6 rounded-lg border border-border\">\n          <h3 className=\"font-semibold text-foreground mb-4\">Monthly Overview</h3>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Total hours:</span>\n              <span className=\"font-medium\">{formatHours(stats.monthlyHours)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Daily average:</span>\n              <span className=\"font-medium\">\n                {formatHours(stats.monthlyHours / 30)}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Weekly average:</span>\n              <span className=\"font-medium\">{formatHours(stats.monthlyHours / 4.3)}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Placeholder components for other tabs\nexport const AchievementsContent: React.FC = () => (\n  <div className=\"text-center py-12\">\n    <Trophy className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n    <h3 className=\"text-lg font-semibold text-foreground mb-2\">Achievements</h3>\n    <p className=\"text-muted-foreground\">\n      Achievement system coming soon! Track your milestones and earn badges.\n    </p>\n  </div>\n);\n\ninterface FollowListContentProps {\n  userId: string;\n  type: 'followers' | 'following';\n}\n\nexport const FollowListContent: React.FC<FollowListContentProps> = ({ userId, type }) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadUsers = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        if (type === 'followers') {\n          const followers = await firebaseUserApi.getFollowers(userId);\n          setUsers(followers);\n        } else {\n          const following = await firebaseUserApi.getFollowing(userId);\n          setUsers(following);\n        }\n      } catch (err: any) {\n        debug.error(`ProfileTabs - Failed to load ${type}:`, err);\n        setError(err.message || `Failed to load ${type}`);\n      } finally{\n        setIsLoading(false);\n      }\n    };\n\n    if (userId) {\n      loadUsers();\n    }\n  }, [userId, type]);\n\n  if (isLoading) {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-4 bg-muted rounded w-3/4 mx-auto mb-4\"></div>\n          <div className=\"h-4 bg-muted rounded w-1/2 mx-auto\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-12\">\n        <Users className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-foreground mb-2\">Error</h3>\n        <p className=\"text-muted-foreground\">{error}</p>\n      </div>\n    );\n  }\n\n  if (users.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <Users className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n          No {type === 'followers' ? 'Followers' : 'Following'}\n        </h3>\n        <p className=\"text-muted-foreground\">\n          {type === 'followers'\n            ? 'No one is following this user yet.'\n            : 'Not following anyone yet.'}\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-0 divide-y divide-border\">\n      {users.map((user) => (\n        <a\n          key={user.id}\n          href={`/profile/${user.username}`}\n          className=\"flex items-center gap-4 p-4 hover:bg-gray-50 transition-colors\"\n        >\n          <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center text-gray-600 font-semibold text-lg flex-shrink-0\">\n            {user.name.charAt(0).toUpperCase()}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"font-semibold text-foreground\">{user.name}</div>\n            <div className=\"text-sm text-muted-foreground\">@{user.username}</div>\n            {user.bio && (\n              <p className=\"mt-1 text-sm text-muted-foreground line-clamp-1\">{user.bio}</p>\n            )}\n          </div>\n          <div className=\"flex items-center gap-4 text-sm text-muted-foreground flex-shrink-0\">\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-foreground\">{user.followersCount}</div>\n              <div className=\"text-xs\">followers</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-foreground\">{user.followingCount}</div>\n              <div className=\"text-xs\">following</div>\n            </div>\n          </div>\n        </a>\n      ))}\n    </div>\n  );\n};\n\nexport const FollowingContent: React.FC<{ userId: string }> = ({ userId }) => (\n  <FollowListContent userId={userId} type=\"following\" />\n);\n\nexport const FollowersContent: React.FC<{ userId: string }> = ({ userId }) => (\n  <FollowListContent userId={userId} type=\"followers\" />\n);\n\ninterface PostsContentProps {\n  userId: string;\n  isOwnProfile?: boolean;\n}\n\nexport const PostsContent: React.FC<PostsContentProps> = ({ userId, isOwnProfile = false }) => {\n  const [sessions, setSessions] = useState<SessionWithDetails[]>([]);\n  const [isLoadingSessions, setIsLoadingSessions] = useState(false);\n  const [deleteConfirmSession, setDeleteConfirmSession] = useState<string | null>(null);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadSessions = async () => {\n      try {\n        setIsLoadingSessions(true);\n        const userSessions = await firebaseSessionApi.getUserSessions(userId, 50);\n        // Ensure sessions have activity field (backwards compatibility)\n        const sessionsWithActivity = userSessions.map((session: any) => ({\n          ...session,\n          activity: session.activity || session.project,\n        }));\n        setSessions(sessionsWithActivity);\n      } catch (err: any) {\n        debug.error('ProfileTabs - Failed to load sessions:', err);\n        setError(err.message || 'Failed to load posts');\n      } finally {\n        setIsLoadingSessions(false);\n      }\n    };\n\n    loadSessions();\n  }, [userId]);\n\n  // Handle support\n  const handleSupport = useCallback(async (sessionId: string) => {\n    try {\n      await firebasePostApi.supportSession(sessionId);\n      setSessions(prev => prev.map(s =>\n        s.id === sessionId\n          ? { ...s, supportCount: s.supportCount + 1, isSupported: true }\n          : s\n      ));\n    } catch (err: any) {\n      debug.error('ProfileTabs - Failed to support session:', err);\n    }\n  }, []);\n\n  const handleRemoveSupport = useCallback(async (sessionId: string) => {\n    try {\n      await firebasePostApi.removeSupportFromSession(sessionId);\n      setSessions(prev => prev.map(s =>\n        s.id === sessionId\n          ? { ...s, supportCount: Math.max(0, s.supportCount - 1), isSupported: false }\n          : s\n      ));\n    } catch (err: any) {\n      debug.error('ProfileTabs - Failed to remove support:', err);\n    }\n  }, []);\n\n  const handleShare = useCallback(async (sessionId: string) => {\n    try {\n      // Share functionality - copy link to clipboard\n      const shareUrl = `${window.location.origin}/sessions/${sessionId}`;\n      await navigator.clipboard.writeText(shareUrl);\n      // You could add a toast notification here\n    } catch (err: any) {\n      debug.error('ProfileTabs - Failed to share session:', err);\n    }\n  }, []);\n\n  // Handle delete\n  const handleDelete = useCallback(async (sessionId: string) => {\n    setDeleteConfirmSession(sessionId);\n  }, []);\n\n  const confirmDelete = useCallback(async () => {\n    if (!deleteConfirmSession) return;\n\n    try {\n      setIsDeleting(true);\n      await firebaseSessionApi.deleteSession(deleteConfirmSession);\n      setSessions(prev => prev.filter(session => session.id !== deleteConfirmSession));\n      setDeleteConfirmSession(null);\n    } catch (err: any) {\n      debug.error('ProfileTabs - Failed to delete session:', err);\n    } finally {\n      setIsDeleting(false);\n    }\n  }, [deleteConfirmSession]);\n\n  if (error) {\n    return (\n      <div className=\"text-center py-12\">\n        <FileText className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-foreground mb-2\">Error loading posts</h3>\n        <p className=\"text-muted-foreground\">{error}</p>\n      </div>\n    );\n  }\n\n  if (sessions.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <FileText className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n          {isOwnProfile ? 'No sessions yet' : 'No sessions'}\n        </h3>\n        <p className=\"text-muted-foreground\">\n          {isOwnProfile\n            ? 'Complete some sessions to see them here.'\n            : 'This user hasn\\'t shared any sessions yet.'\n          }\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {sessions.map((session) => (\n        <SessionCard\n          key={session.id}\n          session={session}\n          onSupport={handleSupport}\n          onRemoveSupport={handleRemoveSupport}\n          onShare={handleShare}\n          onDelete={isOwnProfile ? handleDelete : undefined}\n          showComments={true}\n        />\n      ))}\n\n      {/* Delete Confirmation Dialog */}\n      <ConfirmDialog\n        isOpen={deleteConfirmSession !== null}\n        onClose={() => setDeleteConfirmSession(null)}\n        onConfirm={confirmDelete}\n        title=\"Delete Session\"\n        message=\"Are you sure you want to delete this session? This action cannot be undone and all associated data will be permanently removed.\"\n        confirmText=\"Delete Session\"\n        cancelText=\"Cancel\"\n        variant=\"danger\"\n        isLoading={isDeleting}\n      />\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ProgressRing.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ProjectAnalytics.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ProjectStats' is defined but never used.",
        "line": 7,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'firebaseProjectApi' is defined but never used.",
        "line": 8,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'firebaseSessionApi' is defined but never used.",
        "line": 8,
        "column": 30,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 48
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 67,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 67,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2222, 2225], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2222, 2225], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'weekKey' is defined but never used.",
        "line": 115,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 115,
        "endColumn": 23
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadAnalyticsData'. Either include it or remove the dependency array.",
        "line": 192,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 192,
        "endColumn": 39,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadAnalyticsData, projectId, selectedPeriod, user]",
            "fix": {
              "range": [6254, 6287],
              "text": "[loadAnalyticsData, projectId, selectedPeriod, user]"
            }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Clock, Target, TrendingUp, BarChart3 } from 'lucide-react';\nimport { ActivityChart } from './ActivityChart';\nimport { ProgressRing } from './ProgressRing';\nimport { AnalyticsPeriod, ProjectStats } from '@/types';\nimport { firebaseProjectApi, firebaseSessionApi } from '@/lib/api';\nimport { useAuth } from '@/hooks/useAuth';\nimport { debug } from '@/lib/debug';\n\ninterface ProjectAnalyticsProps {\n  projectId: string;\n  projectName: string;\n}\n\nconst PERIODS: AnalyticsPeriod[] = [\n  { label: '7D', value: '7d', days: 7 },\n  { label: '1M', value: '1m', days: 30 },\n  { label: '3M', value: '3m', days: 90 },\n  { label: '6M', value: '6m', days: 180 },\n  { label: '1Y', value: '1y', days: 365 },\n  { label: 'All', value: 'all', days: 9999 },\n];\n\ninterface ProjectAnalyticsData {\n  totalHours: number;\n  weeklyAverage: number;\n  sessionCount: number;\n  averageSessionDuration: number;\n  goalProgress: {\n    current: number;\n    target: number | null;\n    percentage: number;\n    estimatedCompletion: Date | null;\n  };\n  cumulativeHours: Array<{ label: string; value: number }>;\n  sessionFrequency: Array<{ label: string; value: number }>;\n}\n\nexport const ProjectAnalytics: React.FC<ProjectAnalyticsProps> = ({\n  projectId,\n  projectName,\n}) => {\n  const { user } = useAuth();\n  const defaultPeriod: AnalyticsPeriod = PERIODS[1] ||\n    PERIODS[0] || { label: '7D', value: '7d' as const, days: 7 };\n  const [selectedPeriod, setSelectedPeriod] =\n    useState<AnalyticsPeriod>(defaultPeriod);\n  const [isLoading, setIsLoading] = useState(true);\n  const [analyticsData, setAnalyticsData] =\n    useState<ProjectAnalyticsData | null>(null);\n\n  const loadAnalyticsData = async () => {\n    if (!user) return;\n\n    try {\n      setIsLoading(true);\n\n      // Get sessions for this project within the selected period\n      const endDate = new Date();\n      const startDate = new Date();\n      startDate.setDate(endDate.getDate() - (selectedPeriod?.days || 0));\n\n      // TODO: Implement getSessionsByProject(projectId, startDate, endDate) in src/lib/api/sessions/\n      // This should filter sessions by projectId and date range for analytics\n      const sessions: any[] = [];\n\n      // Calculate cumulative hours data\n      const dailyHours: Record<string, number> = {};\n      let cumulativeTotal = 0;\n\n      sessions.forEach(session => {\n        const sessionDate = new Date(session.createdAt);\n        const dateKey = sessionDate.toISOString().split('T')[0];\n        if (dateKey) {\n          dailyHours[dateKey] =\n            (dailyHours[dateKey] || 0) + session.duration / 3600;\n        }\n      });\n\n      // Generate cumulative hours chart data\n      const cumulativeHours = [];\n      for (let i = (selectedPeriod?.days || 0) - 1; i >= 0; i--) {\n        const date = new Date();\n        date.setDate(date.getDate() - i);\n        const dateKey = date.toISOString().split('T')[0];\n        const dailyHour = dateKey ? dailyHours[dateKey] || 0 : 0;\n        cumulativeTotal += dailyHour;\n\n        cumulativeHours.push({\n          label: date.toLocaleDateString('en-US', {\n            month: 'short',\n            day: 'numeric',\n          }),\n          value: Math.round(cumulativeTotal * 10) / 10,\n        });\n      }\n\n      // Generate session frequency data (weekly)\n      const weeklyData: Record<string, number> = {};\n      sessions.forEach(session => {\n        const sessionDate = new Date(session.createdAt);\n        const weekStart = new Date(sessionDate);\n        weekStart.setDate(sessionDate.getDate() - sessionDate.getDay());\n        const weekKey = weekStart.toISOString().split('T')[0];\n        if (weekKey) {\n          weeklyData[weekKey] = (weeklyData[weekKey] || 0) + 1;\n        }\n      });\n\n      const sessionFrequency = Object.entries(weeklyData)\n        .sort(([a], [b]) => a.localeCompare(b))\n        .slice(-12) // Last 12 weeks\n        .map(([weekKey, count], index) => ({\n          label: `Week ${index + 1}`,\n          value: count,\n        }));\n\n      // Calculate stats from sessions\n      const totalHours = sessions.reduce(\n        (sum, s) => sum + s.duration / 3600,\n        0\n      );\n      const periodDays = selectedPeriod?.days || 1;\n      const weeklyHours = Math.round((totalHours / periodDays) * 7 * 10) / 10;\n\n      // Calculate goal progress (you would get target from project settings)\n      const target = null; // TODO: Add hourGoal field to Project type and fetch from project data\n      const goalProgress = {\n        current: totalHours,\n        target,\n        percentage: target ? (totalHours / target) * 100 : 0,\n        estimatedCompletion:\n          target && weeklyHours > 0\n            ? new Date(\n                Date.now() +\n                  ((target - totalHours) / weeklyHours) *\n                    7 *\n                    24 *\n                    60 *\n                    60 *\n                    1000\n              )\n            : null,\n      };\n\n      setAnalyticsData({\n        totalHours: Math.round(totalHours * 10) / 10,\n        weeklyAverage: weeklyHours,\n        sessionCount: sessions.length,\n        averageSessionDuration:\n          sessions.length > 0\n            ? Math.round(\n                (sessions.reduce((sum, s) => sum + s.duration, 0) /\n                  sessions.length /\n                  60) *\n                  10\n              ) / 10\n            : 0,\n        goalProgress,\n        cumulativeHours,\n        sessionFrequency:\n          sessionFrequency.length > 0\n            ? sessionFrequency\n            : [{ label: 'This Week', value: sessions.length }],\n      });\n    } catch (error) {\n      debug.error('ProjectAnalytics - Failed to load analytics data:', error);\n      // Fallback to basic data\n      setAnalyticsData({\n        totalHours: 0,\n        weeklyAverage: 0,\n        sessionCount: 0,\n        averageSessionDuration: 0,\n        goalProgress: {\n          current: 0,\n          target: null,\n          percentage: 0,\n          estimatedCompletion: null,\n        },\n        cumulativeHours: [{ label: 'Today', value: 0 }],\n        sessionFrequency: [{ label: 'This Week', value: 0 }],\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadAnalyticsData();\n  }, [projectId, selectedPeriod, user]);\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"h-8 bg-gray-200 rounded animate-pulse mb-4\"></div>\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          {[...Array(4)].map((_, i) => (\n            <div\n              key={i}\n              className=\"h-24 bg-gray-200 rounded animate-pulse\"\n            ></div>\n          ))}\n        </div>\n        <div className=\"h-64 bg-gray-200 rounded animate-pulse\"></div>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div className=\"h-64 bg-gray-200 rounded animate-pulse\"></div>\n          <div className=\"h-64 bg-gray-200 rounded animate-pulse\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!analyticsData) {\n    return (\n      <div className=\"text-center py-12\">\n        <p className=\"text-gray-500\">No analytics data available</p>\n      </div>\n    );\n  }\n\n  const daysUntilGoal = analyticsData.goalProgress.estimatedCompletion\n    ? Math.ceil(\n        (analyticsData.goalProgress.estimatedCompletion.getTime() -\n          Date.now()) /\n          (1000 * 60 * 60 * 24)\n      )\n    : null;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">\n            {projectName} Analytics\n          </h2>\n          <p className=\"text-gray-600\">\n            Detailed project insights and progress\n          </p>\n        </div>\n\n        <div className=\"flex gap-1\">\n          {PERIODS.map(period => (\n            <button\n              key={period.value}\n              onClick={() => setSelectedPeriod(period)}\n              className={`px-3 py-1.5 rounded-md text-sm font-medium transition-colors ${\n                selectedPeriod.value === period.value\n                  ? 'bg-gray-900 text-white'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              }`}\n            >\n              {period.label}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Key metrics row */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <Clock className=\"w-5 h-5 text-gray-600\" />\n            <span className=\"text-sm font-medium text-gray-600\">\n              Total Hours\n            </span>\n          </div>\n          <p className=\"text-3xl font-bold text-gray-900\">\n            {analyticsData.totalHours}\n          </p>\n          <p className=\"text-xs text-gray-500 mt-1\">\n            {analyticsData.weeklyAverage}h per week avg\n          </p>\n        </div>\n\n        <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <BarChart3 className=\"w-5 h-5 text-gray-600\" />\n            <span className=\"text-sm font-medium text-gray-600\">Sessions</span>\n          </div>\n          <p className=\"text-3xl font-bold text-gray-900\">\n            {analyticsData.sessionCount}\n          </p>\n          <p className=\"text-xs text-gray-500 mt-1\">\n            {analyticsData.averageSessionDuration}min avg duration\n          </p>\n        </div>\n\n        <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <Target className=\"w-5 h-5 text-gray-600\" />\n            <span className=\"text-sm font-medium text-gray-600\">\n              Goal Progress\n            </span>\n          </div>\n          <p className=\"text-3xl font-bold text-gray-900\">\n            {analyticsData.goalProgress.target\n              ? `${Math.round(analyticsData.goalProgress.percentage)}%`\n              : 'No Goal'}\n          </p>\n          <p className=\"text-xs text-gray-500 mt-1\">\n            {analyticsData.goalProgress.target\n              ? `${analyticsData.goalProgress.current}h / ${analyticsData.goalProgress.target}h`\n              : 'Set a target goal'}\n          </p>\n        </div>\n\n        <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <TrendingUp className=\"w-5 h-5 text-gray-600\" />\n            <span className=\"text-sm font-medium text-gray-600\">\n              Weekly Avg\n            </span>\n          </div>\n          <p className=\"text-3xl font-bold text-gray-900\">\n            {analyticsData.weeklyAverage}\n          </p>\n          <p className=\"text-xs text-gray-500 mt-1\">hours per week</p>\n        </div>\n      </div>\n\n      {/* Goal progress */}\n      {analyticsData.goalProgress.target && (\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex-1\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                Goal Progress\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div>\n                  <p className=\"text-sm text-gray-600 mb-1\">Current Progress</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {analyticsData.goalProgress.current}h /{' '}\n                    {analyticsData.goalProgress.target}h\n                  </p>\n                </div>\n\n                {daysUntilGoal && daysUntilGoal > 0 && (\n                  <div>\n                    <p className=\"text-sm text-gray-600 mb-1\">\n                      Estimated Completion\n                    </p>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      {daysUntilGoal} days\n                    </p>\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      {analyticsData.goalProgress.estimatedCompletion?.toLocaleDateString()}\n                    </p>\n                  </div>\n                )}\n\n                <div>\n                  <p className=\"text-sm text-gray-600 mb-1\">Hours Remaining</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {Math.max(\n                      0,\n                      analyticsData.goalProgress.target -\n                        analyticsData.goalProgress.current\n                    )}\n                    h\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"ml-6\">\n              <ProgressRing\n                progress={Math.min(analyticsData.goalProgress.percentage, 100)}\n                size={120}\n                color=\"#374151\"\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Cumulative hours */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">\n              Cumulative Hours\n            </h3>\n            {analyticsData.goalProgress.target && (\n              <div className=\"text-sm text-gray-500\">\n                Goal: {analyticsData.goalProgress.target}h\n              </div>\n            )}\n          </div>\n          <ActivityChart\n            data={analyticsData.cumulativeHours}\n            type=\"line\"\n            height={240}\n            color=\"#374151\"\n            valueFormatter={v => `${v}h`}\n          />\n          {analyticsData.goalProgress.target &&\n            daysUntilGoal &&\n            daysUntilGoal > 0 && (\n              <div className=\"mt-4 p-3 bg-gray-50 rounded-lg\">\n                <p className=\"text-sm text-gray-700\">\n                  At your current pace, you'll reach your goal in{' '}\n                  <span className=\"font-semibold\">{daysUntilGoal} days</span>.\n                </p>\n              </div>\n            )}\n        </div>\n\n        {/* Session frequency */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Session Frequency\n          </h3>\n          <ActivityChart\n            data={analyticsData.sessionFrequency}\n            type=\"bar\"\n            height={240}\n            color=\"#6B7280\"\n            valueFormatter={v => `${v} sessions`}\n          />\n          <div className=\"mt-4 p-3 bg-gray-50 rounded-lg\">\n            <p className=\"text-sm text-gray-700\">\n              Average of{' '}\n              <span className=\"font-semibold\">\n                {analyticsData.sessionFrequency.length > 0\n                  ? (\n                      analyticsData.sessionFrequency.reduce(\n                        (sum, d) => sum + d.value,\n                        0\n                      ) / analyticsData.sessionFrequency.length\n                    ).toFixed(1)\n                  : '0'}{' '}\n                sessions\n              </span>{' '}\n              per week\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ProjectAnalyticsDashboard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ProjectCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ProjectList.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'onCreateProject' is defined but never used.",
        "line": 23,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 18
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Project } from '@/types';\nimport { ProjectCard } from './ProjectCard';\nimport { useAuth } from '@/hooks/useAuth';\nimport {\n  useActivities,\n  useDeleteActivity,\n  useArchiveActivity,\n  useRestoreActivity,\n} from '@/hooks/useActivitiesQuery';\n\ninterface ProjectListProps {\n  onCreateProject?: () => void;\n  onEditProject?: (project: Project) => void;\n}\n\n// const STORAGE_KEY = 'projectViewMode';\n\nexport const ProjectList: React.FC<ProjectListProps> = ({\n  onCreateProject,\n  onEditProject,\n}) => {\n  const router = useRouter();\n  const { user } = useAuth();\n  const { data: projects = [], isLoading, error } = useActivities(user?.id);\n  const deleteProjectMutation = useDeleteActivity();\n  const archiveProjectMutation = useArchiveActivity();\n  const restoreProjectMutation = useRestoreActivity();\n  // const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [deleteConfirm, setDeleteConfirm] = useState<Project | null>(null);\n\n  // // Load view mode from localStorage on mount\n  // useEffect(() => {\n  //   const savedViewMode = localStorage.getItem(STORAGE_KEY);\n  //   if (savedViewMode === 'grid' || savedViewMode === 'list') {\n  //     setViewMode(savedViewMode);\n  //   }\n  // }, []);\n\n  // // Save view mode to localStorage whenever it changes\n  // const handleViewModeChange = (mode: 'grid' | 'list') => {\n  //   setViewMode(mode);\n  //   localStorage.setItem(STORAGE_KEY, mode);\n  // };\n\n  // Show all projects\n  const filteredProjects = projects;\n\n  const handleDelete = async (project: Project) => {\n    try {\n      await deleteProjectMutation.mutateAsync(project.id);\n      setDeleteConfirm(null);\n    } catch (error) {\n      console.error('Failed to delete project:', error);\n    }\n  };\n\n  const handleArchive = async (project: Project) => {\n    try {\n      if (project.status === 'archived') {\n        await restoreProjectMutation.mutateAsync(project.id);\n      } else {\n        await archiveProjectMutation.mutateAsync(project.id);\n      }\n    } catch (error) {\n      console.error('Failed to archive/restore project:', error);\n    }\n  };\n\n  const handleRestore = async (project: Project) => {\n    try {\n      await restoreProjectMutation.mutateAsync(project.id);\n    } catch (error) {\n      console.error('Failed to restore project:', error);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        {/* Loading skeleton for header */}\n        <div className=\"flex justify-between items-center\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-32\"></div>\n          </div>\n          <div className=\"flex gap-2\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-10 bg-gray-200 rounded w-24\"></div>\n            </div>\n            <div className=\"animate-pulse\">\n              <div className=\"h-10 bg-gray-200 rounded w-24\"></div>\n            </div>\n          </div>\n        </div>\n\n        {/* Loading skeleton for filters */}\n        <div className=\"flex gap-2\">\n          {[1, 2, 3, 4].map(i => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"h-8 bg-gray-200 rounded w-20\"></div>\n            </div>\n          ))}\n        </div>\n\n        {/* Loading skeleton for project cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[1, 2, 3, 4, 5, 6].map(i => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"w-12 h-12 bg-gray-200 rounded-lg\"></div>\n                  <div className=\"w-5 h-5 bg-gray-200 rounded\"></div>\n                </div>\n                <div className=\"mb-4\">\n                  <div className=\"h-6 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-full\"></div>\n                </div>\n                <div className=\"space-y-3\">\n                  <div className=\"h-2 bg-gray-200 rounded w-full\"></div>\n                  <div className=\"h-2 bg-gray-200 rounded w-2/3\"></div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"text-red-500 text-lg mb-4\">\n          Error loading activities\n        </div>\n        <p className=\"text-gray-600 mb-4\">\n          {error instanceof Error ? error.message : String(error)}\n        </p>\n        <button\n          onClick={() => window.location.reload()}\n          className=\"bg-orange-500 text-white px-4 py-2 rounded-lg hover:bg-orange-600 transition-colors\"\n        >\n          Try Again\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 pb-2\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-1\">\n              Activities\n            </h1>\n            <p className=\"text-gray-600 text-sm\">\n              {filteredProjects.length} activit\n              {filteredProjects.length !== 1 ? 'ies' : 'y'}\n            </p>\n          </div>\n          <div className=\"flex gap-2\">\n            <button\n              onClick={() => router.push('/activities/new')}\n              className=\"bg-[#007AFF] text-white px-5 py-2.5 rounded-lg hover:bg-[#0056D6] transition-colors flex items-center gap-2 font-medium shadow-sm hover:shadow-md\"\n            >\n              <svg\n                className=\"w-5 h-5\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\n                />\n              </svg>\n              New Activity\n            </button>\n            {/* View mode toggle removed - grid view only */}\n          </div>\n        </div>\n      </div>\n\n      {/* Projects Grid/List */}\n      {filteredProjects.length === 0 ? (\n        <div className=\"bg-white rounded-xl border border-gray-200 p-8 md:p-12\">\n          <div className=\"max-w-md mx-auto text-center\">\n            <div className=\"w-16 h-16 md:w-20 md:h-20 bg-gradient-to-br from-[#007AFF] to-[#0051D5] rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-sm\">\n              <svg\n                className=\"w-8 h-8 md:w-10 md:h-10 text-white\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\n                />\n              </svg>\n            </div>\n            <h3 className=\"text-xl md:text-2xl font-bold text-gray-900 mb-2\">\n              No activities yet\n            </h3>\n            <p className=\"text-sm md:text-base text-gray-600 mb-6\">\n              Activities help you organize your work sessions and track progress\n              over time. Create your first activity to get started!\n            </p>\n            <button\n              onClick={() => router.push('/activities/new')}\n              className=\"inline-flex items-center gap-2 bg-[#007AFF] text-white px-6 py-3 rounded-xl hover:bg-[#0056D6] transition-colors font-medium shadow-sm mb-4\"\n            >\n              <svg\n                className=\"w-5 h-5\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\n                />\n              </svg>\n              Create Your First Activity\n            </button>\n            <p className=\"text-xs text-gray-500\">\n              Tip: You can assign tasks to activities and track time spent on\n              each one\n            </p>\n          </div>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredProjects.map(project => (\n            <ProjectCard\n              key={project.id}\n              project={project}\n              onEdit={onEditProject}\n              onDelete={project => setDeleteConfirm(project)}\n              onArchive={\n                project.status === 'active' ? handleArchive : handleRestore\n              }\n            />\n          ))}\n        </div>\n      )}\n\n      {/* Delete Confirmation Modal */}\n      {deleteConfirm && (\n        <div\n          className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4 animate-in fade-in duration-200\"\n          onClick={e => {\n            if (e.target === e.currentTarget) {\n              setDeleteConfirm(null);\n            }\n          }}\n        >\n          <div className=\"bg-white rounded-xl p-6 max-w-md w-full shadow-xl animate-in zoom-in-95 duration-200\">\n            <h3 className=\"text-xl font-bold text-gray-900 mb-3\">\n              Delete Activity\n            </h3>\n            <p className=\"text-gray-600 mb-6 leading-relaxed\">\n              Are you sure you want to delete{' '}\n              <span className=\"font-semibold text-gray-900\">\n                \"{deleteConfirm.name}\"\n              </span>\n              ? This action cannot be undone.\n            </p>\n            <div className=\"flex gap-3 justify-end\">\n              <button\n                onClick={() => setDeleteConfirm(null)}\n                className=\"px-5 py-2.5 text-gray-700 font-medium border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={() => handleDelete(deleteConfirm)}\n                className=\"px-5 py-2.5 bg-red-500 text-white font-medium rounded-lg hover:bg-red-600 transition-colors shadow-sm hover:shadow-md\"\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ProjectProgressView.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadSessions'. Either include it or remove the dependency array.",
        "line": 38,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 38,
        "endColumn": 17,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadSessions, projectId]",
            "fix": { "range": [973, 984], "text": "[loadSessions, projectId]" }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'processChartData'. Either include it or remove the dependency array.",
        "line": 42,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 42,
        "endColumn": 28,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [processChartData, sessions, timePeriod]",
            "fix": {
              "range": [1037, 1059],
              "text": "[processChartData, sessions, timePeriod]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 347,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 347,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11438, 11441], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11438, 11441], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Clock, Target, Calendar, Heart, ChevronDown } from 'lucide-react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  Tooltip,\n} from 'recharts';\nimport { firebaseSessionApi } from '@/lib/api';\nimport { Session } from '@/types';\n\ninterface ProjectProgressViewProps {\n  projectId: string;\n}\n\ntype TimePeriod = 'day' | 'week' | 'month' | 'year';\n\ninterface ChartDataPoint {\n  name: string;\n  hours: number;\n}\n\nexport const ProjectProgressView: React.FC<ProjectProgressViewProps> = ({\n  projectId,\n}) => {\n  const [timePeriod, setTimePeriod] = useState<TimePeriod>('week');\n  const [showTimePeriodDropdown, setShowTimePeriodDropdown] = useState(false);\n  const [sessions, setSessions] = useState<Session[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>([]);\n\n  useEffect(() => {\n    loadSessions();\n  }, [projectId]);\n\n  useEffect(() => {\n    processChartData();\n  }, [sessions, timePeriod]);\n\n  const loadSessions = async () => {\n    try {\n      setIsLoading(true);\n      const response = await firebaseSessionApi.getSessions(1, 500, {\n        projectId,\n      });\n      setSessions(response.sessions);\n    } catch (error) {\n      console.error('Failed to load sessions:', error);\n      setSessions([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const processChartData = () => {\n    const now = new Date();\n    const data: ChartDataPoint[] = [];\n\n    if (timePeriod === 'day') {\n      // Last 24 hours by hour\n      for (let i = 23; i >= 0; i--) {\n        const hour = new Date(now);\n        hour.setHours(hour.getHours() - i);\n        const hourLabel = hour.getHours().toString().padStart(2, '0');\n\n        const hoursWorked =\n          sessions.length > 0\n            ? sessions\n                .filter(s => {\n                  const sessionDate = new Date(s.startTime);\n                  return (\n                    sessionDate.getHours() === hour.getHours() &&\n                    sessionDate.toDateString() === hour.toDateString()\n                  );\n                })\n                .reduce((sum, s) => sum + s.duration / 3600, 0)\n            : 0;\n\n        data.push({ name: hourLabel, hours: Number(hoursWorked.toFixed(2)) });\n      }\n    } else if (timePeriod === 'week') {\n      // Last 7 days\n      const dayNames = ['Sat', 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri'];\n      for (let i = 6; i >= 0; i--) {\n        const day = new Date(now);\n        day.setDate(day.getDate() - i);\n\n        const hoursWorked =\n          sessions.length > 0\n            ? sessions\n                .filter(\n                  s =>\n                    new Date(s.startTime).toDateString() === day.toDateString()\n                )\n                .reduce((sum, s) => sum + s.duration / 3600, 0)\n            : 0;\n\n        data.push({\n          name: dayNames[(7 - i) % 7] || '',\n          hours: Number(hoursWorked.toFixed(2)),\n        });\n      }\n    } else if (timePeriod === 'month') {\n      // Last 30 days grouped by week\n      for (let i = 3; i >= 0; i--) {\n        const weekStart = new Date(now);\n        weekStart.setDate(weekStart.getDate() - (i * 7 + 6));\n        const weekEnd = new Date(now);\n        weekEnd.setDate(weekEnd.getDate() - i * 7);\n\n        const hoursWorked =\n          sessions.length > 0\n            ? sessions\n                .filter(s => {\n                  const sessionDate = new Date(s.startTime);\n                  return sessionDate >= weekStart && sessionDate <= weekEnd;\n                })\n                .reduce((sum, s) => sum + s.duration / 3600, 0)\n            : 0;\n\n        data.push({\n          name: `Week ${4 - i}`,\n          hours: Number(hoursWorked.toFixed(2)),\n        });\n      }\n    } else if (timePeriod === 'year') {\n      // Last 12 months\n      const monthNames = [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec',\n      ];\n      for (let i = 11; i >= 0; i--) {\n        const month = new Date(now);\n        month.setMonth(month.getMonth() - i);\n\n        const hoursWorked =\n          sessions.length > 0\n            ? sessions\n                .filter(s => {\n                  const sessionDate = new Date(s.startTime);\n                  return (\n                    sessionDate.getMonth() === month.getMonth() &&\n                    sessionDate.getFullYear() === month.getFullYear()\n                  );\n                })\n                .reduce((sum, s) => sum + s.duration / 3600, 0)\n            : 0;\n\n        data.push({\n          name: monthNames[month.getMonth()] || '',\n          hours: Number(hoursWorked.toFixed(2)),\n        });\n      }\n    }\n\n    setChartData(data);\n  };\n\n  // Calculate stats\n  const totalHours = sessions.reduce((sum, s) => sum + s.duration / 3600, 0);\n  const totalSessions = sessions.length;\n\n  // Calculate streak\n  const sessionsByDate = new Map<string, boolean>();\n  sessions.forEach(s => {\n    const date = new Date(s.startTime);\n    date.setHours(0, 0, 0, 0);\n    const dateStr = date.toISOString().split('T')[0] ?? '';\n    if (dateStr) {\n      sessionsByDate.set(dateStr, true);\n    }\n  });\n\n  let currentStreak = 0;\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  const checkDate = new Date(today);\n\n  while (true) {\n    const dateStr: string = checkDate.toISOString().split('T')[0] ?? '';\n    if (!sessionsByDate.has(dateStr)) {\n      break;\n    }\n    currentStreak++;\n    checkDate.setDate(checkDate.getDate() - 1);\n  }\n\n  const avgPerDay =\n    totalHours > 0 && sessions.length > 0\n      ? (totalHours / 30).toFixed(1)\n      : '0.0';\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-4xl mx-auto p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            {[1, 2, 3, 4].map(i => (\n              <div key={i} className=\"h-24 bg-gray-200 rounded-xl\"></div>\n            ))}\n          </div>\n          <div className=\"h-64 bg-gray-200 rounded-xl\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-2 gap-4 mb-6\">\n        <div className=\"bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl p-4\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <div className=\"w-7 h-7 rounded-full bg-[#007AFF] flex items-center justify-center\">\n              <Clock className=\"w-4 h-4 text-white\" />\n            </div>\n            <span className=\"text-sm text-gray-600\">Total Time</span>\n          </div>\n          <div className=\"text-2xl font-bold text-gray-900\">\n            {totalHours.toFixed(1)}h\n          </div>\n        </div>\n\n        <div className=\"bg-gradient-to-br from-orange-50 to-orange-100 rounded-xl p-4\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <div className=\"w-7 h-7 rounded-full bg-[#FC4C02] flex items-center justify-center\">\n              <Target className=\"w-4 h-4 text-white\" />\n            </div>\n            <span className=\"text-sm text-gray-600\">Streak</span>\n          </div>\n          <div className=\"text-2xl font-bold text-gray-900\">\n            {currentStreak} days\n          </div>\n        </div>\n\n        <div className=\"bg-gradient-to-br from-green-50 to-green-100 rounded-xl p-4\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <div className=\"w-7 h-7 rounded-full bg-green-600 flex items-center justify-center\">\n              <Calendar className=\"w-4 h-4 text-white\" />\n            </div>\n            <span className=\"text-sm text-gray-600\">Sessions</span>\n          </div>\n          <div className=\"text-2xl font-bold text-gray-900\">\n            {totalSessions}\n          </div>\n        </div>\n\n        <div className=\"bg-gradient-to-br from-purple-50 to-purple-100 rounded-xl p-4\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <div className=\"w-7 h-7 rounded-full bg-purple-600 flex items-center justify-center\">\n              <Heart className=\"w-4 h-4 text-white\" />\n            </div>\n            <span className=\"text-sm text-gray-600\">Avg/Day</span>\n          </div>\n          <div className=\"text-2xl font-bold text-gray-900\">{avgPerDay}h</div>\n        </div>\n      </div>\n\n      {/* Chart with Time Period Dropdown */}\n      <div className=\"bg-white rounded-xl border border-gray-200 p-4 mb-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-bold\">\n            {timePeriod === 'day' && 'Today'}\n            {timePeriod === 'week' && 'This Week'}\n            {timePeriod === 'month' && 'This Month'}\n            {timePeriod === 'year' && 'This Year'}\n          </h3>\n          <div className=\"relative\">\n            <button\n              onClick={() => setShowTimePeriodDropdown(!showTimePeriodDropdown)}\n              className=\"flex items-center gap-1 px-3 py-1.5 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors\"\n            >\n              {timePeriod.charAt(0).toUpperCase() + timePeriod.slice(1)}\n              <ChevronDown className=\"w-4 h-4\" />\n            </button>\n            {showTimePeriodDropdown && (\n              <div className=\"absolute right-0 mt-2 w-32 bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-50\">\n                {(['day', 'week', 'month', 'year'] as TimePeriod[]).map(\n                  period => (\n                    <button\n                      key={period}\n                      onClick={() => {\n                        setTimePeriod(period);\n                        setShowTimePeriodDropdown(false);\n                      }}\n                      className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-100 ${\n                        timePeriod === period\n                          ? 'text-[#007AFF] font-medium'\n                          : 'text-gray-700'\n                      }`}\n                    >\n                      {period.charAt(0).toUpperCase() + period.slice(1)}\n                    </button>\n                  )\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"h-48\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart\n              data={chartData}\n              margin={{ top: 10, right: 15, left: 0, bottom: 5 }}\n            >\n              <XAxis\n                dataKey=\"name\"\n                tick={{ fontSize: 12, fill: '#6b7280' }}\n                axisLine={false}\n                tickLine={false}\n              />\n              <YAxis\n                tick={{ fontSize: 12, fill: '#6b7280' }}\n                axisLine={false}\n                tickLine={false}\n                width={30}\n              />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: '#fff',\n                  border: '1px solid #e5e7eb',\n                  borderRadius: '8px',\n                  fontSize: '12px',\n                }}\n                formatter={(value: number) => [`${value}h`, 'Hours']}\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"hours\"\n                stroke=\"#007AFF\"\n                strokeWidth={2}\n                isAnimationActive={false}\n                dot={(props: any) => {\n                  const { cx, cy, index, payload } = props;\n                  const isLast = index === chartData.length - 1;\n                  return (\n                    <circle\n                      key={`dot-${index}-${payload.name}`}\n                      cx={cx}\n                      cy={cy}\n                      r={isLast ? 6 : 4}\n                      fill={isLast ? '#007AFF' : '#fff'}\n                      stroke=\"#007AFF\"\n                      strokeWidth={2}\n                    />\n                  );\n                }}\n                activeDot={{ r: 6 }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n\n      {/* Activity Breakdown */}\n      <div className=\"bg-white rounded-xl border border-gray-200 p-4\">\n        <h3 className=\"text-lg font-bold mb-4\">Activity Breakdown</h3>\n        <div className=\"text-center py-8 text-gray-400\">\n          No activity data yet\n        </div>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ProtectedRoute.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'useState' is defined but never used.",
        "line": 3,
        "column": 21,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useRouter, usePathname } from 'next/navigation';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n}\n\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {\n  const { isAuthenticated, isLoading } = useAuth();\n  const router = useRouter();\n  const pathname = usePathname();\n\n  useEffect(() => {\n    // Only redirect if auth is fully loaded and user is not authenticated\n    if (!isLoading && !isAuthenticated) {\n      // Store the intended destination for post-login redirect\n      const redirectTo = pathname !== '/' ? pathname : '/';\n      router.push(`/?redirect=${encodeURIComponent(redirectTo)}`);\n    }\n  }, [isAuthenticated, isLoading, pathname, router]);\n\n  // Show loading spinner while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-[#007AFF]\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // If not authenticated, show loading while redirect happens\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-[#007AFF]\"></div>\n          <p className=\"text-gray-600\">Redirecting...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // If authenticated, render the protected content\n  return <>{children}</>;\n};\n\nexport default ProtectedRoute;\nexport { ProtectedRoute };\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/RightSidebar.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadSuggestedContent'. Either include it or remove the dependency array.",
        "line": 44,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 44,
        "endColumn": 12,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadSuggestedContent, user]",
            "fix": {
              "range": [1377, 1383],
              "text": "[loadSuggestedContent, user]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'index' is defined but never used.",
        "line": 184,
        "column": 51,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 184,
        "endColumn": 56
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 313,
        "column": 34,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 313,
        "endColumn": 39
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { useAuth } from '@/hooks/useAuth';\nimport { firebaseUserApi, firebaseApi } from '@/lib/api';\nimport { cachedQuery } from '@/lib/cache';\nimport GroupAvatar from '@/components/GroupAvatar';\nimport SuggestedPeopleModal from '@/components/SuggestedPeopleModal';\nimport SuggestedGroupsModal from '@/components/SuggestedGroupsModal';\n\ninterface SuggestedUser {\n  id: string;\n  name: string;\n  username: string;\n  location?: string;\n  followersCount: number;\n  profilePicture?: string;\n}\n\ninterface SuggestedGroup {\n  id: string;\n  name: string;\n  memberCount: number;\n  description: string;\n  imageUrl?: string;\n}\n\nfunction RightSidebar() {\n  const { user } = useAuth();\n  const [suggestedUsers, setSuggestedUsers] = useState<SuggestedUser[]>([]);\n  const [suggestedGroups, setSuggestedGroups] = useState<SuggestedGroup[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [followingUsers, setFollowingUsers] = useState<Set<string>>(new Set());\n  const [joiningGroups, setJoiningGroups] = useState<Set<string>>(new Set());\n  const [showPeopleModal, setShowPeopleModal] = useState(false);\n  const [showGroupsModal, setShowGroupsModal] = useState(false);\n\n  useEffect(() => {\n    if (user) {\n      loadSuggestedContent();\n    }\n  }, [user]);\n\n  const loadSuggestedContent = async () => {\n    try {\n      setIsLoading(true);\n\n      if (!user) return;\n\n      // Load the list of users we're already following\n      try {\n        const following = await firebaseUserApi.getFollowing(user.id);\n        const followingIds = new Set(following.map(u => u.id));\n        setFollowingUsers(followingIds);\n      } catch (error) {\n        console.error('Failed to load following list:', error);\n      }\n\n      // Load suggested users (top 5) with 1 hour cache\n      try {\n        // Use the getSuggestedUsers API which filters by profileVisibility and already-followed users\n        const suggestions = await cachedQuery(\n          `suggested_users_${user.id}`,\n          () => firebaseUserApi.getSuggestedUsers(5),\n          {\n            memoryTtl: 60 * 60 * 1000, // 1 hour in memory\n            localTtl: 60 * 60 * 1000, // 1 hour in localStorage\n            sessionCache: true,\n            dedupe: true,\n          }\n        );\n        setSuggestedUsers(suggestions);\n      } catch (error) {\n        console.error('Failed to load suggested users:', error);\n      }\n\n      // Load suggested groups (top 5) with 1 hour cache\n      try {\n        // Get user's current groups to exclude them from suggestions\n        const userGroups = await firebaseApi.group.getUserGroups(user.id);\n        const userGroupIds = new Set(userGroups.map(g => g.id));\n\n        // Get all groups with caching\n        const allGroups = await cachedQuery(\n          `suggested_groups_all`,\n          () => firebaseApi.group.searchGroups(''),\n          {\n            memoryTtl: 60 * 60 * 1000, // 1 hour in memory\n            localTtl: 60 * 60 * 1000, // 1 hour in localStorage\n            sessionCache: true,\n            dedupe: true,\n          }\n        );\n        const filteredGroups = allGroups.filter(\n          group => !userGroupIds.has(group.id)\n        );\n        setSuggestedGroups(filteredGroups.slice(0, 5));\n      } catch (error) {\n        console.error('Failed to load suggested groups:', error);\n      }\n    } catch (error) {\n      console.error('Failed to load suggested content:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleFollowToggle = async (userId: string) => {\n    if (!user) return;\n\n    const isFollowing = followingUsers.has(userId);\n\n    // Optimistic update\n    setFollowingUsers(prev => {\n      const next = new Set(prev);\n      if (isFollowing) {\n        next.delete(userId);\n      } else {\n        next.add(userId);\n      }\n      return next;\n    });\n\n    try {\n      if (isFollowing) {\n        await firebaseApi.user.unfollowUser(userId);\n      } else {\n        await firebaseApi.user.followUser(userId);\n        // Remove from suggestions after following\n        setSuggestedUsers(prev => prev.filter(u => u.id !== userId));\n      }\n    } catch (error) {\n      console.error('Failed to toggle follow:', error);\n      // Revert on error\n      setFollowingUsers(prev => {\n        const next = new Set(prev);\n        if (isFollowing) {\n          next.add(userId);\n        } else {\n          next.delete(userId);\n        }\n        return next;\n      });\n    }\n  };\n\n  return (\n    <aside\n      className=\"hidden xl:block w-[320px] flex-shrink-0\"\n      aria-label=\"Suggestions and groups sidebar\"\n    >\n      <div className=\"space-y-4 h-full overflow-y-auto scrollbar-hide pt-20 pb-6\">\n        {/* Suggested Friends - Redesigned */}\n        <div className=\"px-2\">\n          <div className=\"flex items-center justify-between mb-3 px-2\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">\n              Suggested for you\n            </h3>\n          </div>\n\n          {isLoading ? (\n            <div className=\"space-y-2\">\n              {[1, 2, 3, 4, 5].map(i => (\n                <div\n                  key={i}\n                  className=\"flex items-center gap-3 animate-pulse p-3 bg-white rounded-lg\"\n                >\n                  <div className=\"w-12 h-12 bg-gray-200 rounded-full\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"h-4 bg-gray-200 rounded w-24 mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-16\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : suggestedUsers.length === 0 ? (\n            <div className=\"p-6 text-center bg-white rounded-lg\">\n              <p className=\"text-sm text-gray-500\">No suggestions available</p>\n            </div>\n          ) : (\n            <div className=\"space-y-1\">\n              {suggestedUsers.map((suggestedUser, index) => (\n                <Link\n                  key={suggestedUser.id}\n                  href={`/profile/${suggestedUser.username}`}\n                  className=\"block px-3 py-3 bg-white hover:bg-gray-50 rounded-lg transition-colors duration-200\"\n                >\n                  <div className=\"flex items-center gap-3\">\n                    {suggestedUser.profilePicture ? (\n                      <Image\n                        src={suggestedUser.profilePicture}\n                        alt={`${suggestedUser.name}'s profile picture`}\n                        width={48}\n                        height={48}\n                        className=\"w-12 h-12 rounded-full object-cover flex-shrink-0\"\n                        loading=\"lazy\"\n                        sizes=\"48px\"\n                      />\n                    ) : (\n                      <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                        <span className=\"text-gray-600 font-semibold text-sm\">\n                          {suggestedUser.name\n                            .split(' ')\n                            .map(n => n[0])\n                            .join('')\n                            .slice(0, 2)\n                            .toUpperCase()}\n                        </span>\n                      </div>\n                    )}\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-semibold text-sm text-gray-900 hover:text-[#007AFF] truncate mb-0.5\">\n                        {suggestedUser.name}\n                      </p>\n                      <p className=\"text-xs text-gray-500 truncate\">\n                        @{suggestedUser.username}\n                      </p>\n                    </div>\n                    <button\n                      onClick={e => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        handleFollowToggle(suggestedUser.id);\n                      }}\n                      className={`text-sm font-semibold transition-colors duration-200 whitespace-nowrap flex-shrink-0 ${\n                        followingUsers.has(suggestedUser.id)\n                          ? 'text-gray-600 hover:text-gray-900'\n                          : 'text-[#007AFF] hover:text-[#0051D5]'\n                      }`}\n                      aria-label={\n                        followingUsers.has(suggestedUser.id)\n                          ? `Unfollow ${suggestedUser.name}`\n                          : `Follow ${suggestedUser.name}`\n                      }\n                      aria-pressed={followingUsers.has(suggestedUser.id)}\n                    >\n                      {followingUsers.has(suggestedUser.id)\n                        ? 'Following'\n                        : 'Follow'}\n                    </button>\n                  </div>\n                </Link>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Clubs - Redesigned */}\n        <div className=\"px-2\">\n          <div className=\"flex items-center justify-between mb-3 px-2\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">\n              Suggested Groups\n            </h3>\n          </div>\n\n          {isLoading ? (\n            <div className=\"space-y-2\">\n              {[1, 2, 3, 4, 5].map(i => (\n                <div\n                  key={i}\n                  className=\"flex items-center gap-3 animate-pulse p-3 bg-white rounded-lg\"\n                >\n                  <div className=\"w-12 h-12 bg-gray-200 rounded-lg\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"h-4 bg-gray-200 rounded w-24 mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-16\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : suggestedGroups.length === 0 ? (\n            <div className=\"p-6 text-center bg-white rounded-lg\">\n              <p className=\"text-sm text-gray-500\">No groups available</p>\n            </div>\n          ) : (\n            <div className=\"space-y-1\">\n              {suggestedGroups.map(group => (\n                <Link\n                  key={group.id}\n                  href={`/groups/${group.id}`}\n                  className=\"block px-3 py-3 bg-white hover:bg-gray-50 rounded-lg transition-colors duration-200\"\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <GroupAvatar\n                      imageUrl={group.imageUrl}\n                      name={group.name}\n                      size=\"md\"\n                    />\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-semibold text-sm text-gray-900 hover:text-[#007AFF] truncate mb-0.5\">\n                        {group.name}\n                      </p>\n                      <div className=\"text-xs text-gray-500\">\n                        {group.memberCount || 0}{' '}\n                        {group.memberCount === 1 ? 'member' : 'members'}\n                      </div>\n                    </div>\n                    <button\n                      onClick={async e => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        if (!user || joiningGroups.has(group.id)) return;\n\n                        setJoiningGroups(prev => new Set(prev).add(group.id));\n                        try {\n                          await firebaseApi.group.joinGroup(group.id, user.id);\n                          // Remove from suggestions after joining\n                          setSuggestedGroups(prev =>\n                            prev.filter(g => g.id !== group.id)\n                          );\n                        } catch (error) {\n                          // Error joining group - silently fail for suggestions\n                        } finally {\n                          setJoiningGroups(prev => {\n                            const next = new Set(prev);\n                            next.delete(group.id);\n                            return next;\n                          });\n                        }\n                      }}\n                      className=\"text-sm font-semibold text-[#007AFF] hover:text-[#0051D5] transition-colors duration-200 whitespace-nowrap flex-shrink-0\"\n                      disabled={joiningGroups.has(group.id)}\n                    >\n                      {joiningGroups.has(group.id) ? 'Joining...' : 'Join'}\n                    </button>\n                  </div>\n                </Link>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Modals */}\n      <SuggestedPeopleModal\n        isOpen={showPeopleModal}\n        onClose={() => setShowPeopleModal(false)}\n      />\n      <SuggestedGroupsModal\n        isOpen={showGroupsModal}\n        onClose={() => setShowGroupsModal(false)}\n      />\n    </aside>\n  );\n}\n\nexport default RightSidebar;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SaveSession.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'showPostModal' is assigned a value but never used.",
        "line": 46,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 46,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setShowPostModal' is assigned a value but never used.",
        "line": 46,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 46,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'getAuthToken' is assigned a value but never used.",
        "line": 50,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 93,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 93,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3254, 3257], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3254, 3257], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'handlePostSuccess' is assigned a value but never used.",
        "line": 151,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 151,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'handlePostCancel' is assigned a value but never used.",
        "line": 152,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 152,
        "endColumn": 25
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { SessionFormData, Project } from '@/types';\nimport { firebaseApi } from '@/lib/api';\nimport { useAuth } from '@/hooks/useAuth';\nimport { ERROR_MESSAGES } from '@/config/errorMessages';\nimport { debug } from '@/lib/debug';\n\ninterface SaveSessionProps {\n  onSave: (data: SessionFormData) => Promise<void>;\n  onCancel: () => void;\n  initialData: Partial<SessionFormData>;\n  isLoading?: boolean;\n}\n\nconst TAGS = ['Study', 'Work', 'Side Project', 'Reading', 'Learning', 'Exercise', 'Creative', 'Other'];\n\nconst PRIVACY_OPTIONS = [\n  { value: 'everyone', label: 'Everyone', description: 'Visible to all users' },\n  { value: 'followers', label: 'Followers', description: 'Visible to your followers' },\n  { value: 'private', label: 'Only You', description: 'Private to you only' },\n];\n\nexport const SaveSession: React.FC<SaveSessionProps> = ({\n  onSave,\n  onCancel,\n  initialData,\n  isLoading = false\n}) => {\n  const { user } = useAuth();\n  const [formData, setFormData] = useState<SessionFormData>({\n    activityId: (initialData.activityId || initialData.projectId || '') as string,\n    projectId: initialData.projectId || '',\n    title: initialData.title || '',\n    description: initialData.description || '',\n    duration: initialData.duration || 0,\n    startTime: initialData.startTime || new Date(),\n    tags: initialData.tags || [],\n    visibility: initialData.visibility || 'everyone',\n    privateNotes: initialData.privateNotes || '',\n  });\n\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [showPostModal, setShowPostModal] = useState(false);\n\n  // TODO: Implement Firebase API calls\n  // Helper function to get auth token\n  const getAuthToken = (): string => {\n    // For now, return empty string since we're not using Firebase sessions yet\n    return '';\n  };\n\n  // Load projects on mount\n  useEffect(() => {\n    const loadProjects = async () => {\n      if (!user) return;\n      \n      try {\n        const projectList = await firebaseApi.project.getProjects();\n        setProjects(projectList);\n        \n        // Set initial project if provided\n        if (initialData.projectId && !formData.projectId) {\n          setFormData(prev => ({ ...prev, projectId: initialData.projectId! }));\n        }\n      } catch (error) {\n        debug.error('SaveSession - Failed to load projects:', error);\n      }\n    };\n\n    loadProjects();\n  }, [user, initialData.projectId, formData.projectId]);\n\n\n  // Generate smart title based on time of day and project\n  useEffect(() => {\n    if (!formData.title && formData.projectId) {\n      const project = projects.find(p => p.id === formData.projectId);\n      const hour = new Date().getHours();\n      \n      let timeOfDay = '';\n      if (hour < 12) timeOfDay = 'Morning';\n      else if (hour < 17) timeOfDay = 'Afternoon';\n      else timeOfDay = 'Evening';\n      \n      const smartTitle = project ? `${timeOfDay} ${project.name} Session` : `${timeOfDay} Work Session`;\n      setFormData(prev => ({ ...prev, title: smartTitle }));\n    }\n  }, [formData.projectId, formData.title, projects]);\n\n  const handleInputChange = (field: keyof SessionFormData, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    \n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const handleTagToggle = (tag: string) => {\n    const currentTags = formData.tags || [];\n    const isSelected = currentTags.includes(tag);\n    const newTags = isSelected\n      ? currentTags.filter(t => t !== tag)\n      : [...currentTags, tag];\n\n    setFormData(prev => ({ ...prev, tags: newTags }));\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.projectId) {\n      newErrors.projectId = 'Please select a project';\n    }\n\n    if (!formData.title.trim()) {\n      newErrors.title = 'Please enter a session title';\n    }\n\n    if (formData.duration <= 0) {\n      newErrors.duration = 'Duration must be greater than 0';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    try {\n      // Save the session\n      await onSave(formData);\n      \n      // Note: Post creation is now handled by the onSave callback\n      // The parent component (SessionTimer/ManualEntry) will handle creating the post\n      // using firebaseApi.session.createSessionWithPost if visibility !== 'private'\n    } catch (error) {\n      debug.error('SaveSession - Failed to save session:', error);\n      setErrors({ submit: ERROR_MESSAGES.SESSION_SAVE_FAILED });\n    }\n  };\n\n  const handlePostSuccess = async () => {};\n  const handlePostCancel = async () => {};\n\n  const formatDuration = (seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes}m ${secs}s`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${secs}s`;\n    } else {\n      return `${secs}s`;\n    }\n  };\n\n  return (\n    <div className=\"w-full max-w-3xl mx-auto\">\n      <div className=\"bg-white rounded-lg shadow p-6\">\n          <h2 className=\"text-2xl font-bold mb-6\">Save Session</h2>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Project Selection */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Project *\n              </label>\n              <select\n                value={formData.projectId}\n                onChange={(e) => handleInputChange('projectId', e.target.value)}\n                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                  errors.projectId ? 'border-red-500' : 'border-gray-300'\n                }`}\n                disabled={isLoading}\n              >\n                <option value=\"\">Select a project...</option>\n                {projects.map((project) => (\n                  <option key={project.id} value={project.id}>\n                    {project.name}\n                  </option>\n                ))}\n              </select>\n              {errors.projectId && (\n                <p className=\"text-red-500 text-sm mt-1\">{errors.projectId}</p>\n              )}\n            </div>\n\n            {/* Session Title */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Session Title *\n              </label>\n              <input\n                type=\"text\"\n                value={formData.title}\n                onChange={(e) => handleInputChange('title', e.target.value)}\n                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                  errors.title ? 'border-red-500' : 'border-gray-300'\n                }`}\n                placeholder=\"What did you work on?\"\n                disabled={isLoading}\n              />\n              {errors.title && (\n                <p className=\"text-red-500 text-sm mt-1\">{errors.title}</p>\n              )}\n            </div>\n\n            {/* Duration Display */}\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"font-medium text-gray-900\">Session Duration</h3>\n                  <p className=\"text-2xl font-bold text-blue-600\">{formatDuration(formData.duration)}</p>\n                </div>\n                <div className=\"text-sm text-gray-500\">\n                  Started: {formData.startTime.toLocaleTimeString()}\n                </div>\n              </div>\n            </div>\n\n            {/* Description */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Description\n              </label>\n              <textarea\n                value={formData.description || ''}\n                onChange={(e) => handleInputChange('description', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                rows={3}\n                placeholder=\"What did you accomplish?\"\n                disabled={isLoading}\n              />\n            </div>\n\n            {/* Tags */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Tags\n              </label>\n              <div className=\"flex flex-wrap gap-2\">\n                {TAGS.map((tag) => (\n                  <button\n                    key={tag}\n                    type=\"button\"\n                    onClick={() => handleTagToggle(tag)}\n                    className={`px-3 py-1 rounded-full text-sm transition-colors ${\n                      (formData.tags || []).includes(tag)\n                        ? 'bg-blue-600 text-white'\n                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n                    }`}\n                    disabled={isLoading}\n                  >\n                    {tag}\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Privacy Settings */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Privacy\n              </label>\n              <select\n                value={formData.visibility}\n                onChange={(e) => handleInputChange('visibility', e.target.value as 'everyone' | 'followers' | 'private')}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                disabled={isLoading}\n              >\n                {PRIVACY_OPTIONS.map((option) => (\n                  <option key={option.value} value={option.value}>\n                    {option.label} - {option.description}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            {/* Removed howFelt per requirements */}\n\n            {/* Private Notes */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Private Notes\n              </label>\n              <textarea\n                value={formData.privateNotes || ''}\n                onChange={(e) => handleInputChange('privateNotes', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                rows={2}\n                placeholder=\"Any private notes about this session...\"\n                disabled={isLoading}\n              />\n            </div>\n\n            {/* Error Messages */}\n            {errors.submit && (\n              <div className=\"text-red-500 text-sm\">{errors.submit}</div>\n            )}\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end space-x-3 pt-4 border-t\">\n              <button\n                type=\"button\"\n                onClick={onCancel}\n                className=\"px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors\"\n                disabled={isLoading}\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                disabled={isLoading}\n                className=\"px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-300 transition-colors\"\n              >\n                {isLoading ? 'Saving...' : 'Save Session'}\n              </button>\n            </div>\n          </form>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SearchUsers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.",
        "line": 36,
        "column": 27,
        "nodeType": "Identifier",
        "endLine": 36,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 273,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 273,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8486, 8489], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8486, 8489], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 273,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 273,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8496, 8499], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8496, 8499], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'debouncedSearch'. Either include it or remove the dependency array.",
        "line": 74,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 74,
        "endColumn": 13,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [debouncedSearch, query]",
            "fix": { "range": [2245, 2252], "text": "[debouncedSearch, query]" }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { UserSearchResult } from '@/types';\nimport { firebaseUserApi } from '@/lib/api';\nimport { UserCard, UserCardCompact } from './UserCard';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Search, Users, X, Loader2 } from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface SearchUsersProps {\n  onUserSelect?: (user: UserSearchResult) => void;\n  variant?: 'default' | 'compact' | 'modal';\n  placeholder?: string;\n  showResults?: boolean;\n  maxResults?: number;\n}\n\nexport const SearchUsers: React.FC<SearchUsersProps> = ({\n  onUserSelect,\n  variant = 'default',\n  placeholder = 'Search users...',\n  showResults = true,\n  maxResults = 20,\n}) => {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState<UserSearchResult[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasSearched, setHasSearched] = useState(false);\n  const [totalCount, setTotalCount] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasMore, setHasMore] = useState(false);\n\n  // Debounced search function\n  const debouncedSearch = useCallback(\n    debounce(async (searchQuery: string, page: number = 1) => {\n      if (!searchQuery.trim()) {\n        setResults([]);\n        setHasSearched(false);\n        return;\n      }\n\n      try {\n        setIsLoading(true);\n        const response = await firebaseUserApi.searchUsers(searchQuery, page, maxResults);\n        \n        if (page === 1) {\n          setResults(response.users);\n        } else {\n          setResults(prev => [...prev, ...response.users]);\n        }\n        \n        setTotalCount(response.totalCount);\n        setHasMore(response.hasMore);\n        setHasSearched(true);\n      } catch (error) {\n        console.error('Search error:', error);\n        toast.error('Failed to search users');\n        setResults([]);\n        setHasSearched(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }, 300),\n    [maxResults]\n  );\n\n  // Search effect\n  useEffect(() => {\n    setCurrentPage(1);\n    debouncedSearch(query, 1);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [query]); // Only re-run when query changes, not when debouncedSearch changes\n\n  const handleLoadMore = () => {\n    if (hasMore && !isLoading) {\n      const nextPage = currentPage + 1;\n      setCurrentPage(nextPage);\n      debouncedSearch(query, nextPage);\n    }\n  };\n\n  const handleClear = () => {\n    setQuery('');\n    setResults([]);\n    setHasSearched(false);\n    setCurrentPage(1);\n  };\n\n  const handleUserSelect = (user: UserSearchResult) => {\n    onUserSelect?.(user);\n  };\n\n  const handleFollowChange = (userId: string, isFollowing: boolean) => {\n    setResults(prev => \n      prev.map(user => \n        user.id === userId \n          ? { ...user, isFollowing, followersCount: isFollowing ? user.followersCount + 1 : Math.max(0, user.followersCount - 1) }\n          : user\n      )\n    );\n  };\n\n  const UserCardComponent = variant === 'compact' ? UserCardCompact : UserCard;\n\n  return (\n    <div className=\"w-full\">\n      {/* Search Input */}\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n        <Input\n          type=\"text\"\n          placeholder={placeholder}\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter') {\n              e.preventDefault();\n              setHasSearched(true);\n              debouncedSearch(query, 1);\n            }\n          }}\n          className=\"pl-10 pr-10\"\n        />\n        {query && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleClear}\n            className=\"absolute right-1 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        )}\n      </div>\n\n      {/* Loading Indicator */}\n      {isLoading && (\n        <div className=\"flex items-center justify-center py-4\">\n          <Loader2 className=\"w-5 h-5 animate-spin text-muted-foreground\" />\n          <span className=\"ml-2 text-sm text-muted-foreground\">Searching...</span>\n        </div>\n      )}\n\n      {/* Results */}\n      {showResults && hasSearched && (\n        <div className=\"mt-4\">\n          {results.length > 0 ? (\n            <div className=\"space-y-4\">\n              {/* Results Header */}\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <Users className=\"w-4 h-4\" />\n                  <span>\n                    {totalCount.toLocaleString()} result{totalCount !== 1 ? 's' : ''}\n                    {query && ` for \"${query}\"`}\n                  </span>\n                </div>\n              </div>\n\n              {/* User Cards */}\n              <div className=\"space-y-1\">\n                {results.map((user) => (\n                  <div key={user.id} onClick={() => handleUserSelect(user)}>\n                    <UserCardComponent\n                      user={user}\n                      variant=\"search\"\n                      onFollowChange={handleFollowChange}\n                    />\n                  </div>\n                ))}\n              </div>\n\n              {/* Load More Button */}\n              {hasMore && (\n                <div className=\"flex justify-center pt-4\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={handleLoadMore}\n                    disabled={isLoading}\n                    className=\"flex items-center gap-2\"\n                  >\n                    {isLoading ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 animate-spin\" />\n                        Loading...\n                      </>\n                    ) : (\n                      'Load More'\n                    )}\n                  </Button>\n                </div>\n              )}\n            </div>\n          ) : query.trim() ? (\n            <div className=\"text-center py-8\">\n              <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n              <h3 className=\"font-medium text-foreground mb-1\">No users found</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Try searching with a different name or username\n              </p>\n            </div>\n          ) : null}\n        </div>\n      )}\n\n      {/* Initial State */}\n      {!hasSearched && !isLoading && (\n        <div className=\"text-center py-8\">\n          <Search className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n          <h3 className=\"font-medium text-foreground mb-1\">Search for users</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Find people to follow and connect with\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Modal version for overlays\ninterface SearchUsersModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onUserSelect?: (user: UserSearchResult) => void;\n  title?: string;\n}\n\nexport const SearchUsersModal: React.FC<SearchUsersModalProps> = ({\n  isOpen,\n  onClose,\n  onUserSelect,\n  title = 'Search Users',\n}) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-background rounded-lg shadow-xl max-w-2xl w-full max-h-[80vh] flex flex-col\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-border\">\n          <h2 className=\"text-xl font-semibold text-foreground\">{title}</h2>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n            className=\"h-8 w-8 p-0\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-hidden\">\n          <div className=\"p-6 h-full overflow-y-auto\">\n            <SearchUsers\n              onUserSelect={(user) => {\n                onUserSelect?.(user);\n                onClose();\n              }}\n              variant=\"compact\"\n              showResults={true}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Debounce utility function\nfunction debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SessionCard.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 71,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 71,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 95,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 95,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Image from 'next/image';\nimport { SessionWithDetails } from '@/types';\nimport SessionInteractions from './SessionInteractions';\nimport TopComments from './TopComments';\nimport { ImageGallery } from './ImageGallery';\nimport LikesModal from './LikesModal';\nimport CommentsModal from './CommentsModal';\nimport { PrefetchLink } from './PrefetchLink';\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '@/hooks/useAuth';\nimport { firebaseApi } from '@/lib/api';\nimport { MoreVertical } from 'lucide-react';\nimport Link from 'next/link';\nimport { cn, isEmpty } from '@/lib/utils';\nimport { formatSessionDate, formatDuration } from '@/lib/formatters';\nimport { getUserInitials } from '@/lib/userUtils';\n\ninterface SessionCardProps {\n  session: SessionWithDetails;\n  onSupport: (sessionId: string) => Promise<void>;\n  onRemoveSupport: (sessionId: string) => Promise<void>;\n  onShare: (sessionId: string) => Promise<void>;\n  onDelete?: (sessionId: string) => Promise<void>;\n  onEdit?: (sessionId: string) => void;\n  className?: string;\n  showComments?: boolean;\n  showGroupInfo?: boolean;\n  isAboveFold?: boolean; // Add prop to indicate if card is above the fold\n  priority?: boolean; // Add prop for image priority loading\n}\n\nexport const SessionCard: React.FC<SessionCardProps> = ({\n  session,\n  onSupport,\n  onRemoveSupport,\n  onShare,\n  onDelete,\n  onEdit,\n  className = '',\n  showGroupInfo = false,\n  isAboveFold = false,\n  priority = false,\n}) => {\n  const router = useRouter();\n  const { user } = useAuth();\n  const [showMenu, setShowMenu] = useState(false);\n  const [isFollowing, setIsFollowing] = useState(false);\n  const [isFollowLoading, setIsFollowLoading] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [localCommentCount, setLocalCommentCount] = useState(\n    session.commentCount || 0\n  );\n  const [showLikesModal, setShowLikesModal] = useState(false);\n  const [showCommentsModal, setShowCommentsModal] = useState(false);\n  const menuRef = useRef<HTMLDivElement>(null);\n  const commentSectionRef = useRef<HTMLDivElement>(null);\n\n  // Check if user is following the session author\n  useEffect(() => {\n    const checkFollowStatus = async () => {\n      if (user && session.userId !== user.id && showGroupInfo) {\n        try {\n          const isUserFollowing = await firebaseApi.user.isFollowing(\n            user.id,\n            session.userId\n          );\n          setIsFollowing(isUserFollowing);\n        } catch (error) {\n          // Error checking follow status - silently fail\n        }\n      }\n    };\n    checkFollowStatus();\n  }, [user, session.userId, showGroupInfo]);\n\n  // Handle follow/unfollow\n  const handleFollowToggle = async (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (!user || isFollowLoading) return;\n\n    setIsFollowLoading(true);\n    try {\n      if (isFollowing) {\n        await firebaseApi.user.unfollowUser(session.userId);\n        setIsFollowing(false);\n      } else {\n        await firebaseApi.user.followUser(session.userId);\n        setIsFollowing(true);\n      }\n    } catch (error) {\n      // Error toggling follow - silently fail\n    } finally {\n      setIsFollowLoading(false);\n    }\n  };\n\n  // Close menu when clicking outside or pressing escape\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        setShowMenu(false);\n      }\n    };\n\n    const handleEscapeKey = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        setShowMenu(false);\n      }\n    };\n\n    if (showMenu) {\n      document.addEventListener('mousedown', handleClickOutside);\n      document.addEventListener('keydown', handleEscapeKey);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n      document.removeEventListener('keydown', handleEscapeKey);\n    };\n  }, [showMenu]);\n\n  // Guard: Return null if user data is missing (during architecture migration)\n  if (!session.user) {\n    return null;\n  }\n\n  return (\n    <article\n      className={cn(\n        'bg-white md:rounded-lg md:border md:border-gray-200 md:shadow-sm mb-0 md:mb-4 border-b-[6px] border-gray-200 md:border-b-0 hover:shadow-md transition-shadow',\n        className\n      )}\n    >\n      {/* Session Header */}\n      <div className=\"flex items-center justify-between px-4 pt-4 pb-3\">\n        <PrefetchLink\n          href={`/profile/${session.user.username}`}\n          prefetchProfile={session.user.username}\n          prefetchUserId={session.user.id}\n          className=\"flex items-center gap-2 md:gap-3 min-w-0 flex-1\"\n        >\n          {/* User Avatar */}\n          {session.user.profilePicture ? (\n            <div className=\"w-10 h-10 min-w-[2.5rem] aspect-square rounded-full overflow-hidden flex-shrink-0 ring-2 ring-white\">\n              <Image\n                src={session.user.profilePicture}\n                alt={session.user.name}\n                width={40}\n                height={40}\n                quality={90}\n                className=\"w-full h-full object-cover\"\n                priority={isAboveFold || priority}\n                loading={isAboveFold || priority ? 'eager' : 'lazy'}\n              />\n            </div>\n          ) : (\n            <div className=\"w-10 h-10 min-w-[2.5rem] aspect-square bg-gray-100 rounded-full flex items-center justify-center flex-shrink-0 ring-2 ring-white\">\n              <span className=\"text-gray-600 font-semibold text-sm\">\n                {getUserInitials(session.user.name)}\n              </span>\n            </div>\n          )}\n\n          {/* User Info */}\n          <div className=\"min-w-0 flex-1\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"font-semibold text-gray-900 text-sm md:text-base hover:underline truncate\">\n                {session.user.name}\n              </span>\n              {/* Follow button - Mobile only when showGroupInfo is true */}\n              {showGroupInfo && user && session.userId !== user.id && (\n                <button\n                  onClick={handleFollowToggle}\n                  disabled={isFollowLoading}\n                  className={cn(\n                    'md:hidden text-xs font-semibold transition-colors duration-200 whitespace-nowrap flex-shrink-0',\n                    isFollowing\n                      ? 'text-gray-600 hover:text-gray-900'\n                      : 'text-[#007AFF] hover:text-[#0051D5]'\n                  )}\n                >\n                  {isFollowing ? 'Following' : 'Follow'}\n                </button>\n              )}\n            </div>\n            <div className=\"text-xs text-gray-500\">\n              {formatSessionDate(session.createdAt)}\n            </div>\n          </div>\n        </PrefetchLink>\n\n        {/* Options Menu */}\n        <div className=\"relative\" ref={menuRef}>\n          <button\n            onClick={() => setShowMenu(!showMenu)}\n            className=\"text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg p-2 transition-colors duration-200 min-h-[44px] min-w-[44px]\"\n            aria-label=\"Session options\"\n            aria-expanded={showMenu}\n            aria-haspopup=\"true\"\n          >\n            <MoreVertical className=\"w-5 h-5\" aria-hidden=\"true\" />\n          </button>\n\n          {showMenu && (\n            <div\n              className=\"absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-10\"\n              role=\"menu\"\n              aria-label=\"Session options menu\"\n            >\n              {onEdit && (\n                <button\n                  onClick={() => {\n                    onEdit(session.id);\n                    setShowMenu(false);\n                  }}\n                  className=\"w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200\"\n                  role=\"menuitem\"\n                >\n                  Edit session\n                </button>\n              )}\n              {onDelete && (\n                <button\n                  onClick={() => {\n                    onDelete(session.id);\n                    setShowMenu(false);\n                  }}\n                  className=\"w-full px-4 py-2 text-left text-sm text-red-600 hover:bg-gray-50 transition-colors duration-200\"\n                  role=\"menuitem\"\n                >\n                  Delete session\n                </button>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Title and Description */}\n      <Link\n        href={`/sessions/${session.id}`}\n        className=\"px-4 pb-3 block cursor-pointer\"\n      >\n        <h3 className=\"text-lg sm:text-xl md:text-2xl font-bold text-gray-900 mb-1 leading-tight hover:text-[#007AFF] transition-colors duration-200\">\n          {session.title || 'Focus Session'}\n        </h3>\n        {session.description && (\n          <div>\n            <p\n              className={cn(\n                'text-gray-600 text-sm md:text-base whitespace-pre-wrap break-words',\n                !isExpanded &&\n                  session.description.length > 280 &&\n                  'line-clamp-3 sm:line-clamp-4'\n              )}\n            >\n              {session.description.length > 1000\n                ? session.description.slice(0, 1000)\n                : session.description}\n            </p>\n            {session.description.length > 280 && (\n              <button\n                onClick={e => {\n                  e.preventDefault();\n                  setIsExpanded(!isExpanded);\n                }}\n                className=\"text-[#007AFF] text-sm font-semibold mt-1 hover:underline transition-colors duration-200 min-h-[44px] flex items-center\"\n                aria-expanded={isExpanded}\n                aria-label={\n                  isExpanded ? 'Show less description' : 'Show more description'\n                }\n              >\n                {isExpanded ? 'Show less' : 'Show more'}\n              </button>\n            )}\n          </div>\n        )}\n      </Link>\n\n      {/* Image Gallery */}\n      {!isEmpty(session.images) && (\n        <div className=\"px-4 pb-4\">\n          <ImageGallery\n            images={session.images || []}\n            priority={isAboveFold || priority}\n          />\n        </div>\n      )}\n\n      {/* Stats - Strava style */}\n      <Link\n        href={`/sessions/${session.id}`}\n        className=\"px-4 pb-2 block cursor-pointer hover:bg-gray-50/50 transition-colors duration-200\"\n      >\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <div className=\"text-xs text-gray-500 mb-1\">Time</div>\n            <div className=\"text-base font-semibold text-gray-900\">\n              {formatDuration(session.duration)}\n            </div>\n          </div>\n          <div className=\"min-w-0\">\n            <div className=\"text-xs text-gray-500 mb-1\">Activity</div>\n            <div\n              className=\"text-base font-semibold text-gray-900 truncate\"\n              title={session.activity?.name || session.project?.name || 'N/A'}\n            >\n              {session.activity?.name || session.project?.name || 'N/A'}\n            </div>\n          </div>\n        </div>\n      </Link>\n\n      {/* Interactions */}\n      <SessionInteractions\n        sessionId={session.id}\n        supportCount={session.supportCount}\n        commentCount={localCommentCount}\n        isSupported={session.isSupported || false}\n        supportedBy={session.supportedBy}\n        onSupport={onSupport}\n        onRemoveSupport={onRemoveSupport}\n        onShare={onShare}\n        onShareImage={() => router.push(`/sessions/${session.id}/share`)}\n        isOwnPost={session.userId === user?.id}\n        onCommentClick={() => setShowCommentsModal(true)}\n        onLikesClick={() => setShowLikesModal(true)}\n        onViewAllCommentsClick={() => setShowCommentsModal(true)}\n      />\n\n      {/* Top Comments Section */}\n      <div ref={commentSectionRef}>\n        <TopComments\n          sessionId={session.id}\n          totalCommentCount={localCommentCount}\n          onCommentCountChange={setLocalCommentCount}\n        />\n      </div>\n\n      {/* Likes Modal */}\n      <LikesModal\n        isOpen={showLikesModal}\n        onClose={() => setShowLikesModal(false)}\n        userIds={session.supportedBy || []}\n        totalLikes={session.supportCount}\n      />\n\n      {/* Comments Modal */}\n      <CommentsModal\n        isOpen={showCommentsModal}\n        onClose={() => setShowCommentsModal(false)}\n        sessionId={session.id}\n        session={session}\n        totalCommentCount={localCommentCount}\n        onCommentCountChange={setLocalCommentCount}\n      />\n    </article>\n  );\n};\n\nexport default SessionCard;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SessionHistory.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 256,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 256,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8399, 8402], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8399, 8402], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 256,
        "column": 79,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 256,
        "endColumn": 82,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8428, 8431], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8428, 8431], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Session, Project, SessionFilters, SessionSort } from '@/types';\nimport { firebaseProjectApi, firebaseSessionApi } from '@/lib/api';\nimport { MoreVertical } from 'lucide-react';\nimport ConfirmDialog from './ConfirmDialog';\n\nexport const SessionHistory: React.FC = () => {\n  const router = useRouter();\n  const [sessions, setSessions] = useState<Session[]>([]);\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [filters, setFilters] = useState<SessionFilters>({});\n  const [sort, setSort] = useState<SessionSort>({ field: 'startTime', direction: 'desc' });\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalCount, setTotalCount] = useState(0);\n  const [hasMore, setHasMore] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [showMenuForSession, setShowMenuForSession] = useState<string | null>(null);\n  const [deleteConfirmSession, setDeleteConfirmSession] = useState<string | null>(null);\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  // Load initial data\n  useEffect(() => {\n    const loadInitialData = async () => {\n      try {\n        setIsLoading(true);\n        // Load projects and user's sessions from Firebase\n        const [projectsData, sessionsResp] = await Promise.all([\n          firebaseProjectApi.getProjects(),\n          firebaseSessionApi.getSessions(1, 20, {})\n        ]);\n\n        setProjects(projectsData);\n        setSessions(sessionsResp.sessions);\n        setTotalCount(sessionsResp.totalCount);\n        setHasMore(sessionsResp.hasMore);\n      } catch (error) {\n        console.error('Failed to load session history:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadInitialData();\n  }, []);\n\n  // Load sessions when filters or sort change\n  useEffect(() => {\n    const loadSessions = async () => {\n      try {\n        setIsLoading(true);\n        const sessionsResp = await firebaseSessionApi.getSessions(\n          currentPage,\n          20,\n          { ...filters, search: searchQuery }\n        );\n\n        setSessions(sessionsResp.sessions);\n        setTotalCount(sessionsResp.totalCount);\n        setHasMore(sessionsResp.hasMore);\n      } catch (error) {\n        console.error('Failed to load sessions:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadSessions();\n  }, [filters, sort, currentPage, searchQuery]);\n\n  const handleFiltersChange = (newFilters: SessionFilters) => {\n    setFilters(newFilters);\n    setCurrentPage(1);\n  };\n\n  const handleSortChange = (newSort: SessionSort) => {\n    setSort(newSort);\n    setCurrentPage(1);\n  };\n\n  const handleSessionEdit = (sessionId: string) => {\n    router.push(`/sessions/${sessionId}/edit`);\n  };\n\n  const handleSessionDelete = (sessionId: string) => {\n    setDeleteConfirmSession(sessionId);\n  };\n\n  const confirmDelete = async () => {\n    if (!deleteConfirmSession) return;\n\n    try {\n      setIsDeleting(true);\n      await firebaseSessionApi.deleteSession(deleteConfirmSession);\n\n      // Reload sessions from Firebase\n      const sessionsResp = await firebaseSessionApi.getSessions(\n        currentPage,\n        20,\n        { ...filters, search: searchQuery }\n      );\n      setSessions(sessionsResp.sessions);\n      setTotalCount(sessionsResp.totalCount);\n      setHasMore(sessionsResp.hasMore);\n      setDeleteConfirmSession(null);\n    } catch (error) {\n      console.error('Failed to delete session:', error);\n    } finally {\n      setIsDeleting(false);\n    }\n  };\n\n  const formatDuration = (seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${secs}s`;\n    } else {\n      return `${secs}s`;\n    }\n  };\n\n  const formatDate = (date: Date): string => {\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getProjectName = (projectId: string | undefined): string => {\n    if (!projectId) return 'Unknown Project';\n    const project = projects.find(p => p.id === projectId);\n    return project ? project.name : 'Unknown Project';\n  };\n\n  const getVisibilityIcon = (visibility: string) => {\n    switch (visibility) {\n      case 'everyone':\n        return '🌍';\n      case 'followers':\n        return '👥';\n      case 'private':\n        return '🔒';\n      default:\n        return '🔒';\n    }\n  };\n\n  const getFeelingEmoji = (rating?: number) => {\n    if (!rating) return '😐';\n    switch (rating) {\n      case 1: return '😞';\n      case 2: return '😕';\n      case 3: return '😐';\n      case 4: return '🙂';\n      case 5: return '😊';\n      default: return '😐';\n    }\n  };\n\n  if (isLoading && sessions.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filters and Search */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          {/* Search */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Search\n            </label>\n            <input\n              type=\"text\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              placeholder=\"Search sessions...\"\n            />\n          </div>\n\n          {/* Project Filter */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Project\n            </label>\n            <select\n              value={filters.projectId || ''}\n              onChange={(e) => handleFiltersChange({ ...filters, projectId: e.target.value || undefined })}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"\">All Projects</option>\n              {projects.map((project) => (\n                <option key={project.id} value={project.id}>\n                  {project.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Date Range */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              From Date\n            </label>\n            <input\n              type=\"date\"\n              value={filters.dateFrom ? filters.dateFrom.toISOString().split('T')[0] : ''}\n              onChange={(e) => handleFiltersChange({ \n                ...filters, \n                dateFrom: e.target.value ? new Date(e.target.value) : undefined \n              })}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              To Date\n            </label>\n            <input\n              type=\"date\"\n              value={filters.dateTo ? filters.dateTo.toISOString().split('T')[0] : ''}\n              onChange={(e) => handleFiltersChange({ \n                ...filters, \n                dateTo: e.target.value ? new Date(e.target.value) : undefined \n              })}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n        </div>\n\n        {/* Sort Options */}\n        <div className=\"mt-4 flex items-center space-x-4\">\n          <label className=\"text-sm font-medium text-gray-700\">Sort by:</label>\n          <select\n            value={`${sort.field}-${sort.direction}`}\n            onChange={(e) => {\n              const [field, direction] = e.target.value.split('-');\n              handleSortChange({ field: field as any, direction: direction as any });\n            }}\n            className=\"px-3 py-1 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"startTime-desc\">Date (Newest First)</option>\n            <option value=\"startTime-asc\">Date (Oldest First)</option>\n            <option value=\"duration-desc\">Duration (Longest First)</option>\n            <option value=\"duration-asc\">Duration (Shortest First)</option>\n            <option value=\"title-asc\">Title (A-Z)</option>\n            <option value=\"title-desc\">Title (Z-A)</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Session List */}\n      <div className=\"bg-white rounded-lg shadow\">\n        {sessions.length === 0 ? (\n          <div className=\"p-8 text-center text-gray-500\">\n            <p className=\"text-lg\">No sessions found</p>\n            <p className=\"text-sm mt-2\">Try adjusting your filters or start a new session</p>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-gray-200\">\n            {sessions.map((session) => (\n              <div key={session.id} className=\"p-6 hover:bg-gray-50 transition-colors\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <h3 className=\"text-lg font-medium text-gray-900\">{session.title}</h3>\n                      <span className=\"text-sm text-gray-500\">\n                        {getVisibilityIcon(session.visibility)}\n                      </span>\n                      <span className=\"text-sm text-gray-500\">\n                        {getFeelingEmoji(session.howFelt)}\n                      </span>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-4 text-sm text-gray-600 mb-3\">\n                      <span>{getProjectName(session.projectId)}</span>\n                      <span>•</span>\n                      <span>{formatDate(session.startTime)}</span>\n                      <span>•</span>\n                      <span className=\"font-medium\">{formatDuration(session.duration)}</span>\n                    </div>\n\n                    {session.description && (\n                      <p className=\"text-gray-700 text-sm mb-3\">{session.description}</p>\n                    )}\n\n                    {session.tags && session.tags.length > 0 && (\n                      <div className=\"flex flex-wrap gap-1 mb-3\">\n                        {session.tags.map((tag) => (\n                          <span\n                            key={tag}\n                            className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full\"\n                          >\n                            {tag}\n                          </span>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Options Menu */}\n                  <div className=\"relative\">\n                    <button\n                      onClick={() => setShowMenuForSession(showMenuForSession === session.id ? null : session.id)}\n                      className=\"text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full p-2 transition-colors\"\n                    >\n                      <MoreVertical className=\"w-5 h-5\" />\n                    </button>\n\n                    {showMenuForSession === session.id && (\n                      <div className=\"absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-10\">\n                        <button\n                          onClick={() => {\n                            handleSessionEdit(session.id);\n                            setShowMenuForSession(null);\n                          }}\n                          className=\"w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-50\"\n                        >\n                          Edit session\n                        </button>\n                        <button\n                          onClick={() => {\n                            handleSessionDelete(session.id);\n                            setShowMenuForSession(null);\n                          }}\n                          className=\"w-full px-4 py-2 text-left text-sm text-red-600 hover:bg-gray-50\"\n                        >\n                          Delete session\n                        </button>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Pagination */}\n      {totalCount > 20 && (\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-gray-700\">\n            Showing {sessions.length} of {totalCount} sessions\n          </div>\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n              disabled={currentPage === 1}\n              className=\"px-3 py-1 border border-gray-300 rounded-md text-sm hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              Previous\n            </button>\n            <span className=\"px-3 py-1 text-sm text-gray-700\">\n              Page {currentPage}\n            </span>\n            <button\n              onClick={() => setCurrentPage(currentPage + 1)}\n              disabled={!hasMore}\n              className=\"px-3 py-1 border border-gray-300 rounded-md text-sm hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              Next\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Delete Confirmation Dialog */}\n      <ConfirmDialog\n        isOpen={deleteConfirmSession !== null}\n        onClose={() => setDeleteConfirmSession(null)}\n        onConfirm={confirmDelete}\n        title=\"Delete Session\"\n        message=\"Are you sure you want to delete this session? This action cannot be undone and all associated data will be permanently removed.\"\n        confirmText=\"Delete Session\"\n        cancelText=\"Cancel\"\n        variant=\"danger\"\n        isLoading={isDeleting}\n      />\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SessionInteractions.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'supportedBy' is assigned a value but never used.",
        "line": 28,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'onViewAllCommentsClick' is defined but never used.",
        "line": 36,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 25
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { ThumbsUp, MessageSquare, Share2, Image as ImageIcon, Link as LinkIcon, Copy } from 'lucide-react';\n\ninterface SessionInteractionsProps {\n  sessionId: string;\n  supportCount: number;\n  commentCount: number;\n  isSupported: boolean;\n  supportedBy?: string[];\n  onSupport: (sessionId: string) => Promise<void>;\n  onRemoveSupport: (sessionId: string) => Promise<void>;\n  onShare: (sessionId: string) => Promise<void>;\n  onShareImage?: () => void;\n  isOwnPost?: boolean;\n  onCommentClick?: () => void;\n  onLikesClick?: () => void;\n  onViewAllCommentsClick?: () => void;\n  className?: string;\n}\n\nexport const SessionInteractions: React.FC<SessionInteractionsProps> = ({\n  sessionId,\n  supportCount,\n  commentCount,\n  isSupported,\n  supportedBy = [],\n  onSupport,\n  onRemoveSupport,\n  onShare,\n  onShareImage,\n  isOwnPost = false,\n  onCommentClick,\n  onLikesClick,\n  onViewAllCommentsClick,\n  className = ''\n}) => {\n  const [isSupporting, setIsSupporting] = useState(false);\n  const [isSharing, setIsSharing] = useState(false);\n  const [showShareMenu, setShowShareMenu] = useState(false);\n  const shareMenuRef = useRef<HTMLDivElement>(null);\n\n  const handleSupport = async () => {\n    if (isSupporting) return;\n\n    setIsSupporting(true);\n    try {\n      if (isSupported) {\n        await onRemoveSupport(sessionId);\n      } else {\n        await onSupport(sessionId);\n      }\n    } catch (error) {\n      console.error('Failed to update support:', error);\n    } finally {\n      setIsSupporting(false);\n    }\n  };\n\n  const handleShare = async () => {\n    if (isSharing) return;\n\n    setIsSharing(true);\n    try {\n      await onShare(sessionId);\n    } catch (error) {\n      console.error('Failed to share session:', error);\n    } finally {\n      setIsSharing(false);\n      setShowShareMenu(false);\n    }\n  };\n\n  const handleShareImage = () => {\n    if (onShareImage) {\n      onShareImage();\n      setShowShareMenu(false);\n    }\n  };\n\n  const handleCopyLink = async () => {\n    try {\n      const sessionUrl = `${window.location.origin}/sessions/${sessionId}`;\n      await navigator.clipboard.writeText(sessionUrl);\n      setShowShareMenu(false);\n      // Optional: Show a toast notification here\n    } catch (error) {\n      console.error('Failed to copy link:', error);\n    }\n  };\n\n  // Close share menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (shareMenuRef.current && !shareMenuRef.current.contains(event.target as Node)) {\n        setShowShareMenu(false);\n      }\n    };\n\n    const handleEscapeKey = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        setShowShareMenu(false);\n      }\n    };\n\n    if (showShareMenu) {\n      document.addEventListener('mousedown', handleClickOutside);\n      document.addEventListener('keydown', handleEscapeKey);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n      document.removeEventListener('keydown', handleEscapeKey);\n    };\n  }, [showShareMenu]);\n\n  return (\n    <div className={className}>\n      {/* Desktop layout - original Strava style */}\n      <div className=\"hidden md:block\">\n        {/* Counts section - top left */}\n        <div className=\"px-4 pb-3 flex items-center justify-between text-sm text-gray-600\">\n          <div className=\"flex items-center gap-4\">\n            {supportCount > 0 && (\n              <button\n                onClick={onLikesClick}\n                className=\"hover:text-gray-900 hover:underline transition-colors font-medium\"\n                aria-label={`View ${supportCount} ${supportCount === 1 ? 'person who liked this' : 'people who liked this'}`}\n              >\n                {supportCount} {supportCount === 1 ? 'like' : 'likes'}\n              </button>\n            )}\n          </div>\n        </div>\n\n        {/* Action buttons - Strava style (bottom right on desktop) */}\n        <div className=\"px-4 py-3\">\n          <div className=\"flex items-center justify-end gap-2\">\n            {/* Like button */}\n            <button\n              onClick={handleSupport}\n              disabled={isSupporting}\n              className={`flex items-center gap-1.5 px-3 py-1.5 rounded hover:bg-gray-100 transition-colors ${\n                isSupporting ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'\n              }`}\n              aria-label={isSupported ? `Unlike session (${supportCount} ${supportCount === 1 ? 'like' : 'likes'})` : `Like session (${supportCount} ${supportCount === 1 ? 'like' : 'likes'})`}\n            >\n              <ThumbsUp\n                className={`w-5 h-5 transition-colors ${\n                  isSupported\n                    ? 'fill-gray-700 text-gray-700'\n                    : 'text-gray-600'\n                }`}\n                strokeWidth={1.5}\n                aria-hidden=\"true\"\n              />\n              <span className={`text-sm font-medium ${\n                isSupported ? 'text-gray-700' : 'text-gray-600'\n              }`} aria-hidden=\"true\">\n                {supportCount > 0 ? supportCount : ''}\n              </span>\n            </button>\n\n            {/* Comment button */}\n            <button\n              onClick={onCommentClick}\n              className=\"flex items-center gap-1.5 px-3 py-1.5 rounded hover:bg-gray-100 transition-colors\"\n              aria-label={`View and add comments (${commentCount} ${commentCount === 1 ? 'comment' : 'comments'})`}\n            >\n              <MessageSquare\n                className=\"w-5 h-5 text-gray-600\"\n                strokeWidth={1.5}\n                aria-hidden=\"true\"\n              />\n              <span className=\"text-sm font-medium text-gray-600\" aria-hidden=\"true\">\n                {commentCount > 0 ? commentCount : ''}\n              </span>\n            </button>\n\n            {/* Share button with dropdown */}\n            <div className=\"relative\" ref={shareMenuRef}>\n              <button\n                onClick={() => setShowShareMenu(!showShareMenu)}\n                disabled={isSharing}\n                className={`flex items-center gap-1.5 px-3 py-1.5 rounded hover:bg-gray-100 transition-colors ${\n                  isSharing ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'\n                }`}\n                aria-label=\"Share session\"\n                aria-expanded={showShareMenu}\n                aria-haspopup=\"true\"\n              >\n                <Share2\n                  className=\"w-5 h-5 text-gray-600\"\n                  strokeWidth={1.5}\n                  aria-hidden=\"true\"\n                />\n              </button>\n\n              {/* Share dropdown menu */}\n              {showShareMenu && (\n                <div\n                  className=\"absolute right-0 mt-2 w-52 bg-white rounded-lg shadow-2xl border-2 border-gray-300 py-2 z-50\"\n                  role=\"menu\"\n                  aria-label=\"Share options\"\n                >\n                  {isOwnPost && onShareImage && (\n                    <>\n                      <button\n                        onClick={handleShareImage}\n                        className=\"w-full px-4 py-2.5 text-left text-sm font-medium text-gray-900 hover:bg-blue-50 flex items-center gap-3\"\n                        role=\"menuitem\"\n                        aria-label=\"Share session as image\"\n                      >\n                        <ImageIcon className=\"w-5 h-5 text-[#007AFF]\" aria-hidden=\"true\" />\n                        Share as image\n                      </button>\n                      <div className=\"border-t border-gray-200 my-1\" aria-hidden=\"true\"></div>\n                    </>\n                  )}\n                  <button\n                    onClick={handleShare}\n                    className=\"w-full px-4 py-2.5 text-left text-sm font-medium text-gray-900 hover:bg-blue-50 flex items-center gap-3\"\n                    role=\"menuitem\"\n                    aria-label=\"Share session link\"\n                  >\n                    <LinkIcon className=\"w-5 h-5 text-[#007AFF]\" aria-hidden=\"true\" />\n                    Share link\n                  </button>\n                  <div className=\"border-t border-gray-200 my-1\" aria-hidden=\"true\"></div>\n                  <button\n                    onClick={handleCopyLink}\n                    className=\"w-full px-4 py-2.5 text-left text-sm font-medium text-gray-900 hover:bg-blue-50 flex items-center gap-3\"\n                    role=\"menuitem\"\n                    aria-label=\"Copy session link to clipboard\"\n                  >\n                    <Copy className=\"w-5 h-5 text-[#007AFF]\" aria-hidden=\"true\" />\n                    Copy to clipboard\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile layout - LinkedIn style */}\n      <div className=\"md:hidden\">\n        {/* Counts section */}\n        <div className=\"px-4 py-2 flex items-center justify-between text-sm text-gray-600\">\n          <button\n            onClick={onLikesClick}\n            className=\"hover:text-gray-900 transition-colors min-h-[44px] flex items-center\"\n            disabled={supportCount === 0}\n            aria-label={`View ${supportCount} ${supportCount === 1 ? 'person who liked this' : 'people who liked this'}`}\n          >\n            {supportCount} {supportCount === 1 ? 'like' : 'likes'}\n          </button>\n          <button\n            onClick={onCommentClick}\n            className=\"hover:text-gray-900 transition-colors min-h-[44px] flex items-center\"\n            aria-label={`View ${commentCount} ${commentCount === 1 ? 'comment' : 'comments'}`}\n          >\n            {commentCount} {commentCount === 1 ? 'comment' : 'comments'}\n          </button>\n        </div>\n\n        {/* Action buttons - 3 equal width columns */}\n        <div className=\"px-4 pb-3\">\n          <div className=\"grid grid-cols-3 gap-1\">\n            {/* Like button */}\n            <button\n              onClick={handleSupport}\n              disabled={isSupporting}\n              className={`flex flex-col items-center justify-center py-2 rounded hover:bg-gray-50 transition-colors min-h-[44px] ${\n                isSupporting ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'\n              }`}\n              aria-label={isSupported ? `Unlike session (${supportCount} ${supportCount === 1 ? 'like' : 'likes'})` : `Like session (${supportCount} ${supportCount === 1 ? 'like' : 'likes'})`}\n            >\n              <ThumbsUp\n                className={`w-6 h-6 transition-colors ${\n                  isSupported\n                    ? 'fill-gray-700 text-gray-700'\n                    : 'text-gray-600'\n                }`}\n                strokeWidth={1.5}\n                aria-hidden=\"true\"\n              />\n            </button>\n\n            {/* Comment button */}\n            <button\n              onClick={onCommentClick}\n              className=\"flex flex-col items-center justify-center py-2 rounded hover:bg-gray-50 transition-colors min-h-[44px]\"\n              aria-label={`View and add comments (${commentCount} ${commentCount === 1 ? 'comment' : 'comments'})`}\n            >\n              <MessageSquare\n                className=\"w-6 h-6 text-gray-600\"\n                strokeWidth={1.5}\n                aria-hidden=\"true\"\n              />\n            </button>\n\n            {/* Share button with dropdown */}\n            <div className=\"relative\">\n              <button\n                onClick={() => setShowShareMenu(!showShareMenu)}\n                disabled={isSharing}\n                className={`flex flex-col items-center justify-center py-2 rounded hover:bg-gray-50 transition-colors w-full min-h-[44px] ${\n                  isSharing ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'\n                }`}\n                aria-label=\"Share session\"\n                aria-expanded={showShareMenu}\n                aria-haspopup=\"true\"\n              >\n                <Share2\n                  className=\"w-6 h-6 text-gray-600\"\n                  strokeWidth={1.5}\n                  aria-hidden=\"true\"\n                />\n              </button>\n\n              {/* Share dropdown menu (mobile) */}\n              {showShareMenu && (\n                <div\n                  className=\"absolute right-0 bottom-full mb-2 w-56 bg-white rounded-lg shadow-2xl border-2 border-gray-300 py-2 z-50\"\n                  role=\"menu\"\n                  aria-label=\"Share options\"\n                >\n                  {isOwnPost && onShareImage && (\n                    <>\n                      <button\n                        onClick={handleShareImage}\n                        className=\"w-full px-4 py-3 text-left text-base font-medium text-gray-900 hover:bg-blue-50 flex items-center gap-3\"\n                        role=\"menuitem\"\n                        aria-label=\"Share session as image\"\n                      >\n                        <ImageIcon className=\"w-5 h-5 text-[#007AFF]\" aria-hidden=\"true\" />\n                        Share as image\n                      </button>\n                      <div className=\"border-t border-gray-200 my-1\" aria-hidden=\"true\"></div>\n                    </>\n                  )}\n                  <button\n                    onClick={handleShare}\n                    className=\"w-full px-4 py-3 text-left text-base font-medium text-gray-900 hover:bg-blue-50 flex items-center gap-3\"\n                    role=\"menuitem\"\n                    aria-label=\"Share session link\"\n                  >\n                    <LinkIcon className=\"w-5 h-5 text-[#007AFF]\" aria-hidden=\"true\" />\n                    Share link\n                  </button>\n                  <div className=\"border-t border-gray-200 my-1\" aria-hidden=\"true\"></div>\n                  <button\n                    onClick={handleCopyLink}\n                    className=\"w-full px-4 py-3 text-left text-base font-medium text-gray-900 hover:bg-blue-50 flex items-center gap-3\"\n                    role=\"menuitem\"\n                    aria-label=\"Copy session link to clipboard\"\n                  >\n                    <Copy className=\"w-5 h-5 text-[#007AFF]\" aria-hidden=\"true\" />\n                    Copy to clipboard\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SessionInteractions;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SessionPrompt.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SessionStats.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'showAllTasks' is assigned a value but never used.",
        "line": 17,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setShowAllTasks' is assigned a value but never used.",
        "line": 17,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'completedTasks' is assigned a value but never used.",
        "line": 30,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 30,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 30,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [704, 707], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [704, 707], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'totalTasks' is assigned a value but never used.",
        "line": 31,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 31,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport { Session, Project } from '@/types';\n\ninterface SessionStatsProps {\n  session: Session;\n  project: Project;\n  className?: string;\n}\n\nexport const SessionStats: React.FC<SessionStatsProps> = ({ \n  session, \n  project, \n  className = '' \n}) => {\n  const [showAllTasks, setShowAllTasks] = useState(false);\n  \n  const formatDuration = (seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    }\n    return `${minutes}m`;\n  };\n\n  // Task tracking not implemented at session level\n  const completedTasks: any[] = [];\n  const totalTasks = 0;\n\n  return (\n    <div className={`bg-gradient-to-br from-gray-50 to-gray-100 rounded-xl border border-gray-200 overflow-hidden ${className}`}>\n      {/* Session Title with Project Badge */}\n      <div className=\"px-4 py-3 bg-white border-b border-gray-200\">\n        <div className=\"flex items-center gap-3\">\n          <div\n            className=\"w-10 h-10 rounded-lg flex items-center justify-center text-white text-lg font-semibold shadow-sm flex-shrink-0\"\n            style={{ backgroundColor: project.color }}\n          >\n            {project.icon}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"font-bold text-gray-900 text-base leading-tight truncate\">\n              {session.title}\n            </h3>\n            <p className=\"text-sm text-gray-600 truncate\">\n              {project.name}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Stats Grid - Strava Style */}\n      <div className=\"px-4 py-4\">\n        <div className=\"grid grid-cols-1 gap-4\">\n          {/* Duration */}\n          <div>\n            <div className=\"text-xs text-gray-500 uppercase tracking-wide font-medium mb-1\">\n              Duration\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {formatDuration(session.duration)}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Tags */}\n      {session.tags && session.tags.length > 0 && (\n        <div className=\"px-4 pb-4\">\n          <div className=\"flex flex-wrap gap-2\">\n            {session.tags.map((tag, index) => (\n              <span\n                key={index}\n                className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-700 border border-orange-200\"\n              >\n                #{tag}\n              </span>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SessionStats;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SessionTimer.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'TimerControls' is defined but never used.",
        "line": 8,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'token' is assigned a value but never used.",
        "line": 36,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'session' is assigned a value but never used.",
        "line": 169,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 169,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'post' is assigned a value but never used.",
        "line": 169,
        "column": 34,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 169,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'session' is assigned a value but never used.",
        "line": 176,
        "column": 23,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 176,
        "endColumn": 30
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useTimer } from '@/features/timer/hooks';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Project, CreateSessionData } from '@/types';\nimport { TimerDisplay } from './TimerDisplay';\nimport { TimerControls } from './TimerControls';\nimport { SaveSession } from './SaveSession';\nimport { firebaseApi } from '@/lib/api';\nimport { cn } from '@/lib/utils';\n\ninterface SessionTimerProps {\n  className?: string;\n}\n\nexport const SessionTimer: React.FC<SessionTimerProps> = ({ className = '' }) => {\n  const { timerState, startTimer } = useTimer();\n  const { user } = useAuth();\n\n  // TODO: Implement Firebase API calls\n  // Helper function to get auth token\n  const getAuthToken = (): string => {\n    // For now, return empty string since we're not using Firebase sessions yet\n    return '';\n  };\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [selectedProjectId, setSelectedProjectId] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [showFinishModal, setShowFinishModal] = useState(false);\n\n  // Load projects on mount\n  useEffect(() => {\n    const loadProjects = async () => {\n      try {\n        const token = getAuthToken();\n        // TODO: Load projects from Firebase\n        const projectList: Project[] = []; // await mockProjectApi.getProjects(token);\n        setProjects(projectList);\n\n        // If timer already has a project selected, use it\n        if (timerState.currentProject) {\n          setSelectedProjectId(timerState.currentProject.id);\n        }\n      } catch (error) {\n        console.error('Failed to load projects:', error);\n      }\n    };\n\n    if (user) {\n      loadProjects();\n    }\n  }, [user, timerState.currentProject]);\n\n\n  const handleStartTimer = async () => {\n    if (!selectedProjectId) return;\n\n    try {\n      setIsLoading(true);\n      await startTimer(selectedProjectId);\n    } catch (error) {\n      console.error('Failed to start timer:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n\n  const handleFinishModalOpen = () => {\n    setShowFinishModal(true);\n  };\n\n  const isActive = timerState.isRunning || timerState.pausedDuration > 0;\n\n  return (\n    <div className={cn('max-w-4xl mx-auto p-6', className)}>\n      <div className=\"bg-white rounded-lg shadow-lg p-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Focus Session</h1>\n          <p className=\"text-gray-600\">Track your work and stay productive</p>\n        </div>\n\n        {/* Timer Display */}\n        <div className=\"mb-8\">\n          <TimerDisplay className=\"mb-4\" showMilliseconds={false} />\n        </div>\n\n        {/* Project Selection */}\n        {!isActive && (\n          <div className=\"mb-6\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Select Project\n            </label>\n            <select\n              value={selectedProjectId}\n              onChange={(e) => setSelectedProjectId(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              disabled={isLoading}\n            >\n              <option value=\"\">Choose a project...</option>\n              {projects.map((project) => (\n                <option key={project.id} value={project.id}>\n                  {project.name}\n                </option>\n              ))}\n            </select>\n          </div>\n        )}\n\n        {/* Current Project Display (when timer is active) */}\n        {isActive && timerState.currentProject && (\n          <div className=\"mb-6 p-4 bg-blue-50 rounded-lg\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n                <span className=\"text-white font-bold text-sm\">\n                  {timerState.currentProject.icon || 'P'}\n                </span>\n              </div>\n              <div>\n                <h3 className=\"font-medium text-gray-900\">{timerState.currentProject.name}</h3>\n                <p className=\"text-sm text-gray-600\">{timerState.currentProject.description}</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n\n        {/* Timer Controls */}\n        <div className=\"flex justify-center\">\n          <CustomTimerControls \n            onFinish={handleFinishModalOpen}\n            onStart={handleStartTimer}\n            className=\"mb-4\"\n          />\n        </div>\n\n        {/* Connection Status */}\n        {!timerState.isConnected && (\n          <div className=\"mt-4 p-3 bg-orange-50 border border-orange-200 rounded-lg\">\n            <div className=\"flex items-center space-x-2 text-orange-800\">\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n              </svg>\n              <span className=\"text-sm font-medium\">You're offline</span>\n            </div>\n            <p className=\"text-sm text-orange-700 mt-1\">\n              Your timer will continue running. Changes will sync when you reconnect.\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Finish Session Modal */}\n      {showFinishModal && (\n        <SaveSession\n          onSave={async (data) => {\n            try {\n              // Create session data\n              const sessionData: CreateSessionData = {\n                ...data\n              };\n\n              // Create session and post if visibility allows\n              if (data.visibility !== 'private') {\n                // Show post creation modal for non-private sessions\n                // For now, we'll create the session with a basic post\n                const { session, post } = await firebaseApi.session.createSessionWithPost(\n                  sessionData,\n                  data.description || `Completed ${data.title}`,\n                  data.visibility\n                );\n              } else {\n                // Create private session only\n                const session = await firebaseApi.session.createSession(sessionData);\n              }\n\n              setShowFinishModal(false);\n              // Timer will be finished by the context\n            } catch (error) {\n              console.error('Failed to save session:', error);\n              throw error;\n            }\n          }}\n          onCancel={() => setShowFinishModal(false)}\n          initialData={{\n            projectId: timerState.currentProject?.id || '',\n            activityId: timerState.currentProject?.id || '',\n            title: '',\n            description: '',\n            duration: timerState.pausedDuration || 0,\n            startTime: timerState.startTime || new Date(),\n            tags: [],\n            visibility: 'everyone',\n            howFelt: 3,\n            privateNotes: '',\n          }}\n          isLoading={false}\n        />\n      )}\n    </div>\n  );\n};\n\n\n// Custom Timer Controls for SessionTimer\ninterface CustomTimerControlsProps {\n  onFinish: () => void;\n  onStart: () => void;\n  className?: string;\n}\n\nconst CustomTimerControls: React.FC<CustomTimerControlsProps> = ({ \n  onFinish, \n  onStart,\n  className = '' \n}) => {\n  const { timerState, pauseTimer, resumeTimer, resetTimer } = useTimer();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleStart = async () => {\n    try {\n      setIsLoading(true);\n      await onStart();\n    } catch (error) {\n      console.error('Failed to start timer:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handlePause = async () => {\n    try {\n      setIsLoading(true);\n      await pauseTimer();\n    } catch (error) {\n      console.error('Failed to pause timer:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleResume = async () => {\n    try {\n      setIsLoading(true);\n      await resumeTimer();\n    } catch (error) {\n      console.error('Failed to resume timer:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleReset = async () => {\n    if (window.confirm('Are you sure you want to reset the timer? This will discard the current session.')) {\n      try {\n        setIsLoading(true);\n        await resetTimer();\n      } catch (error) {\n        console.error('Failed to reset timer:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  const isActive = timerState.isRunning || timerState.pausedDuration > 0;\n\n  return (\n    <div className={cn('flex items-center justify-center space-x-3', className)}>\n      {!isActive ? (\n        <button\n          onClick={handleStart}\n          disabled={isLoading}\n          className=\"px-6 py-3 bg-green-600 text-white font-medium rounded-lg hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors flex items-center space-x-2\"\n        >\n          <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\n          </svg>\n          <span>{isLoading ? 'Starting...' : 'Start'}</span>\n        </button>\n      ) : (\n        <>\n          {timerState.isRunning ? (\n            <button\n              onClick={handlePause}\n              disabled={isLoading}\n              className=\"px-6 py-3 bg-yellow-600 text-white font-medium rounded-lg hover:bg-yellow-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors flex items-center space-x-2\"\n            >\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n              </svg>\n              <span>{isLoading ? 'Pausing...' : 'Pause'}</span>\n            </button>\n          ) : (\n            <button\n              onClick={handleResume}\n              disabled={isLoading}\n              className=\"px-6 py-3 bg-green-600 text-white font-medium rounded-lg hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors flex items-center space-x-2\"\n            >\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\n              </svg>\n              <span>{isLoading ? 'Resuming...' : 'Resume'}</span>\n            </button>\n          )}\n\n          <button\n            onClick={onFinish}\n            disabled={isLoading}\n            className=\"px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors flex items-center space-x-2\"\n          >\n            <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n            </svg>\n            <span>Finish</span>\n          </button>\n\n          <button\n            onClick={handleReset}\n            disabled={isLoading}\n            className=\"px-4 py-3 bg-red-600 text-white font-medium rounded-lg hover:bg-red-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors flex items-center space-x-2\"\n          >\n            <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z\" clipRule=\"evenodd\" />\n            </svg>\n            <span>Reset</span>\n          </button>\n        </>\n      )}\n\n      {/* Connection status indicator */}\n      {!timerState.isConnected && (\n        <div className=\"flex items-center space-x-1 text-orange-600 text-sm\">\n          <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n          </svg>\n          <span>Offline</span>\n        </div>\n      )}\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SessionTimerEnhanced.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 563,
        "column": 68,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 563,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [21705, 21708], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [21705, 21708], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useTimer } from '@/features/timer/hooks';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useActivities } from '@/hooks/useActivitiesQuery';\nimport {\n  Play,\n  Pause,\n  ChevronDown,\n  Check,\n  Flag,\n  Edit3,\n  ArrowLeft,\n} from 'lucide-react';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport { uploadImages } from '@/lib/imageUpload';\nimport { ImageUpload } from '@/components/ImageUpload';\nimport Link from 'next/link';\nimport { Activity } from '@/types';\nimport { IconRenderer } from '@/components/IconRenderer';\n\ninterface SessionTimerEnhancedProps {\n  projectId: string;\n}\n\nexport const SessionTimerEnhanced: React.FC<SessionTimerEnhancedProps> = () => {\n  const {\n    timerState,\n    getElapsedTime,\n    getFormattedTime,\n    startTimer,\n    pauseTimer,\n    resumeTimer,\n    finishTimer,\n    resetTimer,\n  } = useTimer();\n  const { user } = useAuth();\n  const { data: projects = [] } = useActivities(user?.id);\n  const [showFinishModal, setShowFinishModal] = useState(false);\n  const [sessionTitle, setSessionTitle] = useState('');\n  const [sessionDescription, setSessionDescription] = useState('');\n  const [visibility, setVisibility] = useState<\n    'everyone' | 'followers' | 'private'\n  >('everyone');\n  const [howFelt, setHowFelt] = useState<number>(3);\n  const [privateNotes, setPrivateNotes] = useState('');\n  const [selectedActivityId, setSelectedActivityId] = useState<string>('');\n  const [displayTime, setDisplayTime] = useState(0);\n  const [showActivityPicker, setShowActivityPicker] = useState(false);\n  const [showCancelConfirm, setShowCancelConfirm] = useState(false);\n  const [adjustedDuration, setAdjustedDuration] = useState(0);\n  const [selectedImages, setSelectedImages] = useState<File[]>([]);\n  const [imagePreviewUrls, setImagePreviewUrls] = useState<string[]>([]);\n  const [isUploadingImages, setIsUploadingImages] = useState(false);\n  const [startTime, setStartTime] = useState<Date>(new Date());\n  const [showActivityError, setShowActivityError] = useState(false);\n  const [customStartTime, setCustomStartTime] = useState<Date | null>(null);\n  const [showTimePickerModal, setShowTimePickerModal] = useState(false);\n\n  // Only show user's custom activities\n  const allActivities: Activity[] = projects || [];\n\n  // Load last used activity from local storage on mount\n  useEffect(() => {\n    const savedActivityId = localStorage.getItem('lastSessionActivity');\n\n    if (savedActivityId && projects) {\n      // Validate that the saved activity still exists\n      const activityExists = projects.some(p => p.id === savedActivityId);\n      if (activityExists) {\n        setSelectedActivityId(savedActivityId);\n      } else {\n        // Clear stale activity ID from localStorage\n        localStorage.removeItem('lastSessionActivity');\n      }\n    }\n  }, [projects]);\n\n  // Initialize selectedActivityId from timerState if there's an active session\n  useEffect(() => {\n    if (timerState.currentProject && !selectedActivityId) {\n      setSelectedActivityId(timerState.currentProject.id);\n    }\n  }, [timerState.currentProject, selectedActivityId]);\n\n  // Save activity to local storage whenever it changes\n  useEffect(() => {\n    if (selectedActivityId) {\n      localStorage.setItem('lastSessionActivity', selectedActivityId);\n    }\n  }, [selectedActivityId]);\n\n  // Initialize adjusted duration when finish modal opens\n  useEffect(() => {\n    if (showFinishModal) {\n      const elapsed = getElapsedTime();\n      setAdjustedDuration(elapsed);\n\n      // Calculate start time based on elapsed duration (now - duration)\n      const now = new Date();\n      const calculatedStartTime = new Date(now.getTime() - elapsed * 1000);\n      setStartTime(calculatedStartTime);\n    }\n  }, [showFinishModal, getElapsedTime]);\n\n  // Update display time every second when timer is running\n  useEffect(() => {\n    if (!timerState.isRunning) {\n      setDisplayTime(timerState.pausedDuration);\n      return;\n    }\n\n    const interval = setInterval(() => {\n      setDisplayTime(getElapsedTime());\n    }, 1000);\n\n    // Set initial time\n    setDisplayTime(getElapsedTime());\n\n    return () => clearInterval(interval);\n  }, [\n    timerState.isRunning,\n    timerState.startTime,\n    timerState.pausedDuration,\n    getElapsedTime,\n  ]);\n\n  // Auto-generate session title based on time of day\n  useEffect(() => {\n    const hour = new Date().getHours();\n    let timeOfDay = 'Morning';\n    if (hour >= 12 && hour < 17) timeOfDay = 'Afternoon';\n    else if (hour >= 17) timeOfDay = 'Evening';\n\n    setSessionTitle(`${timeOfDay} Work Session`);\n  }, []);\n\n  const handleStartTimer = async () => {\n    // Validate activity is selected and exists\n    if (\n      !selectedActivityId ||\n      !allActivities.find(a => a.id === selectedActivityId)\n    ) {\n      // Show error state and open activity picker\n      setShowActivityError(true);\n      setShowActivityPicker(true);\n      // Clear error after 3 seconds\n      setTimeout(() => setShowActivityError(false), 3000);\n      return;\n    }\n\n    try {\n      await startTimer(selectedActivityId, customStartTime || undefined);\n      // Reset custom start time after starting\n      setCustomStartTime(null);\n      setShowTimePickerModal(false);\n    } catch (error) {\n      console.error('Failed to start timer:', error);\n      alert('Failed to start timer. Please try again.');\n    }\n  };\n\n  const handlePauseTimer = async () => {\n    try {\n      await pauseTimer();\n    } catch (error) {\n      console.error('Failed to pause timer:', error);\n    }\n  };\n\n  const handleResumeTimer = async () => {\n    try {\n      await resumeTimer();\n    } catch (error) {\n      console.error('Failed to resume timer:', error);\n    }\n  };\n\n  const handleImagesChange = (images: File[], previewUrls: string[]) => {\n    setSelectedImages(images);\n    setImagePreviewUrls(previewUrls);\n  };\n\n  // Helper to format Date to time input value (HH:MM)\n  const formatTimeForInput = (date: Date): string => {\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    return `${hours}:${minutes}`;\n  };\n\n  // Handle start time change\n  const handleStartTimeChange = (timeString: string) => {\n    const parts = timeString.split(':');\n    if (parts.length !== 2) return;\n\n    const hours = Number(parts[0]);\n    const minutes = Number(parts[1]);\n\n    // Validate the parsed values are valid numbers\n    if (isNaN(hours) || isNaN(minutes)) return;\n    if (hours < 0 || hours > 23 || minutes < 0 || minutes > 59) return;\n\n    const newStartTime = new Date(startTime);\n    newStartTime.setHours(hours, minutes, 0, 0);\n\n    setStartTime(newStartTime);\n    // Duration stays the same, we're just shifting when it started\n  };\n\n  // Handle duration slider change\n  const handleDurationSliderChange = (value: number | number[]) => {\n    // Extract numeric value from slider (handle both single value and array)\n    const val = typeof value === 'number' ? value : (value[0] ?? 0);\n    const max = getElapsedTime();\n\n    // Validate we have valid numeric values\n    if (isNaN(val) || isNaN(max)) return;\n\n    // Allow snapping to max even if not divisible by 900\n    const newDuration = val >= max - 450 ? max : val;\n    setAdjustedDuration(newDuration);\n    // Start time stays the same\n  };\n\n  const handleFinishTimer = async () => {\n    try {\n      // Validate required fields\n      if (!sessionTitle.trim()) {\n        alert('Please enter a session title');\n        return;\n      }\n\n      // Validate activity selection\n      if (!selectedActivityId && !timerState.currentProject) {\n        alert('Please select an activity before saving');\n        setShowActivityPicker(true);\n        return;\n      }\n\n      // Upload images first if any\n      let imageUrls: string[] = [];\n      if (selectedImages.length > 0) {\n        setIsUploadingImages(true);\n        try {\n          const uploadResults = await uploadImages(selectedImages);\n          imageUrls = uploadResults.map(result => result.url);\n        } catch (error) {\n          console.error('Failed to upload images:', error);\n          alert(\n            'Failed to upload images. Session will be saved without images.'\n          );\n        } finally {\n          setIsUploadingImages(false);\n        }\n      }\n\n      // Finish the timer and create session\n      await finishTimer(\n        sessionTitle,\n        sessionDescription,\n        undefined, // tags\n        howFelt,\n        privateNotes,\n        {\n          visibility,\n          showStartTime: false,\n          publishToFeeds: true,\n          customDuration: adjustedDuration,\n          images: imageUrls,\n        }\n      );\n\n      // Reset modal and form state\n      setShowFinishModal(false);\n      setSessionTitle('');\n      setSessionDescription('');\n      setPrivateNotes('');\n      setHowFelt(3);\n      setSelectedImages([]);\n      setImagePreviewUrls([]);\n\n      // Wait a moment to ensure state is cleared, then navigate\n      await new Promise(resolve => setTimeout(resolve, 100));\n\n      // Navigate to home feed with refresh parameter to trigger immediate refresh\n      window.location.href = '/?refresh=true';\n    } catch (error) {\n      console.error('Failed to finish timer:', error);\n      const errorMessage =\n        error instanceof Error\n          ? error.message\n          : 'Failed to save session. Please try again.';\n      alert(errorMessage);\n    }\n  };\n\n  const handleCancelTimer = async () => {\n    try {\n      await resetTimer();\n      setShowFinishModal(false);\n      setShowCancelConfirm(false);\n      // Reset all state\n      setSessionTitle('');\n      setSessionDescription('');\n      setPrivateNotes('');\n      setHowFelt(3);\n      setSelectedImages([]);\n      setImagePreviewUrls([]);\n      // Route to feed page\n      window.location.href = '/';\n    } catch (error) {\n      console.error('Failed to cancel timer:', error);\n      alert('Failed to cancel session. Please try again.');\n    }\n  };\n\n  // Define selectedActivity before any early returns so it's available in all code paths\n  const selectedActivity =\n    allActivities.find(a => a.id === selectedActivityId) ||\n    timerState.currentProject;\n  const needsActivity =\n    allActivities.length === 0 && !timerState.currentProject;\n\n  // When completing a session, show ONLY the completion UI\n  if (showFinishModal) {\n    return (\n      <>\n        <div className=\"min-h-screen bg-white\">\n          <div className=\"max-w-2xl mx-auto h-full\">\n            <div className=\"p-4 sm:p-6 w-full min-h-screen\">\n              {/* Header with Resume and Save Session title */}\n              <div className=\"flex justify-between items-center mb-6\">\n                <button\n                  onClick={() => setShowFinishModal(false)}\n                  className=\"text-[#007AFF] hover:text-[#0051D5] font-semibold text-base\"\n                >\n                  Resume\n                </button>\n                <h3 className=\"text-base font-semibold text-gray-900\">\n                  Save Session\n                </h3>\n                <div className=\"w-16\"></div> {/* Spacer for centering */}\n              </div>\n              {/* Reuse existing completion UI from below */}\n              <div className=\"space-y-3 sm:space-y-4\">\n                {/* Session Title */}\n                <input\n                  type=\"text\"\n                  value={sessionTitle}\n                  onChange={e => setSessionTitle(e.target.value)}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] text-base\"\n                  placeholder=\"Afternoon Work Session\"\n                />\n\n                {/* Description */}\n                <textarea\n                  value={sessionDescription}\n                  onChange={e => setSessionDescription(e.target.value)}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] text-base\"\n                  rows={3}\n                  placeholder=\"How'd it go? Share more about your session.\"\n                />\n\n                {/* Activity Selection */}\n                <div className=\"relative\">\n                  <button\n                    onClick={() => setShowActivityPicker(!showActivityPicker)}\n                    className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] bg-white cursor-pointer text-base flex items-center gap-3 hover:border-gray-400 transition-colors min-h-[44px]\"\n                  >\n                    {selectedActivity ? (\n                      <>\n                        <IconRenderer\n                          iconName={selectedActivity.icon}\n                          className=\"w-5 h-5 flex-shrink-0\"\n                          style={{ color: selectedActivity.color }}\n                        />\n                        <span className=\"flex-1 text-left\">\n                          {selectedActivity.name}\n                        </span>\n                      </>\n                    ) : (\n                      <span className=\"flex-1 text-left text-gray-500\">\n                        Select an activity\n                      </span>\n                    )}\n                    <ChevronDown className=\"w-4 h-4 text-gray-400 flex-shrink-0\" />\n                  </button>\n\n                  {/* Dropdown Menu */}\n                  {showActivityPicker && (\n                    <>\n                      {/* Backdrop for closing */}\n                      <div\n                        className=\"fixed inset-0 z-10\"\n                        onClick={() => setShowActivityPicker(false)}\n                      />\n\n                      {/* Dropdown content */}\n                      <div className=\"absolute top-full left-0 right-0 mt-1 bg-white border border-gray-300 rounded-lg shadow-lg z-20 max-h-60 overflow-y-auto\">\n                        {allActivities.length === 0 ? (\n                          <div className=\"p-4 text-center\">\n                            <p className=\"text-sm text-gray-600 mb-3\">\n                              No activities yet\n                            </p>\n                            <Link\n                              href=\"/activities/new\"\n                              className=\"inline-flex items-center gap-2 px-4 py-2 bg-[#007AFF] text-white rounded-lg hover:bg-[#0051D5] transition-colors text-sm font-medium\"\n                            >\n                              <svg\n                                className=\"w-4 h-4\"\n                                fill=\"none\"\n                                stroke=\"currentColor\"\n                                viewBox=\"0 0 24 24\"\n                              >\n                                <path\n                                  strokeLinecap=\"round\"\n                                  strokeLinejoin=\"round\"\n                                  strokeWidth={2}\n                                  d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\n                                />\n                              </svg>\n                              Create Activity\n                            </Link>\n                          </div>\n                        ) : (\n                          <>\n                            {allActivities.map(activity => (\n                              <button\n                                key={activity.id}\n                                onClick={() => {\n                                  setSelectedActivityId(activity.id);\n                                  setShowActivityPicker(false);\n                                }}\n                                className={`w-full flex items-center gap-3 p-3 hover:bg-gray-50 transition-colors ${\n                                  selectedActivityId === activity.id\n                                    ? 'bg-blue-50'\n                                    : ''\n                                }`}\n                              >\n                                <div\n                                  className=\"w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0\"\n                                  style={{\n                                    backgroundColor: `${activity.color}20`,\n                                  }}\n                                >\n                                  <IconRenderer\n                                    iconName={activity.icon}\n                                    className=\"w-4 h-4\"\n                                    style={{ color: activity.color }}\n                                  />\n                                </div>\n                                <div className=\"flex-1 text-left min-w-0\">\n                                  <div className=\"text-sm font-medium text-gray-900\">\n                                    {activity.name}\n                                  </div>\n                                </div>\n                                {selectedActivityId === activity.id && (\n                                  <Check className=\"w-4 h-4 text-blue-500 flex-shrink-0\" />\n                                )}\n                              </button>\n                            ))}\n                            <Link\n                              href=\"/activities/new\"\n                              className=\"w-full flex items-center gap-3 p-3 border-t border-gray-200 hover:bg-gray-50 transition-colors text-gray-900 font-medium\"\n                            >\n                              <div className=\"w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0 bg-blue-100\">\n                                <svg\n                                  className=\"w-4 h-4 text-[#007AFF]\"\n                                  fill=\"none\"\n                                  stroke=\"currentColor\"\n                                  viewBox=\"0 0 24 24\"\n                                >\n                                  <path\n                                    strokeLinecap=\"round\"\n                                    strokeLinejoin=\"round\"\n                                    strokeWidth={2}\n                                    d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\n                                  />\n                                </svg>\n                              </div>\n                              <span className=\"text-sm\">\n                                Create New Activity\n                              </span>\n                            </Link>\n                          </>\n                        )}\n                      </div>\n                    </>\n                  )}\n                </div>\n\n                {/* Image Upload */}\n                <div className=\"max-w-md\">\n                  <ImageUpload\n                    maxImages={3}\n                    maxSizeMB={5}\n                    images={selectedImages}\n                    previewUrls={imagePreviewUrls}\n                    onImagesChange={handleImagesChange}\n                    uploadMode=\"deferred\"\n                    showProgress={false}\n                  />\n                </div>\n\n                {/* Duration Adjuster */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n                    Adjust Duration\n                  </label>\n                  <div className=\"space-y-3\">\n                    {/* Start Time Input */}\n                    <div>\n                      <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                        Start Time\n                      </label>\n                      <input\n                        type=\"time\"\n                        value={formatTimeForInput(startTime)}\n                        onChange={e => handleStartTimeChange(e.target.value)}\n                        className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] text-sm\"\n                      />\n                    </div>\n\n                    <div className=\"py-2 px-1\">\n                      <Slider\n                        min={0}\n                        max={getElapsedTime()}\n                        step={900}\n                        value={adjustedDuration}\n                        onChange={handleDurationSliderChange}\n                        trackStyle={{ backgroundColor: '#007AFF', height: 6 }}\n                        railStyle={{ backgroundColor: '#E5E7EB', height: 6 }}\n                        handleStyle={{\n                          backgroundColor: 'white',\n                          border: '3px solid #007AFF',\n                          width: 20,\n                          height: 20,\n                          marginTop: -7,\n                          boxShadow: '0 2px 8px rgba(0, 122, 255, 0.3)',\n                          opacity: 1,\n                        }}\n                      />\n                    </div>\n                    <div className=\"flex justify-between text-sm text-gray-600 px-1\">\n                      <span>0m</span>\n                      <span className=\"font-semibold text-base text-gray-900\">\n                        {getFormattedTime(adjustedDuration)}\n                      </span>\n                      <span>{getFormattedTime(getElapsedTime())}</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Visibility */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Visibility\n                  </label>\n                  <select\n                    value={visibility}\n                    onChange={e => setVisibility(e.target.value as any)}\n                    className=\"w-full pl-3 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] appearance-none bg-white min-h-[44px]\"\n                    style={{\n                      backgroundImage:\n                        \"url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='%23666' d='M6 9L1 4h10z'/%3E%3C/svg%3E\\\")\",\n                      backgroundRepeat: 'no-repeat',\n                      backgroundPosition: 'right 0.75rem center',\n                    }}\n                  >\n                    <option value=\"everyone\">Everyone</option>\n                    <option value=\"followers\">Followers</option>\n                    <option value=\"private\">Only You</option>\n                  </select>\n                </div>\n\n                {/* Discard Session Link */}\n                <div className=\"pt-2 pb-1 text-center\">\n                  <button\n                    onClick={() => setShowCancelConfirm(true)}\n                    className=\"text-red-600 hover:text-red-700 text-base font-medium\"\n                  >\n                    Discard Session\n                  </button>\n                </div>\n\n                {/* Save Session Button */}\n                <button\n                  onClick={handleFinishTimer}\n                  disabled={!sessionTitle.trim() || isUploadingImages}\n                  className=\"w-full px-4 py-3 bg-[#007AFF] text-white rounded-lg hover:bg-[#0051D5] transition-colors disabled:opacity-50 disabled:cursor-not-allowed font-semibold text-base\"\n                >\n                  {isUploadingImages ? 'Uploading...' : 'Save Session'}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Cancel Confirmation Modal - Portal-style overlay */}\n        {showCancelConfirm && (\n          <div className=\"fixed inset-0 bg-black/50 z-[9999] flex items-center justify-center p-4\">\n            <div className=\"bg-white rounded-2xl p-6 max-w-sm w-full shadow-2xl\">\n              <h3 className=\"text-xl font-bold text-gray-900 mb-3\">\n                Discard Session?\n              </h3>\n              <p className=\"text-gray-600 mb-6\">\n                Are you sure you want to discard this session? All progress will\n                be lost.\n              </p>\n              <div className=\"flex gap-3\">\n                <button\n                  onClick={() => setShowCancelConfirm(false)}\n                  className=\"flex-1 px-4 py-3 bg-gray-200 text-gray-700 rounded-xl hover:bg-gray-300 transition-colors font-medium\"\n                >\n                  Keep Session\n                </button>\n                <button\n                  onClick={handleCancelTimer}\n                  className=\"flex-1 px-4 py-3 bg-red-600 text-white rounded-xl hover:bg-red-700 transition-colors font-medium\"\n                >\n                  Discard\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </>\n    );\n  }\n\n  // Main timer UI - only show when not completing a session\n  return (\n    <div className=\"min-h-screen bg-white flex items-start justify-center pt-20\">\n      {/* Back Button - Top Left (Mobile Only) */}\n      <Link\n        href=\"/\"\n        className=\"md:hidden fixed top-4 left-4 z-50 flex items-center justify-center w-10 h-10 hover:opacity-70 transition-opacity\"\n        aria-label=\"Go back to home\"\n      >\n        <ArrowLeft className=\"w-6 h-6 text-gray-700\" />\n      </Link>\n\n      {/* Centered Timer Container */}\n      <div className=\"w-full max-w-2xl px-4 flex flex-col items-center space-y-8\">\n        {/* Large Timer Display */}\n        <div className=\"text-center w-full\">\n          <div\n            className=\"text-7xl md:text-8xl lg:text-9xl font-mono font-bold text-gray-900 mb-8 tracking-tight\"\n            aria-label={`Timer: ${Math.floor(displayTime / 3600)} hours, ${Math.floor((displayTime % 3600) / 60)} minutes, ${displayTime % 60} seconds`}\n          >\n            {getFormattedTime(displayTime)}\n          </div>\n\n          {/* Timer Controls */}\n          <div className=\"flex items-center justify-center gap-3 flex-wrap mb-8\">\n            {!timerState.isRunning && !timerState.startTime && (\n              <>\n                <button\n                  onClick={handleStartTimer}\n                  disabled={\n                    !selectedActivityId ||\n                    !allActivities.find(a => a.id === selectedActivityId)\n                  }\n                  className={`inline-flex items-center justify-center gap-3 px-10 py-4 rounded-xl text-lg font-semibold transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed touch-manipulation ${\n                    selectedActivityId &&\n                    allActivities.find(a => a.id === selectedActivityId)\n                      ? 'bg-[#007AFF] hover:bg-[#0051D5] text-white focus-visible:ring-[#007AFF]'\n                      : 'bg-gray-200 text-gray-400 cursor-not-allowed'\n                  }`}\n                >\n                  <Play className=\"w-6 h-6\" />\n                  <span>Start</span>\n                </button>\n\n                <Link\n                  href=\"/record-manual\"\n                  className=\"inline-flex items-center justify-center gap-2 px-8 py-4 rounded-xl bg-white border-2 border-gray-300 text-gray-700 hover:bg-gray-50 transition-colors text-lg font-semibold focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-300 focus-visible:ring-offset-2 touch-manipulation\"\n                >\n                  <Edit3 className=\"w-5 h-5\" />\n                  <span>Manual</span>\n                </Link>\n\n                <button\n                  onClick={() => setShowTimePickerModal(true)}\n                  className=\"inline-flex items-center justify-center gap-2 px-8 py-4 rounded-xl bg-white border-2 border-gray-300 text-gray-700 hover:bg-gray-50 transition-colors text-lg font-semibold focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-300 focus-visible:ring-offset-2 touch-manipulation\"\n                >\n                  <svg\n                    className=\"w-5 h-5\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\"\n                    />\n                  </svg>\n                  <span>\n                    {customStartTime\n                      ? `From ${Math.floor(\n                          (new Date().getTime() - customStartTime.getTime()) /\n                            1000 /\n                            60 /\n                            60\n                        )}h ${Math.floor(\n                          ((new Date().getTime() - customStartTime.getTime()) /\n                            1000 /\n                            60) %\n                            60\n                        )}m ago`\n                      : 'Start From'}\n                  </span>\n                </button>\n              </>\n            )}\n\n            {timerState.isRunning && (\n              <button\n                onClick={handlePauseTimer}\n                className=\"px-10 py-4 rounded-xl bg-gray-900 hover:bg-gray-800 text-white flex items-center gap-3 transition-all text-lg font-semibold\"\n              >\n                <Pause className=\"w-6 h-6\" />\n                <span>Pause</span>\n              </button>\n            )}\n\n            {!timerState.isRunning && timerState.startTime && (\n              <>\n                <button\n                  onClick={handleResumeTimer}\n                  className=\"px-10 py-4 rounded-xl bg-[#007AFF] hover:bg-[#0051D5] text-white flex items-center gap-3 transition-all text-lg font-semibold\"\n                >\n                  <Play className=\"w-6 h-6\" />\n                  <span>Resume</span>\n                </button>\n                <button\n                  onClick={() => setShowFinishModal(true)}\n                  className=\"px-10 py-4 rounded-xl bg-[#34C759] hover:bg-[#2FB84D] text-white flex items-center gap-3 transition-all text-lg font-semibold\"\n                >\n                  <Flag className=\"w-6 h-6\" />\n                  <span>Finish</span>\n                </button>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Activity Dropdown */}\n        <div className=\"w-full max-w-xl relative\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Activity{' '}\n            {showActivityError && (\n              <span className=\"text-red-600 ml-1\">\n                - Please select an activity\n              </span>\n            )}\n          </label>\n          <button\n            onClick={() => setShowActivityPicker(!showActivityPicker)}\n            className={`w-full px-4 py-3 border rounded-lg focus:ring-2 bg-white cursor-pointer text-base flex items-center gap-3 transition-colors ${\n              showActivityError\n                ? 'border-red-500 ring-2 ring-red-200 focus:ring-red-500 focus:border-red-500'\n                : 'border-gray-300 focus:ring-[#007AFF] focus:border-[#007AFF] hover:border-gray-400'\n            }`}\n          >\n            {selectedActivity ? (\n              <>\n                <IconRenderer\n                  iconName={selectedActivity.icon}\n                  className=\"w-6 h-6 flex-shrink-0\"\n                  style={{ color: selectedActivity.color }}\n                />\n                <span className=\"flex-1 text-left font-medium\">\n                  {selectedActivity.name}\n                </span>\n              </>\n            ) : (\n              <span className=\"flex-1 text-left text-gray-500\">\n                Select an activity\n              </span>\n            )}\n            <ChevronDown className=\"w-5 h-5 text-gray-400 flex-shrink-0\" />\n          </button>\n\n          {/* Dropdown Menu */}\n          {showActivityPicker && (\n            <>\n              {/* Backdrop for closing */}\n              <div\n                className=\"fixed inset-0 z-10\"\n                onClick={() => setShowActivityPicker(false)}\n              />\n\n              {/* Dropdown content */}\n              <div className=\"absolute top-full left-0 right-0 mt-1 bg-white border border-gray-300 rounded-lg shadow-lg z-20 max-h-80 overflow-y-auto\">\n                {allActivities.length === 0 ? (\n                  <div className=\"p-4 text-center\">\n                    <p className=\"text-sm text-gray-600 mb-3\">\n                      No activities yet\n                    </p>\n                    <Link\n                      href=\"/activities/new\"\n                      className=\"inline-flex items-center gap-2 px-4 py-2 bg-[#007AFF] text-white rounded-lg hover:bg-[#0051D5] transition-colors text-sm font-medium\"\n                    >\n                      <svg\n                        className=\"w-4 h-4\"\n                        fill=\"none\"\n                        stroke=\"currentColor\"\n                        viewBox=\"0 0 24 24\"\n                      >\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth={2}\n                          d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\n                        />\n                      </svg>\n                      Create Activity\n                    </Link>\n                  </div>\n                ) : (\n                  <>\n                    {allActivities.map(activity => (\n                      <button\n                        key={activity.id}\n                        onClick={() => {\n                          setSelectedActivityId(activity.id);\n                          setShowActivityPicker(false);\n                          setShowActivityError(false);\n                        }}\n                        className={`w-full flex items-center gap-3 p-3 hover:bg-gray-50 transition-colors ${\n                          selectedActivityId === activity.id ? 'bg-blue-50' : ''\n                        }`}\n                      >\n                        <div\n                          className=\"w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0\"\n                          style={{ backgroundColor: `${activity.color}20` }}\n                        >\n                          <IconRenderer\n                            iconName={activity.icon}\n                            className=\"w-4 h-4\"\n                            style={{ color: activity.color }}\n                          />\n                        </div>\n                        <div className=\"flex-1 text-left min-w-0\">\n                          <div className=\"text-sm font-medium text-gray-900\">\n                            {activity.name}\n                          </div>\n                        </div>\n                        {selectedActivityId === activity.id && (\n                          <Check className=\"w-4 h-4 text-blue-500 flex-shrink-0\" />\n                        )}\n                      </button>\n                    ))}\n                    <Link\n                      href=\"/activities/new\"\n                      className=\"w-full flex items-center gap-3 p-3 border-t border-gray-200 hover:bg-gray-50 transition-colors text-gray-900 font-medium\"\n                    >\n                      <div className=\"w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0 bg-blue-100\">\n                        <svg\n                          className=\"w-4 h-4 text-[#007AFF]\"\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth={2}\n                            d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\n                          />\n                        </svg>\n                      </div>\n                      <span className=\"text-sm\">Create New Activity</span>\n                    </Link>\n                  </>\n                )}\n              </div>\n            </>\n          )}\n        </div>\n\n        {/* No Activities Message - Minimalist design below activity selector */}\n        {needsActivity && (\n          <div className=\"w-full max-w-xl border border-gray-300 rounded-lg p-6 bg-white\">\n            <h3 className=\"text-base font-semibold text-gray-900 mb-2\">\n              Create your first activity to get started\n            </h3>\n            <p className=\"text-sm text-gray-600 mb-4\">\n              Activities help you organize your work sessions. You'll need at\n              least one activity before you can start tracking time.\n            </p>\n            <Link\n              href=\"/activities/new\"\n              className=\"inline-flex items-center justify-center gap-2 w-full px-4 py-2.5 bg-[#007AFF] text-white rounded-lg hover:bg-[#0051D5] transition-colors text-sm font-medium\"\n            >\n              <svg\n                className=\"w-4 h-4\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\n                />\n              </svg>\n              Create Activity\n            </Link>\n          </div>\n        )}\n      </div>\n\n      {/* Time Picker Modal */}\n      {showTimePickerModal && (\n        <div className=\"fixed inset-0 bg-black/50 z-[9999] flex items-center justify-center p-4\">\n          <div className=\"bg-white rounded-2xl p-6 max-w-md w-full shadow-2xl\">\n            <h3 className=\"text-xl font-bold text-gray-900 mb-4\">\n              Start From Past Time\n            </h3>\n            <p className=\"text-sm text-gray-600 mb-4\">\n              Set when you actually started working. Your session will begin\n              from that time.\n            </p>\n\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Start Time\n                </label>\n                <input\n                  type=\"datetime-local\"\n                  value={\n                    customStartTime\n                      ? new Date(\n                          customStartTime.getTime() -\n                            customStartTime.getTimezoneOffset() * 60000\n                        )\n                          .toISOString()\n                          .slice(0, 16)\n                      : new Date(\n                          new Date().getTime() -\n                            new Date().getTimezoneOffset() * 60000\n                        )\n                          .toISOString()\n                          .slice(0, 16)\n                  }\n                  onChange={e => {\n                    if (e.target.value) {\n                      setCustomStartTime(new Date(e.target.value));\n                    } else {\n                      setCustomStartTime(null);\n                    }\n                  }}\n                  max={new Date(\n                    new Date().getTime() -\n                      new Date().getTimezoneOffset() * 60000\n                  )\n                    .toISOString()\n                    .slice(0, 16)}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] text-base\"\n                />\n              </div>\n\n              {customStartTime && (\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n                  <p className=\"text-sm text-blue-900\">\n                    <strong>Duration:</strong>{' '}\n                    {Math.floor(\n                      (new Date().getTime() - customStartTime.getTime()) /\n                        1000 /\n                        60 /\n                        60\n                    )}\n                    h{' '}\n                    {Math.floor(\n                      ((new Date().getTime() - customStartTime.getTime()) /\n                        1000 /\n                        60) %\n                        60\n                    )}\n                    m\n                  </p>\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex gap-3 mt-6\">\n              <button\n                onClick={() => {\n                  setCustomStartTime(null);\n                  setShowTimePickerModal(false);\n                }}\n                className=\"flex-1 px-4 py-3 bg-gray-200 text-gray-700 rounded-xl hover:bg-gray-300 transition-colors font-medium\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={() => setShowTimePickerModal(false)}\n                className=\"flex-1 px-4 py-3 bg-[#007AFF] text-white rounded-xl hover:bg-[#0051D5] transition-colors font-medium\"\n              >\n                Done\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ShareSessionImage.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/Sidebar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SidebarActivityGraph.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'LineChart' is defined but never used.",
        "line": 6,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 12
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadSessions'. Either include it or remove the dependency array.",
        "line": 37,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 37,
        "endColumn": 12,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadSessions, user]",
            "fix": { "range": [894, 900], "text": "[loadSessions, user]" }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'processChartData'. Either include it or remove the dependency array.",
        "line": 41,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 41,
        "endColumn": 28,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [processChartData, sessions, timePeriod]",
            "fix": {
              "range": [953, 975],
              "text": "[processChartData, sessions, timePeriod]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 212,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 212,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6816, 6819], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6816, 6819], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { ChevronDown } from 'lucide-react';\nimport {\n  LineChart,\n  Line,\n  ResponsiveContainer,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Area,\n  ComposedChart,\n} from 'recharts';\nimport { useAuth } from '@/hooks/useAuth';\nimport { firebaseSessionApi } from '@/lib/api';\nimport { Session } from '@/types';\n\ntype TimePeriod = 'week' | 'month';\n\ninterface ChartDataPoint {\n  name: string;\n  hours: number;\n  isToday?: boolean;\n}\n\nfunction SidebarActivityGraph() {\n  const { user } = useAuth();\n  const [timePeriod, setTimePeriod] = useState<TimePeriod>('week');\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [sessions, setSessions] = useState<Session[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>([]);\n\n  useEffect(() => {\n    loadSessions();\n  }, [user]);\n\n  useEffect(() => {\n    processChartData();\n  }, [sessions, timePeriod]);\n\n  const loadSessions = async () => {\n    if (!user) {\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      const response = await firebaseSessionApi.getSessions(1, 500, {});\n      setSessions(response.sessions);\n    } catch (error) {\n      console.error('Failed to load sessions:', error);\n      setSessions([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const processChartData = () => {\n    const now = new Date();\n    const data: ChartDataPoint[] = [];\n\n    if (timePeriod === 'week') {\n      // Last 7 days\n      const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n      for (let i = 6; i >= 0; i--) {\n        const day = new Date(now);\n        day.setDate(day.getDate() - i);\n        day.setHours(0, 0, 0, 0);\n\n        const hoursWorked =\n          sessions.length > 0\n            ? sessions\n                .filter(s => {\n                  const sessionDate = new Date(s.createdAt);\n                  sessionDate.setHours(0, 0, 0, 0);\n                  return sessionDate.getTime() === day.getTime();\n                })\n                .reduce((sum, s) => sum + s.duration / 3600, 0)\n            : 0;\n\n        data.push({\n          name: dayNames[day.getDay()] || '',\n          hours: Number(hoursWorked.toFixed(1)),\n          isToday: i === 0,\n        });\n      }\n    } else if (timePeriod === 'month') {\n      // Last 4 weeks\n      for (let i = 3; i >= 0; i--) {\n        const weekStart = new Date(now);\n        weekStart.setDate(weekStart.getDate() - (i * 7 + 6));\n        weekStart.setHours(0, 0, 0, 0);\n        const weekEnd = new Date(now);\n        weekEnd.setDate(weekEnd.getDate() - i * 7);\n        weekEnd.setHours(23, 59, 59, 999);\n\n        const hoursWorked =\n          sessions.length > 0\n            ? sessions\n                .filter(s => {\n                  const sessionDate = new Date(s.createdAt);\n                  return sessionDate >= weekStart && sessionDate <= weekEnd;\n                })\n                .reduce((sum, s) => sum + s.duration / 3600, 0)\n            : 0;\n\n        data.push({\n          name: `W${4 - i}`,\n          hours: Number(hoursWorked.toFixed(1)),\n          isToday: i === 0,\n        });\n      }\n    }\n\n    setChartData(data);\n  };\n\n  return (\n    <div className=\"p-6\">\n      {/* Header with dropdown */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-xl font-bold text-gray-900\">\n          {timePeriod === 'week' ? 'This Week' : 'This Month'}\n        </h3>\n        <div className=\"relative\">\n          <button\n            onClick={() => setShowDropdown(!showDropdown)}\n            className=\"flex items-center gap-1.5 px-3 py-1.5 text-sm font-medium text-gray-700 bg-white rounded-lg hover:bg-gray-100 transition-colors border border-gray-200\"\n          >\n            {timePeriod === 'week' ? 'Week' : 'Month'}\n            <ChevronDown\n              className={`w-4 h-4 transition-transform ${showDropdown ? 'rotate-180' : ''}`}\n            />\n          </button>\n          {showDropdown && (\n            <div className=\"absolute right-0 mt-2 w-28 bg-white rounded-xl shadow-lg border border-gray-200 py-1 z-50\">\n              <button\n                onClick={() => {\n                  setTimePeriod('week');\n                  setShowDropdown(false);\n                }}\n                className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 transition-colors ${\n                  timePeriod === 'week'\n                    ? 'text-[#007AFF] font-semibold bg-blue-50'\n                    : 'text-gray-700'\n                }`}\n              >\n                Week\n              </button>\n              <button\n                onClick={() => {\n                  setTimePeriod('month');\n                  setShowDropdown(false);\n                }}\n                className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 transition-colors ${\n                  timePeriod === 'month'\n                    ? 'text-[#007AFF] font-semibold bg-blue-50'\n                    : 'text-gray-700'\n                }`}\n              >\n                Month\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Chart */}\n      {isLoading ? (\n        <div className=\"h-52 bg-gradient-to-br from-gray-50 to-gray-100 rounded-xl animate-pulse\"></div>\n      ) : (\n        <div className=\"h-52\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <ComposedChart\n              data={chartData}\n              margin={{ top: 10, right: 10, left: -10, bottom: 5 }}\n            >\n              <defs>\n                <linearGradient id=\"colorHours\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"#007AFF\" stopOpacity={0.1} />\n                  <stop offset=\"95%\" stopColor=\"#007AFF\" stopOpacity={0} />\n                </linearGradient>\n              </defs>\n              <XAxis\n                dataKey=\"name\"\n                tick={{ fontSize: 12, fill: '#6b7280', fontWeight: 500 }}\n                axisLine={false}\n                tickLine={false}\n                dy={8}\n              />\n              <YAxis\n                tick={{ fontSize: 12, fill: '#9ca3af' }}\n                axisLine={false}\n                tickLine={false}\n                width={35}\n                domain={[0, 'dataMax + 0.5']}\n                tickFormatter={value => value.toFixed(1)}\n              />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: 'rgba(0, 0, 0, 0.8)',\n                  border: 'none',\n                  borderRadius: '8px',\n                  padding: '8px 12px',\n                  fontSize: '12px',\n                  color: 'white',\n                }}\n                labelStyle={{ color: 'white', marginBottom: '4px' }}\n                formatter={(value: any) => [`${value.toFixed(1)} hrs`, 'Time']}\n                cursor={{\n                  stroke: '#e5e7eb',\n                  strokeWidth: 1,\n                  strokeDasharray: '3 3',\n                }}\n              />\n              <Area\n                type=\"monotone\"\n                dataKey=\"hours\"\n                stroke=\"none\"\n                fill=\"url(#colorHours)\"\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"hours\"\n                stroke=\"#007AFF\"\n                strokeWidth={3}\n                dot={false}\n                activeDot={{\n                  r: 8,\n                  fill: '#007AFF',\n                  stroke: 'white',\n                  strokeWidth: 3,\n                }}\n              />\n            </ComposedChart>\n          </ResponsiveContainer>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SidebarActivityGraph;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SignupForm.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 163,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 163,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5089, 5092], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5089, 5092], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '@/hooks/useAuth';\nimport { SignupCredentials } from '@/types';\nimport { firebaseAuthApi } from '@/lib/api';\n\nexport const SignupForm: React.FC = () => {\n  const [formData, setFormData] = useState<SignupCredentials>({\n    email: '',\n    password: '',\n    name: '',\n    username: '',\n  });\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [errors, setErrors] = useState<Partial<SignupCredentials & { confirmPassword: string }>>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submitError, setSubmitError] = useState<string>('');\n  const [isCheckingUsername, setIsCheckingUsername] = useState(false);\n  const [usernameAvailable, setUsernameAvailable] = useState<boolean | null>(null);\n\n  const { signup } = useAuth();\n  const router = useRouter();\n\n  // Real-time username availability check with debounce\n  useEffect(() => {\n    const checkUsername = async () => {\n      const username = formData.username.trim();\n\n      // Only check if username meets minimum requirements\n      if (username.length < 3) {\n        setUsernameAvailable(null);\n        return;\n      }\n\n      // Validate username format\n      if (!/^[a-zA-Z0-9_]+$/.test(username)) {\n        setUsernameAvailable(null);\n        return;\n      }\n\n      setIsCheckingUsername(true);\n      try {\n        const isAvailable = await firebaseAuthApi.checkUsernameAvailability(username);\n        setUsernameAvailable(isAvailable);\n      } catch (error) {\n        console.error('Error checking username:', error);\n        setUsernameAvailable(null);\n      } finally {\n        setIsCheckingUsername(false);\n      }\n    };\n\n    // Debounce: wait 1000ms after user stops typing\n    const timeoutId = setTimeout(checkUsername, 1000);\n    return () => clearTimeout(timeoutId);\n  }, [formData.username]);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    if (name === 'confirmPassword') {\n      setConfirmPassword(value);\n    } else {\n      setFormData(prev => ({ ...prev, [name]: value }));\n    }\n\n    // Reset username availability when username changes\n    if (name === 'username') {\n      setUsernameAvailable(null);\n    }\n\n    // Clear field-specific error when user starts typing\n    if (errors[name as keyof (SignupCredentials & { confirmPassword: string })]) {\n      setErrors(prev => ({ ...prev, [name]: undefined }));\n    }\n\n    // Clear submit error\n    if (submitError) {\n      setSubmitError('');\n    }\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Partial<SignupCredentials & { confirmPassword: string }> = {};\n\n    if (!formData.name.trim()) {\n      newErrors.name = 'Name is required';\n    } else if (formData.name.trim().length < 2) {\n      newErrors.name = 'Name must be at least 2 characters';\n    }\n\n    if (!formData.username.trim()) {\n      newErrors.username = 'Username is required';\n    } else if (formData.username.trim().length < 3) {\n      newErrors.username = 'Username must be at least 3 characters';\n    } else if (!/^[a-zA-Z0-9_]+$/.test(formData.username.trim())) {\n      newErrors.username = 'Username can only contain letters, numbers, and underscores';\n    } else if (usernameAvailable === false) {\n      newErrors.username = 'This username is already taken';\n    }\n\n    if (!formData.email) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = 'Email is invalid';\n    }\n\n    if (!formData.password) {\n      newErrors.password = 'Password is required';\n    } else if (formData.password.length < 6) {\n      newErrors.password = 'Password must be at least 6 characters';\n    }\n\n    if (!confirmPassword) {\n      newErrors.confirmPassword = 'Please confirm your password';\n    } else if (formData.password !== confirmPassword) {\n      newErrors.confirmPassword = 'Passwords do not match';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    setIsSubmitting(true);\n    setSubmitError('');\n\n    try {\n      await signup(formData);\n\n      // Check for invite context in sessionStorage\n      const inviteContextStr = typeof window !== 'undefined'\n        ? sessionStorage.getItem('inviteContext')\n        : null;\n\n      if (inviteContextStr) {\n        try {\n          const inviteContext = JSON.parse(inviteContextStr);\n\n          // Clear the invite context\n          sessionStorage.removeItem('inviteContext');\n\n          // Redirect based on invite type\n          if (inviteContext.type === 'group' && inviteContext.groupId) {\n            router.push(`/invite/group/${inviteContext.groupId}`);\n            return;\n          }\n        } catch (err) {\n          console.error('Error parsing invite context:', err);\n        }\n      }\n\n      // Default redirect to home\n      router.push('/');\n    } catch (error: any) {\n      console.error('Signup error:', error);\n\n      // Handle specific Firebase errors with user-friendly messages\n      if (error.message?.includes('auth/email-already-in-use')) {\n        setSubmitError('This email address is already registered. Please try logging in instead or use a different email.');\n      } else if (error.message?.includes('auth/weak-password')) {\n        setSubmitError('Password is too weak. Please choose a stronger password with at least 6 characters.');\n      } else if (error.message?.includes('auth/invalid-email')) {\n        setSubmitError('Please enter a valid email address.');\n      } else {\n        setSubmitError(error instanceof Error ? error.message : 'Signup failed. Please try again.');\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-8\">\n      {submitError && (\n        <div className=\"bg-destructive/10 border border-destructive/20 text-destructive px-4 py-3 rounded-md\">\n          {submitError}\n        </div>\n      )}\n\n      <div className=\"space-y-5\">\n        <div>\n          <label htmlFor=\"name\" className=\"block text-sm font-medium text-foreground mb-2\">\n            Full Name\n          </label>\n          <input\n            id=\"name\"\n            name=\"name\"\n            type=\"text\"\n            autoComplete=\"name\"\n            value={formData.name}\n            onChange={handleChange}\n            className={`w-full px-4 py-3 border rounded-md shadow-sm placeholder-muted-foreground text-base focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent ${\n              errors.name ? 'border-destructive' : 'border-border'\n            }`}\n            placeholder=\"Enter your full name\"\n          />\n          {errors.name && (\n            <p className=\"mt-2 text-sm text-destructive\">{errors.name}</p>\n          )}\n        </div>\n\n        <div>\n          <label htmlFor=\"username\" className=\"block text-sm font-medium text-foreground mb-2\">\n            Username\n          </label>\n          <div className=\"relative\">\n            <input\n              id=\"username\"\n              name=\"username\"\n              type=\"text\"\n              autoComplete=\"username\"\n              value={formData.username}\n              onChange={handleChange}\n              className={`w-full px-4 py-3 border rounded-md shadow-sm placeholder-muted-foreground text-base focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent ${\n                errors.username\n                  ? 'border-destructive'\n                  : usernameAvailable === true\n                  ? 'border-green-500'\n                  : usernameAvailable === false\n                  ? 'border-destructive'\n                  : 'border-border'\n              }`}\n              placeholder=\"Choose a username\"\n            />\n            {isCheckingUsername && (\n              <div className=\"absolute right-3 top-1/2 -translate-y-1/2\">\n                <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-primary\"></div>\n              </div>\n            )}\n            {!isCheckingUsername && usernameAvailable === true && formData.username.length >= 3 && (\n              <div className=\"absolute right-3 top-1/2 -translate-y-1/2 text-green-500\">\n                <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                </svg>\n              </div>\n            )}\n            {!isCheckingUsername && usernameAvailable === false && formData.username.length >= 3 && (\n              <div className=\"absolute right-3 top-1/2 -translate-y-1/2 text-destructive\">\n                <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n                </svg>\n              </div>\n            )}\n          </div>\n          {errors.username && (\n            <p className=\"mt-2 text-sm text-destructive\">{errors.username}</p>\n          )}\n          {!errors.username && usernameAvailable === true && formData.username.length >= 3 && (\n            <p className=\"mt-2 text-sm text-green-600\">Username is available!</p>\n          )}\n          {!errors.username && usernameAvailable === false && formData.username.length >= 3 && (\n            <p className=\"mt-2 text-sm text-destructive\">This username is already taken</p>\n          )}\n        </div>\n\n        <div>\n          <label htmlFor=\"email\" className=\"block text-sm font-medium text-foreground mb-2\">\n            Email address\n          </label>\n          <input\n            id=\"email\"\n            name=\"email\"\n            type=\"email\"\n            autoComplete=\"email\"\n            value={formData.email}\n            onChange={handleChange}\n            className={`w-full px-4 py-3 border rounded-md shadow-sm placeholder-muted-foreground text-base focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent ${\n              errors.email ? 'border-destructive' : 'border-border'\n            }`}\n            placeholder=\"Enter your email\"\n          />\n          {errors.email && (\n            <p className=\"mt-2 text-sm text-destructive\">{errors.email}</p>\n          )}\n        </div>\n\n        <div>\n          <label htmlFor=\"password\" className=\"block text-sm font-medium text-foreground mb-2\">\n            Password\n          </label>\n          <input\n            id=\"password\"\n            name=\"password\"\n            type=\"password\"\n            autoComplete=\"new-password\"\n            value={formData.password}\n            onChange={handleChange}\n            className={`w-full px-4 py-3 border rounded-md shadow-sm placeholder-muted-foreground text-base focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent ${\n              errors.password ? 'border-destructive' : 'border-border'\n            }`}\n            placeholder=\"Create a password\"\n          />\n          {errors.password && (\n            <p className=\"mt-2 text-sm text-destructive\">{errors.password}</p>\n          )}\n        </div>\n\n        <div>\n          <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-foreground mb-2\">\n            Confirm Password\n          </label>\n          <input\n            id=\"confirmPassword\"\n            name=\"confirmPassword\"\n            type=\"password\"\n            autoComplete=\"new-password\"\n            value={confirmPassword}\n            onChange={handleChange}\n            className={`w-full px-4 py-3 border rounded-md shadow-sm placeholder-muted-foreground text-base focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent ${\n              errors.confirmPassword ? 'border-destructive' : 'border-border'\n            }`}\n            placeholder=\"Confirm your password\"\n          />\n          {errors.confirmPassword && (\n            <p className=\"mt-2 text-sm text-destructive\">{errors.confirmPassword}</p>\n          )}\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        <button\n          type=\"submit\"\n          disabled={isSubmitting}\n          className=\"w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-base font-medium text-primary-foreground bg-primary hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n        >\n          {isSubmitting ? (\n            <div className=\"flex items-center\">\n              <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n              Creating account...\n            </div>\n          ) : (\n            'Create account'\n          )}\n        </button>\n\n        <div className=\"text-center pt-2\">\n          <p className=\"text-sm text-muted-foreground\">\n            Already have an account?{' '}\n            <a\n              href=\"/login\"\n              className=\"font-medium text-primary hover:text-primary/80 transition-colors\"\n            >\n              Sign in\n            </a>\n          </p>\n        </div>\n      </div>\n    </form>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SimpleLayout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/StatsCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/StreakCalendar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/StreakCard.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'daysSince' is assigned a value but never used.",
        "line": 35,
        "column": 17,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 35,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 39,
        "column": 86,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 39,
        "endColumn": 89,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1222, 1225], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1222, 1225], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 48,
        "column": 97,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 48,
        "endColumn": 100,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1617, 1620], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1617, 1620], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'dayNum' is assigned a value but never used.",
        "line": 80,
        "column": 17,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 80,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'hours' is assigned a value but never used.",
        "line": 81,
        "column": 17,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 81,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isComplete' is assigned a value but never used.",
        "line": 82,
        "column": 17,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 82,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'dayName' is assigned a value but never used.",
        "line": 84,
        "column": 17,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 84,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'s' is defined but never used.",
        "line": 87,
        "column": 36,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 87,
        "endColumn": 37
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'i' is defined but never used.",
        "line": 87,
        "column": 39,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 87,
        "endColumn": 40
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useEffect, useState } from 'react';\nimport { Flame } from 'lucide-react';\nimport { firebaseApi } from '@/lib/api';\nimport { StreakStats } from '@/types';\nimport Link from 'next/link';\nimport { WeekStreakCalendar } from './WeekStreakCalendar';\n\ninterface StreakCardProps {\n  userId: string;\n  variant?: 'default' | 'compact';\n  showProgress?: boolean;\n}\n\nexport const StreakCard: React.FC<StreakCardProps> = ({\n  userId,\n  variant = 'default',\n  showProgress = true\n}) => {\n  const [streakStats, setStreakStats] = useState<StreakStats | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const loadStreak = async () => {\n      try {\n\n        const stats = await firebaseApi.streak.getStreakStats(userId);\n\n\n        // Calculate and log time-based info\n        if (stats.lastActivityDate) {\n          const now = new Date();\n          const lastActivity = new Date(stats.lastActivityDate);\n          const daysSince = Math.floor((now.getTime() - lastActivity.getTime()) / (1000 * 60 * 60 * 24));\n        }\n\n        // Fetch last 7 days of sessions for detailed logging\n        const sessionsResponse = await firebaseApi.session.getSessions(1, 100, {} as any);\n\n        // Get date 7 days ago at start of day\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        const sevenDaysAgo = new Date(today);\n        sevenDaysAgo.setDate(today.getDate() - 6); // Include today = 7 days total\n\n        // Create a map of dates to sessions\n        const dateMap = new Map<string, { totalMinutes: number; sessionCount: number; sessions: any[] }>();\n\n        // Initialize all 7 days\n        for (let i = 0; i < 7; i++) {\n          const date = new Date(sevenDaysAgo);\n          date.setDate(sevenDaysAgo.getDate() + i);\n          const dateKey = date.toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' });\n          dateMap.set(dateKey, { totalMinutes: 0, sessionCount: 0, sessions: [] });\n        }\n\n        // Filter sessions from last 7 days and group by date\n        sessionsResponse.sessions.forEach(session => {\n          const sessionDate = new Date(session.startTime);\n          if (sessionDate >= sevenDaysAgo && sessionDate <= new Date()) {\n            const dateKey = sessionDate.toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' });\n            const dayData = dateMap.get(dateKey);\n            if (dayData) {\n              dayData.totalMinutes += session.duration;\n              dayData.sessionCount += 1;\n              dayData.sessions.push(session);\n            }\n          }\n        });\n\n        // Log each day with formatted output\n        const sortedDates = Array.from(dateMap.entries()).sort((a, b) => {\n          const dateA = new Date(a[0]);\n          const dateB = new Date(b[0]);\n          return dateA.getTime() - dateB.getTime();\n        });\n\n        sortedDates.forEach(([dateKey, data], index) => {\n          const dayNum = index + 1;\n          const hours = (data.totalMinutes / 60).toFixed(2);\n          const isComplete = data.totalMinutes > 0;\n          const date = new Date(dateKey);\n          const dayName = date.toLocaleDateString('en-US', { weekday: 'short' });\n\n          if (data.sessions.length > 0) {\n            data.sessions.forEach((s, i) => {\n            });\n          }\n        });\n\n\n        setStreakStats(stats);\n      } catch (error) {\n        console.error('Failed to load streak:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadStreak();\n  }, [userId]);\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-white border border-gray-200 rounded-xl p-4 md:p-6 animate-pulse\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <div className=\"w-10 h-10 bg-gray-200 rounded-full\"></div>\n          <div className=\"flex-1\">\n            <div className=\"h-5 bg-gray-200 rounded w-24 mb-2\"></div>\n            <div className=\"h-3 bg-gray-200 rounded w-16\"></div>\n          </div>\n        </div>\n        <div className=\"h-16 bg-gray-200 rounded\"></div>\n      </div>\n    );\n  }\n\n  if (!streakStats) return null;\n\n  const getFlameColor = () => {\n    // Grey flame when user has a streak but hasn't completed today's session\n    if (streakStats.streakAtRisk && streakStats.currentStreak > 0) return 'text-gray-400';\n    // Milestone-based colors for active streaks\n    if (streakStats.currentStreak >= 100) return 'text-purple-500';\n    if (streakStats.currentStreak >= 30) return 'text-blue-500';\n    if (streakStats.currentStreak >= 7) return 'text-orange-500';\n    // Default orange for new streaks\n    return 'text-orange-400';\n  };\n\n  const getGradientColor = () => {\n    if (streakStats.streakAtRisk && streakStats.currentStreak > 0) return 'from-gray-50 to-gray-100';\n    if (streakStats.currentStreak >= 100) return 'from-purple-50 to-purple-100';\n    if (streakStats.currentStreak >= 30) return 'from-blue-50 to-blue-100';\n    if (streakStats.currentStreak >= 7) return 'from-orange-50 to-orange-100';\n    return 'from-orange-50 to-orange-100';\n  };\n\n  const progressToNextMilestone = streakStats.nextMilestone\n    ? (streakStats.currentStreak / streakStats.nextMilestone) * 100\n    : 0;\n\n  if (variant === 'compact') {\n    return (\n      <Link href=\"/analytics\" className=\"block\">\n        <div className=\"p-3 hover:bg-gray-50 rounded-xl transition-all cursor-pointer\">\n          {/* Header */}\n          <h3 className=\"text-sm font-semibold text-gray-900 mb-3\">Your streak</h3>\n\n          {/* Flame icon and week calendar side by side */}\n          <div className=\"flex items-center gap-3\">\n            {/* Left side - Flame with day count */}\n            <div className=\"flex flex-col items-center flex-shrink-0\">\n              <div className={`${getFlameColor()} relative`}>\n                <Flame className=\"w-10 h-10\" fill=\"currentColor\" />\n              </div>\n              <div className=\"text-sm font-medium text-gray-900 mt-0.5\">\n                {streakStats.currentStreak}\n              </div>\n              <div className=\"text-xs text-gray-500\">\n                Day{streakStats.currentStreak !== 1 ? 's' : ''}\n              </div>\n            </div>\n\n            {/* Right side - Week calendar */}\n            <div className=\"flex-1\">\n              <WeekStreakCalendar userId={userId} />\n            </div>\n          </div>\n        </div>\n      </Link>\n    );\n  }\n\n  return (\n    <div className={`bg-gradient-to-br ${getGradientColor()} border border-gray-200 rounded-xl p-4 md:p-6`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className={`${getFlameColor()} relative`}>\n            <Flame className=\"w-10 h-10\" fill=\"currentColor\" />\n          </div>\n          <div>\n            <h3 className=\"text-lg font-bold text-gray-900\">Streak</h3>\n            <p className=\"text-sm text-gray-600\">Stay consistent</p>\n          </div>\n        </div>\n        <Link\n          href=\"/analytics\"\n          className=\"text-sm text-blue-600 hover:text-blue-700 font-medium\"\n        >\n          View Analytics →\n        </Link>\n      </div>\n\n      {/* Main Stats */}\n      <div className=\"grid grid-cols-3 gap-4 mb-4\">\n        <div className=\"text-center\">\n          <div className=\"text-2xl md:text-3xl font-bold text-gray-900\">\n            {streakStats.currentStreak}\n          </div>\n          <div className=\"text-xs text-gray-600 mt-1\">Current</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-2xl md:text-3xl font-bold text-gray-900\">\n            {streakStats.longestStreak}\n          </div>\n          <div className=\"text-xs text-gray-600 mt-1\">Best</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-2xl md:text-3xl font-bold text-gray-900\">\n            {streakStats.totalStreakDays}\n          </div>\n          <div className=\"text-xs text-gray-600 mt-1\">Total Days</div>\n        </div>\n      </div>\n\n      {/* Progress to Next Milestone */}\n      {showProgress && streakStats.nextMilestone > 0 && (\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-gray-700 font-medium\">\n              Next goal: {streakStats.nextMilestone} days\n            </span>\n            <span className=\"text-gray-600\">\n              {streakStats.nextMilestone - streakStats.currentStreak} to go\n            </span>\n          </div>\n          <div className=\"w-full bg-white/60 rounded-full h-2.5 overflow-hidden\">\n            <div\n              className={`h-full rounded-full transition-all duration-500 ${\n                streakStats.streakAtRisk && streakStats.currentStreak > 0\n                  ? 'bg-gray-400'\n                  : streakStats.currentStreak >= 100\n                  ? 'bg-purple-500'\n                  : streakStats.currentStreak >= 30\n                  ? 'bg-blue-500'\n                  : 'bg-orange-500'\n              }`}\n              style={{ width: `${Math.min(progressToNextMilestone, 100)}%` }}\n            />\n          </div>\n        </div>\n      )}\n\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/StreakDisplay.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/StreakNotification.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/StreakStats.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SuggestedGroupsModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'TOTAL_GROUPS_TO_FETCH' is assigned a value but never used.",
        "line": 16,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 23,
        "column": 64,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 23,
        "endColumn": 67,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [643, 646], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [643, 646], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadGroups'. Either include it or remove the dependency array.",
        "line": 32,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 32,
        "endColumn": 20,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [isOpen, loadGroups, user]",
            "fix": { "range": [917, 931], "text": "[isOpen, loadGroups, user]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { X, Users, ChevronLeft, ChevronRight, MapPin } from 'lucide-react';\nimport Link from 'next/link';\nimport { firebaseApi } from '@/lib/api';\nimport { useAuth } from '@/hooks/useAuth';\nimport GroupAvatar from '@/components/GroupAvatar';\n\ninterface SuggestedGroupsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst GROUPS_PER_PAGE = 10;\nconst TOTAL_GROUPS_TO_FETCH = 100;\n\nexport default function SuggestedGroupsModal({\n  isOpen,\n  onClose,\n}: SuggestedGroupsModalProps) {\n  const { user } = useAuth();\n  const [allSuggestedGroups, setAllSuggestedGroups] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [joiningGroups, setJoiningGroups] = useState<Set<string>>(new Set());\n  const [currentPage, setCurrentPage] = useState(0);\n\n  useEffect(() => {\n    if (isOpen && user) {\n      loadGroups();\n    }\n  }, [isOpen, user]);\n\n  // Handle ESC key to close modal\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape' && isOpen) {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [isOpen, onClose]);\n\n  const loadGroups = async () => {\n    if (!user) return;\n\n    try {\n      setIsLoading(true);\n      setCurrentPage(0);\n\n      // Get user's current groups to exclude them from suggestions\n      const userGroups = await firebaseApi.group.getUserGroups(user.id);\n      const userGroupIds = new Set(userGroups.map(g => g.id));\n\n      // Get all groups and filter out ones user is already in\n      const allGroups = await firebaseApi.group.searchGroups('');\n      const filteredGroups = allGroups.filter(\n        group => !userGroupIds.has(group.id)\n      );\n      setAllSuggestedGroups(filteredGroups);\n    } catch (error) {\n      console.error('Error loading groups:', error);\n      setAllSuggestedGroups([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Calculate paginated groups\n  const totalPages = Math.ceil(allSuggestedGroups.length / GROUPS_PER_PAGE);\n  const startIndex = currentPage * GROUPS_PER_PAGE;\n  const endIndex = startIndex + GROUPS_PER_PAGE;\n  const paginatedGroups = allSuggestedGroups.slice(startIndex, endIndex);\n\n  const goToNextPage = () => {\n    if (currentPage < totalPages - 1) {\n      setCurrentPage(prev => prev + 1);\n    }\n  };\n\n  const goToPreviousPage = () => {\n    if (currentPage > 0) {\n      setCurrentPage(prev => prev - 1);\n    }\n  };\n\n  const handleJoinGroup = async (groupId: string, e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (!user || joiningGroups.has(groupId)) return;\n\n    setJoiningGroups(prev => new Set(prev).add(groupId));\n    try {\n      await firebaseApi.group.joinGroup(groupId, user.id);\n      // Remove from suggestions after joining\n      setAllSuggestedGroups(prev => prev.filter(g => g.id !== groupId));\n    } catch (error) {\n      console.error('Failed to join group:', error);\n    } finally {\n      setJoiningGroups(prev => {\n        const next = new Set(prev);\n        next.delete(groupId);\n        return next;\n      });\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div\n      className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4\"\n      onClick={onClose}\n    >\n      <div\n        className=\"bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[80vh] flex flex-col\"\n        onClick={e => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n          <h2 className=\"text-xl font-bold text-gray-900\">Suggested Groups</h2>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n          >\n            <X className=\"w-5 h-5 text-gray-600\" />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-y-auto\">\n          {isLoading ? (\n            <div className=\"p-12 text-center\">\n              <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-[#007AFF]\"></div>\n              <p className=\"text-gray-600 mt-4\">Loading groups...</p>\n            </div>\n          ) : allSuggestedGroups.length === 0 ? (\n            <div className=\"p-12 text-center\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Users className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                No groups available\n              </h3>\n              <p className=\"text-gray-600\">\n                Check back later for groups to join\n              </p>\n            </div>\n          ) : (\n            <div className=\"divide-y divide-gray-100\">\n              {paginatedGroups.map(group => {\n                const isJoining = joiningGroups.has(group.id);\n                return (\n                  <div\n                    key={group.id}\n                    className=\"p-4 hover:bg-gray-50 transition-colors\"\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      {/* Group Icon */}\n                      <Link href={`/groups/${group.id}`}>\n                        <GroupAvatar\n                          imageUrl={group.imageUrl}\n                          name={group.name}\n                          size=\"md\"\n                        />\n                      </Link>\n\n                      {/* Group Info */}\n                      <div className=\"flex-1 min-w-0\">\n                        <Link href={`/groups/${group.id}`}>\n                          <h3 className=\"font-semibold text-base text-gray-900 truncate hover:text-[#007AFF] transition-colors\">\n                            {group.name}\n                          </h3>\n                        </Link>\n                        <p className=\"text-sm text-gray-600 mt-0.5 line-clamp-2\">\n                          {group.description}\n                        </p>\n\n                        {/* Meta Info */}\n                        <div className=\"flex items-center gap-3 mt-2 text-xs text-gray-500\">\n                          <span className=\"flex items-center gap-1\">\n                            <Users className=\"w-3.5 h-3.5\" />\n                            {group.memberCount || 0}{' '}\n                            {group.memberCount === 1 ? 'member' : 'members'}\n                          </span>\n                          {group.location && (\n                            <span className=\"flex items-center gap-1\">\n                              <MapPin className=\"w-3.5 h-3.5\" />\n                              {group.location}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Join Button */}\n                      <button\n                        onClick={e => handleJoinGroup(group.id, e)}\n                        disabled={isJoining}\n                        className={`text-sm font-semibold transition-colors flex-shrink-0 ${\n                          isJoining\n                            ? 'text-gray-400 cursor-not-allowed'\n                            : 'text-[#007AFF] hover:text-[#0051D5]'\n                        }`}\n                      >\n                        {isJoining ? 'Joining...' : 'Join'}\n                      </button>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n\n        {/* Pagination Controls */}\n        {!isLoading && allSuggestedGroups.length > GROUPS_PER_PAGE && (\n          <div className=\"border-t border-gray-100 px-4 py-3 flex items-center justify-between\">\n            <button\n              onClick={goToPreviousPage}\n              disabled={currentPage === 0}\n              className=\"p-2 rounded-lg hover:bg-gray-100 disabled:opacity-30 disabled:cursor-not-allowed transition-colors\"\n              aria-label=\"Previous page\"\n            >\n              <ChevronLeft className=\"w-5 h-5 text-gray-700\" />\n            </button>\n\n            <span className=\"text-sm text-gray-600 font-medium\">\n              Page {currentPage + 1} of {totalPages}\n            </span>\n\n            <button\n              onClick={goToNextPage}\n              disabled={currentPage >= totalPages - 1}\n              className=\"p-2 rounded-lg hover:bg-gray-100 disabled:opacity-30 disabled:cursor-not-allowed transition-colors\"\n              aria-label=\"Next page\"\n            >\n              <ChevronRight className=\"w-5 h-5 text-gray-700\" />\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SuggestedPeopleModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 19,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 19,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [611, 614], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [611, 614], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { X, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { firebaseUserApi } from '@/lib/api';\nimport { useAuth } from '@/hooks/useAuth';\nimport { UserCardCompact } from '@/components/UserCard';\n\ninterface SuggestedPeopleModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst USERS_PER_PAGE = 10;\nconst TOTAL_USERS_TO_FETCH = 100;\n\nexport default function SuggestedPeopleModal({ isOpen, onClose }: SuggestedPeopleModalProps) {\n  const { user } = useAuth();\n  const [allSuggestedUsers, setAllSuggestedUsers] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(0);\n\n  const loadUsers = useCallback(async () => {\n    if (!user) return;\n\n    try {\n      setIsLoading(true);\n      setCurrentPage(0);\n\n      // Use the same getSuggestedUsers API as the sidebar\n      const suggestions = await firebaseUserApi.getSuggestedUsers(TOTAL_USERS_TO_FETCH);\n      setAllSuggestedUsers(suggestions);\n    } catch (error) {\n      console.error('Error loading users:', error);\n      setAllSuggestedUsers([]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (isOpen && user) {\n      loadUsers();\n    }\n  }, [isOpen, user, loadUsers]);\n\n  // Handle ESC key to close modal\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape' && isOpen) {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [isOpen, onClose]);\n\n  // Calculate paginated users\n  const totalPages = Math.ceil(allSuggestedUsers.length / USERS_PER_PAGE);\n  const startIndex = currentPage * USERS_PER_PAGE;\n  const endIndex = startIndex + USERS_PER_PAGE;\n  const paginatedUsers = allSuggestedUsers.slice(startIndex, endIndex);\n\n  const goToNextPage = () => {\n    if (currentPage < totalPages - 1) {\n      setCurrentPage(prev => prev + 1);\n    }\n  };\n\n  const goToPreviousPage = () => {\n    if (currentPage > 0) {\n      setCurrentPage(prev => prev - 1);\n    }\n  };\n\n  const handleFollowChange = (userId: string, isFollowing: boolean) => {\n    setAllSuggestedUsers(prev =>\n      prev.map(u =>\n        u.id === userId\n          ? {\n              ...u,\n              isFollowing,\n              followersCount: isFollowing\n                ? (u.followersCount || 0) + 1\n                : Math.max(0, (u.followersCount || 0) - 1)\n            }\n          : u\n      )\n    );\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div\n      className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4\"\n      onClick={onClose}\n    >\n      <div\n        className=\"bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[80vh] flex flex-col\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n          <h2 className=\"text-xl font-bold text-gray-900\">Suggested People</h2>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n            aria-label=\"Close suggested people modal\"\n          >\n            <X className=\"w-5 h-5 text-gray-600\" aria-hidden=\"true\" />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-y-auto\">\n          {isLoading ? (\n            <div className=\"p-12 text-center\">\n              <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-[#007AFF]\"></div>\n              <p className=\"text-gray-600 mt-4\">Loading suggestions...</p>\n            </div>\n          ) : allSuggestedUsers.length === 0 ? (\n            <div className=\"p-12 text-center\">\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-3xl\">👥</span>\n              </div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No suggestions yet</h3>\n              <p className=\"text-gray-600\">Check back later for people to connect with</p>\n            </div>\n          ) : (\n            <div className=\"divide-y divide-gray-100\">\n              {paginatedUsers.map((suggestedUser) => (\n                <div key={suggestedUser.id}>\n                  <UserCardCompact\n                    user={suggestedUser}\n                    variant=\"search\"\n                    onFollowChange={handleFollowChange}\n                  />\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Pagination Controls */}\n        {!isLoading && allSuggestedUsers.length > USERS_PER_PAGE && (\n          <div className=\"border-t border-gray-100 px-4 py-3 flex items-center justify-between\">\n            <button\n              onClick={goToPreviousPage}\n              disabled={currentPage === 0}\n              className=\"flex items-center gap-2 px-4 py-2 rounded-lg hover:bg-gray-100 disabled:opacity-30 disabled:cursor-not-allowed transition-colors text-sm font-medium text-gray-700\"\n              aria-label=\"Previous page\"\n            >\n              <ChevronLeft className=\"w-4 h-4\" aria-hidden=\"true\" />\n              Previous\n            </button>\n\n            <button\n              onClick={goToNextPage}\n              disabled={currentPage >= totalPages - 1}\n              className=\"flex items-center gap-2 px-4 py-2 rounded-lg hover:bg-gray-100 disabled:opacity-30 disabled:cursor-not-allowed transition-colors text-sm font-medium text-gray-700\"\n              aria-label=\"Next page\"\n            >\n              Next\n              <ChevronRight className=\"w-4 h-4\" aria-hidden=\"true\" />\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SuggestedUsers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadSuggestions'. Either include it or remove the dependency array.",
        "line": 54,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 54,
        "endColumn": 13,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [limit, loadSuggestions]",
            "fix": { "range": [1597, 1604], "text": "[limit, loadSuggestions]" }
          }
        ]
      },
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 192,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 196,
        "endColumn": 23
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { SuggestedUser } from '@/types';\nimport { firebaseUserApi } from '@/lib/api';\nimport { UserCard } from './UserCard';\nimport { Button } from '@/components/ui/button';\nimport { RefreshCw, Users, Sparkles, TrendingUp } from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface SuggestedUsersProps {\n  limit?: number;\n  showHeader?: boolean;\n  onUserSelect?: (user: SuggestedUser) => void;\n  variant?: 'default' | 'compact';\n}\n\nconst SuggestedUsers: React.FC<SuggestedUsersProps> = ({\n  limit = 10,\n  showHeader = true,\n  onUserSelect,\n  variant = 'default',\n}) => {\n  const [suggestions, setSuggestions] = useState<SuggestedUser[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const loadSuggestions = async (isRefresh = false) => {\n      try {\n        if (isRefresh) {\n          setIsRefreshing(true);\n        } else {\n          setIsLoading(true);\n        }\n\n        const suggestions = await firebaseUserApi.getSuggestedUsers(limit);\n        setSuggestions(suggestions);\n    } catch (error) {\n      console.error('Failed to load suggestions:', error);\n      // Don't show error toast for empty database - just set empty array\n      if (error instanceof Error && error.message.includes('permissions')) {\n        setSuggestions([]);\n      } else {\n        toast.error('Failed to load user suggestions');\n      }\n    } finally {\n      setIsLoading(false);\n      setIsRefreshing(false);\n    }\n  };\n\n  useEffect(() => {\n    loadSuggestions();\n  }, [limit]);\n\n  const handleRefresh = () => {\n    loadSuggestions(true);\n  };\n\n  const handleFollowChange = (userId: string, isFollowing: boolean) => {\n    setSuggestions(prev => \n      prev.map(user => \n        user.id === userId \n          ? { ...user, isFollowing, followersCount: isFollowing ? user.followersCount + 1 : Math.max(0, user.followersCount - 1) }\n          : user\n      )\n    );\n  };\n\n  const getReasonIcon = (reason: string) => {\n    switch (reason) {\n      case 'mutual_followers':\n        return <Users className=\"w-3 h-3\" />;\n      case 'similar_interests':\n        return <Sparkles className=\"w-3 h-3\" />;\n      case 'popular_user':\n        return <TrendingUp className=\"w-3 h-3\" />;\n      case 'location_based':\n        return <Users className=\"w-3 h-3\" />;\n      case 'activity_based':\n        return <TrendingUp className=\"w-3 h-3\" />;\n      default:\n        return <Users className=\"w-3 h-3\" />;\n    }\n  };\n\n  const getReasonColor = (reason: string): string => {\n    switch (reason) {\n      case 'mutual_followers':\n        return 'text-blue-600';\n      case 'similar_interests':\n        return 'text-purple-600';\n      case 'popular_user':\n        return 'text-orange-600';\n      case 'location_based':\n        return 'text-green-600';\n      case 'activity_based':\n        return 'text-pink-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-card-background rounded-lg border border-border p-6\">\n        {showHeader && (\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"font-semibold text-foreground flex items-center gap-2\">\n              <Sparkles className=\"w-4 h-4\" />\n              Suggested Users\n            </h3>\n          </div>\n        )}\n        <div className=\"space-y-3\">\n          {Array.from({ length: 3 }).map((_, index) => (\n            <div key={index} className=\"animate-pulse\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-12 h-12 bg-muted rounded-full\" />\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"h-4 bg-muted rounded w-3/4\" />\n                  <div className=\"h-3 bg-muted rounded w-1/2\" />\n                </div>\n                <div className=\"w-20 h-8 bg-muted rounded\" />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (suggestions.length === 0) {\n    return (\n      <div className=\"bg-card-background rounded-lg border border-border p-6\">\n        {showHeader && (\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"font-semibold text-foreground flex items-center gap-2\">\n              <Sparkles className=\"w-4 h-4\" />\n              Suggested Users\n            </h3>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className=\"h-8 w-8 p-0\"\n            >\n              <RefreshCw className={`w-4 h-4 ${isRefreshing ? 'animate-spin' : ''}`} />\n            </Button>\n          </div>\n        )}\n        <div className=\"text-center py-8\">\n          <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n          <h4 className=\"font-medium text-foreground mb-1\">No suggestions available</h4>\n          <p className=\"text-sm text-muted-foreground\">\n            We couldn't find any users to suggest right now. Try again later.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card-background rounded-lg border border-border p-6\">\n      {showHeader && (\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"font-semibold text-foreground flex items-center gap-2\">\n            <Sparkles className=\"w-4 h-4\" />\n            Suggested Users\n          </h3>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleRefresh}\n            disabled={isRefreshing}\n            className=\"h-8 w-8 p-0\"\n          >\n            <RefreshCw className={`w-4 h-4 ${isRefreshing ? 'animate-spin' : ''}`} />\n          </Button>\n        </div>\n      )}\n\n      <div className=\"space-y-3\">\n        {suggestions.map((user) => (\n          <div key={user.id} onClick={() => onUserSelect?.(user)}>\n            {variant === 'compact' ? (\n              <div className=\"flex items-center justify-between p-3 hover:bg-muted/50 rounded-lg transition-colors\">\n                <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                  {/* Avatar */}\n                  {user.profilePicture ? (\n                    <img\n                      src={user.profilePicture}\n                      alt={`${user.name}'s profile picture`}\n                      className=\"w-10 h-10 rounded-full object-cover border border-border\"\n                    />\n                  ) : (\n                    <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-sm font-semibold\">\n                      {user.name.charAt(0).toUpperCase()}\n                    </div>\n                  )}\n\n                  {/* User Info */}\n                  <div className=\"min-w-0 flex-1\">\n                    <h4 className=\"font-medium text-foreground truncate\">{user.name}</h4>\n                    <p className=\"text-sm text-muted-foreground truncate\">\n                      {user.followersCount || 0} followers\n                    </p>\n                    <div className=\"flex items-center gap-1 mt-1\">\n                      {getReasonIcon(user.reason)}\n                      <span className={`text-xs ${getReasonColor(user.reason)}`}>\n                        {user.reason.replace('_', ' ')}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Follow Button */}\n                {!user.isFollowing && (\n                  <Button\n                    size=\"sm\"\n                    className=\"flex items-center gap-1 min-w-[70px]\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      // Handle follow logic here\n                    }}\n                  >\n                    Follow\n                  </Button>\n                )}\n              </div>\n            ) : (\n              <UserCard\n                user={user}\n                variant=\"suggestion\"\n                onFollowChange={handleFollowChange}\n              />\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Compact sidebar version\nexport const SuggestedUsersSidebar: React.FC<SuggestedUsersProps> = (props) => {\n  return (\n    <SuggestedUsers\n      {...props}\n      limit={5}\n      variant=\"compact\"\n      showHeader={true}\n    />\n  );\n};\n\n// Widget version for dashboard\nexport const SuggestedUsersWidget: React.FC<SuggestedUsersProps> = (props) => {\n  return (\n    <SuggestedUsers\n      {...props}\n      limit={6}\n      variant=\"compact\"\n      showHeader={true}\n    />\n  );\n};\n\nexport default SuggestedUsers;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/TimerControls.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/TimerDisplay.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/TopComments.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'CommentWithDetails' is defined but never used.",
        "line": 4,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 28
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'refetch'. Either include it or remove the dependency array.",
        "line": 77,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 77,
        "endColumn": 18,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [isExpanded, refetch]",
            "fix": { "range": [2042, 2054], "text": "[isExpanded, refetch]" }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 85,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 85,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2239, 2242], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2239, 2242], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 97,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 97,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2508, 2511], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2508, 2511], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { CommentWithDetails } from '@/types';\nimport { useAuth } from '@/hooks/useAuth';\nimport {\n  useSessionComments,\n  useCreateComment,\n  useDeleteComment,\n  useCommentLike,\n} from '@/features/comments/hooks';\nimport CommentItem from './CommentItem';\nimport CommentInput from './CommentInput';\nimport { ChevronLeft, ChevronRight } from 'lucide-react';\n\ninterface TopCommentsProps {\n  sessionId: string;\n  totalCommentCount: number;\n  onCommentCountChange?: (count: number) => void;\n  autoFocus?: boolean;\n  initialExpanded?: boolean;\n}\n\nconst COMMENTS_PER_PAGE = 5;\n\nexport const TopComments: React.FC<TopCommentsProps> = ({\n  sessionId,\n  totalCommentCount,\n  onCommentCountChange,\n  autoFocus = false,\n  initialExpanded = false,\n}) => {\n  const { user } = useAuth();\n  const [isExpanded, setIsExpanded] = useState(initialExpanded);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  // Fetch comments - use limit of 2 for top comments, or 100 when expanded\n  const limit = isExpanded ? 100 : 2;\n  const {\n    data: commentsResponse,\n    isLoading,\n    refetch,\n  } = useSessionComments(sessionId, limit);\n\n  const createCommentMutation = useCreateComment({\n    onSuccess: () => {\n      if (onCommentCountChange) {\n        onCommentCountChange(totalCommentCount + 1);\n      }\n    },\n  });\n\n  const deleteCommentMutation = useDeleteComment({\n    onSuccess: () => {\n      if (onCommentCountChange) {\n        onCommentCountChange(Math.max(0, totalCommentCount - 1));\n      }\n    },\n  });\n\n  const likeMutation = useCommentLike(sessionId);\n\n  const allComments = commentsResponse?.comments || [];\n  const totalPages = Math.ceil(allComments.length / COMMENTS_PER_PAGE);\n\n  // Calculate paginated comments when expanded\n  const comments = isExpanded\n    ? allComments.slice(\n        (currentPage - 1) * COMMENTS_PER_PAGE,\n        currentPage * COMMENTS_PER_PAGE\n      )\n    : allComments;\n\n  // Refetch when expanded state changes\n  useEffect(() => {\n    refetch();\n  }, [isExpanded]);\n\n  const handleCreateComment = async (content: string) => {\n    try {\n      await createCommentMutation.mutateAsync({\n        sessionId,\n        content,\n      });\n    } catch (err: any) {\n      console.error('Failed to create comment:', err);\n      throw err;\n    }\n  };\n\n  const handleDelete = async (commentId: string) => {\n    try {\n      await deleteCommentMutation.mutateAsync({\n        commentId,\n        sessionId,\n      });\n    } catch (err: any) {\n      console.error('Failed to delete comment:', err);\n      throw err;\n    }\n  };\n\n  const handleLike = (commentId: string, action: 'like' | 'unlike') => {\n    likeMutation.mutate({ commentId, action });\n  };\n\n  if (isLoading && !isExpanded) {\n    return (\n      <div className=\"border-t border-gray-100 px-4 py-3 space-y-3\">\n        {[1, 2].map(i => (\n          <div key={i} className=\"flex gap-3 animate-pulse\">\n            <div className=\"w-8 h-8 rounded-full bg-gray-200\" />\n            <div className=\"flex-1 space-y-2\">\n              <div className=\"h-3 bg-gray-200 rounded w-1/4\" />\n              <div className=\"h-3 bg-gray-200 rounded w-full\" />\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (comments.length === 0 && totalCommentCount === 0 && !autoFocus) {\n    return null;\n  }\n\n  return (\n    <div\n      className={\n        isExpanded || (comments.length > 0 && !isExpanded)\n          ? 'hidden md:block md:border-t md:border-gray-100'\n          : ''\n      }\n    >\n      <div className=\"px-4 py-2 space-y-2\">\n        {/* Comments List - Only show in collapsed view if there are comments (hidden on mobile) */}\n        {!isExpanded && comments.length > 0 && (\n          <>\n            {comments.map(comment => (\n              <CommentItem\n                key={comment.id}\n                comment={comment}\n                sessionId={sessionId}\n                onDelete={handleDelete}\n                onLike={handleLike}\n                currentUserId={user?.id}\n              />\n            ))}\n\n            {/* See all comments link */}\n            {totalCommentCount > 2 && (\n              <button\n                onClick={() => setIsExpanded(true)}\n                className=\"text-sm text-gray-500 hover:text-gray-900 font-medium py-2 transition-colors\"\n              >\n                See all {totalCommentCount}{' '}\n                {totalCommentCount === 1 ? 'comment' : 'comments'}\n              </button>\n            )}\n          </>\n        )}\n\n        {/* Expanded Comments */}\n        {isExpanded && (\n          <>\n            {comments.map(comment => (\n              <CommentItem\n                key={comment.id}\n                comment={comment}\n                sessionId={sessionId}\n                onDelete={handleDelete}\n                onLike={handleLike}\n                currentUserId={user?.id}\n              />\n            ))}\n          </>\n        )}\n\n        {/* Comment Input - Only show when expanded or autoFocus */}\n        {(isExpanded || autoFocus) && (\n          <div\n            className={`${isExpanded ? 'pt-2 border-t border-gray-100' : ''}`}\n          >\n            <CommentInput\n              sessionId={sessionId}\n              placeholder=\"Add a comment...\"\n              onSubmit={handleCreateComment}\n              autoFocus={autoFocus}\n            />\n          </div>\n        )}\n\n        {/* Pagination Controls - Only in expanded view */}\n        {isExpanded && totalPages > 1 && (\n          <div className=\"flex items-center justify-between pt-3 border-t border-gray-100\">\n            <button\n              onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n              disabled={currentPage === 1}\n              className=\"p-2 rounded-lg hover:bg-gray-100 disabled:opacity-30 disabled:cursor-not-allowed transition-colors\"\n              aria-label=\"Previous page\"\n            >\n              <ChevronLeft className=\"w-5 h-5 text-gray-700\" />\n            </button>\n\n            <span className=\"text-sm text-gray-600 font-medium\">\n              Page {currentPage} of {totalPages}\n            </span>\n\n            <button\n              onClick={() =>\n                setCurrentPage(prev => Math.min(totalPages, prev + 1))\n              }\n              disabled={currentPage === totalPages}\n              className=\"p-2 rounded-lg hover:bg-gray-100 disabled:opacity-30 disabled:cursor-not-allowed transition-colors\"\n              aria-label=\"Next page\"\n            >\n              <ChevronRight className=\"w-5 h-5 text-gray-700\" />\n            </button>\n          </div>\n        )}\n\n        {/* Collapse Button */}\n        {isExpanded && (\n          <button\n            onClick={() => {\n              setIsExpanded(false);\n              setCurrentPage(1);\n            }}\n            className=\"text-sm text-gray-600 hover:text-gray-900 font-medium py-1\"\n          >\n            Show less\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TopComments;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/TrophyCase.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/UnifiedProfileCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/UserCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/WeekStreakCalendar.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 45,
        "column": 73,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 45,
        "endColumn": 76,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1387, 1390], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1387, 1390], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { Check } from 'lucide-react';\nimport { firebaseApi } from '@/lib/api';\n\ninterface WeekStreakCalendarProps {\n  userId: string;\n}\n\n// Normalize a Date to a local YYYY-MM-DD string (avoids UTC off-by-one)\nconst toLocalYMD = (d: Date) => {\n  const year = d.getFullYear();\n  const month = String(d.getMonth() + 1).padStart(2, '0');\n  const day = String(d.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n};\n\nexport const WeekStreakCalendar: React.FC<WeekStreakCalendarProps> = ({\n  userId,\n}) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [activeDates, setActiveDates] = useState<Set<string>>(new Set());\n\n  // Compute this week's start and end - ending with today as the 7th node\n  const { weekStart, weekEnd } = useMemo(() => {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    // Start is 6 days before today\n    const start = new Date(today);\n    start.setDate(today.getDate() - 6);\n\n    // End is today\n    const end = new Date(today);\n    end.setHours(23, 59, 59, 999);\n\n    return { weekStart: start, weekEnd: end };\n  }, []);\n\n  useEffect(() => {\n    const loadWeeklySessions = async () => {\n      try {\n        // Fetch a generous amount and filter client-side by week range\n        const res = await firebaseApi.session.getSessions(1, 100, {} as any);\n\n        const withinWeek = res.sessions.filter(s => {\n          const dt = new Date(s.startTime);\n          return dt >= weekStart && dt <= weekEnd;\n        });\n\n        const dateSet = new Set<string>();\n        withinWeek.forEach(s => {\n          const localKey = toLocalYMD(new Date(s.startTime));\n          dateSet.add(localKey);\n        });\n\n        setActiveDates(dateSet);\n      } catch (error) {\n        console.error('❌ Failed to load sessions for week:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadWeeklySessions();\n  }, [userId, weekStart, weekEnd]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-between gap-0.5 animate-pulse\">\n        {[...Array(7)].map((_, i) => (\n          <div key={i} className=\"flex flex-col items-center flex-1\">\n            <div className=\"h-3 bg-gray-200 rounded mb-1.5 w-4\"></div>\n            <div className=\"h-8 w-8 bg-gray-200 rounded-full\"></div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  // Build the visual model for the current week using the activeDates Set\n  const getWeekDays = () => {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const days = [] as Array<{\n      dayOfWeek: string;\n      dayNumber: number;\n      hasActivity: boolean;\n      isToday: boolean;\n      localKey: string;\n      isPast: boolean;\n    }>;\n\n    const dayLabels = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];\n\n    for (let i = 0; i < 7; i++) {\n      const date = new Date(weekStart);\n      date.setDate(weekStart.getDate() + i);\n      date.setHours(12, 0, 0, 0); // noon to avoid DST edge-cases in formatting\n\n      const localKey = toLocalYMD(date);\n      const isToday = toLocalYMD(today) === localKey;\n      const hasActivity = activeDates.has(localKey);\n\n      const dayOfWeek = dayLabels[date.getDay()] || 'S';\n      const dayInfo = {\n        dayOfWeek,\n        dayNumber: date.getDate(),\n        hasActivity,\n        isToday,\n        localKey,\n        isPast: date < today && !isToday,\n      };\n\n      days.push(dayInfo);\n    }\n\n    return days;\n  };\n\n  const weekDays = getWeekDays();\n\n  return (\n    <div className=\"flex justify-between gap-0.5\">\n      {weekDays.map((day, index) => (\n        <div key={index} className=\"flex flex-col items-center flex-1\">\n          <div\n            className={`text-xs font-medium mb-1.5 ${day.isToday ? 'text-[#007AFF] font-bold' : 'text-gray-400'}`}\n          >\n            {day.dayOfWeek}\n          </div>\n          <div className=\"h-6 w-6 flex items-center justify-center\">\n            {day.hasActivity ? (\n              // Completed day - orange circle with white checkmark\n              <div\n                className={`w-6 h-6 rounded-full flex items-center justify-center bg-orange-400 ${\n                  day.isToday ? 'ring-2 ring-[#007AFF] ring-offset-1' : ''\n                }`}\n              >\n                <Check className=\"w-3.5 h-3.5 text-white stroke-[3]\" />\n              </div>\n            ) : day.isToday ? (\n              // Today (not completed) - Electric Blue ring with grey circle and white checkmark\n              <div className=\"w-6 h-6 rounded-full flex items-center justify-center bg-gray-300 ring-2 ring-[#007AFF] ring-offset-1\">\n                <Check className=\"w-3.5 h-3.5 text-white stroke-[3]\" />\n              </div>\n            ) : (\n              // Past incomplete day - light grey circle with grey checkmark\n              <div className=\"w-6 h-6 rounded-full flex items-center justify-center bg-gray-100\">\n                <Check className=\"w-3.5 h-3.5 text-gray-300 stroke-[3]\" />\n              </div>\n            )}\n          </div>\n          <div\n            className={`text-[10px] font-medium mt-0.5 ${day.isToday ? 'text-[#007AFF] font-bold' : 'text-gray-500'}`}\n          >\n            {day.dayNumber}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/AuthButtons.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/Header.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'DIMENSIONS' is defined but never used.",
        "line": 14,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 20
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState } from 'react';\nimport { usePathname } from 'next/navigation';\nimport { useAuth } from '@/hooks/useAuth';\nimport NotificationIcon from '../NotificationIcon';\nimport Logo from './Logo';\nimport SearchBar from './SearchBar';\nimport Navigation from './Navigation';\nimport TimerStatus from './TimerStatus';\nimport ProfileMenu from './ProfileMenu';\nimport MobileMenu from './MobileMenu';\nimport AuthButtons from './AuthButtons';\nimport { DIMENSIONS } from './header.constants';\n\n/**\n * Header Component\n *\n * Main application header with responsive design.\n * Orchestrates all header sub-components without managing their internal state.\n *\n * Features:\n * - Logo with home link\n * - Collapsible search bar\n * - Desktop navigation\n * - Timer status and session actions\n * - Profile menu with dropdown\n * - Mobile menu for responsive design\n * - Authentication buttons for non-authenticated users\n * - Notifications\n *\n * This refactored version follows:\n * - Single Responsibility Principle: Orchestrates child components only\n * - Open/Closed Principle: New features added via new child components\n * - Composition over inheritance\n * - Airbnb React style guidelines\n *\n * @example\n * ```tsx\n * import Header from '@/components/header/Header';\n *\n * export default function Layout({ children }) {\n *   return (\n *     <>\n *       <Header />\n *       <main>{children}</main>\n *     </>\n *   );\n * }\n * ```\n */\nexport default function Header() {\n  const pathname = usePathname();\n  const { user } = useAuth();\n\n  // Local UI state (simple toggles only)\n  const [isSearchOpen, setIsSearchOpen] = useState(false);\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  return (\n    <header className=\"sticky top-0 left-0 right-0 z-50 bg-white border-b border-gray-200 shadow-sm\">\n      <div className=\"max-w-[1400px] mx-auto px-4\">\n        <div className=\"flex items-center justify-between h-14\">\n          {/* Left side: Logo + Search + Navigation */}\n          <div className=\"flex items-center space-x-4 ml-8\">\n            <Logo />\n\n            {/* Search - Only show when authenticated */}\n            {user && (\n              <SearchBar\n                isOpen={isSearchOpen}\n                onToggle={() => setIsSearchOpen(!isSearchOpen)}\n              />\n            )}\n\n            {/* Desktop Navigation - Only show when search is closed AND user is authenticated */}\n            {!isSearchOpen && user && <Navigation pathname={pathname} />}\n          </div>\n\n          {/* Right side: Actions */}\n          <div className=\"flex items-center space-x-3\">\n            {/* Auth Buttons - Only show when NOT authenticated */}\n            {!user && <AuthButtons />}\n\n            {/* Session Actions / Timer Status - Only show when authenticated */}\n            {user && <TimerStatus pathname={pathname} />}\n\n            {/* Notifications - Only show when authenticated */}\n            {user && (\n              <NotificationIcon className=\"hidden md:flex p-2 text-gray-600 hover:text-[#007AFF] transition-colors\" />\n            )}\n\n            {/* Profile Menu - Only show when authenticated */}\n            {user && <ProfileMenu user={user} />}\n\n            {/* Mobile Menu Toggle - Only show when authenticated */}\n            {user && (\n              <MobileMenu\n                isOpen={isMobileMenuOpen}\n                onToggle={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n                pathname={pathname}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/Logo.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/MobileMenu.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/Navigation.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/ProfileMenu.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/SearchBar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/TimerStatus.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/header.constants.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/header.types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/header.utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ui/__tests__/switch.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ui/badge.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ui/button.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ui/card.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ui/input.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-empty-object-type",
        "severity": 1,
        "message": "An interface declaring no members is equivalent to its supertype.",
        "line": 4,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "noEmptyInterfaceWithSuper",
        "endLine": 4,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "replaceEmptyInterfaceWithSuper",
            "fix": {
              "range": [74, 151],
              "text": "type InputProps = React.InputHTMLAttributes<HTMLInputElement>"
            },
            "desc": "Replace empty interface with a type alias."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as React from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nInput.displayName = 'Input';\n\nexport { Input };\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ui/label.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-empty-object-type",
        "severity": 1,
        "message": "An interface declaring no members is equivalent to its supertype.",
        "line": 4,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "noEmptyInterfaceWithSuper",
        "endLine": 4,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "replaceEmptyInterfaceWithSuper",
            "fix": {
              "range": [74, 151],
              "text": "type LabelProps = React.LabelHTMLAttributes<HTMLLabelElement>"
            },
            "desc": "Replace empty interface with a type alias."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as React from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface LabelProps\n  extends React.LabelHTMLAttributes<HTMLLabelElement> {}\n\nconst Label = React.forwardRef<HTMLLabelElement, LabelProps>(\n  ({ className, ...props }, ref) => (\n    <label\n      ref={ref}\n      className={cn(\n        'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',\n        className\n      )}\n      {...props}\n    />\n  )\n);\nLabel.displayName = 'Label';\n\nexport { Label };\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ui/select.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ui/settings-section.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ui/switch.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ui/textarea.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-empty-object-type",
        "severity": 1,
        "message": "An interface declaring no members is equivalent to its supertype.",
        "line": 4,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "noEmptyInterfaceWithSuper",
        "endLine": 4,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "replaceEmptyInterfaceWithSuper",
            "fix": {
              "range": [74, 160],
              "text": "type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"
            },
            "desc": "Replace empty interface with a type alias."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as React from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport { Textarea };\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/config/constants.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/config/errorMessages.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/contexts/ActivitiesContext.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 11,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 11,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [355, 358], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [355, 358], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\n/**\n * ActivitiesContext - Placeholder for backwards compatibility\n * All activity functionality has been migrated to hooks in /src/hooks/useActivitiesQuery.ts\n * Use: import { useActivities, useActivity } from '@/hooks/useActivitiesQuery';\n */\n\nimport React, { createContext } from 'react';\n\nexport const ActivitiesContext = createContext<any>(null);\n\nexport const ActivitiesProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  return (\n    <ActivitiesContext.Provider value={null}>\n      {children}\n    </ActivitiesContext.Provider>\n  );\n};\n\nexport const useActivities = () => {\n  throw new Error(\n    'useActivities has been migrated to @/hooks/useActivitiesQuery. Please update your imports.'\n  );\n};\n\nexport const useActivity = () => {\n  throw new Error(\n    'useActivity has been migrated to @/hooks/useActivitiesQuery. Please update your imports.'\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/contexts/AuthContext.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 11,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 11,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [288, 291], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [288, 291], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\n/**\n * AuthContext - Placeholder for backwards compatibility\n * All auth functionality should use hooks in /src/hooks/useAuth.ts\n * Use: import { useAuth } from '@/hooks/useAuth';\n */\n\nimport React, { createContext } from 'react';\n\nexport const AuthContext = createContext<any>(null);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  return <AuthContext.Provider value={null}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => {\n  throw new Error(\n    'useAuth context is deprecated. Please use the hook from @/hooks/useAuth'\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/contexts/ProjectsContext.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/contexts/TimerContext.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 11,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 11,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [334, 337], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [334, 337], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\n/**\n * TimerContext - Placeholder for backwards compatibility\n * All timer functionality has been migrated to hooks in /src/features/timer/hooks/useTimer.ts\n * Use: import { useTimer } from '@/features/timer/hooks/useTimer';\n */\n\nimport React, { createContext } from 'react';\n\nexport const TimerContext = createContext<any>(null);\n\nexport const TimerProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  return <TimerContext.Provider value={null}>{children}</TimerContext.Provider>;\n};\n\nexport const useTimer = () => {\n  throw new Error(\n    'useTimer has been migrated to @/features/timer/hooks/useTimer. Please update your imports.'\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/domain/entities/ActiveSession.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/domain/entities/Group.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/domain/entities/Session.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/domain/entities/User.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/domain/entities/__tests__/Group.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/challenges/hooks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/challenges/hooks/useChallengeMutations.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/challenges/hooks/useChallenges.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/challenges/services/ChallengeService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/comments/hooks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/comments/hooks/useCommentMutations.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 51,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 51,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1390, 1393], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1390, 1393], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 66,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 66,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1806, 1809], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1806, 1809], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 66,
        "column": 69,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 66,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1841, 1844], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1841, 1844], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 80,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 80,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2269, 2272], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2269, 2272], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 135,
        "column": 68,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 135,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3519, 3522], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3519, 3522], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 140,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 140,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3652, 3655], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3652, 3655], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 205,
        "column": 68,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 205,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5276, 5279], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5276, 5279], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 211,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 211,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5425, 5428], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5425, 5428], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 240,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 240,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6161, 6164], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6161, 6164], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 255,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 255,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6570, 6573], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6570, 6573], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 255,
        "column": 69,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 255,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6605, 6608], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6605, 6608], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 268,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 268,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6998, 7001], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6998, 7001], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 305,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 305,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7932, 7935], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7932, 7935], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 330,
        "column": 68,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 330,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8660, 8663], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8660, 8663], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 335,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 335,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8793, 8796], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8793, 8796], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 15,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Comment Mutation Hooks - React Query Boundary\n *\n * All write operations for comments (create, update, delete, like).\n */\n\nimport {\n  useMutation,\n  useQueryClient,\n  UseMutationOptions,\n} from '@tanstack/react-query';\nimport { CommentService, CommentLikeData } from '../services/CommentService';\nimport { COMMENT_KEYS } from './useComments';\nimport {\n  CommentWithDetails,\n  CreateCommentData,\n  UpdateCommentData,\n} from '@/types';\nimport { SESSION_KEYS } from '@/features/sessions/hooks';\n\nconst commentService = new CommentService();\n\n/**\n * Create a new comment\n *\n * @example\n * const createMutation = useCreateComment();\n * createMutation.mutate({\n *   sessionId: 'abc123',\n *   content: 'Great work!',\n *   parentId: 'comment-456' // Optional for replies\n * });\n */\nexport function useCreateComment(\n  options?: Partial<\n    UseMutationOptions<CommentWithDetails, Error, CreateCommentData>\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<CommentWithDetails, Error, CreateCommentData>({\n    mutationFn: data => commentService.createComment(data),\n\n    onSuccess: (newComment, variables) => {\n      // Invalidate comments for this session\n      queryClient.invalidateQueries({\n        queryKey: COMMENT_KEYS.session(variables.sessionId),\n      });\n\n      // Update comment count in session cache and feed\n      const updateSessionCommentCount = (session: any) => {\n        if (session?.id !== variables.sessionId) return session;\n        return {\n          ...session,\n          commentCount: (session.commentCount || 0) + 1,\n        };\n      };\n\n      // Update session detail cache\n      queryClient.setQueryData(\n        SESSION_KEYS.detail(variables.sessionId),\n        updateSessionCommentCount\n      );\n\n      // Update feed caches\n      queryClient.setQueriesData<any>({ queryKey: ['feed'] }, (old: any) => {\n        if (!old) return old;\n\n        if (Array.isArray(old)) {\n          return old.map(updateSessionCommentCount);\n        } else if (old.sessions) {\n          return {\n            ...old,\n            sessions: old.sessions.map(updateSessionCommentCount),\n          };\n        } else if (old.pages) {\n          // Handle infinite query\n          return {\n            ...old,\n            pages: old.pages.map((page: any) => ({\n              ...page,\n              sessions: page.sessions.map(updateSessionCommentCount),\n            })),\n          };\n        }\n\n        return old;\n      });\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Update a comment\n *\n * @example\n * const updateMutation = useUpdateComment();\n * updateMutation.mutate({\n *   commentId: 'comment-123',\n *   sessionId: 'session-456',\n *   data: { content: 'Updated comment text' }\n * });\n */\nexport function useUpdateComment(\n  options?: Partial<\n    UseMutationOptions<\n      void,\n      Error,\n      { commentId: string; sessionId: string; data: UpdateCommentData }\n    >\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<\n    void,\n    Error,\n    { commentId: string; sessionId: string; data: UpdateCommentData }\n  >({\n    mutationFn: ({ commentId, data }) =>\n      commentService.updateComment(commentId, data),\n\n    onMutate: async ({ commentId, sessionId, data }) => {\n      await queryClient.cancelQueries({\n        queryKey: COMMENT_KEYS.session(sessionId),\n      });\n\n      const previousComments = queryClient.getQueryData(\n        COMMENT_KEYS.session(sessionId)\n      );\n\n      // Optimistically update\n      queryClient.setQueryData(COMMENT_KEYS.list(sessionId), (old: any) => {\n        if (!old?.comments) return old;\n\n        return {\n          ...old,\n          comments: old.comments.map((comment: any) =>\n            comment.id === commentId\n              ? { ...comment, ...data, isEdited: true }\n              : comment\n          ),\n        };\n      });\n\n      return { previousComments };\n    },\n\n    onError: (error, { sessionId }, context: unknown) => {\n      if (\n        context &&\n        typeof context === 'object' &&\n        'previousComments' in context &&\n        context.previousComments\n      ) {\n        queryClient.setQueryData(\n          COMMENT_KEYS.session(sessionId),\n          context.previousComments\n        );\n      }\n    },\n\n    onSuccess: (_, { sessionId }) => {\n      queryClient.invalidateQueries({\n        queryKey: COMMENT_KEYS.session(sessionId),\n      });\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Delete a comment\n *\n * @example\n * const deleteMutation = useDeleteComment();\n * deleteMutation.mutate({\n *   commentId: 'comment-123',\n *   sessionId: 'session-456'\n * });\n */\nexport function useDeleteComment(\n  options?: Partial<\n    UseMutationOptions<void, Error, { commentId: string; sessionId: string }>\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<void, Error, { commentId: string; sessionId: string }>({\n    mutationFn: ({ commentId }) => commentService.deleteComment(commentId),\n\n    onMutate: async ({ commentId, sessionId }) => {\n      await queryClient.cancelQueries({\n        queryKey: COMMENT_KEYS.session(sessionId),\n      });\n\n      const previousComments = queryClient.getQueryData(\n        COMMENT_KEYS.session(sessionId)\n      );\n\n      // Optimistically remove from comments list\n      queryClient.setQueryData(COMMENT_KEYS.list(sessionId), (old: any) => {\n        if (!old?.comments) return old;\n\n        return {\n          ...old,\n          comments: old.comments.filter(\n            (comment: any) => comment.id !== commentId\n          ),\n        };\n      });\n\n      return { previousComments };\n    },\n\n    onError: (error, { sessionId }, context: unknown) => {\n      if (\n        context &&\n        typeof context === 'object' &&\n        'previousComments' in context &&\n        context.previousComments\n      ) {\n        queryClient.setQueryData(\n          COMMENT_KEYS.session(sessionId),\n          context.previousComments\n        );\n      }\n    },\n\n    onSuccess: (_, { sessionId }) => {\n      // Invalidate comments\n      queryClient.invalidateQueries({\n        queryKey: COMMENT_KEYS.session(sessionId),\n      });\n\n      // Update comment count in session cache and feed\n      const updateSessionCommentCount = (session: any) => {\n        if (session?.id !== sessionId) return session;\n        return {\n          ...session,\n          commentCount: Math.max(0, (session.commentCount || 0) - 1),\n        };\n      };\n\n      // Update session detail cache\n      queryClient.setQueryData(\n        SESSION_KEYS.detail(sessionId),\n        updateSessionCommentCount\n      );\n\n      // Update feed caches\n      queryClient.setQueriesData<any>({ queryKey: ['feed'] }, (old: any) => {\n        if (!old) return old;\n\n        if (Array.isArray(old)) {\n          return old.map(updateSessionCommentCount);\n        } else if (old.sessions) {\n          return {\n            ...old,\n            sessions: old.sessions.map(updateSessionCommentCount),\n          };\n        } else if (old.pages) {\n          return {\n            ...old,\n            pages: old.pages.map((page: any) => ({\n              ...page,\n              sessions: page.sessions.map(updateSessionCommentCount),\n            })),\n          };\n        }\n\n        return old;\n      });\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Like or unlike a comment\n *\n * @example\n * const likeMutation = useCommentLike('session-123');\n * likeMutation.mutate({ commentId: 'comment-456', action: 'like' });\n * likeMutation.mutate({ commentId: 'comment-456', action: 'unlike' });\n */\nexport function useCommentLike(\n  sessionId: string,\n  options?: Partial<UseMutationOptions<void, Error, CommentLikeData>>\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<void, Error, CommentLikeData>({\n    mutationFn: async ({ commentId, action }) => {\n      try {\n        if (action === 'like') {\n          await commentService.likeComment(commentId);\n        } else {\n          await commentService.unlikeComment(commentId);\n        }\n      } catch (error: any) {\n        // If already liked/unliked, treat as success (idempotent)\n        const errorMsg = error.message || String(error);\n        if (\n          errorMsg.includes('Already liked') ||\n          errorMsg.includes('not liked')\n        ) {\n          return;\n        }\n        throw error;\n      }\n    },\n\n    onMutate: async ({ commentId, action }) => {\n      await queryClient.cancelQueries({\n        queryKey: COMMENT_KEYS.session(sessionId),\n      });\n\n      const previousComments = queryClient.getQueryData(\n        COMMENT_KEYS.session(sessionId)\n      );\n\n      const increment = action === 'like' ? 1 : -1;\n\n      // Optimistically update comments\n      queryClient.setQueryData(COMMENT_KEYS.list(sessionId), (old: any) => {\n        if (!old?.comments) return old;\n\n        return {\n          ...old,\n          comments: old.comments.map((comment: any) =>\n            comment.id === commentId\n              ? {\n                  ...comment,\n                  likeCount: Math.max(0, (comment.likeCount || 0) + increment),\n                  isLiked: action === 'like',\n                }\n              : comment\n          ),\n        };\n      });\n\n      return { previousComments };\n    },\n\n    onError: (error, variables, context: unknown) => {\n      if (\n        context &&\n        typeof context === 'object' &&\n        'previousComments' in context &&\n        context.previousComments\n      ) {\n        queryClient.setQueryData(\n          COMMENT_KEYS.session(sessionId),\n          context.previousComments\n        );\n      }\n    },\n\n    onSuccess: () => {\n      // Refetch to ensure consistency\n      queryClient.invalidateQueries({\n        queryKey: COMMENT_KEYS.session(sessionId),\n      });\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Helper hook to invalidate comments for a session\n *\n * @example\n * const invalidateComments = useInvalidateComments();\n * invalidateComments(sessionId);\n */\nexport function useInvalidateComments() {\n  const queryClient = useQueryClient();\n\n  return (sessionId: string) => {\n    queryClient.invalidateQueries({\n      queryKey: COMMENT_KEYS.session(sessionId),\n    });\n    queryClient.invalidateQueries({ queryKey: COMMENT_KEYS.list(sessionId) });\n  };\n}\n\n/**\n * Helper hook to invalidate all comments\n *\n * @example\n * const invalidateAllComments = useInvalidateAllComments();\n * invalidateAllComments();\n */\nexport function useInvalidateAllComments() {\n  const queryClient = useQueryClient();\n\n  return () => {\n    queryClient.invalidateQueries({ queryKey: COMMENT_KEYS.all() });\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/comments/hooks/useComments.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/comments/services/CommentService.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Comment' is defined but never used.",
        "line": 10,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'cursor' is defined but never used.",
        "line": 24,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 11
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Comment Service - Business Logic Layer\n *\n * Orchestrates business workflows for comments.\n * No React dependencies - pure TypeScript for testability.\n */\n\nimport { firebaseApi } from '@/lib/api';\nimport {\n  Comment,\n  CommentWithDetails,\n  CreateCommentData,\n  UpdateCommentData,\n  CommentsResponse,\n} from '@/types';\n\nexport class CommentService {\n  /**\n   * Get all comments for a session\n   */\n  async getSessionComments(\n    sessionId: string,\n    limit: number = 20,\n    cursor?: string\n  ): Promise<CommentsResponse> {\n    try {\n      return await firebaseApi.comment.getSessionComments(sessionId, limit);\n    } catch (error) {\n      console.error('Error getting session comments:', error);\n      return {\n        comments: [],\n        hasMore: false,\n      };\n    }\n  }\n\n  /**\n   * Create a new comment\n   */\n  async createComment(data: CreateCommentData): Promise<CommentWithDetails> {\n    return firebaseApi.comment.createComment(data);\n  }\n\n  /**\n   * Update a comment\n   */\n  async updateComment(\n    commentId: string,\n    data: UpdateCommentData\n  ): Promise<void> {\n    await firebaseApi.comment.updateComment(commentId, data);\n  }\n\n  /**\n   * Delete a comment\n   */\n  async deleteComment(commentId: string): Promise<void> {\n    return firebaseApi.comment.deleteComment(commentId);\n  }\n\n  /**\n   * Like a comment\n   */\n  async likeComment(commentId: string): Promise<void> {\n    return firebaseApi.comment.likeComment(commentId);\n  }\n\n  /**\n   * Unlike a comment\n   */\n  async unlikeComment(commentId: string): Promise<void> {\n    return firebaseApi.comment.unlikeComment(commentId);\n  }\n}\n\nexport interface CommentLikeData {\n  commentId: string;\n  action: 'like' | 'unlike';\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/feed/components/FeedPageContent.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/feed/components/LandingPageContent.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/feed/hooks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/feed/hooks/useFeed.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'FeedOptions' is defined but never used.",
        "line": 18,
        "column": 36,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 47
      },
      {
        "ruleId": "@tanstack/query/exhaustive-deps",
        "severity": 1,
        "message": "The following dependencies are missing in your queryKey: currentUserId",
        "line": 136,
        "column": 5,
        "nodeType": "Property",
        "messageId": "missingDeps",
        "endLine": 136,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "fixTo",
            "data": {
              "result": "[...FEED_KEYS.user(userId), limit, currentUserId]"
            },
            "fix": {
              "range": [3951, 3985],
              "text": "[...FEED_KEYS.user(userId), limit, currentUserId]"
            },
            "desc": "Fix to [...FEED_KEYS.user(userId), limit, currentUserId]"
          }
        ]
      },
      {
        "ruleId": "@tanstack/query/exhaustive-deps",
        "severity": 1,
        "message": "The following dependencies are missing in your queryKey: currentUserId",
        "line": 160,
        "column": 5,
        "nodeType": "Property",
        "messageId": "missingDeps",
        "endLine": 160,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "fixTo",
            "data": {
              "result": "[...FEED_KEYS.group(groupId), limit, currentUserId]"
            },
            "fix": {
              "range": [4581, 4617],
              "text": "[...FEED_KEYS.group(groupId), limit, currentUserId]"
            },
            "desc": "Fix to [...FEED_KEYS.group(groupId), limit, currentUserId]"
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Feed Query Hooks - React Query Boundary\n *\n * This is the ONLY place where React Query should be used for feed.\n * All components should use these hooks instead of direct React Query or firebaseApi calls.\n *\n * Architecture:\n * Components → useFeed hooks (React Query) → FeedService → Repositories → Firebase\n */\n\nimport {\n  useInfiniteQuery,\n  useQuery,\n  UseQueryOptions,\n  UseInfiniteQueryOptions,\n  InfiniteData,\n} from '@tanstack/react-query';\nimport { FeedService, FeedFilters, FeedOptions } from '../services/FeedService';\nimport { Session } from '@/domain/entities/Session';\nimport { STANDARD_CACHE_TIMES } from '@/lib/react-query';\n\n// Singleton service instance\nconst feedService = new FeedService();\n\n// ==================== TYPES ====================\n\n// Type for infinite query options without 'select' property\n// Infinite queries must return InfiniteData, so select cannot transform to FeedResult\ntype InfiniteQueryOptions<TData, TError> = Omit<\n  Partial<UseInfiniteQueryOptions<TData, TError, InfiniteData<TData, unknown>>>,\n  'select'\n>;\n\nexport interface FeedResult {\n  sessions: Session[];\n  hasMore: boolean;\n  nextCursor?: string;\n}\n\nexport interface FeedPage {\n  sessions: Session[];\n  hasMore: boolean;\n  nextCursor?: string;\n}\n\n// ==================== CACHE KEYS ====================\n// Hierarchical cache keys for efficient invalidation\n\nexport const FEED_KEYS = {\n  all: () => ['feed'] as const,\n  lists: () => [...FEED_KEYS.all(), 'list'] as const,\n  list: (userId: string, filters: FeedFilters) =>\n    [...FEED_KEYS.lists(), userId, filters] as const,\n  user: (userId: string) => [...FEED_KEYS.all(), 'user', userId] as const,\n  group: (groupId: string) => [...FEED_KEYS.all(), 'group', groupId] as const,\n};\n\n// ==================== QUERY HOOKS ====================\n\n/**\n * Get paginated feed with infinite scroll support\n *\n * This is the primary hook for feed functionality with pagination.\n *\n * @example\n * const {\n *   data,\n *   fetchNextPage,\n *   hasNextPage,\n *   isFetchingNextPage\n * } = useFeedInfinite(userId, { type: 'following' });\n *\n * // Access all pages:\n * const allSessions = data?.pages.flatMap(page => page.sessions) || [];\n */\nexport function useFeedInfinite(\n  currentUserId: string,\n  filters: FeedFilters = {},\n  options?: InfiniteQueryOptions<FeedResult, Error>\n) {\n  return useInfiniteQuery<FeedResult, Error>({\n    queryKey: FEED_KEYS.list(currentUserId, filters),\n    queryFn: ({ pageParam }) =>\n      feedService.getFeed(currentUserId, filters, {\n        limit: 20,\n        cursor: pageParam as string | undefined,\n      }),\n    getNextPageParam: lastPage => {\n      return lastPage.hasMore ? lastPage.nextCursor : undefined;\n    },\n    initialPageParam: undefined as string | undefined,\n    staleTime: STANDARD_CACHE_TIMES.SHORT, // 1 minute - feed data changes frequently\n    enabled: !!currentUserId,\n    ...options,\n  });\n}\n\n/**\n * Get initial feed page (non-paginated)\n *\n * Use this for simple feed displays without infinite scroll.\n *\n * @example\n * const { data: feedData, isLoading, error } = useFeed(userId, { type: 'all' });\n */\nexport function useFeed(\n  currentUserId: string,\n  filters: FeedFilters = {},\n  limit: number = 20,\n  options?: Partial<UseQueryOptions<FeedResult, Error>>\n) {\n  return useQuery<FeedResult, Error>({\n    queryKey: [...FEED_KEYS.list(currentUserId, filters), limit],\n    queryFn: () => feedService.getFeed(currentUserId, filters, { limit }),\n    staleTime: STANDARD_CACHE_TIMES.SHORT, // 1 minute\n    enabled: !!currentUserId,\n    ...options,\n  });\n}\n\n/**\n * Get user-specific feed\n *\n * Shows sessions from a specific user (for profile pages).\n *\n * @example\n * const { data: userFeed } = useUserFeed(currentUserId, targetUserId);\n */\nexport function useUserFeed(\n  currentUserId: string,\n  userId: string,\n  limit: number = 20,\n  options?: Partial<UseQueryOptions<FeedResult, Error>>\n) {\n  return useQuery<FeedResult, Error>({\n    queryKey: [...FEED_KEYS.user(userId), limit],\n    queryFn: () =>\n      feedService.getFeed(currentUserId, { type: 'user', userId }, { limit }),\n    staleTime: STANDARD_CACHE_TIMES.MEDIUM, // 5 minutes\n    enabled: !!currentUserId && !!userId,\n    ...options,\n  });\n}\n\n/**\n * Get group-specific feed\n *\n * Shows sessions from a specific group.\n *\n * @example\n * const { data: groupFeed } = useGroupFeed(currentUserId, groupId);\n */\nexport function useGroupFeed(\n  currentUserId: string,\n  groupId: string,\n  limit: number = 20,\n  options?: Partial<UseQueryOptions<FeedResult, Error>>\n) {\n  return useQuery<FeedResult, Error>({\n    queryKey: [...FEED_KEYS.group(groupId), limit],\n    queryFn: () =>\n      feedService.getFeed(currentUserId, { type: 'group', groupId }, { limit }),\n    staleTime: STANDARD_CACHE_TIMES.MEDIUM, // 5 minutes\n    enabled: !!currentUserId && !!groupId,\n    ...options,\n  });\n}\n\n/**\n * Get following feed (infinite scroll version)\n *\n * Shows sessions from users the current user follows.\n *\n * @example\n * const {\n *   data,\n *   fetchNextPage,\n *   hasNextPage\n * } = useFollowingFeedInfinite(userId);\n */\nexport function useFollowingFeedInfinite(\n  currentUserId: string,\n  options?: InfiniteQueryOptions<FeedResult, Error>\n) {\n  return useFeedInfinite(currentUserId, { type: 'following' }, options);\n}\n\n/**\n * Get public/all feed (infinite scroll version)\n *\n * Shows all public sessions.\n *\n * @example\n * const {\n *   data,\n *   fetchNextPage,\n *   hasNextPage\n * } = usePublicFeedInfinite(userId);\n */\nexport function usePublicFeedInfinite(\n  currentUserId: string,\n  options?: InfiniteQueryOptions<FeedResult, Error>\n) {\n  return useFeedInfinite(currentUserId, { type: 'all' }, options);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/feed/hooks/useFeedMutations.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 104,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 104,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2844, 2847], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2844, 2847], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 108,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 108,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2973, 2976], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2973, 2976], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 108,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 108,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2994, 2997], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2994, 2997], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 114,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 114,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3138, 3141], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3138, 3141], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 146,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 146,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3983, 3986], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3983, 3986], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 146,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 146,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4004, 4007], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4004, 4007], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 151,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 151,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4117, 4120], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4117, 4120], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 153,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 153,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4192, 4195], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4192, 4195], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Feed Mutation Hooks - React Query Boundary\n *\n * Handles mutations that affect the feed (refresh, invalidation).\n * Session creation/deletion is handled in the Sessions feature.\n */\n\nimport { useMutation, useQueryClient, UseMutationOptions } from '@tanstack/react-query';\nimport { FeedService, FeedFilters } from '../services/FeedService';\nimport { FEED_KEYS, FeedResult } from './useFeed';\n\nconst feedService = new FeedService();\n\n/**\n * Refresh the feed\n *\n * Forces a fresh fetch of feed data.\n *\n * @example\n * const refreshMutation = useRefreshFeed();\n * refreshMutation.mutate({ userId, filters: { type: 'following' } });\n */\nexport function useRefreshFeed(\n  options?: Partial<UseMutationOptions<FeedResult, Error, { userId: string; filters?: FeedFilters }>>\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<FeedResult, Error, { userId: string; filters?: FeedFilters }>({\n    mutationFn: ({ userId, filters }) => feedService.refreshFeed(userId, filters),\n\n    onSuccess: (_, { userId, filters = {} }) => {\n      // Invalidate the specific feed query\n      queryClient.invalidateQueries({ queryKey: FEED_KEYS.list(userId, filters) });\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Helper hook to invalidate all feed queries\n *\n * Use this when an action affects the feed but is handled elsewhere\n * (e.g., creating a session, supporting a session, etc.)\n *\n * @example\n * const invalidateFeeds = useInvalidateFeeds();\n *\n * // After creating a session:\n * invalidateFeeds();\n */\nexport function useInvalidateFeeds() {\n  const queryClient = useQueryClient();\n\n  return () => {\n    queryClient.invalidateQueries({ queryKey: FEED_KEYS.all() });\n  };\n}\n\n/**\n * Helper hook to invalidate a specific user's feed\n *\n * @example\n * const invalidateUserFeed = useInvalidateUserFeed();\n * invalidateUserFeed(userId);\n */\nexport function useInvalidateUserFeed() {\n  const queryClient = useQueryClient();\n\n  return (userId: string) => {\n    queryClient.invalidateQueries({ queryKey: FEED_KEYS.user(userId) });\n  };\n}\n\n/**\n * Helper hook to invalidate a specific group's feed\n *\n * @example\n * const invalidateGroupFeed = useInvalidateGroupFeed();\n * invalidateGroupFeed(groupId);\n */\nexport function useInvalidateGroupFeed() {\n  const queryClient = useQueryClient();\n\n  return (groupId: string) => {\n    queryClient.invalidateQueries({ queryKey: FEED_KEYS.group(groupId) });\n  };\n}\n\n/**\n * Helper to manually add a session to the feed cache (optimistic update)\n *\n * Use this when creating a new session to immediately show it in the feed.\n *\n * @example\n * const addToFeed = useAddToFeedCache();\n *\n * // After creating a session:\n * addToFeed(userId, { type: 'following' }, newSession);\n */\nexport function useAddToFeedCache() {\n  const queryClient = useQueryClient();\n\n  return (userId: string, filters: FeedFilters, newSession: any) => {\n    const queryKey = FEED_KEYS.list(userId, filters);\n\n    // Update infinite query cache\n    queryClient.setQueryData<any>(queryKey, (old: any) => {\n      if (!old?.pages) return old;\n\n      // Add to the first page\n      return {\n        ...old,\n        pages: old.pages.map((page: any, index: number) => {\n          if (index === 0) {\n            return {\n              ...page,\n              sessions: [newSession, ...page.sessions],\n            };\n          }\n          return page;\n        }),\n      };\n    });\n  };\n}\n\n/**\n * Helper to manually remove a session from the feed cache (optimistic update)\n *\n * Use this when deleting a session to immediately remove it from the feed.\n *\n * @example\n * const removeFromFeed = useRemoveFromFeedCache();\n *\n * // After deleting a session:\n * removeFromFeed(userId, { type: 'following' }, sessionId);\n */\nexport function useRemoveFromFeedCache() {\n  const queryClient = useQueryClient();\n\n  return (userId: string, filters: FeedFilters, sessionId: string) => {\n    const queryKey = FEED_KEYS.list(userId, filters);\n\n    // Update infinite query cache\n    queryClient.setQueryData<any>(queryKey, (old: any) => {\n      if (!old?.pages) return old;\n\n      return {\n        ...old,\n        pages: old.pages.map((page: any) => ({\n          ...page,\n          sessions: page.sessions.filter((s: any) => s.id !== sessionId),\n        })),\n      };\n    });\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/feed/services/FeedService.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Session' is defined but never used.",
        "line": 8,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'cursor' is defined but never used.",
        "line": 123,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 123,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'cursor' is defined but never used.",
        "line": 146,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 146,
        "endColumn": 11
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Feed Service - Application Layer\n *\n * Orchestrates feed workflows and business logic.\n * Coordinates between repositories to build different feed types.\n */\n\nimport { Session } from '@/domain/entities/Session';\nimport {\n  FeedRepository,\n  FeedResult,\n} from '@/infrastructure/firebase/repositories/FeedRepository';\nimport { SocialGraphRepository } from '@/infrastructure/firebase/repositories/SocialGraphRepository';\nimport { SessionRepository } from '@/infrastructure/firebase/repositories/SessionRepository';\n\nexport type FeedType =\n  | 'following'\n  | 'trending'\n  | 'all'\n  | 'user'\n  | 'group'\n  | 'recent'\n  | 'group-members-unfollowed';\n\nexport interface FeedFilters {\n  type?: FeedType;\n  userId?: string;\n  groupId?: string;\n}\n\nexport interface FeedOptions {\n  limit?: number;\n  cursor?: string;\n}\n\nexport class FeedService {\n  private readonly feedRepo: FeedRepository;\n  private readonly socialGraphRepo: SocialGraphRepository;\n  private readonly sessionRepo: SessionRepository;\n\n  constructor() {\n    this.feedRepo = new FeedRepository();\n    this.socialGraphRepo = new SocialGraphRepository();\n    this.sessionRepo = new SessionRepository();\n  }\n\n  /**\n   * Get feed based on filters\n   */\n  async getFeed(\n    currentUserId: string,\n    filters: FeedFilters = {},\n    options: FeedOptions = {}\n  ): Promise<FeedResult> {\n    const { type = 'following' } = filters;\n    const { limit = 20, cursor } = options;\n\n    switch (type) {\n      case 'following':\n        return this.getFollowingFeed(currentUserId, limit, cursor);\n\n      case 'trending':\n      case 'all':\n      case 'recent':\n        return this.getPublicFeed(limit, cursor);\n\n      case 'user':\n        if (!filters.userId) {\n          throw new Error('userId required for user feed');\n        }\n        return this.getUserFeed(filters.userId, limit, cursor);\n\n      case 'group':\n        if (!filters.groupId) {\n          throw new Error('groupId required for group feed');\n        }\n        return this.getGroupFeed(filters.groupId, limit, cursor);\n\n      case 'group-members-unfollowed':\n        return this.getGroupMembersUnfollowedFeed(currentUserId, limit, cursor);\n\n      default:\n        throw new Error(`Unknown feed type: ${type}`);\n    }\n  }\n\n  /**\n   * Get feed from users the current user is following\n   */\n  private async getFollowingFeed(\n    currentUserId: string,\n    limit: number,\n    cursor?: string\n  ): Promise<FeedResult> {\n    // Get list of following\n    const followingIds =\n      await this.socialGraphRepo.getFollowingIds(currentUserId);\n\n    if (followingIds.length === 0) {\n      return { sessions: [], hasMore: false };\n    }\n\n    // Fetch sessions from followed users\n    return this.feedRepo.getFeedForFollowing(followingIds, limit, cursor);\n  }\n\n  /**\n   * Get public feed (all sessions with everyone visibility)\n   */\n  private async getPublicFeed(\n    limit: number,\n    cursor?: string\n  ): Promise<FeedResult> {\n    return this.feedRepo.getPublicFeed(limit, cursor);\n  }\n\n  /**\n   * Get feed for a specific user\n   */\n  private async getUserFeed(\n    userId: string,\n    limit: number,\n    cursor?: string\n  ): Promise<FeedResult> {\n    // Use SessionRepository's findByUserId method\n    const sessions = await this.sessionRepo.findByUserId(userId, limit);\n\n    // For now, we don't have pagination cursor support in SessionRepository\n    // This would need to be enhanced for proper pagination\n    return {\n      sessions,\n      hasMore: sessions.length >= limit,\n      nextCursor:\n        sessions.length >= limit\n          ? sessions[sessions.length - 1]?.id\n          : undefined,\n    };\n  }\n\n  /**\n   * Get feed for a specific group\n   */\n  private async getGroupFeed(\n    groupId: string,\n    limit: number,\n    cursor?: string\n  ): Promise<FeedResult> {\n    // Use SessionRepository's findByGroupId method\n    const sessions = await this.sessionRepo.findByGroupId(groupId, limit);\n\n    return {\n      sessions,\n      hasMore: sessions.length >= limit,\n      nextCursor:\n        sessions.length >= limit\n          ? sessions[sessions.length - 1]?.id\n          : undefined,\n    };\n  }\n\n  /**\n   * Get feed from group members who are not followed\n   */\n  private async getGroupMembersUnfollowedFeed(\n    currentUserId: string,\n    limit: number,\n    cursor?: string\n  ): Promise<FeedResult> {\n    // Get all group member IDs\n    const groupMemberIds =\n      await this.socialGraphRepo.getGroupMemberIds(currentUserId);\n\n    if (groupMemberIds.length === 0) {\n      return { sessions: [], hasMore: false };\n    }\n\n    // Get following IDs\n    const followingIds =\n      await this.socialGraphRepo.getFollowingIds(currentUserId);\n\n    // Fetch sessions from unfollowed group members\n    return this.feedRepo.getFeedForGroupMembersUnfollowed(\n      groupMemberIds,\n      followingIds,\n      limit,\n      cursor\n    );\n  }\n\n  /**\n   * Refresh feed (invalidate cache - handled by React Query in hooks layer)\n   */\n  async refreshFeed(\n    currentUserId: string,\n    filters: FeedFilters = {}\n  ): Promise<FeedResult> {\n    // Simply re-fetch with no cursor\n    return this.getFeed(currentUserId, filters, { limit: 20 });\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/components/GroupDetailPage.tsx",
    "messages": [
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 195,
        "column": 19,
        "nodeType": "JSXOpeningElement",
        "endLine": 199,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * GroupDetailPage - Presentation Component\n *\n * Displays group details using clean architecture.\n * This component ONLY handles presentation - no business logic.\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useGroupDetails } from '../hooks/useGroupDetails';\nimport { GroupLeaderboard } from './GroupLeaderboard';\nimport { GroupMembersList } from './GroupMembersList';\nimport { Users, Settings, ArrowLeft } from 'lucide-react';\n\ninterface GroupDetailPageProps {\n  groupId: string;\n}\n\nexport function GroupDetailPage({ groupId }: GroupDetailPageProps) {\n  const router = useRouter();\n  const { user } = useAuth();\n  const { group, isLoading, error } = useGroupDetails(groupId);\n\n  const [activeTab, setActiveTab] = useState<'leaderboard' | 'members'>(\n    'leaderboard'\n  );\n\n  // Dynamic metadata using useEffect for client component\n  React.useEffect(() => {\n    if (group) {\n      document.title = `${group.name} - Ambira`;\n\n      const description =\n        group.description || `Join ${group.name} group and connect with others`;\n\n      let metaDescription = document.querySelector('meta[name=\"description\"]');\n      if (!metaDescription) {\n        metaDescription = document.createElement('meta');\n        metaDescription.setAttribute('name', 'description');\n        document.head.appendChild(metaDescription);\n      }\n      metaDescription.setAttribute('content', description);\n\n      // Open Graph tags\n      let ogTitle = document.querySelector('meta[property=\"og:title\"]');\n      if (!ogTitle) {\n        ogTitle = document.createElement('meta');\n        ogTitle.setAttribute('property', 'og:title');\n        document.head.appendChild(ogTitle);\n      }\n      ogTitle.setAttribute('content', group.name);\n\n      let ogDescription = document.querySelector(\n        'meta[property=\"og:description\"]'\n      );\n      if (!ogDescription) {\n        ogDescription = document.createElement('meta');\n        ogDescription.setAttribute('property', 'og:description');\n        document.head.appendChild(ogDescription);\n      }\n      ogDescription.setAttribute('content', description);\n\n      let ogType = document.querySelector('meta[property=\"og:type\"]');\n      if (!ogType) {\n        ogType = document.createElement('meta');\n        ogType.setAttribute('property', 'og:type');\n        document.head.appendChild(ogType);\n      }\n      ogType.setAttribute('content', 'website');\n\n      // Twitter card tags\n      let twitterCard = document.querySelector('meta[name=\"twitter:card\"]');\n      if (!twitterCard) {\n        twitterCard = document.createElement('meta');\n        twitterCard.setAttribute('name', 'twitter:card');\n        document.head.appendChild(twitterCard);\n      }\n      twitterCard.setAttribute('content', 'summary');\n\n      let twitterTitle = document.querySelector('meta[name=\"twitter:title\"]');\n      if (!twitterTitle) {\n        twitterTitle = document.createElement('meta');\n        twitterTitle.setAttribute('name', 'twitter:title');\n        document.head.appendChild(twitterTitle);\n      }\n      twitterTitle.setAttribute('content', `${group.name} - Ambira`);\n\n      let twitterDescription = document.querySelector(\n        'meta[name=\"twitter:description\"]'\n      );\n      if (!twitterDescription) {\n        twitterDescription = document.createElement('meta');\n        twitterDescription.setAttribute('name', 'twitter:description');\n        document.head.appendChild(twitterDescription);\n      }\n      twitterDescription.setAttribute('content', description);\n    }\n  }, [group]);\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">\n            Please log in to view groups\n          </h1>\n          <p className=\"text-gray-600\">\n            You need to be logged in to view group details.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 py-6\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-32 bg-gray-200 rounded-lg mb-6\"></div>\n            <div className=\"h-12 bg-gray-200 rounded mb-6\"></div>\n            <div className=\"h-96 bg-gray-200 rounded\"></div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !group) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 py-6\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">\n              {error?.message || 'Group not found'}\n            </h1>\n            <p className=\"text-gray-600 mb-4\">\n              The group you're looking for doesn't exist or has been deleted.\n            </p>\n            <button\n              onClick={() => router.push('/groups')}\n              className=\"bg-[#007AFF] text-white px-4 py-2 rounded-lg hover:bg-[#0051D5]\"\n            >\n              Back to Groups\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const isAdmin = group.adminUserIds.includes(user.id);\n\n  // Get category icon\n  const getCategoryIcon = () => {\n    switch (group.category) {\n      case 'work':\n        return '💼';\n      case 'study':\n        return '📚';\n      case 'side-project':\n        return '💻';\n      case 'learning':\n        return '🎓';\n      default:\n        return '📌';\n    }\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-8\">\n      {/* Mobile Header with Back Button */}\n      <div className=\"sm:hidden mb-4\">\n        <button\n          onClick={() => router.back()}\n          className=\"p-2 -ml-2 text-gray-900 hover:bg-gray-100 rounded-lg transition-colors\"\n          aria-label=\"Go back\"\n        >\n          <ArrowLeft className=\"w-6 h-6\" />\n        </button>\n      </div>\n\n      <div className=\"flex gap-8\">\n        {/* Main Content */}\n        <div className=\"flex-1\">\n          {/* Group Header */}\n          <div className=\"mb-6\">\n            <div className=\"flex flex-col sm:flex-row items-start gap-4\">\n              {/* Group Avatar */}\n              <div className=\"w-20 h-20 sm:w-32 sm:h-32 bg-gradient-to-br from-[#007AFF] to-[#0051D5] rounded-full flex items-center justify-center flex-shrink-0\">\n                {group.imageUrl ? (\n                  <img\n                    src={group.imageUrl}\n                    alt={group.name}\n                    className=\"w-full h-full rounded-full object-cover\"\n                  />\n                ) : (\n                  <Users className=\"w-10 h-10 sm:w-16 sm:h-16 text-white\" />\n                )}\n              </div>\n\n              <div className=\"flex-1 min-w-0 w-full\">\n                {/* Group Name and Action Buttons */}\n                <div className=\"flex items-center gap-2 sm:gap-3 mb-2 flex-wrap\">\n                  <h1 className=\"text-2xl sm:text-3xl font-bold text-gray-900\">\n                    {group.name}\n                  </h1>\n                  {isAdmin && (\n                    <button\n                      onClick={() =>\n                        router.push(`/groups/${group.id}/settings`)\n                      }\n                      className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n                      aria-label=\"Edit group\"\n                    >\n                      <Settings className=\"w-5 h-5 text-gray-600\" />\n                    </button>\n                  )}\n                </div>\n\n                {/* Category and Location */}\n                <div className=\"flex flex-wrap items-center gap-3 sm:gap-4 mb-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"text-xl sm:text-2xl\">\n                      {getCategoryIcon()}\n                    </span>\n                    <span className=\"text-xs sm:text-sm text-gray-600 capitalize\">\n                      {group.category.replace('-', ' ')}\n                    </span>\n                  </div>\n\n                  {group.location && (\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-base sm:text-lg\">📍</span>\n                      <span className=\"text-xs sm:text-sm text-gray-600\">\n                        {group.location}\n                      </span>\n                    </div>\n                  )}\n                </div>\n\n                {/* Description */}\n                {group.description && (\n                  <p className=\"text-sm sm:text-base text-gray-700 mb-4 whitespace-pre-line max-h-24 overflow-y-auto\">\n                    {group.description}\n                  </p>\n                )}\n\n                {/* Member Count */}\n                <div className=\"text-sm text-gray-600\">\n                  {group.memberCount || group.memberIds.length} member\n                  {(group.memberCount || group.memberIds.length) !== 1\n                    ? 's'\n                    : ''}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Tabs */}\n          <div className=\"border-b border-gray-200 mb-6 -mx-4 sm:mx-0\">\n            <nav\n              className=\"flex gap-4 sm:gap-8 overflow-x-auto px-4 sm:px-0\"\n              aria-label=\"Group tabs\"\n            >\n              <button\n                onClick={() => setActiveTab('leaderboard')}\n                className={`pb-3 px-1 text-sm font-medium border-b-2 transition-colors whitespace-nowrap ${\n                  activeTab === 'leaderboard'\n                    ? 'border-gray-900 text-gray-900'\n                    : 'border-transparent text-gray-600 hover:text-gray-900'\n                }`}\n              >\n                Group Leaderboard\n              </button>\n              <button\n                onClick={() => setActiveTab('members')}\n                className={`pb-3 px-1 text-sm font-medium border-b-2 transition-colors whitespace-nowrap ${\n                  activeTab === 'members'\n                    ? 'border-gray-900 text-gray-900'\n                    : 'border-transparent text-gray-600 hover:text-gray-900'\n                }`}\n              >\n                Members\n              </button>\n            </nav>\n          </div>\n\n          {/* Tab Content */}\n          <div>\n            {activeTab === 'leaderboard' && (\n              <div>\n                <h2 className=\"text-xl font-bold text-gray-900 mb-4\">\n                  Group Leaderboard\n                </h2>\n                <GroupLeaderboard groupId={groupId} />\n              </div>\n            )}\n\n            {activeTab === 'members' && (\n              <div>\n                <h2 className=\"text-xl font-bold text-gray-900 mb-4\">\n                  Members\n                </h2>\n                <GroupMembersList groupId={groupId} />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/components/GroupLeaderboard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/components/GroupMembersList.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/domain/LeaderboardCalculator.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/domain/__tests__/LeaderboardCalculator.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/hooks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/hooks/useGroupDetails.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/hooks/useGroupLeaderboard.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 108,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 108,
        "endColumn": 23
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * useGroupLeaderboard Hook\n *\n * Fetches and manages group leaderboard data based on member activity.\n */\n\nimport { useQuery } from '@tanstack/react-query';\nimport {\n  collection,\n  query,\n  where,\n  getDocs,\n  getDoc,\n  doc,\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { STANDARD_CACHE_TIMES } from '@/lib/react-query';\n\nexport interface LeaderboardEntry {\n  userId: string;\n  name: string;\n  username: string;\n  profilePicture?: string;\n  totalHours: number;\n  sessionCount: number;\n  rank: number;\n}\n\nexport function useGroupLeaderboard(\n  groupId: string,\n  timeframe: 'week' | 'month' | 'allTime' = 'allTime'\n) {\n  return useQuery({\n    queryKey: ['group-leaderboard', groupId, timeframe],\n    queryFn: async () => {\n      // Fetch group memberships\n      const membershipsRef = collection(db, 'groupMemberships');\n      const membershipsQuery = query(\n        membershipsRef,\n        where('groupId', '==', groupId),\n        where('status', '==', 'active')\n      );\n\n      const membershipsSnapshot = await getDocs(membershipsQuery);\n      const memberIds = membershipsSnapshot.docs.map(doc => doc.data().userId);\n\n      if (memberIds.length === 0) {\n        return [];\n      }\n\n      // Calculate date range based on timeframe\n      let startDate: Date | undefined;\n      const now = new Date();\n\n      if (timeframe === 'week') {\n        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      } else if (timeframe === 'month') {\n        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n      }\n\n      // Fetch sessions for each member\n      const leaderboardPromises = memberIds.map(async userId => {\n        try {\n          // Fetch user data\n          const userDoc = await getDoc(doc(db, 'users', userId));\n          if (!userDoc.exists()) {\n            return null;\n          }\n\n          const userData = userDoc.data();\n\n          // Fetch sessions\n          const sessionsRef = collection(db, 'sessions');\n          let sessionsQuery = query(sessionsRef, where('userId', '==', userId));\n\n          // Add date filter if needed\n          if (startDate) {\n            sessionsQuery = query(\n              sessionsRef,\n              where('userId', '==', userId),\n              where('createdAt', '>=', startDate)\n            );\n          }\n\n          const sessionsSnapshot = await getDocs(sessionsQuery);\n\n          // Calculate total hours and session count\n          let totalSeconds = 0;\n          let sessionCount = 0;\n\n          sessionsSnapshot.docs.forEach(sessionDoc => {\n            const sessionData = sessionDoc.data();\n            totalSeconds += sessionData.duration || 0;\n            sessionCount++;\n          });\n\n          const totalHours = totalSeconds / 3600;\n\n          return {\n            userId,\n            name: userData.name || 'Unknown User',\n            username: userData.username || 'unknown',\n            profilePicture: userData.profilePicture,\n            totalHours,\n            sessionCount,\n            rank: 0, // Will be set after sorting\n          } as LeaderboardEntry;\n        } catch (error) {\n          // Failed to fetch leaderboard data for user\n          return null;\n        }\n      });\n\n      const leaderboardData = await Promise.all(leaderboardPromises);\n\n      // Filter out null values and sort by total hours\n      const validEntries = leaderboardData\n        .filter((entry): entry is LeaderboardEntry => entry !== null)\n        .sort((a, b) => b.totalHours - a.totalHours);\n\n      // Assign ranks\n      validEntries.forEach((entry, index) => {\n        entry.rank = index + 1;\n      });\n\n      return validEntries;\n    },\n    staleTime: STANDARD_CACHE_TIMES.SHORT, // 1 minute - leaderboard data changes frequently\n    enabled: !!groupId,\n  });\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/hooks/useGroupMembers.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 67,
        "column": 20,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 25
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * useGroupMembers Hook\n *\n * Fetches and manages group member data with their profiles.\n */\n\nimport { useQuery } from '@tanstack/react-query';\nimport {\n  collection,\n  query,\n  where,\n  getDocs,\n  getDoc,\n  doc,\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { STANDARD_CACHE_TIMES } from '@/lib/react-query';\n\nexport interface GroupMember {\n  id: string;\n  name: string;\n  username: string;\n  email: string;\n  profilePicture?: string;\n  bio?: string;\n  joinedAt: Date;\n}\n\nexport function useGroupMembers(groupId: string) {\n  return useQuery({\n    queryKey: ['group-members', groupId],\n    queryFn: async () => {\n      // Fetch group memberships\n      const membershipsRef = collection(db, 'groupMemberships');\n      const q = query(\n        membershipsRef,\n        where('groupId', '==', groupId),\n        where('status', '==', 'active')\n      );\n\n      const membershipsSnapshot = await getDocs(q);\n\n      // Fetch user details for each member\n      const memberPromises = membershipsSnapshot.docs.map(\n        async membershipDoc => {\n          const membershipData = membershipDoc.data();\n          const userId = membershipData.userId;\n\n          try {\n            const userDoc = await getDoc(doc(db, 'users', userId));\n\n            if (!userDoc.exists()) {\n              return null;\n            }\n\n            const userData = userDoc.data();\n\n            return {\n              id: userId,\n              name: userData.name || 'Unknown User',\n              username: userData.username || 'unknown',\n              email: userData.email || '',\n              profilePicture: userData.profilePicture,\n              bio: userData.bio,\n              joinedAt: membershipData.joinedAt?.toDate() || new Date(),\n            } as GroupMember;\n          } catch (error) {\n            // Failed to fetch user\n            return null;\n          }\n        }\n      );\n\n      const members = await Promise.all(memberPromises);\n\n      // Filter out null values (deleted/inaccessible users)\n      return members.filter((member): member is GroupMember => member !== null);\n    },\n    staleTime: STANDARD_CACHE_TIMES.MEDIUM, // 5 minutes\n    enabled: !!groupId,\n  });\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/hooks/useGroupMutations.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 57,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 57,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1651, 1654], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1651, 1654], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 143,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 143,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4004, 4007], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4004, 4007], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 152,
        "column": 70,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 152,
        "endColumn": 73,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4292, 4295], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4292, 4295], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 154,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 154,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4381, 4384], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4381, 4384], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Group Mutations - React Query Boundary\n *\n * This file contains all group mutation hooks (create, update, delete, join, leave).\n * Includes optimistic updates and cache invalidation.\n */\n\nimport {\n  useMutation,\n  useQueryClient,\n  UseMutationOptions,\n} from '@tanstack/react-query';\nimport { GroupService } from '../services/GroupService';\nimport { GROUPS_KEYS } from './useGroups';\n\n// Singleton service instance\nconst groupService = new GroupService();\n\n// ==================== MUTATION HOOKS ====================\n\n/**\n * Join a group\n *\n * @example\n * const joinMutation = useJoinGroup();\n * joinMutation.mutate({ groupId: '123', userId: 'user-456' });\n */\nexport function useJoinGroup(\n  options?: Partial<\n    UseMutationOptions<void, Error, { groupId: string; userId: string }>\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<void, Error, { groupId: string; userId: string }>({\n    mutationFn: ({ groupId, userId }) =>\n      groupService.joinGroup(groupId, userId),\n\n    onMutate: async ({ groupId, userId }) => {\n      // Cancel outgoing queries\n      await queryClient.cancelQueries({\n        queryKey: GROUPS_KEYS.detail(groupId),\n      });\n      await queryClient.cancelQueries({\n        queryKey: GROUPS_KEYS.userGroups(userId),\n      });\n\n      // Snapshot previous values for rollback\n      const previousGroup = queryClient.getQueryData(\n        GROUPS_KEYS.detail(groupId)\n      );\n      const previousUserGroups = queryClient.getQueryData(\n        GROUPS_KEYS.userGroups(userId)\n      );\n\n      // Optimistically update group member count\n      queryClient.setQueryData(GROUPS_KEYS.detail(groupId), (old: any) => {\n        if (!old) return old;\n        return {\n          ...old,\n          memberIds: [...old.memberIds, userId],\n        };\n      });\n\n      return { previousGroup, previousUserGroups };\n    },\n\n    onError: (error, variables, context: unknown) => {\n      // Rollback on error\n      if (\n        context &&\n        typeof context === 'object' &&\n        'previousGroup' in context &&\n        context.previousGroup\n      ) {\n        queryClient.setQueryData(\n          GROUPS_KEYS.detail(variables.groupId),\n          context.previousGroup\n        );\n      }\n      if (\n        context &&\n        typeof context === 'object' &&\n        'previousUserGroups' in context &&\n        context.previousUserGroups\n      ) {\n        queryClient.setQueryData(\n          GROUPS_KEYS.userGroups(variables.userId),\n          context.previousUserGroups\n        );\n      }\n    },\n\n    onSuccess: (_, { groupId, userId }) => {\n      // Invalidate relevant caches\n      queryClient.invalidateQueries({ queryKey: GROUPS_KEYS.detail(groupId) });\n      queryClient.invalidateQueries({\n        queryKey: GROUPS_KEYS.userGroups(userId),\n      });\n      queryClient.invalidateQueries({ queryKey: GROUPS_KEYS.stats(groupId) });\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Leave a group\n *\n * @example\n * const leaveMutation = useLeaveGroup();\n * leaveMutation.mutate({ groupId: '123', userId: 'user-456' });\n */\nexport function useLeaveGroup(\n  options?: Partial<\n    UseMutationOptions<void, Error, { groupId: string; userId: string }>\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<void, Error, { groupId: string; userId: string }>({\n    mutationFn: ({ groupId, userId }) =>\n      groupService.leaveGroup(groupId, userId),\n\n    onMutate: async ({ groupId, userId }) => {\n      // Cancel outgoing queries\n      await queryClient.cancelQueries({\n        queryKey: GROUPS_KEYS.detail(groupId),\n      });\n      await queryClient.cancelQueries({\n        queryKey: GROUPS_KEYS.userGroups(userId),\n      });\n\n      // Snapshot previous values\n      const previousGroup = queryClient.getQueryData(\n        GROUPS_KEYS.detail(groupId)\n      );\n      const previousUserGroups = queryClient.getQueryData(\n        GROUPS_KEYS.userGroups(userId)\n      );\n\n      // Optimistically update group\n      queryClient.setQueryData(GROUPS_KEYS.detail(groupId), (old: any) => {\n        if (!old) return old;\n        return {\n          ...old,\n          memberIds: old.memberIds.filter((id: string) => id !== userId),\n        };\n      });\n\n      // Optimistically remove from user groups\n      queryClient.setQueryData(GROUPS_KEYS.userGroups(userId), (old: any) => {\n        if (!Array.isArray(old)) return old;\n        return old.filter((group: any) => group.id !== groupId);\n      });\n\n      return { previousGroup, previousUserGroups };\n    },\n\n    onError: (error, variables, context: unknown) => {\n      // Rollback on error\n      if (\n        context &&\n        typeof context === 'object' &&\n        'previousGroup' in context &&\n        context.previousGroup\n      ) {\n        queryClient.setQueryData(\n          GROUPS_KEYS.detail(variables.groupId),\n          context.previousGroup\n        );\n      }\n      if (\n        context &&\n        typeof context === 'object' &&\n        'previousUserGroups' in context &&\n        context.previousUserGroups\n      ) {\n        queryClient.setQueryData(\n          GROUPS_KEYS.userGroups(variables.userId),\n          context.previousUserGroups\n        );\n      }\n    },\n\n    onSuccess: (_, { groupId, userId }) => {\n      // Invalidate relevant caches\n      queryClient.invalidateQueries({ queryKey: GROUPS_KEYS.detail(groupId) });\n      queryClient.invalidateQueries({\n        queryKey: GROUPS_KEYS.userGroups(userId),\n      });\n      queryClient.invalidateQueries({ queryKey: GROUPS_KEYS.stats(groupId) });\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Helper hook to invalidate all group-related queries\n * Useful for scenarios where you need to refresh all group data\n *\n * @example\n * const invalidateGroups = useInvalidateGroups();\n * invalidateGroups();\n */\nexport function useInvalidateGroups() {\n  const queryClient = useQueryClient();\n\n  return () => {\n    queryClient.invalidateQueries({ queryKey: GROUPS_KEYS.all() });\n  };\n}\n\n/**\n * Helper hook to invalidate specific group data\n *\n * @example\n * const invalidateGroup = useInvalidateGroup();\n * invalidateGroup('group-123');\n */\nexport function useInvalidateGroup() {\n  const queryClient = useQueryClient();\n\n  return (groupId: string) => {\n    queryClient.invalidateQueries({ queryKey: GROUPS_KEYS.detail(groupId) });\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/hooks/useGroups.ts",
    "messages": [
      {
        "ruleId": "@tanstack/query/exhaustive-deps",
        "severity": 1,
        "message": "The following dependencies are missing in your queryKey: limit",
        "line": 142,
        "column": 5,
        "nodeType": "Property",
        "messageId": "missingDeps",
        "endLine": 142,
        "endColumn": 41
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Groups Feature Hooks - React Query Boundary\n *\n * This is the ONLY place where React Query should be used for groups.\n * All components should use these hooks instead of direct React Query or firebaseApi calls.\n *\n * Architecture:\n * Components → useGroups hooks (React Query) → GroupService → GroupRepository → Firebase\n */\n\nimport { useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { GroupService } from '../services/GroupService';\nimport { Group as DomainGroup } from '@/domain/entities/Group';\nimport { Group as UIGroup } from '@/types';\nimport {\n  LeaderboardEntry,\n  TimePeriod,\n  GroupStats,\n} from '../types/groups.types';\n\n// Singleton service instance\nconst groupService = new GroupService();\n\n// ==================== ADAPTERS ====================\n/**\n * Convert domain Group entity to UI Group interface\n * Maps domain model to the shape expected by UI components\n */\nfunction adaptDomainGroupToUI(domainGroup: DomainGroup): UIGroup {\n  return {\n    id: domainGroup.id,\n    name: domainGroup.name,\n    description: domainGroup.description,\n    category: domainGroup.category,\n    type: 'professional', // Default type - can be made configurable\n    privacySetting:\n      domainGroup.privacy === 'public' ? 'public' : 'approval-required',\n    memberCount: domainGroup.getMemberCount(),\n    adminUserIds: Array.from(domainGroup.adminUserIds),\n    memberIds: Array.from(domainGroup.memberIds),\n    createdByUserId: domainGroup.createdByUserId,\n    createdAt: domainGroup.createdAt,\n    updatedAt: domainGroup.createdAt, // Use createdAt as updatedAt since domain doesn't track it\n    imageUrl: domainGroup.imageUrl,\n    location: domainGroup.location,\n    // Optional fields - add defaults if needed by UI layer\n    icon: undefined,\n    color: undefined,\n    bannerUrl: undefined,\n  };\n}\n\n/**\n * Convert array of domain Groups to UI Groups\n */\nfunction adaptDomainGroupsToUI(domainGroups: DomainGroup[]): UIGroup[] {\n  return domainGroups.map(adaptDomainGroupToUI);\n}\n\n// ==================== CACHE KEYS ====================\n// Hierarchical cache keys for efficient invalidation\nexport const GROUPS_KEYS = {\n  all: () => ['groups'] as const,\n  lists: () => [...GROUPS_KEYS.all(), 'list'] as const,\n  list: (filters?: string) => [...GROUPS_KEYS.lists(), { filters }] as const,\n  details: () => [...GROUPS_KEYS.all(), 'detail'] as const,\n  detail: (id: string) => [...GROUPS_KEYS.details(), id] as const,\n  userGroups: (userId: string) =>\n    [...GROUPS_KEYS.all(), 'user', userId] as const,\n  publicGroups: () => [...GROUPS_KEYS.lists(), 'public'] as const,\n  leaderboard: (groupId: string, period: TimePeriod) =>\n    [...GROUPS_KEYS.detail(groupId), 'leaderboard', period] as const,\n  stats: (groupId: string) =>\n    [...GROUPS_KEYS.detail(groupId), 'stats'] as const,\n};\n\n// ==================== CACHE TIMES ====================\nconst CACHE_TIMES = {\n  SHORT: 1 * 60 * 1000, // 1 minute\n  MEDIUM: 5 * 60 * 1000, // 5 minutes\n  LONG: 15 * 60 * 1000, // 15 minutes\n  VERY_LONG: 60 * 60 * 1000, // 1 hour\n};\n\n// ==================== QUERY HOOKS ====================\n\n/**\n * Get details for a specific group\n *\n * @example\n * const { data: group, isLoading, error } = useGroupDetails(groupId);\n */\nexport function useGroupDetails(\n  groupId: string,\n  options?: Partial<UseQueryOptions<UIGroup | null, Error>>\n) {\n  return useQuery<UIGroup | null, Error>({\n    queryKey: GROUPS_KEYS.detail(groupId),\n    queryFn: async () => {\n      const domainGroup = await groupService.getGroupDetails(groupId);\n      return domainGroup ? adaptDomainGroupToUI(domainGroup) : null;\n    },\n    staleTime: CACHE_TIMES.LONG, // 15 minutes cache\n    enabled: !!groupId,\n    ...options,\n  });\n}\n\n/**\n * Get all groups the user is a member of\n *\n * @example\n * const { data: userGroups, isLoading } = useUserGroups(userId);\n */\nexport function useUserGroups(\n  userId: string,\n  options?: Partial<UseQueryOptions<UIGroup[], Error>>\n) {\n  return useQuery<UIGroup[], Error>({\n    queryKey: GROUPS_KEYS.userGroups(userId),\n    queryFn: async () => {\n      const domainGroups = await groupService.getUserGroups(userId);\n      return adaptDomainGroupsToUI(domainGroups);\n    },\n    staleTime: CACHE_TIMES.LONG, // 15 minutes cache\n    enabled: !!userId,\n    ...options,\n  });\n}\n\n/**\n * Get all public groups for discovery\n *\n * @example\n * const { data: publicGroups, isLoading } = usePublicGroups();\n */\nexport function usePublicGroups(\n  limit?: number,\n  options?: Partial<UseQueryOptions<UIGroup[], Error>>\n) {\n  return useQuery<UIGroup[], Error>({\n    queryKey: GROUPS_KEYS.publicGroups(),\n    queryFn: async () => {\n      const domainGroups = await groupService.getPublicGroups(limit);\n      return adaptDomainGroupsToUI(domainGroups);\n    },\n    staleTime: CACHE_TIMES.LONG, // 15 minutes cache\n    ...options,\n  });\n}\n\n/**\n * Get group leaderboard for a specific time period\n *\n * @example\n * const { data: leaderboard } = useGroupLeaderboard(groupId, 'week');\n */\nexport function useGroupLeaderboard(\n  groupId: string,\n  period: TimePeriod,\n  options?: Partial<UseQueryOptions<LeaderboardEntry[], Error>>\n) {\n  return useQuery<LeaderboardEntry[], Error>({\n    queryKey: GROUPS_KEYS.leaderboard(groupId, period),\n    queryFn: () => groupService.getGroupLeaderboard(groupId, period),\n    staleTime: CACHE_TIMES.MEDIUM, // 5 minutes cache for leaderboards\n    enabled: !!groupId,\n    ...options,\n  });\n}\n\n/**\n * Get group statistics\n *\n * @example\n * const { data: stats } = useGroupStats(groupId);\n */\nexport function useGroupStats(\n  groupId: string,\n  options?: Partial<UseQueryOptions<GroupStats, Error>>\n) {\n  return useQuery<GroupStats, Error>({\n    queryKey: GROUPS_KEYS.stats(groupId),\n    queryFn: () => groupService.getGroupStats(groupId),\n    staleTime: CACHE_TIMES.MEDIUM, // 5 minutes cache for stats\n    enabled: !!groupId,\n    ...options,\n  });\n}\n\n/**\n * Check if a user can join a specific group\n *\n * @example\n * const { data: canJoin } = useCanJoinGroup(groupId, userId);\n */\nexport function useCanJoinGroup(\n  groupId: string,\n  userId: string,\n  options?: Partial<UseQueryOptions<boolean, Error>>\n) {\n  return useQuery<boolean, Error>({\n    queryKey: [...GROUPS_KEYS.detail(groupId), 'canJoin', userId],\n    queryFn: () => groupService.canUserJoin(groupId, userId),\n    staleTime: CACHE_TIMES.MEDIUM,\n    enabled: !!groupId && !!userId,\n    ...options,\n  });\n}\n\n/**\n * Check if a user can invite others to a specific group\n *\n * @example\n * const { data: canInvite } = useCanInviteToGroup(groupId, userId);\n */\nexport function useCanInviteToGroup(\n  groupId: string,\n  userId: string,\n  options?: Partial<UseQueryOptions<boolean, Error>>\n) {\n  return useQuery<boolean, Error>({\n    queryKey: [...GROUPS_KEYS.detail(groupId), 'canInvite', userId],\n    queryFn: () => groupService.canUserInvite(groupId, userId),\n    staleTime: CACHE_TIMES.MEDIUM,\n    enabled: !!groupId && !!userId,\n    ...options,\n  });\n}\n\n/**\n * Get all groups with optional filters\n *\n * @example\n * const { data: groups } = useGroups({ category: 'fitness' });\n */\nexport function useGroups(\n  filters?: Record<string, unknown>,\n  options?: Partial<UseQueryOptions<UIGroup[], Error>>\n) {\n  return useQuery<UIGroup[], Error>({\n    queryKey: GROUPS_KEYS.list(JSON.stringify(filters || {})),\n    queryFn: async () => {\n      const domainGroups = await groupService.getPublicGroups();\n      return adaptDomainGroupsToUI(domainGroups);\n    },\n    staleTime: CACHE_TIMES.LONG,\n    ...options,\n  });\n}\n\n/**\n * Search for groups with specific criteria\n *\n * @example\n * const { data: groups } = useGroupSearch({ name: 'fitness' }, 50);\n */\nexport function useGroupSearch(\n  filters: { name?: string; location?: string; category?: string },\n  limit: number = 50,\n  options?: Partial<UseQueryOptions<UIGroup[], Error>>\n) {\n  return useQuery<UIGroup[], Error>({\n    queryKey: [...GROUPS_KEYS.lists(), 'search', filters, limit],\n    queryFn: async () => {\n      // Get all public groups and filter client-side\n      const domainGroups = await groupService.getPublicGroups(limit);\n      const filtered = domainGroups.filter(group => {\n        const matchesName =\n          !filters.name ||\n          group.name.toLowerCase().includes(filters.name.toLowerCase());\n        const matchesLocation =\n          !filters.location ||\n          group.location\n            ?.toLowerCase()\n            .includes(filters.location.toLowerCase());\n        const matchesCategory =\n          !filters.category || group.category === filters.category;\n        return matchesName && matchesLocation && matchesCategory;\n      });\n      return adaptDomainGroupsToUI(filtered);\n    },\n    staleTime: CACHE_TIMES.SHORT,\n    ...options,\n  });\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/services/GroupService.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 274,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 274,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7152, 7155], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7152, 7155], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 275,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 275,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7230, 7233], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7230, 7233], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Group Service - Application Layer\n *\n * Orchestrates business workflows for groups.\n * Coordinates between repositories and domain services.\n */\n\nimport { Group } from '@/domain/entities/Group';\nimport { GroupRepository } from '@/infrastructure/firebase/repositories/GroupRepository';\nimport { UserRepository } from '@/infrastructure/firebase/repositories/UserRepository';\nimport { SessionRepository } from '@/infrastructure/firebase/repositories/SessionRepository';\nimport { LeaderboardCalculator } from '../domain/LeaderboardCalculator';\nimport {\n  LeaderboardEntry,\n  TimePeriod,\n  GroupStats,\n} from '../types/groups.types';\n\n/**\n * Note: For now, we're using direct instantiation.\n * In the future, we can add DI (tsyringe) for better testability.\n */\nexport class GroupService {\n  private readonly groupRepo: GroupRepository;\n  private readonly userRepo: UserRepository;\n  private readonly sessionRepo: SessionRepository;\n  private readonly leaderboardCalc: LeaderboardCalculator;\n\n  constructor() {\n    this.groupRepo = new GroupRepository();\n    this.userRepo = new UserRepository();\n    this.sessionRepo = new SessionRepository();\n    this.leaderboardCalc = new LeaderboardCalculator();\n  }\n\n  /**\n   * Get group details by ID\n   */\n  async getGroupDetails(groupId: string): Promise<Group | null> {\n    return this.groupRepo.findById(groupId);\n  }\n\n  /**\n   * Get groups for a user\n   */\n  async getUserGroups(userId: string, limit?: number): Promise<Group[]> {\n    return this.groupRepo.findByMemberId(userId, limit);\n  }\n\n  /**\n   * Get public groups\n   */\n  async getPublicGroups(limit?: number): Promise<Group[]> {\n    return this.groupRepo.findPublic(limit);\n  }\n\n  /**\n   * Join a group\n   */\n  async joinGroup(groupId: string, userId: string): Promise<void> {\n    const group = await this.groupRepo.findById(groupId);\n\n    if (!group) {\n      throw new Error('Group not found');\n    }\n\n    // Business rule: Check if already a member\n    if (group.isMember(userId)) {\n      throw new Error('Already a member of this group');\n    }\n\n    // Create updated group with new member\n    const updatedGroup = group.withAddedMember(userId);\n\n    // Save to repository\n    await this.groupRepo.save(updatedGroup);\n  }\n\n  /**\n   * Leave a group\n   */\n  async leaveGroup(groupId: string, userId: string): Promise<void> {\n    const group = await this.groupRepo.findById(groupId);\n\n    if (!group) {\n      throw new Error('Group not found');\n    }\n\n    // Business rule: Check if member\n    if (!group.isMember(userId)) {\n      throw new Error('Not a member of this group');\n    }\n\n    // Business rule: Owner cannot leave\n    if (group.isOwner(userId)) {\n      throw new Error(\n        'Group owner cannot leave. Please delete the group or transfer ownership first.'\n      );\n    }\n\n    // Create updated group with member removed\n    const updatedGroup = group.withRemovedMember(userId);\n\n    // Save to repository\n    await this.groupRepo.save(updatedGroup);\n  }\n\n  /**\n   * Get group leaderboard\n   */\n  async getGroupLeaderboard(\n    groupId: string,\n    period: TimePeriod\n  ): Promise<LeaderboardEntry[]> {\n    const group = await this.groupRepo.findById(groupId);\n\n    if (!group) {\n      throw new Error('Group not found');\n    }\n\n    // Fetch all members (convert readonly array to mutable)\n    const memberIds = Array.from(group.memberIds);\n    const users = await this.userRepo.findByIds(memberIds);\n\n    // Calculate date range based on period\n    const dateRange = this.getDateRangeForPeriod(period);\n\n    // Fetch sessions for all group members in the date range\n    const sessions = await this.sessionRepo.findByUserIds(memberIds, {\n      groupId: groupId,\n      startDate: dateRange.start,\n      endDate: dateRange.end,\n    });\n\n    // Calculate leaderboard using domain service\n    return this.leaderboardCalc.calculate(users, sessions, period);\n  }\n\n  /**\n   * Helper method to get date range for a time period\n   */\n  private getDateRangeForPeriod(period: TimePeriod): {\n    start: Date;\n    end: Date;\n  } {\n    const now = new Date();\n    const end = now;\n    let start: Date;\n\n    switch (period) {\n      case 'today':\n        start = new Date(now);\n        start.setHours(0, 0, 0, 0);\n        break;\n\n      case 'week':\n        start = new Date(now);\n        start.setDate(start.getDate() - 7);\n        break;\n\n      case 'month':\n        start = new Date(now);\n        start.setMonth(start.getMonth() - 1);\n        break;\n\n      case 'all-time':\n        start = new Date(0); // Beginning of time\n        break;\n\n      default:\n        start = new Date(now);\n        start.setDate(start.getDate() - 7);\n    }\n\n    return { start, end };\n  }\n\n  /**\n   * Get group stats\n   */\n  async getGroupStats(groupId: string): Promise<GroupStats> {\n    const group = await this.groupRepo.findById(groupId);\n\n    if (!group) {\n      throw new Error('Group not found');\n    }\n\n    // Fetch all sessions for this group\n    const allSessions = await this.sessionRepo.findByGroupId(groupId, 1000);\n\n    // Calculate total hours\n    const totalSeconds = allSessions.reduce(\n      (sum, session) => sum + session.duration,\n      0\n    );\n    const totalHours = totalSeconds / 3600;\n\n    // Get sessions from the last week\n    const weekAgo = new Date();\n    weekAgo.setDate(weekAgo.getDate() - 7);\n    const recentSessions = allSessions.filter(s => s.createdAt >= weekAgo);\n\n    // Count unique active members this week\n    const activeMemberIds = new Set(recentSessions.map(s => s.userId));\n\n    return {\n      memberCount: group.getMemberCount(),\n      totalSessions: allSessions.length,\n      totalHours: Math.round(totalHours * 10) / 10, // Round to 1 decimal\n      activeMembersThisWeek: activeMemberIds.size,\n    };\n  }\n\n  /**\n   * Check if user can join group\n   */\n  async canUserJoin(groupId: string, userId: string): Promise<boolean> {\n    const group = await this.groupRepo.findById(groupId);\n\n    if (!group) {\n      return false;\n    }\n\n    // Cannot join if already a member\n    if (group.isMember(userId)) {\n      return false;\n    }\n\n    // Can join if group is public\n    if (group.privacy === 'public') {\n      return true;\n    }\n\n    // For approval-required groups, would need invitation logic\n    return false;\n  }\n\n  /**\n   * Check if user can invite to group\n   */\n  async canUserInvite(groupId: string, userId: string): Promise<boolean> {\n    const group = await this.groupRepo.findById(groupId);\n\n    if (!group) {\n      return false;\n    }\n\n    return group.canUserInvite(userId);\n  }\n\n  /**\n   * Create a new group\n   */\n  async createGroup(\n    data: {\n      name: string;\n      description: string;\n      category: string;\n      privacySetting: 'public' | 'approval-required';\n      location?: string;\n      imageUrl?: string;\n      [key: string]: unknown; // Allow additional properties from CreateGroupData\n    },\n    userId: string\n  ): Promise<Group> {\n    // Generate ID for the group\n    const groupId = this.generateGroupId();\n\n    // Create domain group with creator as both member and admin\n    const group = new Group(\n      groupId,\n      data.name,\n      data.description,\n      (data.category as any) || 'other', // Map to domain category type\n      (data.privacySetting as any) === 'approval-required'\n        ? 'approval-required'\n        : 'public',\n      [userId], // Creator is first member\n      [userId], // Creator is first admin\n      userId,\n      new Date(),\n      data.location,\n      data.imageUrl\n    );\n\n    // Save to repository\n    await this.groupRepo.save(group);\n\n    return group;\n  }\n\n  /**\n   * Generate a unique group ID\n   */\n  private generateGroupId(): string {\n    // Simple ID generation using timestamp + random suffix\n    return `group_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/types/groups.types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/profile/components/OwnProfilePageContent.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 481,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 481,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14438, 14441], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14438, 14441], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 486,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 486,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14700, 14703], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14700, 14703], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Own Profile Page Content Component (Clean Architecture)\n *\n * This component handles the current user's profile presentation logic.\n * Extracted from the route file for better separation of concerns.\n */\n\n'use client';\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport Header from '@/components/HeaderComponent';\nimport MobileHeader from '@/components/MobileHeader';\nimport BottomNavigation from '@/components/BottomNavigation';\nimport Footer from '@/components/Footer';\nimport {\n  useProfileById,\n  useProfileStats,\n  useFollowers,\n  useFollowing,\n} from '@/features/profile/hooks';\nimport { useUserSessions } from '@/features/sessions/hooks';\nimport { useProjects } from '@/features/projects/hooks';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport {\n  Settings,\n  LogOut,\n  Edit,\n  TrendingUp,\n  BarChart3,\n  ChevronDown,\n  BarChart2,\n  MapPin,\n} from 'lucide-react';\nimport {\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  Tooltip,\n  Area,\n  ComposedChart,\n  BarChart,\n  Bar,\n} from 'recharts';\nimport { useSearchParams, useRouter } from 'next/navigation';\nimport Feed from '@/components/Feed';\nimport { ActivityList } from '@/components/ActivityList';\nimport { Activity } from '@/types';\nimport { FollowersList } from '@/features/social/components/FollowersList';\nimport { FollowingList } from '@/features/social/components/FollowingList';\n\ntype ProfileTab =\n  | 'progress'\n  | 'sessions'\n  | 'followers'\n  | 'following'\n  | 'activities';\ntype TimePeriod = '7D' | '2W' | '4W' | '3M' | '1Y';\ntype ChartType = 'bar' | 'line';\n\ninterface ChartDataPoint {\n  name: string;\n  hours: number;\n  sessions: number;\n  avgDuration: number;\n}\n\nexport function OwnProfilePageContent() {\n  const { user, logout } = useAuth();\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const tabParam = searchParams?.get('tab') as ProfileTab | null;\n\n  const [activeTab, setActiveTab] = useState<ProfileTab>(\n    tabParam === 'sessions'\n      ? 'sessions'\n      : tabParam === 'followers'\n        ? 'followers'\n        : tabParam === 'following'\n          ? 'following'\n          : tabParam === 'activities'\n            ? 'activities'\n            : 'progress'\n  );\n  const [timePeriod, setTimePeriod] = useState<TimePeriod>('7D');\n  const [showSettingsMenu, setShowSettingsMenu] = useState(false);\n  const [chartType, setChartType] = useState<ChartType>('line');\n  const [showChartTypeDropdown, setShowChartTypeDropdown] = useState(false);\n  const [selectedActivityId, setSelectedActivityId] = useState<string>('all');\n  const [showActivityDropdown, setShowActivityDropdown] = useState(false);\n\n  // Use new feature hooks for data with automatic caching\n  const { data: sessions = [], isLoading: sessionsLoading } = useUserSessions(\n    user?.id || '',\n    {\n      enabled: !!user?.id,\n    }\n  );\n  const { data: stats = null, isLoading: statsLoading } = useProfileStats(\n    user?.id || '',\n    {\n      enabled: !!user?.id,\n    }\n  );\n  const { data: userProfile = null } = useProfileById(user?.id || '', {\n    enabled: !!user?.id,\n  });\n  const { data: followers = [] } = useFollowers(user?.id || '', {\n    enabled: !!user?.id,\n  });\n  const { data: following = [] } = useFollowing(user?.id || '', {\n    enabled: !!user?.id,\n  });\n  const { data: activities = [] } = useProjects({\n    enabled: !!user?.id,\n  });\n\n  const isLoading = sessionsLoading || statsLoading;\n\n  // Update tab when URL changes\n  useEffect(() => {\n    if (\n      tabParam === 'sessions' ||\n      tabParam === 'progress' ||\n      tabParam === 'followers' ||\n      tabParam === 'following' ||\n      tabParam === 'activities'\n    ) {\n      setActiveTab(tabParam);\n    }\n  }, [tabParam]);\n\n  // Filter sessions based on selected activity\n  const filteredSessions = useMemo(() => {\n    if (selectedActivityId === 'all') return sessions;\n    return sessions.filter(\n      s =>\n        s.activityId === selectedActivityId ||\n        s.projectId === selectedActivityId\n    );\n  }, [sessions, selectedActivityId]);\n\n  // Calculate chart data using useMemo to prevent infinite loop\n  const chartData = useMemo(() => {\n    if (!filteredSessions) return [];\n\n    const now = new Date();\n    const data: ChartDataPoint[] = [];\n\n    if (timePeriod === '7D') {\n      // Last 7 days\n      const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n      for (let i = 6; i >= 0; i--) {\n        const day = new Date(now);\n        day.setDate(day.getDate() - i);\n\n        const daySessions = filteredSessions.filter(\n          s => new Date(s.createdAt).toDateString() === day.toDateString()\n        );\n        const hoursWorked = daySessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          daySessions.length > 0\n            ? daySessions.reduce((sum, s) => sum + s.duration, 0) /\n              daySessions.length /\n              60\n            : 0;\n\n        data.push({\n          name: `${(dayNames[day.getDay()] || 'Day').slice(0, 3)} ${day.getDate()}`,\n          hours: Number(hoursWorked.toFixed(2)),\n          sessions: daySessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    } else if (timePeriod === '2W') {\n      // Last 14 days\n      const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n      for (let i = 13; i >= 0; i--) {\n        const day = new Date(now);\n        day.setDate(day.getDate() - i);\n\n        const daySessions = filteredSessions.filter(\n          s => new Date(s.createdAt).toDateString() === day.toDateString()\n        );\n        const hoursWorked = daySessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          daySessions.length > 0\n            ? daySessions.reduce((sum, s) => sum + s.duration, 0) /\n              daySessions.length /\n              60\n            : 0;\n\n        data.push({\n          name: `${(dayNames[day.getDay()] || 'Day').slice(0, 3)} ${day.getDate()}`,\n          hours: Number(hoursWorked.toFixed(2)),\n          sessions: daySessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    } else if (timePeriod === '4W') {\n      // Last 4 weeks\n      for (let i = 3; i >= 0; i--) {\n        const weekStart = new Date(now);\n        weekStart.setDate(weekStart.getDate() - (i * 7 + 6));\n        const weekEnd = new Date(now);\n        weekEnd.setDate(weekEnd.getDate() - i * 7);\n\n        const weekSessions = filteredSessions.filter(s => {\n          const sessionDate = new Date(s.createdAt);\n          return sessionDate >= weekStart && sessionDate <= weekEnd;\n        });\n        const hoursWorked = weekSessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          weekSessions.length > 0\n            ? weekSessions.reduce((sum, s) => sum + s.duration, 0) /\n              weekSessions.length /\n              60\n            : 0;\n\n        data.push({\n          name: `Week ${4 - i}`,\n          hours: Number(hoursWorked.toFixed(2)),\n          sessions: weekSessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    } else if (timePeriod === '3M') {\n      // Last 3 months\n      const monthNames = [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec',\n      ];\n      for (let i = 2; i >= 0; i--) {\n        const month = new Date(now);\n        month.setMonth(month.getMonth() - i);\n\n        const monthSessions = filteredSessions.filter(s => {\n          const sessionDate = new Date(s.createdAt);\n          return (\n            sessionDate.getMonth() === month.getMonth() &&\n            sessionDate.getFullYear() === month.getFullYear()\n          );\n        });\n        const hoursWorked = monthSessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          monthSessions.length > 0\n            ? monthSessions.reduce((sum, s) => sum + s.duration, 0) /\n              monthSessions.length /\n              60\n            : 0;\n\n        data.push({\n          name: monthNames[month.getMonth()] || 'Month',\n          hours: Number(hoursWorked.toFixed(2)),\n          sessions: monthSessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    } else if (timePeriod === '1Y') {\n      // Last 12 months\n      const monthNames = [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec',\n      ];\n      for (let i = 11; i >= 0; i--) {\n        const month = new Date(now);\n        month.setMonth(month.getMonth() - i);\n\n        const monthSessions = filteredSessions.filter(s => {\n          const sessionDate = new Date(s.createdAt);\n          return (\n            sessionDate.getMonth() === month.getMonth() &&\n            sessionDate.getFullYear() === month.getFullYear()\n          );\n        });\n        const hoursWorked = monthSessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          monthSessions.length > 0\n            ? monthSessions.reduce((sum, s) => sum + s.duration, 0) /\n              monthSessions.length /\n              60\n            : 0;\n\n        data.push({\n          name: monthNames[month.getMonth()] || 'Month',\n          hours: Number(hoursWorked.toFixed(2)),\n          sessions: monthSessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    }\n\n    return data;\n  }, [filteredSessions, timePeriod]);\n\n  // Calculate stats with percentage changes\n  const calculatedStats = useMemo(() => {\n    const now = new Date();\n\n    // Helper to get date range based on time period\n    const getDateRange = (period: TimePeriod) => {\n      const end = new Date(now);\n      const start = new Date(now);\n\n      switch (period) {\n        case '7D':\n          start.setDate(now.getDate() - 7);\n          break;\n        case '2W':\n          start.setDate(now.getDate() - 14);\n          break;\n        case '4W':\n          start.setDate(now.getDate() - 28);\n          break;\n        case '3M':\n          start.setMonth(now.getMonth() - 3);\n          break;\n        case '1Y':\n          start.setFullYear(now.getFullYear() - 1);\n          break;\n      }\n\n      return { start, end };\n    };\n\n    // Get current and previous period ranges\n    const currentRange = getDateRange(timePeriod);\n    const previousStart = new Date(currentRange.start);\n    const periodLength =\n      currentRange.end.getTime() - currentRange.start.getTime();\n    previousStart.setTime(previousStart.getTime() - periodLength);\n\n    // Filter sessions for current period\n    const currentPeriodSessions = filteredSessions.filter(s => {\n      const sessionDate = new Date(s.createdAt);\n      return (\n        sessionDate >= currentRange.start && sessionDate <= currentRange.end\n      );\n    });\n\n    // Filter sessions for previous period\n    const previousPeriodSessions = filteredSessions.filter(s => {\n      const sessionDate = new Date(s.createdAt);\n      return sessionDate >= previousStart && sessionDate < currentRange.start;\n    });\n\n    // Calculate current period stats\n    const currentHours = currentPeriodSessions.reduce(\n      (sum, s) => sum + s.duration / 3600,\n      0\n    );\n    const currentSessionCount = currentPeriodSessions.length;\n    const currentAvgDuration =\n      currentSessionCount > 0\n        ? currentPeriodSessions.reduce((sum, s) => sum + s.duration, 0) /\n          currentSessionCount /\n          60\n        : 0;\n\n    const currentActiveDays = new Set(\n      currentPeriodSessions.map(s => new Date(s.createdAt).toDateString())\n    ).size;\n\n    // Calculate previous period stats\n    const previousHours = previousPeriodSessions.reduce(\n      (sum, s) => sum + s.duration / 3600,\n      0\n    );\n    const previousSessionCount = previousPeriodSessions.length;\n    const previousAvgDuration =\n      previousSessionCount > 0\n        ? previousPeriodSessions.reduce((sum, s) => sum + s.duration, 0) /\n          previousSessionCount /\n          60\n        : 0;\n\n    const previousActiveDays = new Set(\n      previousPeriodSessions.map(s => new Date(s.createdAt).toDateString())\n    ).size;\n\n    // Calculate percentage changes\n    const calculateChange = (\n      current: number,\n      previous: number\n    ): number | null => {\n      if (previous === 0) return null; // No previous data\n      return ((current - previous) / previous) * 100;\n    };\n\n    const hoursChange = calculateChange(currentHours, previousHours);\n    const sessionsChange = calculateChange(\n      currentSessionCount,\n      previousSessionCount\n    );\n    const avgDurationChange = calculateChange(\n      currentAvgDuration,\n      previousAvgDuration\n    );\n    const activeDaysChange = calculateChange(\n      currentActiveDays,\n      previousActiveDays\n    );\n\n    return {\n      totalHours: currentHours,\n      sessions: currentSessionCount,\n      avgDuration: Math.round(currentAvgDuration),\n      currentStreak: stats?.currentStreak || 0,\n      longestStreak: stats?.longestStreak || 0,\n      activeDays: currentActiveDays,\n      activities: activities?.length || 0,\n\n      // Percentage changes\n      hoursChange,\n      sessionsChange,\n      avgDurationChange,\n      activeDaysChange,\n      activitiesChange: null, // Activities count doesn't have time-based comparison\n      streakChange: null, // Streaks don't have meaningful percentage changes\n    };\n  }, [filteredSessions, stats, activities, timePeriod]);\n\n  // Average duration over time data - extract from chartData\n  const avgDurationData = useMemo(() => {\n    return chartData.map(d => ({ name: d.name, value: d.avgDuration }));\n  }, [chartData]);\n\n  // Helper to render percentage change\n  const renderPercentageChange = (change: number | null) => {\n    if (change === null) return null;\n\n    const isPositive = change >= 0;\n    const formattedChange = Math.abs(change).toFixed(0);\n\n    return (\n      <div\n        className={`text-sm ${isPositive ? 'text-green-600' : 'text-red-600'}`}\n      >\n        {isPositive ? '↑' : '↓'} {formattedChange}%\n      </div>\n    );\n  };\n\n  // Custom tooltip formatter\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white border border-gray-200 rounded-lg shadow-lg p-3\">\n          <p className=\"text-sm font-medium text-gray-900 mb-2\">{label}</p>\n          {payload.map((entry: any, index: number) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              <span className=\"font-semibold\">{entry.name}</span>: {entry.value}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const handleEditActivity = (activity: Activity) => {\n    router.push(`/activities/${activity.id}/edit`);\n  };\n\n  if (!user) return null;\n\n  return (\n    <>\n      <div className=\"min-h-screen bg-white md:bg-gray-50\">\n        {/* Desktop Header */}\n        <div className=\"hidden md:block\">\n          <Header />\n        </div>\n\n        {/* Mobile Header */}\n        <div className=\"md:hidden\">\n          <MobileHeader title=\"My Profile\" />\n        </div>\n\n        {/* Content */}\n        <div className=\"pb-32 md:pb-8\">\n          <div className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8 py-6\">\n            <div className=\"max-w-4xl mx-auto\">\n              {/* Profile Card with This Week Stats */}\n              <div className=\"bg-gray-50 md:rounded-xl md:border border-gray-200 p-3 md:p-6 mb-4 md:mb-6 relative\">\n                {/* Settings Icon */}\n                <div className=\"absolute top-3 md:top-4 right-3 md:right-4 z-10\">\n                  <div className=\"relative\">\n                    <button\n                      onClick={() => setShowSettingsMenu(!showSettingsMenu)}\n                      className=\"p-1.5 md:p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-offset-2\"\n                      aria-label=\"Open settings menu\"\n                      aria-expanded={showSettingsMenu}\n                      aria-haspopup=\"true\"\n                    >\n                      <Settings className=\"w-4 h-4 md:w-5 md:h-5\" />\n                    </button>\n\n                    {/* Settings Dropdown */}\n                    {showSettingsMenu && (\n                      <div className=\"absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-10\">\n                        <Link\n                          href=\"/settings\"\n                          className=\"block px-4 py-2 text-sm text-gray-900 hover:bg-gray-50 transition-colors\"\n                          onClick={() => setShowSettingsMenu(false)}\n                        >\n                          Settings\n                        </Link>\n                        <hr className=\"my-2 border-gray-200\" />\n                        <button\n                          onClick={() => {\n                            setShowSettingsMenu(false);\n                            logout();\n                          }}\n                          className=\"w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors flex items-center gap-2\"\n                        >\n                          <LogOut className=\"w-4 h-4\" />\n                          Log Out\n                        </button>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Responsive Layout - Stacks on mobile, side-by-side on desktop */}\n                <div className=\"flex flex-col md:flex-row md:gap-8\">\n                  {/* Left Column - Profile Info */}\n                  <div className=\"flex-1\">\n                    {/* Profile Picture */}\n                    {user.profilePicture || userProfile?.profilePicture ? (\n                      <div className=\"w-20 h-20 md:w-32 md:h-32 rounded-full overflow-hidden ring-4 ring-white shadow-md mb-3 md:mb-4\">\n                        <Image\n                          src={\n                            userProfile?.profilePicture ||\n                            user.profilePicture ||\n                            ''\n                          }\n                          alt={user.name}\n                          width={128}\n                          height={128}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      </div>\n                    ) : (\n                      <div className=\"w-20 h-20 md:w-32 md:h-32 bg-[#FC4C02] rounded-full flex items-center justify-center ring-4 ring-white shadow-md mb-3 md:mb-4\">\n                        <span className=\"text-white font-bold text-2xl md:text-4xl\">\n                          {user.name.charAt(0).toUpperCase()}\n                        </span>\n                      </div>\n                    )}\n\n                    {/* Name and Username */}\n                    <h1 className=\"text-lg md:text-2xl font-bold text-gray-900\">\n                      {user.name}\n                    </h1>\n                    <p className=\"text-gray-600 text-sm md:text-base mb-2 md:mb-3\">\n                      @{user.username}\n                    </p>\n\n                    {/* Bio */}\n                    {(userProfile?.bio || user.bio) && (\n                      <p className=\"text-gray-700 mb-2 md:mb-3 text-sm md:text-base leading-snug\">\n                        {userProfile?.bio || user.bio}\n                      </p>\n                    )}\n\n                    {/* Location */}\n                    {(userProfile?.location || user.location) && (\n                      <p className=\"text-gray-500 text-xs md:text-sm mb-3 md:mb-4 flex items-center gap-1\">\n                        <MapPin\n                          className=\"w-3 h-3 md:w-4 md:h-4\"\n                          aria-hidden=\"true\"\n                        />\n                        {userProfile?.location || user.location}\n                      </p>\n                    )}\n\n                    {/* Edit Profile Button */}\n                    <Link\n                      href=\"/settings\"\n                      className=\"inline-flex items-center gap-2 mb-3 md:mb-4 px-3 md:px-4 py-2 md:py-2.5 bg-gray-100 text-gray-700 hover:bg-gray-200 rounded-lg transition-colors font-semibold text-xs md:text-sm\"\n                    >\n                      <Edit className=\"w-3.5 h-3.5 md:w-4 md:h-4\" />\n                      Edit Profile\n                    </Link>\n\n                    {/* Follower/Following Counts */}\n                    <div className=\"flex gap-4 md:gap-6 mb-4 md:mb-0\">\n                      <button\n                        onClick={() => {\n                          setActiveTab('followers');\n                          router.push('/profile?tab=followers');\n                        }}\n                        className=\"hover:underline focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-offset-2 rounded px-1\"\n                        aria-label={`View ${followers.length} followers`}\n                      >\n                        <span className=\"font-bold text-gray-900 text-sm md:text-base\">\n                          {followers.length}\n                        </span>{' '}\n                        <span className=\"text-gray-600 text-xs md:text-sm\">\n                          Followers\n                        </span>\n                      </button>\n                      <button\n                        onClick={() => {\n                          setActiveTab('following');\n                          router.push('/profile?tab=following');\n                        }}\n                        className=\"hover:underline focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-offset-2 rounded px-1\"\n                        aria-label={`View ${following.length} following`}\n                      >\n                        <span className=\"font-bold text-gray-900 text-sm md:text-base\">\n                          {following.length}\n                        </span>{' '}\n                        <span className=\"text-gray-600 text-xs md:text-sm\">\n                          Following\n                        </span>\n                      </button>\n                    </div>\n                  </div>\n\n                  {/* Right Column - This Week Stats */}\n                  <div className=\"md:w-64 border-t md:border-t-0 md:border-l border-gray-200 pt-4 md:pt-0 md:pl-8\">\n                    <div className=\"flex items-center gap-2 mb-3 md:mb-4\">\n                      <BarChart2\n                        className=\"w-4 h-4 md:w-5 md:h-5 text-[#FC4C02]\"\n                        aria-hidden=\"true\"\n                      />\n                      <h2 className=\"text-sm md:text-base font-bold\">\n                        This week\n                      </h2>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 md:grid-cols-1 gap-3 md:gap-4 md:space-y-0\">\n                      <div>\n                        <div className=\"text-[10px] md:text-xs text-gray-600 uppercase tracking-wide\">\n                          Time\n                        </div>\n                        <div className=\"text-lg md:text-2xl font-bold\">\n                          {stats?.weeklyHours?.toFixed(1) || 0}h\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"text-[10px] md:text-xs text-gray-600 uppercase tracking-wide\">\n                          Sessions\n                        </div>\n                        <div className=\"text-lg md:text-2xl font-bold\">\n                          {stats?.sessionsThisWeek || 0}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Tabs */}\n              <div className=\"sticky top-12 md:top-14 bg-white md:bg-gray-50 z-30 -mx-4 md:mx-0\">\n                <div className=\"bg-white md:bg-gray-50 border-b border-gray-200\">\n                  <div\n                    className=\"flex md:gap-8 px-4 md:px-0 overflow-x-auto scrollbar-hide\"\n                    role=\"tablist\"\n                    aria-label=\"Profile sections\"\n                  >\n                    <button\n                      onClick={() => {\n                        setActiveTab('progress');\n                        router.push('/profile?tab=progress');\n                      }}\n                      className={`flex-1 md:flex-initial py-3 md:py-4 px-1 text-sm md:text-base font-medium border-b-2 transition-colors whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-offset-2 ${\n                        activeTab === 'progress'\n                          ? 'border-[#007AFF] text-[#007AFF]'\n                          : 'border-transparent text-gray-500 md:text-gray-600 hover:text-gray-700 md:hover:text-gray-900'\n                      }`}\n                      role=\"tab\"\n                      aria-selected={activeTab === 'progress'}\n                      aria-controls=\"progress-panel\"\n                      id=\"progress-tab\"\n                    >\n                      Progress\n                    </button>\n                    <button\n                      onClick={() => {\n                        setActiveTab('sessions');\n                        router.push('/profile?tab=sessions');\n                      }}\n                      className={`flex-1 md:flex-initial py-3 md:py-4 px-1 text-sm md:text-base font-medium border-b-2 transition-colors whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-offset-2 ${\n                        activeTab === 'sessions'\n                          ? 'border-[#007AFF] text-[#007AFF]'\n                          : 'border-transparent text-gray-500 md:text-gray-600 hover:text-gray-700 md:hover:text-gray-900'\n                      }`}\n                      role=\"tab\"\n                      aria-selected={activeTab === 'sessions'}\n                      aria-controls=\"sessions-panel\"\n                      id=\"sessions-tab\"\n                    >\n                      Sessions\n                    </button>\n                    {/* Activities tab - Desktop only */}\n                    <button\n                      onClick={() => {\n                        setActiveTab('activities');\n                        router.push('/profile?tab=activities');\n                      }}\n                      className={`hidden md:flex flex-1 md:flex-initial py-3 md:py-4 px-1 text-sm md:text-base font-medium border-b-2 transition-colors whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-offset-2 ${\n                        activeTab === 'activities'\n                          ? 'border-[#007AFF] text-[#007AFF]'\n                          : 'border-transparent text-gray-500 md:text-gray-600 hover:text-gray-700 md:hover:text-gray-900'\n                      }`}\n                      role=\"tab\"\n                      aria-selected={activeTab === 'activities'}\n                      aria-controls=\"activities-panel\"\n                      id=\"activities-tab\"\n                    >\n                      Activities\n                    </button>\n                    <button\n                      onClick={() => {\n                        setActiveTab('followers');\n                        router.push('/profile?tab=followers');\n                      }}\n                      className={`flex-1 md:flex-initial py-3 md:py-4 px-1 text-sm md:text-base font-medium border-b-2 transition-colors whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-offset-2 ${\n                        activeTab === 'followers'\n                          ? 'border-[#007AFF] text-[#007AFF]'\n                          : 'border-transparent text-gray-500 md:text-gray-600 hover:text-gray-700 md:hover:text-gray-900'\n                      }`}\n                      role=\"tab\"\n                      aria-selected={activeTab === 'followers'}\n                      aria-controls=\"followers-panel\"\n                      id=\"followers-tab\"\n                    >\n                      Followers\n                    </button>\n                    <button\n                      onClick={() => {\n                        setActiveTab('following');\n                        router.push('/profile?tab=following');\n                      }}\n                      className={`flex-1 md:flex-initial py-3 md:py-4 px-1 text-sm md:text-base font-medium border-b-2 transition-colors whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-offset-2 ${\n                        activeTab === 'following'\n                          ? 'border-[#007AFF] text-[#007AFF]'\n                          : 'border-transparent text-gray-500 md:text-gray-600 hover:text-gray-700 md:hover:text-gray-900'\n                      }`}\n                      role=\"tab\"\n                      aria-selected={activeTab === 'following'}\n                      aria-controls=\"following-panel\"\n                      id=\"following-tab\"\n                    >\n                      Following\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              {/* Tab Content */}\n              <div className=\"mt-6\">\n                {activeTab === 'progress' && (\n                  <div className=\"max-w-4xl mx-auto space-y-4 md:space-y-6\">\n                    {/* Header with Time Period Selector and Chart Type */}\n                    <div className=\"flex items-center justify-between gap-2 py-2 -mx-4 px-4 md:mx-0 md:px-0\">\n                      {/* Activity Filter Dropdown */}\n                      <div className=\"relative flex-shrink-0\">\n                        <button\n                          onClick={() =>\n                            setShowActivityDropdown(!showActivityDropdown)\n                          }\n                          className=\"flex items-center gap-1.5 px-3 py-1.5 text-sm text-gray-700 bg-white border border-gray-300 rounded-full hover:bg-gray-50 transition-colors whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-offset-2 min-h-[44px]\"\n                          aria-label=\"Filter by activity\"\n                          aria-expanded={showActivityDropdown}\n                          aria-haspopup=\"listbox\"\n                        >\n                          <span className=\"font-medium\">\n                            {selectedActivityId === 'all'\n                              ? 'All'\n                              : activities.find(\n                                  a => a.id === selectedActivityId\n                                )?.name || 'All'}\n                          </span>\n                          <ChevronDown className=\"w-3.5 h-3.5\" />\n                        </button>\n\n                        {/* Activity Dropdown Menu */}\n                        {showActivityDropdown && (\n                          <>\n                            {/* Backdrop to close dropdown */}\n                            <div\n                              className=\"fixed inset-0 z-40\"\n                              onClick={() => setShowActivityDropdown(false)}\n                            />\n                            <div className=\"absolute left-0 top-full mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50 max-h-64 overflow-y-auto\">\n                              <button\n                                onClick={() => {\n                                  setSelectedActivityId('all');\n                                  setShowActivityDropdown(false);\n                                }}\n                                className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 transition-colors flex items-center gap-2 ${\n                                  selectedActivityId === 'all'\n                                    ? 'text-[#007AFF] font-medium bg-blue-50'\n                                    : 'text-gray-700'\n                                }`}\n                              >\n                                {selectedActivityId === 'all' && (\n                                  <span className=\"text-[#007AFF]\">✓</span>\n                                )}\n                                <span>All Activities</span>\n                              </button>\n                              {activities.map(activity => (\n                                <button\n                                  key={activity.id}\n                                  onClick={() => {\n                                    setSelectedActivityId(activity.id);\n                                    setShowActivityDropdown(false);\n                                  }}\n                                  className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 transition-colors flex items-center gap-2 ${\n                                    selectedActivityId === activity.id\n                                      ? 'text-[#007AFF] font-medium bg-blue-50'\n                                      : 'text-gray-700'\n                                  }`}\n                                >\n                                  {selectedActivityId === activity.id && (\n                                    <span className=\"text-[#007AFF]\">✓</span>\n                                  )}\n                                  <span className=\"flex items-center gap-2\">\n                                    <span style={{ color: activity.color }}>\n                                      ●\n                                    </span>\n                                    {activity.name}\n                                  </span>\n                                </button>\n                              ))}\n                            </div>\n                          </>\n                        )}\n                      </div>\n\n                      {/* Time Period Buttons - Scrollable on mobile */}\n                      <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n                        <div className=\"overflow-x-auto flex items-center gap-1.5 md:gap-2 flex-1 scrollbar-hide\">\n                          {(['7D', '2W', '4W', '3M', '1Y'] as TimePeriod[]).map(\n                            period => (\n                              <button\n                                key={period}\n                                onClick={() => setTimePeriod(period)}\n                                className={`px-3 md:px-4 py-1.5 md:py-2 text-xs md:text-sm font-medium rounded-full transition-colors whitespace-nowrap flex-shrink-0 focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-offset-2 min-h-[44px] ${\n                                  timePeriod === period\n                                    ? 'bg-gray-900 text-white'\n                                    : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'\n                                }`}\n                                aria-label={`Show ${period} time period`}\n                                aria-pressed={timePeriod === period}\n                              >\n                                {period}\n                              </button>\n                            )\n                          )}\n                        </div>\n\n                        {/* Chart Type Selector */}\n                        <div className=\"relative flex-shrink-0\">\n                          <button\n                            onClick={() =>\n                              setShowChartTypeDropdown(!showChartTypeDropdown)\n                            }\n                            className=\"flex items-center gap-1 px-2 md:px-3 py-1.5 md:py-2 text-xs md:text-sm text-gray-700 bg-white border border-gray-300 rounded-full hover:bg-gray-50 transition-colors whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-offset-2 min-h-[44px]\"\n                            aria-label={`Chart type: ${chartType}`}\n                            aria-expanded={showChartTypeDropdown}\n                            aria-haspopup=\"listbox\"\n                          >\n                            {chartType === 'bar' ? (\n                              <BarChart3\n                                className=\"w-3.5 h-3.5 md:w-4 md:h-4\"\n                                aria-hidden=\"true\"\n                              />\n                            ) : (\n                              <TrendingUp\n                                className=\"w-3.5 h-3.5 md:w-4 md:h-4\"\n                                aria-hidden=\"true\"\n                              />\n                            )}\n                            <span className=\"capitalize hidden sm:inline\">\n                              {chartType}\n                            </span>\n                            <ChevronDown\n                              className=\"w-3 h-3\"\n                              aria-hidden=\"true\"\n                            />\n                          </button>\n\n                          {/* Chart Type Dropdown */}\n                          {showChartTypeDropdown && (\n                            <>\n                              {/* Backdrop to close dropdown */}\n                              <div\n                                className=\"fixed inset-0 z-40\"\n                                onClick={() => setShowChartTypeDropdown(false)}\n                              />\n                              <div className=\"absolute right-0 mt-2 w-32 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50\">\n                                <button\n                                  onClick={() => {\n                                    setChartType('bar');\n                                    setShowChartTypeDropdown(false);\n                                  }}\n                                  className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 transition-colors flex items-center gap-2 ${\n                                    chartType === 'bar'\n                                      ? 'text-[#007AFF] font-medium'\n                                      : 'text-gray-700'\n                                  }`}\n                                >\n                                  {chartType === 'bar' && (\n                                    <span className=\"text-[#007AFF]\">✓</span>\n                                  )}\n                                  <BarChart3 className=\"w-4 h-4\" />\n                                  Bar\n                                </button>\n                                <button\n                                  onClick={() => {\n                                    setChartType('line');\n                                    setShowChartTypeDropdown(false);\n                                  }}\n                                  className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 transition-colors flex items-center gap-2 ${\n                                    chartType === 'line'\n                                      ? 'text-[#007AFF] font-medium'\n                                      : 'text-gray-700'\n                                  }`}\n                                >\n                                  {chartType === 'line' && (\n                                    <span className=\"text-[#007AFF]\">✓</span>\n                                  )}\n                                  <TrendingUp className=\"w-4 h-4\" />\n                                  Line\n                                </button>\n                              </div>\n                            </>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Main Chart */}\n                    <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                      <div className=\"mb-4\">\n                        <h3 className=\"font-semibold text-gray-900\">\n                          Hours completed\n                        </h3>\n                      </div>\n                      <div className=\"h-72\">\n                        {isLoading ? (\n                          <div className=\"h-full bg-gray-50 rounded animate-pulse\" />\n                        ) : (\n                          <ResponsiveContainer width=\"100%\" height=\"100%\">\n                            {chartType === 'bar' ? (\n                              <BarChart\n                                data={chartData}\n                                margin={{\n                                  top: 10,\n                                  right: 10,\n                                  left: -20,\n                                  bottom: 0,\n                                }}\n                              >\n                                <XAxis\n                                  dataKey=\"name\"\n                                  tick={{ fontSize: 12, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                />\n                                <YAxis\n                                  tick={{ fontSize: 12, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                  width={40}\n                                />\n                                <Tooltip content={<CustomTooltip />} />\n                                <Bar\n                                  dataKey=\"hours\"\n                                  fill=\"#007AFF\"\n                                  radius={[4, 4, 0, 0]}\n                                  name=\"Hours\"\n                                />\n                              </BarChart>\n                            ) : (\n                              <ComposedChart\n                                data={chartData}\n                                margin={{\n                                  top: 10,\n                                  right: 10,\n                                  left: -20,\n                                  bottom: 0,\n                                }}\n                              >\n                                <defs>\n                                  <linearGradient\n                                    id=\"colorHours\"\n                                    x1=\"0\"\n                                    y1=\"0\"\n                                    x2=\"0\"\n                                    y2=\"1\"\n                                  >\n                                    <stop\n                                      offset=\"5%\"\n                                      stopColor=\"#007AFF\"\n                                      stopOpacity={0.3}\n                                    />\n                                    <stop\n                                      offset=\"95%\"\n                                      stopColor=\"#007AFF\"\n                                      stopOpacity={0}\n                                    />\n                                  </linearGradient>\n                                </defs>\n                                <XAxis\n                                  dataKey=\"name\"\n                                  tick={{ fontSize: 12, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                />\n                                <YAxis\n                                  tick={{ fontSize: 12, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                  width={40}\n                                />\n                                <Tooltip content={<CustomTooltip />} />\n                                <Area\n                                  type=\"monotone\"\n                                  dataKey=\"hours\"\n                                  stroke=\"#007AFF\"\n                                  strokeWidth={2}\n                                  fill=\"url(#colorHours)\"\n                                  name=\"Hours\"\n                                />\n                              </ComposedChart>\n                            )}\n                          </ResponsiveContainer>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Second Row - Two Charts */}\n                    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                      {/* Average Session Duration */}\n                      <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                        <div className=\"mb-4\">\n                          <h3 className=\"font-semibold text-gray-900\">\n                            Average session duration\n                          </h3>\n                        </div>\n                        <div className=\"h-48\">\n                          <ResponsiveContainer width=\"100%\" height=\"100%\">\n                            {chartType === 'bar' ? (\n                              <BarChart\n                                data={avgDurationData}\n                                margin={{\n                                  top: 5,\n                                  right: 5,\n                                  left: -30,\n                                  bottom: 0,\n                                }}\n                              >\n                                <XAxis\n                                  dataKey=\"name\"\n                                  tick={{ fontSize: 11, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                />\n                                <YAxis\n                                  tick={{ fontSize: 11, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                />\n                                <Tooltip content={<CustomTooltip />} />\n                                <Bar\n                                  dataKey=\"value\"\n                                  fill=\"#34C759\"\n                                  radius={[4, 4, 0, 0]}\n                                  name=\"Minutes\"\n                                />\n                              </BarChart>\n                            ) : (\n                              <ComposedChart\n                                data={avgDurationData}\n                                margin={{\n                                  top: 5,\n                                  right: 5,\n                                  left: -30,\n                                  bottom: 0,\n                                }}\n                              >\n                                <defs>\n                                  <linearGradient\n                                    id=\"colorAvgDuration\"\n                                    x1=\"0\"\n                                    y1=\"0\"\n                                    x2=\"0\"\n                                    y2=\"1\"\n                                  >\n                                    <stop\n                                      offset=\"5%\"\n                                      stopColor=\"#34C759\"\n                                      stopOpacity={0.3}\n                                    />\n                                    <stop\n                                      offset=\"95%\"\n                                      stopColor=\"#34C759\"\n                                      stopOpacity={0}\n                                    />\n                                  </linearGradient>\n                                </defs>\n                                <XAxis\n                                  dataKey=\"name\"\n                                  tick={{ fontSize: 11, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                />\n                                <YAxis\n                                  tick={{ fontSize: 11, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                />\n                                <Tooltip content={<CustomTooltip />} />\n                                <Area\n                                  type=\"monotone\"\n                                  dataKey=\"value\"\n                                  stroke=\"#34C759\"\n                                  strokeWidth={2}\n                                  fill=\"url(#colorAvgDuration)\"\n                                  name=\"Minutes\"\n                                />\n                              </ComposedChart>\n                            )}\n                          </ResponsiveContainer>\n                        </div>\n                      </div>\n\n                      {/* Sessions */}\n                      <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                        <div className=\"mb-4\">\n                          <h3 className=\"font-semibold text-gray-900\">\n                            Sessions completed\n                          </h3>\n                        </div>\n                        <div className=\"h-48\">\n                          <ResponsiveContainer width=\"100%\" height=\"100%\">\n                            {chartType === 'bar' ? (\n                              <BarChart\n                                data={chartData}\n                                margin={{\n                                  top: 5,\n                                  right: 5,\n                                  left: -30,\n                                  bottom: 0,\n                                }}\n                              >\n                                <XAxis\n                                  dataKey=\"name\"\n                                  tick={{ fontSize: 11, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                />\n                                <YAxis\n                                  tick={{ fontSize: 11, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                />\n                                <Tooltip content={<CustomTooltip />} />\n                                <Bar\n                                  dataKey=\"sessions\"\n                                  fill=\"#34C759\"\n                                  radius={[4, 4, 0, 0]}\n                                  name=\"Sessions\"\n                                />\n                              </BarChart>\n                            ) : (\n                              <ComposedChart\n                                data={chartData}\n                                margin={{\n                                  top: 5,\n                                  right: 5,\n                                  left: -30,\n                                  bottom: 0,\n                                }}\n                              >\n                                <defs>\n                                  <linearGradient\n                                    id=\"colorSessionsSmall\"\n                                    x1=\"0\"\n                                    y1=\"0\"\n                                    x2=\"0\"\n                                    y2=\"1\"\n                                  >\n                                    <stop\n                                      offset=\"5%\"\n                                      stopColor=\"#34C759\"\n                                      stopOpacity={0.3}\n                                    />\n                                    <stop\n                                      offset=\"95%\"\n                                      stopColor=\"#34C759\"\n                                      stopOpacity={0}\n                                    />\n                                  </linearGradient>\n                                </defs>\n                                <XAxis\n                                  dataKey=\"name\"\n                                  tick={{ fontSize: 11, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                />\n                                <YAxis\n                                  tick={{ fontSize: 11, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                />\n                                <Tooltip content={<CustomTooltip />} />\n                                <Area\n                                  type=\"monotone\"\n                                  dataKey=\"sessions\"\n                                  stroke=\"#34C759\"\n                                  strokeWidth={2}\n                                  fill=\"url(#colorSessionsSmall)\"\n                                  name=\"Sessions\"\n                                />\n                              </ComposedChart>\n                            )}\n                          </ResponsiveContainer>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Stats Grid - 5 columns */}\n                    <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n                      <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                        <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                          Total Hours\n                        </div>\n                        <div className=\"text-2xl font-bold mb-1\">\n                          {calculatedStats.totalHours.toFixed(1)}\n                        </div>\n                        {renderPercentageChange(calculatedStats.hoursChange)}\n                      </div>\n\n                      <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                        <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                          Avg Duration\n                        </div>\n                        <div className=\"text-2xl font-bold mb-1\">\n                          {calculatedStats.avgDuration}m\n                        </div>\n                        {renderPercentageChange(\n                          calculatedStats.avgDurationChange\n                        )}\n                      </div>\n\n                      <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                        <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                          Sessions\n                        </div>\n                        <div className=\"text-2xl font-bold mb-1\">\n                          {calculatedStats.sessions}\n                        </div>\n                        {renderPercentageChange(calculatedStats.sessionsChange)}\n                      </div>\n\n                      <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                        <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                          Active Days\n                        </div>\n                        <div className=\"text-2xl font-bold mb-1\">\n                          {calculatedStats.activeDays}\n                        </div>\n                        {renderPercentageChange(\n                          calculatedStats.activeDaysChange\n                        )}\n                      </div>\n\n                      <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                        <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                          Activities\n                        </div>\n                        <div className=\"text-2xl font-bold mb-1\">\n                          {calculatedStats.activities}\n                        </div>\n                        {renderPercentageChange(\n                          calculatedStats.activitiesChange\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Secondary Stats Grid - Streaks */}\n                    <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n                      <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                        <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                          Current Streak\n                        </div>\n                        <div className=\"text-2xl font-bold mb-1\">\n                          {calculatedStats.currentStreak}\n                        </div>\n                        {renderPercentageChange(calculatedStats.streakChange)}\n                      </div>\n\n                      <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                        <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                          Longest Streak\n                        </div>\n                        <div className=\"text-2xl font-bold mb-1\">\n                          {calculatedStats.longestStreak}\n                        </div>\n                        {renderPercentageChange(calculatedStats.streakChange)}\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {activeTab === 'sessions' && (\n                  <div className=\"max-w-4xl mx-auto\">\n                    <Feed\n                      filters={{ type: 'user', userId: user.id }}\n                      showEndMessage={true}\n                    />\n                  </div>\n                )}\n\n                {activeTab === 'followers' && (\n                  <div>\n                    <FollowersList userId={user.id} />\n                  </div>\n                )}\n\n                {activeTab === 'following' && (\n                  <div>\n                    <FollowingList userId={user.id} />\n                  </div>\n                )}\n\n                {activeTab === 'activities' && (\n                  <div className=\"max-w-4xl mx-auto\">\n                    <ActivityList onEditActivity={handleEditActivity} />\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Mobile Bottom Navigation */}\n        <div className=\"md:hidden\">\n          <BottomNavigation />\n        </div>\n\n        {/* Footer - Desktop only */}\n        <Footer />\n      </div>\n    </>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/profile/domain/ProfileStatsCalculator.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'data' is assigned a value but never used.",
        "line": 40,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 40,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Profile Stats Calculator - Domain Service\n *\n * Pure business logic for calculating profile statistics and chart data.\n * No infrastructure dependencies - easy to test.\n */\n\nimport { Session } from '@/domain/entities/Session';\n\nexport type TimePeriod = '7D' | '2W' | '4W' | '3M' | '1Y';\n\nexport interface ChartDataPoint {\n  name: string;\n  hours: number;\n  sessions: number;\n  avgDuration: number; // in minutes\n}\n\nexport interface ProfileStats {\n  totalHours: number;\n  totalSessions: number;\n  averageSessionDuration: number; // in minutes\n  longestSession: number; // in seconds\n  currentStreak: number;\n  longestStreak: number;\n  // Additional computed fields\n  weeklyHours?: number; // Hours this week\n  sessionsThisWeek?: number; // Sessions count this week\n}\n\nexport class ProfileStatsCalculator {\n  /**\n   * Calculate chart data for a given time period\n   */\n  calculateChartData(\n    sessions: Session[],\n    period: TimePeriod\n  ): ChartDataPoint[] {\n    const now = new Date();\n    const data: ChartDataPoint[] = [];\n\n    switch (period) {\n      case '7D':\n        return this.calculateDailyData(sessions, 7, now);\n\n      case '2W':\n        return this.calculateDailyData(sessions, 14, now);\n\n      case '4W':\n        return this.calculateWeeklyData(sessions, 4, now);\n\n      case '3M':\n        return this.calculateWeeklyData(sessions, 12, now);\n\n      case '1Y':\n        return this.calculateMonthlyData(sessions, 12, now);\n\n      default:\n        return this.calculateDailyData(sessions, 7, now);\n    }\n  }\n\n  /**\n   * Calculate daily chart data\n   */\n  private calculateDailyData(\n    sessions: Session[],\n    days: number,\n    now: Date\n  ): ChartDataPoint[] {\n    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    const data: ChartDataPoint[] = [];\n\n    for (let i = days - 1; i >= 0; i--) {\n      const day = new Date(now);\n      day.setDate(day.getDate() - i);\n      day.setHours(0, 0, 0, 0);\n\n      const nextDay = new Date(day);\n      nextDay.setDate(nextDay.getDate() + 1);\n\n      const daySessions = sessions.filter(s => {\n        const sessionDate = s.createdAt;\n        return sessionDate >= day && sessionDate < nextDay;\n      });\n\n      const hoursWorked = daySessions.reduce(\n        (sum, s) => sum + s.getDurationInHours(),\n        0\n      );\n      const avgDuration =\n        daySessions.length > 0\n          ? daySessions.reduce((sum, s) => sum + s.duration, 0) /\n            daySessions.length /\n            60\n          : 0;\n\n      const dayName = dayNames[day.getDay()];\n      data.push({\n        name: `${dayName?.slice(0, 3) || ''} ${day.getDate()}`,\n        hours: Number(hoursWorked.toFixed(2)),\n        sessions: daySessions.length,\n        avgDuration: Math.round(avgDuration),\n      });\n    }\n\n    return data;\n  }\n\n  /**\n   * Calculate weekly chart data\n   */\n  private calculateWeeklyData(\n    sessions: Session[],\n    weeks: number,\n    now: Date\n  ): ChartDataPoint[] {\n    const data: ChartDataPoint[] = [];\n\n    for (let i = weeks - 1; i >= 0; i--) {\n      const weekStart = new Date(now);\n      weekStart.setDate(weekStart.getDate() - i * 7 - weekStart.getDay());\n      weekStart.setHours(0, 0, 0, 0);\n\n      const weekEnd = new Date(weekStart);\n      weekEnd.setDate(weekEnd.getDate() + 7);\n\n      const weekSessions = sessions.filter(s => {\n        const sessionDate = s.createdAt;\n        return sessionDate >= weekStart && sessionDate < weekEnd;\n      });\n\n      const hoursWorked = weekSessions.reduce(\n        (sum, s) => sum + s.getDurationInHours(),\n        0\n      );\n      const avgDuration =\n        weekSessions.length > 0\n          ? weekSessions.reduce((sum, s) => sum + s.duration, 0) /\n            weekSessions.length /\n            60\n          : 0;\n\n      // Format as \"Week of Mon DD\"\n      const monthNames = [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec',\n      ];\n      const weekLabel = `Week of ${monthNames[weekStart.getMonth()]} ${weekStart.getDate()}`;\n\n      data.push({\n        name: weekLabel,\n        hours: Number(hoursWorked.toFixed(2)),\n        sessions: weekSessions.length,\n        avgDuration: Math.round(avgDuration),\n      });\n    }\n\n    return data;\n  }\n\n  /**\n   * Calculate monthly chart data\n   */\n  private calculateMonthlyData(\n    sessions: Session[],\n    months: number,\n    now: Date\n  ): ChartDataPoint[] {\n    const monthNames = [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec',\n    ];\n    const data: ChartDataPoint[] = [];\n\n    for (let i = months - 1; i >= 0; i--) {\n      const monthStart = new Date(now.getFullYear(), now.getMonth() - i, 1);\n      const monthEnd = new Date(now.getFullYear(), now.getMonth() - i + 1, 1);\n\n      const monthSessions = sessions.filter(s => {\n        const sessionDate = s.createdAt;\n        return sessionDate >= monthStart && sessionDate < monthEnd;\n      });\n\n      const hoursWorked = monthSessions.reduce(\n        (sum, s) => sum + s.getDurationInHours(),\n        0\n      );\n      const avgDuration =\n        monthSessions.length > 0\n          ? monthSessions.reduce((sum, s) => sum + s.duration, 0) /\n            monthSessions.length /\n            60\n          : 0;\n\n      const monthName = monthNames[monthStart.getMonth()];\n      data.push({\n        name: monthName || '',\n        hours: Number(hoursWorked.toFixed(2)),\n        sessions: monthSessions.length,\n        avgDuration: Math.round(avgDuration),\n      });\n    }\n\n    return data;\n  }\n\n  /**\n   * Calculate overall profile statistics\n   */\n  calculateStats(sessions: Session[]): ProfileStats {\n    if (sessions.length === 0) {\n      return {\n        totalHours: 0,\n        totalSessions: 0,\n        averageSessionDuration: 0,\n        longestSession: 0,\n        currentStreak: 0,\n        longestStreak: 0,\n      };\n    }\n\n    // Total hours and sessions\n    const totalSeconds = sessions.reduce((sum, s) => sum + s.duration, 0);\n    const totalHours = totalSeconds / 3600;\n    const totalSessions = sessions.length;\n\n    // Average session duration\n    const averageSessionDuration = totalSeconds / sessions.length / 60; // in minutes\n\n    // Longest session\n    const longestSession = Math.max(...sessions.map(s => s.duration));\n\n    // Calculate streaks\n    const { currentStreak, longestStreak } = this.calculateStreaks(sessions);\n\n    return {\n      totalHours: Number(totalHours.toFixed(2)),\n      totalSessions,\n      averageSessionDuration: Math.round(averageSessionDuration),\n      longestSession,\n      currentStreak,\n      longestStreak,\n    };\n  }\n\n  /**\n   * Calculate current and longest streak\n   */\n  private calculateStreaks(sessions: Session[]): {\n    currentStreak: number;\n    longestStreak: number;\n  } {\n    if (sessions.length === 0) {\n      return { currentStreak: 0, longestStreak: 0 };\n    }\n\n    // Sort sessions by date (most recent first)\n    const sortedSessions = [...sessions].sort(\n      (a, b) => b.createdAt.getTime() - a.createdAt.getTime()\n    );\n\n    // Get unique dates\n    const uniqueDates = new Set<string>();\n    sortedSessions.forEach(s => {\n      const dateStr = s.createdAt.toDateString();\n      uniqueDates.add(dateStr);\n    });\n\n    const dates = Array.from(uniqueDates).map(d => new Date(d));\n    dates.sort((a, b) => b.getTime() - a.getTime());\n\n    // Calculate current streak\n    let currentStreak = 0;\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    // Check if there's activity today or yesterday\n    if (dates.length > 0) {\n      const firstDate = dates[0];\n      if (!firstDate) {\n        return { currentStreak: 0, longestStreak: 0 };\n      }\n\n      const mostRecentDate = new Date(firstDate);\n      mostRecentDate.setHours(0, 0, 0, 0);\n\n      if (\n        mostRecentDate.getTime() === today.getTime() ||\n        mostRecentDate.getTime() === yesterday.getTime()\n      ) {\n        currentStreak = 1;\n\n        // Count consecutive days\n        for (let i = 1; i < dates.length; i++) {\n          const prevDateValue = dates[i - 1];\n          const currDateValue = dates[i];\n\n          if (!prevDateValue || !currDateValue) {\n            break;\n          }\n\n          const prevDate = new Date(prevDateValue);\n          prevDate.setHours(0, 0, 0, 0);\n          const currDate = new Date(currDateValue);\n          currDate.setHours(0, 0, 0, 0);\n\n          const dayDiff = Math.round(\n            (prevDate.getTime() - currDate.getTime()) / (1000 * 60 * 60 * 24)\n          );\n\n          if (dayDiff === 1) {\n            currentStreak++;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n\n    // Calculate longest streak\n    let longestStreak = 0;\n    let tempStreak = 1;\n\n    for (let i = 1; i < dates.length; i++) {\n      const prevDateValue = dates[i - 1];\n      const currDateValue = dates[i];\n\n      if (!prevDateValue || !currDateValue) {\n        continue;\n      }\n\n      const prevDate = new Date(prevDateValue);\n      prevDate.setHours(0, 0, 0, 0);\n      const currDate = new Date(currDateValue);\n      currDate.setHours(0, 0, 0, 0);\n\n      const dayDiff = Math.round(\n        (prevDate.getTime() - currDate.getTime()) / (1000 * 60 * 60 * 24)\n      );\n\n      if (dayDiff === 1) {\n        tempStreak++;\n        longestStreak = Math.max(longestStreak, tempStreak);\n      } else {\n        tempStreak = 1;\n      }\n    }\n\n    longestStreak = Math.max(longestStreak, tempStreak, currentStreak);\n\n    return { currentStreak, longestStreak };\n  }\n\n  /**\n   * Filter sessions by activity/project ID\n   */\n  filterSessionsByActivity(sessions: Session[], activityId: string): Session[] {\n    if (activityId === 'all') {\n      return sessions;\n    }\n\n    return sessions.filter(\n      s =>\n        s.activityId === activityId ||\n        s.projectId === activityId ||\n        s.groupIds.includes(activityId)\n    );\n  }\n\n  /**\n   * Get top activities by hours\n   */\n  getTopActivities(\n    sessions: Session[],\n    limit: number = 5\n  ): Array<{ id: string; hours: number; sessions: number }> {\n    const activityMap = new Map<string, { hours: number; sessions: number }>();\n\n    sessions.forEach(s => {\n      const id = s.projectId || s.activityId || 'unknown';\n      const existing = activityMap.get(id) || { hours: 0, sessions: 0 };\n\n      activityMap.set(id, {\n        hours: existing.hours + s.getDurationInHours(),\n        sessions: existing.sessions + 1,\n      });\n    });\n\n    return Array.from(activityMap.entries())\n      .map(([id, data]) => ({ id, ...data }))\n      .sort((a, b) => b.hours - a.hours)\n      .slice(0, limit);\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/profile/hooks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/profile/hooks/useProfile.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 79,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 79,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2999, 3002], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2999, 3002], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 195,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 195,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 222,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 222,
        "endColumn": 21
      },
      {
        "ruleId": "@tanstack/query/exhaustive-deps",
        "severity": 1,
        "message": "The following dependencies are missing in your queryKey: profileUser",
        "line": 268,
        "column": 5,
        "nodeType": "Property",
        "messageId": "missingDeps",
        "endLine": 268,
        "endColumn": 83,
        "suggestions": [
          {
            "messageId": "fixTo",
            "data": {
              "result": "[...PROFILE_KEYS.detail(profileUser?.id || ''), 'canView', viewerId, profileUser]"
            },
            "fix": {
              "range": [8147, 8215],
              "text": "[...PROFILE_KEYS.detail(profileUser?.id || ''), 'canView', viewerId, profileUser]"
            },
            "desc": "Fix to [...PROFILE_KEYS.detail(profileUser?.id || ''), 'canView', viewerId, profileUser]"
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Profile Query Hooks - React Query Boundary\n *\n * This is the ONLY place where React Query should be used for profiles.\n * All components should use these hooks instead of direct React Query or firebaseApi calls.\n *\n * Architecture:\n * Components → useProfile hooks (React Query) → ProfileService → Repositories → Firebase\n */\n\nimport { useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { ProfileService } from '../services/ProfileService';\nimport { User } from '@/domain/entities/User';\nimport { Session } from '@/domain/entities/Session';\nimport { TimePeriod, ChartDataPoint, ProfileStats } from '../domain/ProfileStatsCalculator';\nimport { STANDARD_CACHE_TIMES } from '@/lib/react-query';\n\n// Singleton service instance\nconst profileService = new ProfileService();\n\n// ==================== CACHE KEYS ====================\n\nexport const PROFILE_KEYS = {\n  all: () => ['profile'] as const,\n  details: () => [...PROFILE_KEYS.all(), 'detail'] as const,\n  detail: (userId: string) => [...PROFILE_KEYS.details(), userId] as const,\n  byUsername: (username: string) => [...PROFILE_KEYS.all(), 'username', username] as const,\n  sessions: (userId: string, limit?: number) =>\n    [...PROFILE_KEYS.detail(userId), 'sessions', limit] as const,\n  stats: (userId: string) => [...PROFILE_KEYS.detail(userId), 'stats'] as const,\n  chartData: (userId: string, period: TimePeriod, activityId?: string) =>\n    [...PROFILE_KEYS.detail(userId), 'chart', period, activityId] as const,\n  topActivities: (userId: string, limit?: number) =>\n    [...PROFILE_KEYS.detail(userId), 'topActivities', limit] as const,\n  followers: (userId: string) => [...PROFILE_KEYS.detail(userId), 'followers'] as const,\n  following: (userId: string) => [...PROFILE_KEYS.detail(userId), 'following'] as const,\n  isFollowing: (currentUserId: string, targetUserId: string) =>\n    [...PROFILE_KEYS.all(), 'isFollowing', currentUserId, targetUserId] as const,\n};\n\n// ==================== QUERY HOOKS ====================\n\n/**\n * Get user profile by ID\n *\n * @example\n * const { data: profile, isLoading, error } = useProfileById(userId);\n */\nexport function useProfileById(\n  userId: string,\n  options?: Partial<UseQueryOptions<User | null, Error>>\n) {\n  return useQuery<User | null, Error>({\n    queryKey: PROFILE_KEYS.detail(userId),\n    queryFn: () => profileService.getProfileById(userId),\n    staleTime: STANDARD_CACHE_TIMES.LONG, // 15 minutes\n    enabled: !!userId,\n    ...options,\n  });\n}\n\n/**\n * Get user profile by username\n *\n * Useful for profile pages using username in URL.\n *\n * @example\n * const { data: profile, isLoading, error } = useProfileByUsername('john_doe');\n */\nexport function useProfileByUsername(\n  username: string,\n  options?: Partial<UseQueryOptions<User | null, Error>>\n) {\n  return useQuery<User | null, Error>({\n    queryKey: PROFILE_KEYS.byUsername(username),\n    queryFn: async () => {\n      try {\n        return await profileService.getProfileByUsername(username);\n      } catch (error: any) {\n        // Return null for not found/permission errors instead of throwing\n        if (error?.message?.includes('not found') || error?.message?.includes('private')) {\n          return null;\n        }\n        throw error;\n      }\n    },\n    staleTime: STANDARD_CACHE_TIMES.LONG, // 15 minutes\n    retry: false, // Don't retry on permission/not found errors\n    enabled: !!username,\n    ...options,\n  });\n}\n\n/**\n * Get user's sessions\n *\n * @example\n * const { data: sessions, isLoading } = useUserSessions(userId, 50);\n */\nexport function useUserSessions(\n  userId: string,\n  limit: number = 50,\n  options?: Partial<UseQueryOptions<Session[], Error>>\n) {\n  return useQuery<Session[], Error>({\n    queryKey: PROFILE_KEYS.sessions(userId, limit),\n    queryFn: () => profileService.getUserSessions(userId, limit),\n    staleTime: STANDARD_CACHE_TIMES.MEDIUM, // 5 minutes\n    enabled: !!userId,\n    ...options,\n  });\n}\n\n/**\n * Get profile statistics\n *\n * Includes total time, session count, streak info, etc.\n *\n * @example\n * const { data: stats } = useProfileStats(userId);\n */\nexport function useProfileStats(\n  userId: string,\n  options?: Partial<UseQueryOptions<ProfileStats, Error>>\n) {\n  return useQuery<ProfileStats, Error>({\n    queryKey: PROFILE_KEYS.stats(userId),\n    queryFn: () => profileService.getProfileStats(userId),\n    staleTime: STANDARD_CACHE_TIMES.VERY_LONG, // 1 hour - stats change slowly\n    enabled: !!userId,\n    ...options,\n  });\n}\n\n/**\n * Get chart data for profile analytics\n *\n * Returns data points for charting over a time period.\n *\n * @example\n * const { data: chartData } = useProfileChartData(userId, 'week', 'all');\n */\nexport function useProfileChartData(\n  userId: string,\n  period: TimePeriod,\n  activityId: string = 'all',\n  options?: Partial<UseQueryOptions<ChartDataPoint[], Error>>\n) {\n  return useQuery<ChartDataPoint[], Error>({\n    queryKey: PROFILE_KEYS.chartData(userId, period, activityId),\n    queryFn: () => profileService.getChartData(userId, period, activityId),\n    staleTime: STANDARD_CACHE_TIMES.LONG, // 15 minutes\n    enabled: !!userId,\n    ...options,\n  });\n}\n\n/**\n * Get top activities for a user\n *\n * Returns the most logged activities by time spent.\n *\n * @example\n * const { data: topActivities } = useTopActivities(userId, 5);\n */\nexport function useTopActivities(\n  userId: string,\n  limit: number = 5,\n  options?: Partial<UseQueryOptions<Array<{ id: string; hours: number; sessions: number }>, Error>>\n) {\n  return useQuery<Array<{ id: string; hours: number; sessions: number }>, Error>({\n    queryKey: PROFILE_KEYS.topActivities(userId, limit),\n    queryFn: () => profileService.getTopActivities(userId, limit),\n    staleTime: STANDARD_CACHE_TIMES.LONG, // 15 minutes\n    enabled: !!userId,\n    ...options,\n  });\n}\n\n/**\n * Get user's followers\n *\n * @example\n * const { data: followerIds } = useFollowers(userId);\n */\nexport function useFollowers(\n  userId: string,\n  options?: Partial<UseQueryOptions<string[], Error>>\n) {\n  return useQuery<string[], Error>({\n    queryKey: PROFILE_KEYS.followers(userId),\n    queryFn: async () => {\n      try {\n        return await profileService.getFollowers(userId);\n      } catch (error) {\n        // Return empty array on permission errors\n        return [];\n      }\n    },\n    staleTime: STANDARD_CACHE_TIMES.LONG, // 15 minutes\n    retry: false, // Don't retry on permission errors\n    enabled: !!userId,\n    ...options,\n  });\n}\n\n/**\n * Get users that a user is following\n *\n * @example\n * const { data: followingIds } = useFollowing(userId);\n */\nexport function useFollowing(\n  userId: string,\n  options?: Partial<UseQueryOptions<string[], Error>>\n) {\n  return useQuery<string[], Error>({\n    queryKey: PROFILE_KEYS.following(userId),\n    queryFn: async () => {\n      try {\n        return await profileService.getFollowing(userId);\n      } catch (error) {\n        // Return empty array on permission errors\n        return [];\n      }\n    },\n    staleTime: STANDARD_CACHE_TIMES.LONG, // 15 minutes\n    retry: false, // Don't retry on permission errors\n    enabled: !!userId,\n    ...options,\n  });\n}\n\n/**\n * Check if current user follows target user\n *\n * @example\n * const { data: isFollowing } = useIsFollowing(currentUserId, targetUserId);\n */\nexport function useIsFollowing(\n  currentUserId: string,\n  targetUserId: string,\n  options?: Partial<UseQueryOptions<boolean, Error>>\n) {\n  return useQuery<boolean, Error>({\n    queryKey: PROFILE_KEYS.isFollowing(currentUserId, targetUserId),\n    queryFn: () => profileService.isFollowing(currentUserId, targetUserId),\n    staleTime: STANDARD_CACHE_TIMES.MEDIUM, // 5 minutes\n    enabled: !!currentUserId && !!targetUserId && currentUserId !== targetUserId,\n    ...options,\n  });\n}\n\n/**\n * Check if profile can be viewed by current user\n *\n * Handles privacy settings (everyone, followers, private).\n *\n * @example\n * const { data: canView } = useCanViewProfile(profileUser, viewerId);\n */\nexport function useCanViewProfile(\n  profileUser: User | null,\n  viewerId: string | null,\n  options?: Partial<UseQueryOptions<boolean, Error>>\n) {\n  return useQuery<boolean, Error>({\n    queryKey: [...PROFILE_KEYS.detail(profileUser?.id || ''), 'canView', viewerId],\n    queryFn: () => {\n      if (!profileUser) return false;\n      return profileService.canViewProfile(profileUser, viewerId);\n    },\n    staleTime: STANDARD_CACHE_TIMES.MEDIUM, // 5 minutes\n    enabled: !!profileUser,\n    ...options,\n  });\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/profile/hooks/useProfileMutations.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 89,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 89,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2495, 2498], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2495, 2498], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 201,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 201,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5580, 5583], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5580, 5583], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Profile Mutation Hooks - React Query Boundary\n *\n * Note: Follow/unfollow mutations are currently placeholders as the ProfileService\n * shows these operations aren't fully implemented in the clean architecture yet.\n * When they are implemented, these hooks will handle the React Query integration.\n */\n\nimport {\n  useMutation,\n  useQueryClient,\n  UseMutationOptions,\n} from '@tanstack/react-query';\nimport { ProfileService } from '../services/ProfileService';\nimport { PROFILE_KEYS } from './useProfile';\n\nconst profileService = new ProfileService();\n\n// Context types for optimistic updates\ninterface FollowUserContext {\n  previousProfile: unknown;\n  previousFollowing: unknown;\n}\n\ninterface UnfollowUserContext {\n  previousProfile: unknown;\n}\n\n/**\n * Follow a user\n *\n * Note: Currently a placeholder. The actual implementation is pending\n * in the ProfileService. Use the existing firebaseApi.user.followUser for now.\n *\n * @example\n * const followMutation = useFollowUser();\n * followMutation.mutate({ currentUserId, targetUserId });\n */\nexport function useFollowUser(\n  options?: Partial<\n    UseMutationOptions<\n      void,\n      Error,\n      { currentUserId: string; targetUserId: string },\n      FollowUserContext\n    >\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<\n    void,\n    Error,\n    { currentUserId: string; targetUserId: string },\n    FollowUserContext\n  >({\n    mutationFn: ({ currentUserId, targetUserId }) =>\n      profileService.followUser(currentUserId, targetUserId),\n\n    onMutate: async ({ currentUserId, targetUserId }) => {\n      // Cancel outgoing queries\n      await queryClient.cancelQueries({\n        queryKey: PROFILE_KEYS.detail(targetUserId),\n      });\n      await queryClient.cancelQueries({\n        queryKey: PROFILE_KEYS.following(currentUserId),\n      });\n      await queryClient.cancelQueries({\n        queryKey: PROFILE_KEYS.followers(targetUserId),\n      });\n\n      // Snapshot previous values\n      const previousProfile = queryClient.getQueryData(\n        PROFILE_KEYS.detail(targetUserId)\n      );\n      const previousFollowing = queryClient.getQueryData(\n        PROFILE_KEYS.following(currentUserId)\n      );\n\n      // Optimistically update isFollowing\n      queryClient.setQueryData(\n        PROFILE_KEYS.isFollowing(currentUserId, targetUserId),\n        true\n      );\n\n      // Optimistically update follower count on profile\n      queryClient.setQueryData(\n        PROFILE_KEYS.detail(targetUserId),\n        (old: any) => {\n          if (!old) return old;\n          return {\n            ...old,\n            followerCount: (old.followerCount || 0) + 1,\n          };\n        }\n      );\n\n      return { previousProfile, previousFollowing };\n    },\n\n    onError: (error, variables, context: FollowUserContext | undefined) => {\n      // Rollback on error\n      if (context?.previousProfile) {\n        queryClient.setQueryData(\n          PROFILE_KEYS.detail(variables.targetUserId),\n          context.previousProfile\n        );\n      }\n      if (context?.previousFollowing) {\n        queryClient.setQueryData(\n          PROFILE_KEYS.following(variables.currentUserId),\n          context.previousFollowing\n        );\n      }\n      queryClient.setQueryData(\n        PROFILE_KEYS.isFollowing(\n          variables.currentUserId,\n          variables.targetUserId\n        ),\n        false\n      );\n    },\n\n    onSuccess: (_, { currentUserId, targetUserId }) => {\n      // Invalidate relevant caches\n      queryClient.invalidateQueries({\n        queryKey: PROFILE_KEYS.detail(targetUserId),\n      });\n      queryClient.invalidateQueries({\n        queryKey: PROFILE_KEYS.following(currentUserId),\n      });\n      queryClient.invalidateQueries({\n        queryKey: PROFILE_KEYS.followers(targetUserId),\n      });\n      queryClient.invalidateQueries({\n        queryKey: PROFILE_KEYS.isFollowing(currentUserId, targetUserId),\n      });\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Unfollow a user\n *\n * Note: Currently a placeholder. The actual implementation is pending\n * in the ProfileService. Use the existing firebaseApi.user.unfollowUser for now.\n *\n * @example\n * const unfollowMutation = useUnfollowUser();\n * unfollowMutation.mutate({ currentUserId, targetUserId });\n */\nexport function useUnfollowUser(\n  options?: Partial<\n    UseMutationOptions<\n      void,\n      Error,\n      { currentUserId: string; targetUserId: string },\n      UnfollowUserContext\n    >\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<\n    void,\n    Error,\n    { currentUserId: string; targetUserId: string },\n    UnfollowUserContext\n  >({\n    mutationFn: ({ currentUserId, targetUserId }) =>\n      profileService.unfollowUser(currentUserId, targetUserId),\n\n    onMutate: async ({ currentUserId, targetUserId }) => {\n      // Cancel outgoing queries\n      await queryClient.cancelQueries({\n        queryKey: PROFILE_KEYS.detail(targetUserId),\n      });\n      await queryClient.cancelQueries({\n        queryKey: PROFILE_KEYS.following(currentUserId),\n      });\n      await queryClient.cancelQueries({\n        queryKey: PROFILE_KEYS.followers(targetUserId),\n      });\n\n      // Snapshot previous values\n      const previousProfile = queryClient.getQueryData(\n        PROFILE_KEYS.detail(targetUserId)\n      );\n\n      // Optimistically update isFollowing\n      queryClient.setQueryData(\n        PROFILE_KEYS.isFollowing(currentUserId, targetUserId),\n        false\n      );\n\n      // Optimistically update follower count on profile\n      queryClient.setQueryData(\n        PROFILE_KEYS.detail(targetUserId),\n        (old: any) => {\n          if (!old) return old;\n          return {\n            ...old,\n            followerCount: Math.max(0, (old.followerCount || 0) - 1),\n          };\n        }\n      );\n\n      return { previousProfile };\n    },\n\n    onError: (error, variables, context: UnfollowUserContext | undefined) => {\n      // Rollback on error\n      if (context?.previousProfile) {\n        queryClient.setQueryData(\n          PROFILE_KEYS.detail(variables.targetUserId),\n          context.previousProfile\n        );\n      }\n      queryClient.setQueryData(\n        PROFILE_KEYS.isFollowing(\n          variables.currentUserId,\n          variables.targetUserId\n        ),\n        true\n      );\n    },\n\n    onSuccess: (_, { currentUserId, targetUserId }) => {\n      // Invalidate relevant caches\n      queryClient.invalidateQueries({\n        queryKey: PROFILE_KEYS.detail(targetUserId),\n      });\n      queryClient.invalidateQueries({\n        queryKey: PROFILE_KEYS.following(currentUserId),\n      });\n      queryClient.invalidateQueries({\n        queryKey: PROFILE_KEYS.followers(targetUserId),\n      });\n      queryClient.invalidateQueries({\n        queryKey: PROFILE_KEYS.isFollowing(currentUserId, targetUserId),\n      });\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Helper hook to invalidate all profile-related queries for a user\n *\n * @example\n * const invalidateProfile = useInvalidateProfile();\n * invalidateProfile(userId);\n */\nexport function useInvalidateProfile() {\n  const queryClient = useQueryClient();\n\n  return (userId: string) => {\n    queryClient.invalidateQueries({ queryKey: PROFILE_KEYS.detail(userId) });\n  };\n}\n\n/**\n * Helper hook to invalidate all profile queries\n *\n * Use after operations that affect multiple profiles.\n *\n * @example\n * const invalidateAllProfiles = useInvalidateAllProfiles();\n * invalidateAllProfiles();\n */\nexport function useInvalidateAllProfiles() {\n  const queryClient = useQueryClient();\n\n  return () => {\n    queryClient.invalidateQueries({ queryKey: PROFILE_KEYS.all() });\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/profile/services/ProfileService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/projects/hooks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/projects/hooks/useProjectMutations.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/projects/hooks/useProjects.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/projects/services/ProjectService.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Activity' is defined but never used.",
        "line": 14,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ActivityStats' is defined but never used.",
        "line": 18,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 16
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Project Service - Business Logic Layer\n *\n * Orchestrates business workflows for projects (activities).\n * No React dependencies - pure TypeScript for testability.\n *\n * Note: Projects are now called \"Activities\" in the codebase,\n * but we maintain backwards compatibility with Project naming.\n */\n\nimport { firebaseApi } from '@/lib/api';\nimport {\n  Project,\n  Activity,\n  CreateProjectData,\n  UpdateProjectData,\n  ProjectStats,\n  ActivityStats,\n} from '@/types';\n\nexport class ProjectService {\n  /**\n   * Get all projects (activities) for the current user\n   */\n  async getProjects(): Promise<Project[]> {\n    try {\n      return await firebaseApi.project.getProjects();\n    } catch (error) {\n      console.error('Error getting projects:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get a single project by ID\n   */\n  async getProject(projectId: string): Promise<Project | null> {\n    try {\n      return await firebaseApi.project.getProjectById(projectId);\n    } catch (error) {\n      console.error('Error getting project:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get project statistics\n   */\n  async getProjectStats(projectId: string): Promise<ProjectStats | null> {\n    try {\n      return await firebaseApi.project.getProjectStats(projectId);\n    } catch (error) {\n      console.error('Error getting project stats:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Create a new project\n   */\n  async createProject(data: CreateProjectData): Promise<Project> {\n    return firebaseApi.project.createProject(data);\n  }\n\n  /**\n   * Update a project\n   */\n  async updateProject(projectId: string, data: UpdateProjectData): Promise<Project> {\n    return firebaseApi.project.updateProject(projectId, data);\n  }\n\n  /**\n   * Delete a project\n   */\n  async deleteProject(projectId: string): Promise<void> {\n    return firebaseApi.project.deleteProject(projectId);\n  }\n\n  /**\n   * Archive a project\n   */\n  async archiveProject(projectId: string): Promise<Project> {\n    return this.updateProject(projectId, { status: 'archived' });\n  }\n\n  /**\n   * Restore an archived project\n   */\n  async restoreProject(projectId: string): Promise<Project> {\n    return this.updateProject(projectId, { status: 'active' });\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/search/components/SearchLoadingSkeleton.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/search/hooks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/search/hooks/useFollowingList.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'CACHE_KEYS' is defined but never used.",
        "line": 15,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 20
      },
      {
        "ruleId": "@tanstack/query/exhaustive-deps",
        "severity": 1,
        "message": "The following dependencies are missing in your queryKey: userId",
        "line": 34,
        "column": 5,
        "nodeType": "Property",
        "messageId": "missingDeps",
        "endLine": 34,
        "endColumn": 77
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Following List Hook\n *\n * ULTRA-OPTIMIZED React Query hook for fetching ONLY following IDs.\n *\n * Key optimizations:\n * - Fetches only IDs, not full user objects (10x faster)\n * - Returns Set for O(1) lookup (instant .has() checks)\n * - Aggressive caching (30 min stale time)\n * - No refetching on mount/focus\n */\n\nimport { useQuery } from '@tanstack/react-query';\nimport { getFollowingIds } from '@/lib/api/users/getFollowingIds';\nimport { CACHE_KEYS, CACHE_TIMES } from '@/lib/queryClient';\n\ninterface UseFollowingListOptions {\n  userId?: string;\n  enabled?: boolean;\n}\n\ninterface UseFollowingListReturn {\n  followingIds: Set<string>;\n  isLoading: boolean;\n  isError: boolean;\n  error: Error | null;\n}\n\nexport function useFollowingList({\n  userId,\n  enabled = true,\n}: UseFollowingListOptions): UseFollowingListReturn {\n  const { data, isLoading, isError, error } = useQuery({\n    queryKey: userId ? ['following-ids', userId] : ['following-ids', 'null'],\n    queryFn: async () => {\n      if (!userId) {\n        return new Set<string>();\n      }\n      return await getFollowingIds(userId);\n    },\n    enabled: enabled && !!userId,\n    staleTime: CACHE_TIMES.VERY_LONG, // 30 minutes - following changes infrequently\n    gcTime: 60 * 60 * 1000, // 1 hour - keep in memory longer\n    refetchOnWindowFocus: false,\n    refetchOnMount: false, // Critical: don't refetch if we have data\n    refetchOnReconnect: false,\n  });\n\n  return {\n    followingIds: data ?? new Set<string>(),\n    isLoading,\n    isError,\n    error: error as Error | null,\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/search/hooks/useSearchGroups.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/search/hooks/useSearchUsers.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'CACHE_KEYS' is defined but never used.",
        "line": 12,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 12,
        "endColumn": 20
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Search Users Hook\n *\n * Optimized React Query hook for searching users with:\n * - Automatic caching and deduplication\n * - Stale-while-revalidate pattern\n * - Proper loading and error states\n */\n\nimport { useQuery } from '@tanstack/react-query';\nimport { firebaseUserApi } from '@/lib/api';\nimport { CACHE_KEYS, CACHE_TIMES } from '@/lib/queryClient';\nimport type { UserSearchResult } from '@/types';\n\ninterface UseSearchUsersOptions {\n  searchTerm: string;\n  enabled?: boolean;\n  page?: number;\n  limit?: number;\n}\n\ninterface UseSearchUsersReturn {\n  users: UserSearchResult[];\n  totalCount: number;\n  hasMore: boolean;\n  isLoading: boolean;\n  isError: boolean;\n  error: Error | null;\n}\n\nexport function useSearchUsers({\n  searchTerm,\n  enabled = true,\n  page = 1,\n  limit = 20,\n}: UseSearchUsersOptions): UseSearchUsersReturn {\n  const trimmedTerm = searchTerm.trim();\n\n  const { data, isLoading, isError, error } = useQuery({\n    queryKey: ['search', 'users', trimmedTerm, page, limit],\n    queryFn: async () => {\n      if (!trimmedTerm) {\n        return { users: [], totalCount: 0, hasMore: false };\n      }\n      return firebaseUserApi.searchUsers(trimmedTerm, page, limit);\n    },\n    enabled: enabled && trimmedTerm.length > 0,\n    staleTime: CACHE_TIMES.MEDIUM, // 5 minutes\n    gcTime: CACHE_TIMES.LONG, // 15 minutes\n    refetchOnWindowFocus: false, // Don't refetch on window focus for search results\n  });\n\n  return {\n    users: data?.users ?? [],\n    totalCount: data?.totalCount ?? 0,\n    hasMore: data?.hasMore ?? false,\n    isLoading,\n    isError,\n    error: error as Error | null,\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/search/hooks/useSuggestedGroups.ts",
    "messages": [
      {
        "ruleId": "@tanstack/query/exhaustive-deps",
        "severity": 1,
        "message": "The following dependencies are missing in your queryKey: limit",
        "line": 66,
        "column": 5,
        "nodeType": "Property",
        "messageId": "missingDeps",
        "endLine": 66,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "fixTo",
            "data": {
              "result": "[...CACHE_KEYS.SUGGESTED_GROUPS(), userId, limit]"
            },
            "fix": {
              "range": [1475, 1517],
              "text": "[...CACHE_KEYS.SUGGESTED_GROUPS(), userId, limit]"
            },
            "desc": "Fix to [...CACHE_KEYS.SUGGESTED_GROUPS(), userId, limit]"
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Suggested Groups Hook\n *\n * Optimized React Query hook for fetching suggested groups with:\n * - Automatic caching to prevent repeated loads\n * - Filters out already-joined groups\n * - Proper loading and error states\n */\n\nimport { useQuery } from '@tanstack/react-query';\nimport {\n  collection,\n  query as firestoreQuery,\n  orderBy,\n  limit as limitFn,\n  getDocs,\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { CACHE_KEYS, CACHE_TIMES } from '@/lib/queryClient';\nimport { useUserGroups } from './useUserGroups';\n\ninterface SuggestedGroup {\n  id: string;\n  name: string;\n  description: string;\n  imageUrl?: string;\n  location?: string;\n  category?: string;\n  memberCount: number;\n  members: number;\n  image?: string;\n}\n\ninterface UseSuggestedGroupsOptions {\n  userId?: string;\n  enabled?: boolean;\n  limit?: number;\n}\n\ninterface UseSuggestedGroupsReturn {\n  suggestedGroups: SuggestedGroup[];\n  isLoading: boolean;\n  isError: boolean;\n  error: Error | null;\n}\n\nexport function useSuggestedGroups({\n  userId,\n  enabled = true,\n  limit = 20,\n}: UseSuggestedGroupsOptions): UseSuggestedGroupsReturn {\n  // Fetch user's joined groups first\n  const { groups: userGroups, isLoading: isLoadingUserGroups } = useUserGroups({\n    userId,\n    enabled: enabled && !!userId,\n  });\n\n  const joinedGroupIds = new Set(userGroups.map(g => g.id));\n\n  const {\n    data,\n    isLoading: isLoadingSuggested,\n    isError,\n    error,\n  } = useQuery({\n    queryKey: [...CACHE_KEYS.SUGGESTED_GROUPS(), userId],\n    queryFn: async () => {\n      // Fetch all groups ordered by popularity\n      const allGroupsSnapshot = await getDocs(\n        firestoreQuery(\n          collection(db, 'groups'),\n          orderBy('memberCount', 'desc'),\n          limitFn(limit)\n        )\n      );\n\n      const allGroups: SuggestedGroup[] = allGroupsSnapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          name: data.name,\n          description: data.description,\n          imageUrl: data.imageUrl,\n          location: data.location,\n          category: data.category,\n          memberCount: data.memberCount,\n          members: data.memberCount,\n          image: data.imageUrl || '📁',\n        };\n      });\n\n      // Filter out groups user is already in\n      return allGroups.filter(group => !joinedGroupIds.has(group.id));\n    },\n    enabled: enabled && !isLoadingUserGroups,\n    staleTime: CACHE_TIMES.LONG, // 15 minutes\n    gcTime: CACHE_TIMES.VERY_LONG, // 1 hour\n    refetchOnWindowFocus: false,\n  });\n\n  return {\n    suggestedGroups: data ?? [],\n    isLoading: isLoadingUserGroups || isLoadingSuggested,\n    isError,\n    error: error as Error | null,\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/search/hooks/useSuggestedUsers.ts",
    "messages": [
      {
        "ruleId": "@tanstack/query/exhaustive-deps",
        "severity": 1,
        "message": "The following dependencies are missing in your queryKey: limit",
        "line": 32,
        "column": 5,
        "nodeType": "Property",
        "messageId": "missingDeps",
        "endLine": 32,
        "endColumn": 43
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Suggested Users Hook\n *\n * Optimized React Query hook for fetching suggested users with:\n * - Automatic caching to prevent repeated loads\n * - Prefetching for instant tab switching\n * - Proper loading and error states\n */\n\nimport { useQuery } from '@tanstack/react-query';\nimport { firebaseUserApi } from '@/lib/api';\nimport { CACHE_KEYS, CACHE_TIMES } from '@/lib/queryClient';\nimport type { SuggestedUser } from '@/types';\n\ninterface UseSuggestedUsersOptions {\n  enabled?: boolean;\n  limit?: number;\n}\n\ninterface UseSuggestedUsersReturn {\n  suggestedUsers: SuggestedUser[];\n  isLoading: boolean;\n  isError: boolean;\n  error: Error | null;\n}\n\nexport function useSuggestedUsers({\n  enabled = true,\n  limit = 10,\n}: UseSuggestedUsersOptions = {}): UseSuggestedUsersReturn {\n  const { data, isLoading, isError, error } = useQuery({\n    queryKey: CACHE_KEYS.SUGGESTED_USERS(),\n    queryFn: () => firebaseUserApi.getSuggestedUsers(limit),\n    enabled,\n    staleTime: CACHE_TIMES.LONG, // 15 minutes\n    gcTime: CACHE_TIMES.VERY_LONG, // 1 hour\n    refetchOnWindowFocus: false,\n  });\n\n  return {\n    suggestedUsers: data ?? [],\n    isLoading,\n    isError,\n    error: error as Error | null,\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/search/hooks/useUserGroups.ts",
    "messages": [
      {
        "ruleId": "@tanstack/query/exhaustive-deps",
        "severity": 1,
        "message": "The following dependencies are missing in your queryKey: userId, limit",
        "line": 34,
        "column": 5,
        "nodeType": "Property",
        "messageId": "missingDeps",
        "endLine": 34,
        "endColumn": 80
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * User Groups Hook\n *\n * Optimized React Query hook for fetching user's joined groups with:\n * - Automatic caching\n * - Proper loading and error states\n * - Cache invalidation on group join/leave\n */\n\nimport { useQuery } from '@tanstack/react-query';\nimport { firebaseApi } from '@/lib/api';\nimport { CACHE_KEYS, CACHE_TIMES } from '@/lib/queryClient';\nimport type { Group } from '@/types';\n\ninterface UseUserGroupsOptions {\n  userId?: string;\n  enabled?: boolean;\n  limit?: number;\n}\n\ninterface UseUserGroupsReturn {\n  groups: Group[];\n  isLoading: boolean;\n  isError: boolean;\n  error: Error | null;\n}\n\nexport function useUserGroups({\n  userId,\n  enabled = true,\n  limit,\n}: UseUserGroupsOptions): UseUserGroupsReturn {\n  const { data, isLoading, isError, error } = useQuery({\n    queryKey: userId ? CACHE_KEYS.USER_GROUPS(userId) : ['user-groups', 'null'],\n    queryFn: () => {\n      if (!userId) {\n        return [];\n      }\n      return firebaseApi.group.getUserGroups(userId, limit);\n    },\n    enabled: enabled && !!userId,\n    staleTime: CACHE_TIMES.MEDIUM, // 5 minutes\n    gcTime: CACHE_TIMES.LONG, // 15 minutes\n    refetchOnWindowFocus: false,\n  });\n\n  return {\n    groups: data ?? [],\n    isLoading,\n    isError,\n    error: error as Error | null,\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/sessions/hooks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/sessions/hooks/useSessionMutations.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 20,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 20,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [524, 527], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [524, 527], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 20,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 20,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [529, 532], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [529, 532], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 25,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 25,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [623, 626], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [623, 626], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 25,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 25,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [628, 631], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [628, 631], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 66,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 66,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1691, 1694], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1691, 1694], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 66,
        "column": 69,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 66,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1726, 1729], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1726, 1729], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 70,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 70,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1833, 1836], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1833, 1836], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 74,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 74,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1982, 1985], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1982, 1985], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 80,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 80,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2170, 2173], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2170, 2173], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 82,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 82,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2253, 2256], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2253, 2256], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 96,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 96,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2612, 2615], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2612, 2615], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 96,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 96,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2617, 2620], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2617, 2620], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 165,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 165,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4730, 4733], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4730, 4733], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 165,
        "column": 69,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 165,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4765, 4768], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4765, 4768], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 168,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 168,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4846, 4849], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4846, 4849], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 196,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 196,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5774, 5777], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5774, 5777], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 209,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 209,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6086, 6089], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6086, 6089], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 237,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 237,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6910, 6913], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6910, 6913], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 237,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 237,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6915, 6918], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6915, 6918], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 304,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 304,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8534, 8537], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8534, 8537], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 20,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Session Mutation Hooks - React Query Boundary\n *\n * All write operations for sessions (delete, support, update).\n */\n\nimport {\n  useMutation,\n  useQueryClient,\n  UseMutationOptions,\n} from '@tanstack/react-query';\nimport { SessionService, SupportSessionData } from '../services/SessionService';\nimport { SESSION_KEYS } from './useSessions';\nimport { Session } from '@/types';\n\nconst sessionService = new SessionService();\n\n// Context types for optimistic updates\ninterface DeleteSessionContext {\n  previousFeedData: [any, any][];\n  previousSession: unknown;\n}\n\ninterface SupportSessionContext {\n  previousFeedData: [any, any][];\n  previousSession: unknown;\n}\n\ninterface UpdateSessionContext {\n  previousSession: unknown;\n}\n\n/**\n * Delete a session\n *\n * @example\n * const deleteMutation = useDeleteSession();\n * deleteMutation.mutate(sessionId);\n */\nexport function useDeleteSession(\n  options?: Partial<\n    UseMutationOptions<void, Error, string, DeleteSessionContext>\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<void, Error, string, DeleteSessionContext>({\n    mutationFn: sessionId => sessionService.deleteSession(sessionId),\n\n    onMutate: async sessionId => {\n      // Cancel outgoing queries\n      await queryClient.cancelQueries({ queryKey: ['feed'] });\n      await queryClient.cancelQueries({\n        queryKey: SESSION_KEYS.detail(sessionId),\n      });\n\n      // Snapshot\n      const previousFeedData = queryClient.getQueriesData({\n        queryKey: ['feed'],\n      });\n      const previousSession = queryClient.getQueryData(\n        SESSION_KEYS.detail(sessionId)\n      );\n\n      // Optimistically remove from feed\n      queryClient.setQueriesData<any>({ queryKey: ['feed'] }, (old: any) => {\n        if (!old) return old;\n\n        if (Array.isArray(old)) {\n          return old.filter((s: any) => s.id !== sessionId);\n        } else if (old.sessions) {\n          return {\n            ...old,\n            sessions: old.sessions.filter((s: any) => s.id !== sessionId),\n          };\n        } else if (old.pages) {\n          // Handle infinite query\n          return {\n            ...old,\n            pages: old.pages.map((page: any) => ({\n              ...page,\n              sessions: page.sessions.filter((s: any) => s.id !== sessionId),\n            })),\n          };\n        }\n\n        return old;\n      });\n\n      return { previousFeedData, previousSession };\n    },\n\n    onError: (error, sessionId, context: DeleteSessionContext | undefined) => {\n      // Rollback\n      if (context?.previousFeedData) {\n        context.previousFeedData.forEach(([queryKey, data]: [any, any]) => {\n          queryClient.setQueryData(queryKey, data);\n        });\n      }\n      if (context?.previousSession) {\n        queryClient.setQueryData(\n          SESSION_KEYS.detail(sessionId),\n          context.previousSession\n        );\n      }\n    },\n\n    onSettled: (_, __, sessionId) => {\n      // Invalidate all related queries\n      queryClient.invalidateQueries({ queryKey: ['feed'] });\n      queryClient.invalidateQueries({\n        queryKey: SESSION_KEYS.detail(sessionId),\n      });\n      queryClient.invalidateQueries({ queryKey: SESSION_KEYS.all() });\n      queryClient.invalidateQueries({ queryKey: ['profile'] }); // Invalidate profile stats\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Support (like) or unsupport a session\n *\n * @example\n * const supportMutation = useSupportSession(currentUserId);\n * supportMutation.mutate({ sessionId: 'abc123', action: 'support' });\n * supportMutation.mutate({ sessionId: 'abc123', action: 'unsupport' });\n */\nexport function useSupportSession(\n  currentUserId?: string,\n  options?: Partial<\n    UseMutationOptions<void, Error, SupportSessionData, SupportSessionContext>\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<void, Error, SupportSessionData, SupportSessionContext>({\n    mutationFn: async ({ sessionId, action }) => {\n      if (action === 'support') {\n        await sessionService.supportSession(sessionId);\n      } else {\n        await sessionService.unsupportSession(sessionId);\n      }\n    },\n\n    onMutate: async ({ sessionId, action }): Promise<SupportSessionContext> => {\n      // Cancel outgoing queries\n      await queryClient.cancelQueries({ queryKey: ['feed'] });\n      await queryClient.cancelQueries({\n        queryKey: SESSION_KEYS.detail(sessionId),\n      });\n\n      // Snapshot\n      const previousFeedData = queryClient.getQueriesData({\n        queryKey: ['feed'],\n      });\n      const previousSession = queryClient.getQueryData(\n        SESSION_KEYS.detail(sessionId)\n      );\n\n      const increment = action === 'support' ? 1 : -1;\n\n      // Optimistically update feed sessions\n      queryClient.setQueriesData<any>({ queryKey: ['feed'] }, (old: any) => {\n        if (!old) return old;\n\n        const updateSession = (session: any) => {\n          if (session.id !== sessionId) return session;\n\n          const supportedBy = session.supportedBy || [];\n          const newSupportedBy =\n            action === 'support'\n              ? [...supportedBy, currentUserId].filter(Boolean)\n              : supportedBy.filter((id: string) => id !== currentUserId);\n\n          return {\n            ...session,\n            supportCount: Math.max(0, (session.supportCount || 0) + increment),\n            supportedBy: newSupportedBy,\n            isSupported: action === 'support',\n          };\n        };\n\n        if (Array.isArray(old)) {\n          return old.map(updateSession);\n        } else if (old.sessions) {\n          return {\n            ...old,\n            sessions: old.sessions.map(updateSession),\n          };\n        } else if (old.pages) {\n          // Handle infinite query\n          return {\n            ...old,\n            pages: old.pages.map((page: any) => ({\n              ...page,\n              sessions: page.sessions.map(updateSession),\n            })),\n          };\n        }\n\n        return old;\n      });\n\n      // Optimistically update single session\n      queryClient.setQueryData<Session | null>(\n        SESSION_KEYS.detail(sessionId),\n        (old: any) => {\n          if (!old) return old;\n\n          const supportedBy = old.supportedBy || [];\n          const newSupportedBy =\n            action === 'support'\n              ? [...supportedBy, currentUserId].filter(Boolean)\n              : supportedBy.filter((id: string) => id !== currentUserId);\n\n          return {\n            ...old,\n            supportCount: Math.max(0, (old.supportCount || 0) + increment),\n            supportedBy: newSupportedBy,\n            isSupported: action === 'support',\n          };\n        }\n      );\n\n      return { previousFeedData, previousSession };\n    },\n\n    onError: (\n      error,\n      { sessionId },\n      context: SupportSessionContext | undefined\n    ) => {\n      // Rollback\n      if (context?.previousFeedData) {\n        context.previousFeedData.forEach(([queryKey, data]: [any, any]) => {\n          queryClient.setQueryData(queryKey, data);\n        });\n      }\n      if (context?.previousSession) {\n        queryClient.setQueryData(\n          SESSION_KEYS.detail(sessionId),\n          context.previousSession\n        );\n      }\n    },\n\n    onSettled: (_, __, { sessionId }) => {\n      // Refetch to ensure consistency\n      queryClient.invalidateQueries({ queryKey: ['feed'] });\n      queryClient.invalidateQueries({\n        queryKey: SESSION_KEYS.detail(sessionId),\n      });\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Update a session\n *\n * @example\n * const updateMutation = useUpdateSession();\n * updateMutation.mutate({\n *   sessionId: 'abc123',\n *   data: { title: 'Updated title', visibility: 'everyone' }\n * });\n */\nexport function useUpdateSession(\n  options?: Partial<\n    UseMutationOptions<\n      void,\n      Error,\n      { sessionId: string; data: Partial<Session> },\n      UpdateSessionContext\n    >\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<\n    void,\n    Error,\n    { sessionId: string; data: Partial<Session> },\n    UpdateSessionContext\n  >({\n    mutationFn: ({ sessionId, data }) =>\n      sessionService.updateSession(sessionId, data),\n\n    onMutate: async ({ sessionId, data }): Promise<UpdateSessionContext> => {\n      await queryClient.cancelQueries({\n        queryKey: SESSION_KEYS.detail(sessionId),\n      });\n\n      const previousSession = queryClient.getQueryData(\n        SESSION_KEYS.detail(sessionId)\n      );\n\n      // Optimistically update\n      queryClient.setQueryData<Session | null>(\n        SESSION_KEYS.detail(sessionId),\n        (old: any) => {\n          if (!old) return old;\n          return { ...old, ...data };\n        }\n      );\n\n      return { previousSession };\n    },\n\n    onError: (\n      error,\n      { sessionId },\n      context: UpdateSessionContext | undefined\n    ) => {\n      if (context?.previousSession) {\n        queryClient.setQueryData(\n          SESSION_KEYS.detail(sessionId),\n          context.previousSession\n        );\n      }\n    },\n\n    onSuccess: (_, { sessionId }) => {\n      queryClient.invalidateQueries({\n        queryKey: SESSION_KEYS.detail(sessionId),\n      });\n      queryClient.invalidateQueries({ queryKey: ['feed'] });\n      queryClient.invalidateQueries({ queryKey: SESSION_KEYS.all() });\n      queryClient.invalidateQueries({ queryKey: ['profile'] }); // Invalidate profile stats\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Helper hook to invalidate session data\n *\n * @example\n * const invalidateSession = useInvalidateSession();\n * invalidateSession(sessionId);\n */\nexport function useInvalidateSession() {\n  const queryClient = useQueryClient();\n\n  return (sessionId: string) => {\n    queryClient.invalidateQueries({ queryKey: SESSION_KEYS.detail(sessionId) });\n    queryClient.invalidateQueries({\n      queryKey: SESSION_KEYS.detailWithData(sessionId),\n    });\n  };\n}\n\n/**\n * Helper hook to invalidate all sessions\n *\n * @example\n * const invalidateAllSessions = useInvalidateAllSessions();\n * invalidateAllSessions();\n */\nexport function useInvalidateAllSessions() {\n  const queryClient = useQueryClient();\n\n  return () => {\n    queryClient.invalidateQueries({ queryKey: SESSION_KEYS.all() });\n    queryClient.invalidateQueries({ queryKey: ['feed'] });\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/sessions/hooks/useSessions.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/sessions/services/SessionService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/settings/components/SettingsPageContent.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ChevronRight' is defined but never used.",
        "line": 23,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'LogOut' is defined but never used.",
        "line": 28,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Trash2' is defined but never used.",
        "line": 29,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'router' is assigned a value but never used.",
        "line": 42,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 42,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 149,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 149,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5198, 5201], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5198, 5201], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 185,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 185,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6553, 6556], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6553, 6556], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 204,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 204,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7073, 7076], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7073, 7076], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 214,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 214,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7325, 7328], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7325, 7328], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 228,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 228,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7742, 7745], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7742, 7745], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 616,
        "column": 108,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 616,
        "endColumn": 111,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [27883, 27886], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [27883, 27886], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 10,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Settings Page Content Component (Clean Architecture)\n *\n * This component handles all settings presentation logic.\n * Extracted from the route file for better separation of concerns.\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport Header from '@/components/HeaderComponent';\nimport MobileHeader from '@/components/MobileHeader';\nimport BottomNavigation from '@/components/BottomNavigation';\nimport Footer from '@/components/Footer';\nimport NotificationSettings from '@/components/NotificationSettings';\nimport {\n  User,\n  Shield,\n  Bell,\n  Globe,\n  Mail,\n  Upload,\n  ChevronRight,\n  Link as LinkIcon,\n  Twitter,\n  Github,\n  Linkedin,\n  LogOut,\n  Trash2\n} from 'lucide-react';\nimport { useAuth } from '@/hooks/useAuth';\nimport Image from 'next/image';\nimport { firebaseUserApi } from '@/lib/api';\nimport { toast } from 'sonner';\nimport { useRouter } from 'next/navigation';\nimport ConfirmDialog from '@/components/ConfirmDialog';\n\ntype SettingsTab = 'profile' | 'privacy' | 'notifications' | 'display';\n\nexport function SettingsPageContent() {\n  const { user, logout } = useAuth();\n  const router = useRouter();\n  const [activeTab, setActiveTab] = useState<SettingsTab>('profile');\n  const [formData, setFormData] = useState({\n    name: user?.name || '',\n    tagline: user?.tagline || '',\n    pronouns: user?.pronouns || '',\n    bio: user?.bio || '',\n    location: user?.location || '',\n    website: user?.website || '',\n    twitter: user?.socialLinks?.twitter || '',\n    github: user?.socialLinks?.github || '',\n    linkedin: user?.socialLinks?.linkedin || '',\n    profileVisibility: 'everyone' as 'everyone' | 'followers' | 'private',\n  });\n  const [isSaving, setIsSaving] = useState(false);\n  const [saved, setSaved] = useState(false);\n  const [isUploadingPhoto, setIsUploadingPhoto] = useState(false);\n  const [profilePictureUrl, setProfilePictureUrl] = useState(user?.profilePicture || '');\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [originalFormData, setOriginalFormData] = useState({\n    name: user?.name || '',\n    tagline: user?.tagline || '',\n    pronouns: user?.pronouns || '',\n    bio: user?.bio || '',\n    location: user?.location || '',\n    website: user?.website || '',\n    twitter: user?.socialLinks?.twitter || '',\n    github: user?.socialLinks?.github || '',\n    linkedin: user?.socialLinks?.linkedin || '',\n    profileVisibility: 'everyone' as 'everyone' | 'followers' | 'private',\n  });\n\n  const tabs = [\n    { id: 'profile' as SettingsTab, label: 'My Profile', icon: User },\n    { id: 'privacy' as SettingsTab, label: 'Privacy Controls', icon: Shield },\n    { id: 'notifications' as SettingsTab, label: 'Email Notifications', icon: Bell },\n    { id: 'display' as SettingsTab, label: 'Display Preferences', icon: Globe },\n  ];\n\n  // Check if form has been modified\n  const hasChanges =\n    formData.name !== originalFormData.name ||\n    formData.tagline !== originalFormData.tagline ||\n    formData.pronouns !== originalFormData.pronouns ||\n    formData.bio !== originalFormData.bio ||\n    formData.location !== originalFormData.location ||\n    formData.website !== originalFormData.website ||\n    formData.twitter !== originalFormData.twitter ||\n    formData.github !== originalFormData.github ||\n    formData.linkedin !== originalFormData.linkedin ||\n    formData.profileVisibility !== originalFormData.profileVisibility;\n\n  // Update form data when user data loads\n  useEffect(() => {\n    if (user) {\n      const userData = {\n        name: user.name || '',\n        tagline: user.tagline || '',\n        pronouns: user.pronouns || '',\n        bio: user.bio || '',\n        location: user.location || '',\n        website: user.website || '',\n        twitter: user.socialLinks?.twitter || '',\n        github: user.socialLinks?.github || '',\n        linkedin: user.socialLinks?.linkedin || '',\n        profileVisibility: 'everyone' as 'everyone' | 'followers' | 'private',\n      };\n      setFormData({\n        ...userData,\n      });\n      setOriginalFormData(userData);\n      setProfilePictureUrl(user.profilePicture || '');\n    }\n  }, [user]);\n\n  const handlePhotoUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    // Validate file type\n    const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\n    if (!validTypes.includes(file.type)) {\n      toast.error('Invalid file type. Please upload a JPEG, PNG, GIF, or WebP image.');\n      return;\n    }\n\n    // Validate file size (5MB max)\n    const maxSize = 5 * 1024 * 1024;\n    if (file.size > maxSize) {\n      toast.error('File size too large. Maximum size is 5MB.');\n      return;\n    }\n\n    try {\n      setIsUploadingPhoto(true);\n      \n      // Upload to Firebase Storage\n      const downloadURL = await firebaseUserApi.uploadProfilePicture(file);\n      \n      // Update profile with new picture URL\n      await firebaseUserApi.updateProfile({\n        profilePicture: downloadURL,\n      });\n      \n      setProfilePictureUrl(downloadURL);\n      toast.success('Profile picture updated!');\n    } catch (err: any) {\n      console.error('Upload error:', err);\n      toast.error(err?.message || 'Failed to upload photo');\n    } finally {\n      setIsUploadingPhoto(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      setIsSaving(true);\n\n      // Build social links object only if at least one link is provided\n      const socialLinks: { twitter?: string; github?: string; linkedin?: string } = {};\n      if (formData.twitter) socialLinks.twitter = formData.twitter;\n      if (formData.github) socialLinks.github = formData.github;\n      if (formData.linkedin) socialLinks.linkedin = formData.linkedin;\n\n      await firebaseUserApi.updateProfile({\n        name: formData.name,\n        tagline: formData.tagline || undefined,\n        pronouns: formData.pronouns || undefined,\n        bio: formData.bio || undefined,\n        location: formData.location || undefined,\n        website: formData.website || undefined,\n        socialLinks: Object.keys(socialLinks).length > 0 ? socialLinks : undefined,\n        profileVisibility: formData.profileVisibility,\n      });\n      toast.success('Profile updated successfully!');\n      setSaved(true);\n\n      // Reload the page after a short delay to refresh the user context\n      setTimeout(() => {\n        window.location.reload();\n      }, 1000);\n    } catch (err: any) {\n      toast.error(err?.message || 'Failed to update profile');\n      setIsSaving(false);\n    }\n  };\n\n  const handlePrivacySubmit = async () => {\n    try {\n      setIsSaving(true);\n      await firebaseUserApi.updateProfile({\n        profileVisibility: formData.profileVisibility,\n      });\n      toast.success('Privacy settings updated successfully!');\n      setSaved(true);\n\n      // Reload the page after a short delay\n      setTimeout(() => {\n        window.location.reload();\n      }, 1000);\n    } catch (err: any) {\n      toast.error(err?.message || 'Failed to update privacy settings');\n      setIsSaving(false);\n    }\n  };\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      toast.success('Logged out successfully');\n    } catch (err: any) {\n      toast.error(err?.message || 'Failed to log out');\n    }\n  };\n\n  const handleDeleteAccount = async () => {\n    if (!user) return;\n\n    try {\n      setIsDeleting(true);\n      // We'll implement the actual API call next\n      await firebaseUserApi.deleteAccount();\n      toast.success('Account deleted successfully');\n      // The logout will happen automatically as part of deleteAccount\n    } catch (err: any) {\n      console.error('Delete account error:', err);\n      toast.error(err?.message || 'Failed to delete account');\n      setIsDeleting(false);\n      setShowDeleteConfirm(false);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"min-h-screen bg-gray-50 pb-20 md:pb-0\">\n        {/* Desktop Header */}\n        <div className=\"hidden md:block\">\n          <Header />\n        </div>\n        \n        {/* Mobile Header */}\n        <div className=\"md:hidden\">\n          <MobileHeader title=\"Settings\" />\n        </div>\n        \n        <div className=\"max-w-7xl mx-auto px-0 md:px-4 sm:px-6 lg:px-8 py-0 md:py-8\">\n          <div className=\"flex flex-col md:flex-row gap-0 md:gap-8\">\n            {/* Sidebar - Desktop Only */}\n            <div className=\"hidden md:block w-64 flex-shrink-0\">\n              <div className=\"bg-white rounded-lg shadow-sm overflow-hidden\">\n                {tabs.map((tab) => {\n                  const Icon = tab.icon;\n                  return (\n                    <button\n                      key={tab.id}\n                      onClick={() => setActiveTab(tab.id)}\n                      className={`w-full flex items-center gap-3 px-4 py-3 text-left transition-colors ${\n                        activeTab === tab.id\n                          ? 'bg-[#007AFF] text-white'\n                          : 'text-gray-700 hover:bg-gray-50'\n                      }`}\n                    >\n                      <Icon className=\"w-5 h-5\" />\n                      <span className=\"font-medium\">{tab.label}</span>\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Mobile Tabs */}\n            <div className=\"md:hidden bg-white border-b border-gray-200\">\n              <div className=\"overflow-x-auto scrollbar-hide\">\n                <div className=\"flex\">\n                  {tabs.map((tab) => {\n                    const Icon = tab.icon;\n                    return (\n                      <button\n                        key={tab.id}\n                        onClick={() => setActiveTab(tab.id)}\n                        className={`flex-shrink-0 flex items-center gap-2 px-4 py-3 text-sm font-medium border-b-2 transition-colors ${\n                          activeTab === tab.id\n                            ? 'border-[#007AFF] text-[#007AFF]'\n                            : 'border-transparent text-gray-600'\n                        }`}\n                      >\n                        <Icon className=\"w-4 h-4\" />\n                        <span className=\"whitespace-nowrap\">{tab.label}</span>\n                      </button>\n                    );\n                  })}\n                </div>\n              </div>\n            </div>\n\n            {/* Main Content */}\n            <div className=\"flex-1\">\n              <div className=\"p-4 md:p-0\">\n                {activeTab === 'profile' && (\n                  <form onSubmit={handleSubmit}>\n                    <div className=\"bg-gray-50 rounded-xl border border-gray-200 p-4 md:p-6 space-y-6\">\n                      <div>\n                        <h2 className=\"text-2xl font-bold text-gray-900 mb-2 flex items-center gap-2\">\n                          <User className=\"w-6 h-6 text-[#007AFF]\" />\n                          My Profile\n                        </h2>\n                        <p className=\"text-gray-600 text-sm\">Update your personal information and profile settings</p>\n                      </div>\n\n                      {/* Profile Picture */}\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          Profile Picture\n                        </label>\n                        <div className=\"flex flex-col md:flex-row md:items-center gap-4\">\n                          {profilePictureUrl || user?.profilePicture ? (\n                            <div className=\"w-24 h-24 rounded-full overflow-hidden ring-4 ring-white flex-shrink-0\">\n                              <Image\n                                src={profilePictureUrl || user?.profilePicture || ''}\n                                alt=\"Profile\"\n                                width={96}\n                                height={96}\n                                quality={95}\n                                priority\n                                className=\"w-full h-full object-cover\"\n                              />\n                            </div>\n                          ) : (\n                            <div className=\"w-24 h-24 bg-gradient-to-br from-[#FC4C02] to-[#FF8800] rounded-full flex items-center justify-center text-white text-4xl font-bold flex-shrink-0\">\n                              {user?.name.charAt(0).toUpperCase() || 'N'}\n                            </div>\n                          )}\n                          <div className=\"flex-1\">\n                            <input\n                              type=\"file\"\n                              id=\"profile-photo-upload\"\n                              accept=\"image/jpeg,image/png,image/gif,image/webp\"\n                              onChange={handlePhotoUpload}\n                              className=\"hidden\"\n                            />\n                            <label\n                              htmlFor=\"profile-photo-upload\"\n                              className={`flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors w-full md:w-auto justify-center md:justify-start cursor-pointer ${isUploadingPhoto ? 'opacity-50 cursor-not-allowed' : ''}`}\n                            >\n                              {isUploadingPhoto ? (\n                                <>\n                                  <div className=\"w-4 h-4 border-2 border-gray-300 border-t-[#007AFF] rounded-full animate-spin\"></div>\n                                  Uploading...\n                                </>\n                              ) : (\n                                <>\n                                  <Upload className=\"w-4 h-4\" />\n                                  Upload Photo\n                                </>\n                              )}\n                            </label>\n                            <p className=\"text-sm text-gray-500 mt-2\">\n                              JPG, PNG, GIF or WebP. Max 5MB.\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Name */}\n                      <div>\n                        <label htmlFor=\"name\" className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n                          <User className=\"w-4 h-4\" />\n                          Name\n                        </label>\n                        <input\n                          type=\"text\"\n                          id=\"name\"\n                          value={formData.name}\n                          onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                          className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] outline-none\"\n                        />\n                      </div>\n\n                      {/* Username */}\n                      <div>\n                        <label htmlFor=\"username\" className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n                          <User className=\"w-4 h-4\" />\n                          Username\n                        </label>\n                        <div className=\"relative\">\n                          <span className=\"absolute left-4 top-1/2 -translate-y-1/2 text-gray-500\">@</span>\n                          <input\n                            type=\"text\"\n                            id=\"username\"\n                            value={user?.username || ''}\n                            disabled\n                            className=\"w-full pl-8 pr-4 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-500 cursor-not-allowed\"\n                          />\n                        </div>\n                        <p className=\"text-xs text-gray-500 mt-1\">Username cannot be changed - it&apos;s your unique identifier</p>\n                      </div>\n\n                      {/* Tagline */}\n                      <div>\n                        <label htmlFor=\"tagline\" className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n                          Tagline\n                        </label>\n                        <input\n                          type=\"text\"\n                          id=\"tagline\"\n                          value={formData.tagline}\n                          onChange={(e) => setFormData({ ...formData, tagline: e.target.value })}\n                          maxLength={60}\n                          placeholder=\"Your headline or current status...\"\n                          className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] outline-none\"\n                        />\n                        <p className=\"text-sm text-gray-500 mt-1\">{formData.tagline.length}/60 • Appears below your name on your profile</p>\n                      </div>\n\n                      {/* Pronouns */}\n                      <div>\n                        <label htmlFor=\"pronouns\" className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n                          Pronouns\n                        </label>\n                        <input\n                          type=\"text\"\n                          id=\"pronouns\"\n                          value={formData.pronouns}\n                          onChange={(e) => setFormData({ ...formData, pronouns: e.target.value })}\n                          maxLength={20}\n                          placeholder=\"e.g., she/her, he/him, they/them\"\n                          className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] outline-none\"\n                        />\n                      </div>\n\n                      {/* Bio */}\n                      <div>\n                        <label htmlFor=\"bio\" className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n                          Bio\n                        </label>\n                        <textarea\n                          id=\"bio\"\n                          value={formData.bio}\n                          onChange={(e) => setFormData({ ...formData, bio: e.target.value })}\n                          rows={4}\n                          maxLength={160}\n                          placeholder=\"Tell us about yourself...\"\n                          className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] outline-none resize-none\"\n                        />\n                        <p className=\"text-sm text-gray-500 mt-1\">{formData.bio.length}/160</p>\n                      </div>\n\n                      {/* Location */}\n                      <div>\n                        <label htmlFor=\"location\" className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n                          <Globe className=\"w-4 h-4\" />\n                          Location\n                        </label>\n                        <input\n                          type=\"text\"\n                          id=\"location\"\n                          value={formData.location}\n                          onChange={(e) => setFormData({ ...formData, location: e.target.value })}\n                          placeholder=\"City, Country\"\n                          className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] outline-none\"\n                        />\n                      </div>\n\n                      {/* Links Section */}\n                      <div className=\"pt-4 border-t border-gray-200\">\n                        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Links</h3>\n\n                        {/* Website */}\n                        <div className=\"mb-4\">\n                          <label htmlFor=\"website\" className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n                            <LinkIcon className=\"w-4 h-4\" />\n                            Website\n                          </label>\n                          <input\n                            type=\"url\"\n                            id=\"website\"\n                            value={formData.website}\n                            onChange={(e) => setFormData({ ...formData, website: e.target.value })}\n                            placeholder=\"https://yourwebsite.com\"\n                            className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] outline-none\"\n                          />\n                        </div>\n\n                        {/* Social Links */}\n                        <div className=\"space-y-4\">\n                          <div>\n                            <label htmlFor=\"twitter\" className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n                              <Twitter className=\"w-4 h-4\" />\n                              Twitter/X\n                            </label>\n                            <div className=\"relative\">\n                              <span className=\"absolute left-4 top-1/2 -translate-y-1/2 text-gray-500\">@</span>\n                              <input\n                                type=\"text\"\n                                id=\"twitter\"\n                                value={formData.twitter}\n                                onChange={(e) => setFormData({ ...formData, twitter: e.target.value })}\n                                placeholder=\"username\"\n                                className=\"w-full pl-8 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] outline-none\"\n                              />\n                            </div>\n                          </div>\n\n                          <div>\n                            <label htmlFor=\"github\" className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n                              <Github className=\"w-4 h-4\" />\n                              GitHub\n                            </label>\n                            <input\n                              type=\"text\"\n                              id=\"github\"\n                              value={formData.github}\n                              onChange={(e) => setFormData({ ...formData, github: e.target.value })}\n                              placeholder=\"username\"\n                              className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] outline-none\"\n                            />\n                          </div>\n\n                          <div>\n                            <label htmlFor=\"linkedin\" className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n                              <Linkedin className=\"w-4 h-4\" />\n                              LinkedIn\n                            </label>\n                            <input\n                              type=\"text\"\n                              id=\"linkedin\"\n                              value={formData.linkedin}\n                              onChange={(e) => setFormData({ ...formData, linkedin: e.target.value })}\n                              placeholder=\"username\"\n                              className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] outline-none\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Account Information */}\n                      <div className=\"pt-4 border-t border-gray-200\">\n                        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Account Information</h3>\n                        \n                        {/* Email */}\n                        <div className=\"mb-4\">\n                          <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n                            <Mail className=\"w-4 h-4\" />\n                            Email\n                          </label>\n                          <p className=\"text-gray-900 px-4 py-2 bg-gray-50 rounded-lg border border-gray-200\">\n                            {user?.email || 'No email set'}\n                          </p>\n                        </div>\n\n                        {/* Membership Status */}\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                            Membership Status\n                          </label>\n                          <p className=\"text-gray-900 px-4 py-2 bg-gray-50 rounded-lg border border-gray-200\">\n                            Free Account\n                          </p>\n                        </div>\n                      </div>\n\n                      {/* Submit Buttons */}\n                      <div className=\"flex flex-col md:flex-row gap-3 pt-4\">\n                        <a\n                          href={user ? `/profile/${user.username}` : '/'}\n                          className=\"px-6 py-3 md:py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors text-center\"\n                        >\n                          Cancel\n                        </a>\n                        <button\n                          type=\"submit\"\n                          disabled={isSaving || !hasChanges}\n                          className={`px-6 py-3 md:py-2 rounded-lg transition-colors text-white ${\n                            isSaving || !hasChanges\n                              ? 'bg-gray-400 cursor-not-allowed' \n                              : saved \n                                ? 'bg-green-600 hover:bg-green-600' \n                                : 'bg-[#007AFF] hover:bg-[#0051D5]'\n                          }`}\n                        >\n                          {isSaving ? 'Saving…' : saved ? '✓ Saved' : 'Save Changes'}\n                        </button>\n                      </div>\n                    </div>\n                  </form>\n                )}\n\n                {activeTab === 'privacy' && (\n                  <div className=\"bg-gray-50 rounded-xl border border-gray-200 p-4 md:p-6 space-y-6\">\n                    <div>\n                      <h2 className=\"text-2xl font-bold text-gray-900 mb-2 flex items-center gap-2\">\n                        <Shield className=\"w-6 h-6 text-[#007AFF]\" />\n                        Privacy Controls\n                      </h2>\n                      <p className=\"text-gray-600 text-sm\">Control who can see your profile and content</p>\n                    </div>\n\n                    <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n                      <div className=\"px-6 py-4 border-b border-gray-200\">\n                        <h3 className=\"text-base font-semibold text-gray-900 flex items-center gap-2\">\n                          <Globe className=\"w-5 h-5 text-[#007AFF]\" />\n                          Profile Visibility\n                        </h3>\n                        <p className=\"text-sm text-gray-600 mt-1\">Control who can view your profile and sessions</p>\n                      </div>\n                      <div className=\"px-6 py-4\">\n                        <label htmlFor=\"profileVisibility\" className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                          Profile Access\n                        </label>\n                        <select\n                          id=\"profileVisibility\"\n                          value={formData.profileVisibility}\n                          onChange={(e) => setFormData({ ...formData, profileVisibility: e.target.value as any })}\n                          className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] outline-none\"\n                        >\n                          <option value=\"everyone\">🌐 Everyone - Your profile and sessions are visible to all users</option>\n                          <option value=\"followers\">👥 Followers Only - Only your followers can see your profile and sessions</option>\n                          <option value=\"private\">🔒 Only You - Your profile and sessions are completely private</option>\n                        </select>\n                        <p className=\"text-xs text-gray-500 mt-2\">\n                          {formData.profileVisibility === 'everyone' && 'Your profile, sessions, and stats are visible to everyone.'}\n                          {formData.profileVisibility === 'followers' && 'Only your followers can see your profile and sessions. You won\\'t appear in suggestions.'}\n                          {formData.profileVisibility === 'private' && 'Your profile is completely private. Only you can see your sessions and stats.'}\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* Submit Buttons */}\n                    <div className=\"flex flex-col md:flex-row gap-3 pt-2\">\n                      <button\n                        type=\"button\"\n                        onClick={() => setFormData({ ...formData, profileVisibility: originalFormData.profileVisibility })}\n                        className=\"px-6 py-3 md:py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors text-center\"\n                      >\n                        Cancel\n                      </button>\n                      <button\n                        type=\"button\"\n                        onClick={handlePrivacySubmit}\n                        disabled={isSaving || !hasChanges}\n                        className={`px-6 py-3 md:py-2 rounded-lg transition-colors text-white ${\n                          isSaving || !hasChanges\n                            ? 'bg-gray-400 cursor-not-allowed'\n                            : saved\n                              ? 'bg-[#34C759] hover:bg-[#34C759]'\n                              : 'bg-[#007AFF] hover:bg-[#0051D5]'\n                        }`}\n                      >\n                        {isSaving ? 'Saving…' : saved ? '✓ Saved' : 'Save Changes'}\n                      </button>\n                    </div>\n                  </div>\n                )}\n\n                {activeTab === 'notifications' && (\n                  <NotificationSettings />\n                )}\n\n                {activeTab === 'display' && (\n                  <div className=\"bg-gray-50 rounded-xl border border-gray-200 p-4 md:p-6 space-y-6\">\n                    <div>\n                      <h2 className=\"text-2xl font-bold text-gray-900 mb-2 flex items-center gap-2\">\n                        <Globe className=\"w-6 h-6 text-[#007AFF]\" />\n                        Display Preferences\n                      </h2>\n                      <p className=\"text-gray-600 text-sm\">Customize how the app looks and feels.</p>\n                    </div>\n\n                    <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n                      <div className=\"px-6 py-8 text-center\">\n                        <Globe className=\"w-12 h-12 text-gray-400 mx-auto mb-3\" />\n                        <h3 className=\"font-medium text-gray-900 mb-1\">Coming Soon</h3>\n                        <p className=\"text-sm text-gray-600\">\n                          Display preferences will be available in a future update\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Danger Zone - Only show on My Profile tab */}\n              {activeTab === 'profile' && (\n                <div className=\"mt-4 p-4 md:pl-6\">\n                  <div className=\"flex items-center gap-2\">\n                    <button\n                      onClick={handleLogout}\n                      className=\"text-lg font-bold text-gray-700 hover:text-gray-900 transition-colors\"\n                    >\n                      Log Out\n                    </button>\n                    <span className=\"text-gray-300 text-lg\">|</span>\n                    <button\n                      onClick={() => setShowDeleteConfirm(true)}\n                      className=\"text-lg font-bold text-red-600 hover:text-red-700 transition-colors\"\n                    >\n                      Delete Account\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        \n        {/* Mobile Bottom Navigation */}\n        <div className=\"md:hidden\">\n          <BottomNavigation />\n        </div>\n\n        {/* Footer - Desktop only */}\n        <Footer />\n\n        {/* Delete Account Confirmation Dialog */}\n        <ConfirmDialog\n          isOpen={showDeleteConfirm}\n          onClose={() => setShowDeleteConfirm(false)}\n          onConfirm={handleDeleteAccount}\n          title=\"Delete Account\"\n          message=\"Are you absolutely sure you want to delete your account? This will permanently delete all your data including sessions, projects, follows, and comments. This action cannot be undone.\"\n          confirmText=\"Delete My Account\"\n          cancelText=\"Cancel\"\n          variant=\"danger\"\n          isLoading={isDeleting}\n        />\n      </div>\n    </>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/social/components/FollowersList.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/social/components/FollowingList.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/social/hooks/useFollowers.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 60,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 60,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 72,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'err' is defined but never used.",
        "line": 104,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 104,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * useFollowers Hook\n *\n * Fetches the list of users who follow a given user.\n */\n\nimport { useQuery } from '@tanstack/react-query';\nimport {\n  collection,\n  query,\n  where,\n  getDocs,\n  getDoc,\n  doc,\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { STANDARD_CACHE_TIMES } from '@/lib/react-query';\n\nexport interface FollowerUser {\n  id: string;\n  name: string;\n  username: string;\n  email: string;\n  profilePicture?: string;\n  bio?: string;\n}\n\nexport function useFollowers(userId: string) {\n  return useQuery({\n    queryKey: ['followers', userId],\n    queryFn: async () => {\n      // Try new social_graph structure first\n      try {\n        const inboundRef = collection(db, `social_graph/${userId}/inbound`);\n        const inboundSnapshot = await getDocs(inboundRef);\n\n        if (!inboundSnapshot.empty) {\n          // Fetch user details for each follower\n          const followerPromises = inboundSnapshot.docs.map(\n            async followerDoc => {\n              const followerId = followerDoc.id;\n\n              try {\n                const userDoc = await getDoc(doc(db, 'users', followerId));\n\n                if (!userDoc.exists()) {\n                  return null;\n                }\n\n                const userData = userDoc.data();\n\n                return {\n                  id: followerId,\n                  name: userData.name || 'Unknown User',\n                  username: userData.username || 'unknown',\n                  email: userData.email || '',\n                  profilePicture: userData.profilePicture,\n                  bio: userData.bio,\n                } as FollowerUser;\n              } catch (error) {\n                // Failed to fetch follower user\n                return null;\n              }\n            }\n          );\n\n          const followers = await Promise.all(followerPromises);\n          return followers.filter(\n            (follower): follower is FollowerUser => follower !== null\n          );\n        }\n      } catch (error) {\n        // If social_graph doesn't exist, fall through to old follows collection\n      }\n\n      // Fallback to old follows collection\n      const followsRef = collection(db, 'follows');\n      const followsQuery = query(\n        followsRef,\n        where('followingId', '==', userId)\n      );\n      const followsSnapshot = await getDocs(followsQuery);\n\n      const followerPromises = followsSnapshot.docs.map(async followDoc => {\n        const followerId = followDoc.data().followerId;\n\n        try {\n          const userDoc = await getDoc(doc(db, 'users', followerId));\n\n          if (!userDoc.exists()) {\n            return null;\n          }\n\n          const userData = userDoc.data();\n\n          return {\n            id: followerId,\n            name: userData.name || 'Unknown User',\n            username: userData.username || 'unknown',\n            email: userData.email || '',\n            profilePicture: userData.profilePicture,\n            bio: userData.bio,\n          } as FollowerUser;\n        } catch (err) {\n          // Failed to fetch follower user\n          return null;\n        }\n      });\n\n      const followers = await Promise.all(followerPromises);\n      return followers.filter(\n        (follower): follower is FollowerUser => follower !== null\n      );\n    },\n    staleTime: STANDARD_CACHE_TIMES.MEDIUM, // 5 minutes\n    enabled: !!userId,\n  });\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/social/hooks/useFollowing.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 60,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 60,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 72,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'err' is defined but never used.",
        "line": 101,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 101,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * useFollowing Hook\n *\n * Fetches the list of users that a given user is following.\n */\n\nimport { useQuery } from '@tanstack/react-query';\nimport {\n  collection,\n  query,\n  where,\n  getDocs,\n  getDoc,\n  doc,\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { STANDARD_CACHE_TIMES } from '@/lib/react-query';\n\nexport interface FollowingUser {\n  id: string;\n  name: string;\n  username: string;\n  email: string;\n  profilePicture?: string;\n  bio?: string;\n}\n\nexport function useFollowing(userId: string) {\n  return useQuery({\n    queryKey: ['following', userId],\n    queryFn: async () => {\n      // Try new social_graph structure first\n      try {\n        const outboundRef = collection(db, `social_graph/${userId}/outbound`);\n        const outboundSnapshot = await getDocs(outboundRef);\n\n        if (!outboundSnapshot.empty) {\n          // Fetch user details for each following\n          const followingPromises = outboundSnapshot.docs.map(\n            async followingDoc => {\n              const followingId = followingDoc.id;\n\n              try {\n                const userDoc = await getDoc(doc(db, 'users', followingId));\n\n                if (!userDoc.exists()) {\n                  return null;\n                }\n\n                const userData = userDoc.data();\n\n                return {\n                  id: followingId,\n                  name: userData.name || 'Unknown User',\n                  username: userData.username || 'unknown',\n                  email: userData.email || '',\n                  profilePicture: userData.profilePicture,\n                  bio: userData.bio,\n                } as FollowingUser;\n              } catch (error) {\n                // Failed to fetch following user\n                return null;\n              }\n            }\n          );\n\n          const following = await Promise.all(followingPromises);\n          return following.filter(\n            (user): user is FollowingUser => user !== null\n          );\n        }\n      } catch (error) {\n        // If social_graph doesn't exist, fall through to old follows collection\n      }\n\n      // Fallback to old follows collection\n      const followsRef = collection(db, 'follows');\n      const followsQuery = query(followsRef, where('followerId', '==', userId));\n      const followsSnapshot = await getDocs(followsQuery);\n\n      const followingPromises = followsSnapshot.docs.map(async followDoc => {\n        const followingId = followDoc.data().followingId;\n\n        try {\n          const userDoc = await getDoc(doc(db, 'users', followingId));\n\n          if (!userDoc.exists()) {\n            return null;\n          }\n\n          const userData = userDoc.data();\n\n          return {\n            id: followingId,\n            name: userData.name || 'Unknown User',\n            username: userData.username || 'unknown',\n            email: userData.email || '',\n            profilePicture: userData.profilePicture,\n            bio: userData.bio,\n          } as FollowingUser;\n        } catch (err) {\n          // Failed to fetch following user\n          return null;\n        }\n      });\n\n      const following = await Promise.all(followingPromises);\n      return following.filter((user): user is FollowingUser => user !== null);\n    },\n    staleTime: STANDARD_CACHE_TIMES.MEDIUM, // 5 minutes\n    enabled: !!userId,\n  });\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/streaks/hooks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/streaks/hooks/useStreakMutations.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/streaks/hooks/useStreaks.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/streaks/services/StreakService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/timer/hooks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/timer/hooks/useTimer.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/timer/hooks/useTimerMutations.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 98,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 98,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2318, 2321], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2318, 2321], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 164,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 164,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3814, 3817], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3814, 3817], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Timer Mutation Hooks - React Query Boundary\n *\n * All write operations for timer (start, pause, resume, complete, cancel).\n */\n\nimport {\n  useMutation,\n  useQueryClient,\n  UseMutationOptions,\n} from '@tanstack/react-query';\nimport {\n  TimerService,\n  StartTimerData,\n  CompleteTimerData,\n} from '../services/TimerService';\nimport { ActiveSession } from '@/domain/entities/ActiveSession';\nimport { Session } from '@/domain/entities/Session';\n\nconst timerService = new TimerService();\n\n// Query keys for timer-related queries\nexport const TIMER_KEYS = {\n  active: (userId: string) => ['timer', 'active', userId] as const,\n};\n\n/**\n * Start a new timer\n *\n * @example\n * const startMutation = useStartTimer();\n * startMutation.mutate({\n *   userId,\n *   projectId,\n *   activityId,\n *   title: 'Working on feature X'\n * });\n */\nexport function useStartTimer(\n  options?: Partial<UseMutationOptions<ActiveSession, Error, StartTimerData>>\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<ActiveSession, Error, StartTimerData>({\n    mutationFn: data => timerService.startTimer(data),\n\n    onSuccess: (activeSession, variables) => {\n      // Update cache with new active session\n      queryClient.setQueryData(\n        TIMER_KEYS.active(variables.userId),\n        activeSession\n      );\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Pause the active timer\n *\n * @example\n * const pauseMutation = usePauseTimer();\n * pauseMutation.mutate(userId);\n */\nexport function usePauseTimer(\n  options?: Partial<\n    UseMutationOptions<\n      ActiveSession,\n      Error,\n      string,\n      { previousSession: ActiveSession | undefined }\n    >\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<\n    ActiveSession,\n    Error,\n    string,\n    { previousSession: ActiveSession | undefined }\n  >({\n    mutationFn: userId => timerService.pauseTimer(userId),\n\n    onMutate: async (\n      userId\n    ): Promise<{ previousSession: ActiveSession | undefined }> => {\n      // Cancel outgoing queries\n      await queryClient.cancelQueries({ queryKey: TIMER_KEYS.active(userId) });\n\n      // Snapshot\n      const previousSession = queryClient.getQueryData<ActiveSession>(\n        TIMER_KEYS.active(userId)\n      );\n\n      // Optimistically update\n      queryClient.setQueryData(TIMER_KEYS.active(userId), (old: any) => {\n        if (!old) return old;\n        return {\n          ...old,\n          status: 'paused',\n        };\n      });\n\n      return { previousSession };\n    },\n\n    onError: (error, userId, context) => {\n      // Rollback\n      if (context?.previousSession) {\n        queryClient.setQueryData(\n          TIMER_KEYS.active(userId),\n          context.previousSession\n        );\n      }\n    },\n\n    onSuccess: (pausedSession, userId) => {\n      // Update with actual paused session\n      queryClient.setQueryData(TIMER_KEYS.active(userId), pausedSession);\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Resume a paused timer\n *\n * @example\n * const resumeMutation = useResumeTimer();\n * resumeMutation.mutate(userId);\n */\nexport function useResumeTimer(\n  options?: Partial<\n    UseMutationOptions<\n      ActiveSession,\n      Error,\n      string,\n      { previousSession: ActiveSession | undefined }\n    >\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<\n    ActiveSession,\n    Error,\n    string,\n    { previousSession: ActiveSession | undefined }\n  >({\n    mutationFn: userId => timerService.resumeTimer(userId),\n\n    onMutate: async (\n      userId\n    ): Promise<{ previousSession: ActiveSession | undefined }> => {\n      await queryClient.cancelQueries({ queryKey: TIMER_KEYS.active(userId) });\n\n      const previousSession = queryClient.getQueryData<ActiveSession>(\n        TIMER_KEYS.active(userId)\n      );\n\n      queryClient.setQueryData(TIMER_KEYS.active(userId), (old: any) => {\n        if (!old) return old;\n        return {\n          ...old,\n          status: 'running',\n        };\n      });\n\n      return { previousSession };\n    },\n\n    onError: (error, userId, context) => {\n      if (context?.previousSession) {\n        queryClient.setQueryData(\n          TIMER_KEYS.active(userId),\n          context.previousSession\n        );\n      }\n    },\n\n    onSuccess: (resumedSession, userId) => {\n      queryClient.setQueryData(TIMER_KEYS.active(userId), resumedSession);\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Complete and save the timer session\n *\n * @example\n * const completeMutation = useCompleteTimer();\n * completeMutation.mutate({\n *   userId,\n *   data: {\n *     title: 'Final title',\n *     description: 'Work completed',\n *     visibility: 'everyone'\n *   }\n * });\n */\nexport function useCompleteTimer(\n  options?: Partial<\n    UseMutationOptions<\n      Session,\n      Error,\n      { userId: string; data: CompleteTimerData }\n    >\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<\n    Session,\n    Error,\n    { userId: string; data: CompleteTimerData }\n  >({\n    mutationFn: ({ userId, data }) => timerService.completeTimer(userId, data),\n\n    onSuccess: async (session, { userId }) => {\n      // Clear active session\n      queryClient.setQueryData(TIMER_KEYS.active(userId), null);\n\n      // Force immediate refetch of feed queries to show new session at top\n      // This creates an Instagram-like experience where posts appear immediately\n      // Using refetchType: 'active' ensures only currently-mounted queries refetch\n      await queryClient.invalidateQueries({\n        queryKey: ['feed'],\n        refetchType: 'active', // Only refetch queries that are currently being observed\n      });\n\n      // Invalidate other related data (these will refetch when needed)\n      queryClient.invalidateQueries({ queryKey: ['profile'] }); // Invalidate all profile-related queries\n      queryClient.invalidateQueries({ queryKey: ['sessions'] }); // Invalidate session queries\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Cancel the active timer without saving\n *\n * @example\n * const cancelMutation = useCancelTimer();\n * cancelMutation.mutate(userId);\n */\nexport function useCancelTimer(\n  options?: Partial<UseMutationOptions<void, Error, string>>\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<void, Error, string>({\n    mutationFn: userId => timerService.cancelTimer(userId),\n\n    onSuccess: (_, userId) => {\n      // Clear active session\n      queryClient.setQueryData(TIMER_KEYS.active(userId), null);\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Adjust the start time of the active timer\n *\n * @example\n * const adjustMutation = useAdjustStartTime();\n * adjustMutation.mutate({ userId, newStartTime: new Date('2025-10-27T10:00:00') });\n */\nexport function useAdjustStartTime(\n  options?: Partial<\n    UseMutationOptions<\n      ActiveSession,\n      Error,\n      { userId: string; newStartTime: Date }\n    >\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<\n    ActiveSession,\n    Error,\n    { userId: string; newStartTime: Date }\n  >({\n    mutationFn: ({ userId, newStartTime }) =>\n      timerService.adjustStartTime(userId, newStartTime),\n\n    onSuccess: (adjustedSession, { userId }) => {\n      // Update cache with adjusted session\n      queryClient.setQueryData(TIMER_KEYS.active(userId), adjustedSession);\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Helper hook to invalidate timer data\n *\n * @example\n * const invalidateTimer = useInvalidateTimer();\n * invalidateTimer(userId);\n */\nexport function useInvalidateTimer() {\n  const queryClient = useQueryClient();\n\n  return (userId: string) => {\n    queryClient.invalidateQueries({ queryKey: TIMER_KEYS.active(userId) });\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/timer/hooks/useTimerState.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/timer/services/TimerService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/hooks/__tests__/useCommentLikeMutation.test.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 86,
        "column": 87,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 86,
        "endColumn": 90,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2372, 2375], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2372, 2375], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 156,
        "column": 87,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 156,
        "endColumn": 90,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4550, 4553], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4550, 4553], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 188,
        "column": 87,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 188,
        "endColumn": 90,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5556, 5559], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5556, 5559], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 229,
        "column": 83,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 229,
        "endColumn": 86,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6731, 6734], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6731, 6734], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 280,
        "column": 80,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 280,
        "endColumn": 83,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8299, 8302], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8299, 8302], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 288,
        "column": 80,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 288,
        "endColumn": 83,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8605, 8608], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8605, 8608], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 326,
        "column": 80,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 326,
        "endColumn": 83,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9686, 9689], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9686, 9689], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { renderHook, waitFor } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { useCommentLike, COMMENT_KEYS } from '@/features/comments/hooks';\nimport { firebaseApi } from '@/lib/api';\nimport React from 'react';\n\n// Mock the firebaseApi\njest.mock('@/lib/api', () => ({\n  firebaseApi: {\n    comment: {\n      likeComment: jest.fn(),\n      unlikeComment: jest.fn(),\n    },\n  },\n}));\n\ndescribe('useCommentLike', () => {\n  let queryClient: QueryClient;\n  const sessionId = 'session-123';\n  const commentId = 'comment-456';\n\n  beforeEach(() => {\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: { retry: false },\n        mutations: { retry: false },\n      },\n    });\n    jest.clearAllMocks();\n  });\n\n  const wrapper = ({ children }: { children: React.ReactNode }) => (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  );\n\n  describe('Like Comment', () => {\n    it('should call likeComment API when action is \"like\"', async () => {\n      const { result } = renderHook(\n        () => useCommentLike(sessionId),\n        { wrapper }\n      );\n\n      result.current.mutate({ commentId, action: 'like' });\n\n      await waitFor(() => {\n        expect(firebaseApi.comment.likeComment).toHaveBeenCalledWith(commentId);\n      });\n    });\n\n    it('should optimistically update comment like state', async () => {\n      // Set up initial query data\n      const initialComments = {\n        comments: [\n          {\n            id: commentId,\n            content: 'Great session!',\n            likeCount: 5,\n            isLiked: false,\n          },\n          {\n            id: 'comment-789',\n            content: 'Nice work!',\n            likeCount: 3,\n            isLiked: false,\n          },\n        ],\n        hasMore: false,\n      };\n\n      queryClient.setQueryData(COMMENT_KEYS.list(sessionId), initialComments);\n\n      const { result } = renderHook(\n        () => useCommentLike(sessionId),\n        { wrapper }\n      );\n\n      // Mock successful API call\n      (firebaseApi.comment.likeComment as jest.Mock).mockResolvedValueOnce(undefined);\n\n      result.current.mutate({ commentId, action: 'like' });\n\n      // Check optimistic update\n      await waitFor(() => {\n        const updatedData = queryClient.getQueryData(COMMENT_KEYS.list(sessionId)) as any;\n        expect(updatedData.comments[0].isLiked).toBe(true);\n        expect(updatedData.comments[0].likeCount).toBe(6);\n        // Other comment should remain unchanged\n        expect(updatedData.comments[1].isLiked).toBe(false);\n        expect(updatedData.comments[1].likeCount).toBe(3);\n      });\n    });\n\n    it('should invalidate comments query after successful like', async () => {\n      const invalidateQueriesSpy = jest.spyOn(queryClient, 'invalidateQueries');\n\n      const { result } = renderHook(\n        () => useCommentLike(sessionId),\n        { wrapper }\n      );\n\n      (firebaseApi.comment.likeComment as jest.Mock).mockResolvedValueOnce(undefined);\n\n      result.current.mutate({ commentId, action: 'like' });\n\n      await waitFor(() => {\n        expect(invalidateQueriesSpy).toHaveBeenCalledWith({\n          queryKey: COMMENT_KEYS.list(sessionId),\n        });\n      });\n    });\n  });\n\n  describe('Unlike Comment', () => {\n    it('should call unlikeComment API when action is \"unlike\"', async () => {\n      const { result } = renderHook(\n        () => useCommentLike(sessionId),\n        { wrapper }\n      );\n\n      result.current.mutate({ commentId, action: 'unlike' });\n\n      await waitFor(() => {\n        expect(firebaseApi.comment.unlikeComment).toHaveBeenCalledWith(commentId);\n      });\n    });\n\n    it('should optimistically update comment unlike state', async () => {\n      // Set up initial query data with liked comment\n      const initialComments = {\n        comments: [\n          {\n            id: commentId,\n            content: 'Great session!',\n            likeCount: 6,\n            isLiked: true,\n          },\n        ],\n        hasMore: false,\n      };\n\n      queryClient.setQueryData(COMMENT_KEYS.list(sessionId), initialComments);\n\n      const { result } = renderHook(\n        () => useCommentLike(sessionId),\n        { wrapper }\n      );\n\n      (firebaseApi.comment.unlikeComment as jest.Mock).mockResolvedValueOnce(undefined);\n\n      result.current.mutate({ commentId, action: 'unlike' });\n\n      // Check optimistic update\n      await waitFor(() => {\n        const updatedData = queryClient.getQueryData(COMMENT_KEYS.list(sessionId)) as any;\n        expect(updatedData.comments[0].isLiked).toBe(false);\n        expect(updatedData.comments[0].likeCount).toBe(5);\n      });\n    });\n\n    it('should not allow likeCount to go below 0', async () => {\n      // Edge case: comment with 0 likes being unliked\n      const initialComments = {\n        comments: [\n          {\n            id: commentId,\n            content: 'Great session!',\n            likeCount: 0,\n            isLiked: true, // Inconsistent state but handled defensively\n          },\n        ],\n        hasMore: false,\n      };\n\n      queryClient.setQueryData(COMMENT_KEYS.list(sessionId), initialComments);\n\n      const { result } = renderHook(\n        () => useCommentLike(sessionId),\n        { wrapper }\n      );\n\n      (firebaseApi.comment.unlikeComment as jest.Mock).mockResolvedValueOnce(undefined);\n\n      result.current.mutate({ commentId, action: 'unlike' });\n\n      await waitFor(() => {\n        const updatedData = queryClient.getQueryData(COMMENT_KEYS.list(sessionId)) as any;\n        expect(updatedData.comments[0].likeCount).toBe(0);\n        expect(updatedData.comments[0].likeCount).toBeGreaterThanOrEqual(0);\n      });\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should rollback optimistic update on error', async () => {\n      const initialComments = {\n        comments: [\n          {\n            id: commentId,\n            content: 'Great session!',\n            likeCount: 5,\n            isLiked: false,\n          },\n        ],\n        hasMore: false,\n      };\n\n      queryClient.setQueryData(COMMENT_KEYS.list(sessionId), initialComments);\n\n      const { result } = renderHook(\n        () => useCommentLike(sessionId),\n        { wrapper }\n      );\n\n      // Mock failed API call\n      (firebaseApi.comment.likeComment as jest.Mock).mockRejectedValueOnce(\n        new Error('Network error')\n      );\n\n      result.current.mutate({ commentId, action: 'like' });\n\n      // Wait for error and rollback\n      await waitFor(() => {\n        expect(result.current.isError).toBe(true);\n      });\n\n      // Data should be rolled back to original state\n      const finalData = queryClient.getQueryData(COMMENT_KEYS.list(sessionId)) as any;\n      expect(finalData.comments[0].isLiked).toBe(false);\n      expect(finalData.comments[0].likeCount).toBe(5);\n    });\n\n    it('should handle missing comments data gracefully', async () => {\n      const { result } = renderHook(\n        () => useCommentLike(sessionId),\n        { wrapper }\n      );\n\n      (firebaseApi.comment.likeComment as jest.Mock).mockResolvedValueOnce(undefined);\n\n      // Should not throw error when no initial data\n      expect(() => {\n        result.current.mutate({ commentId, action: 'like' });\n      }).not.toThrow();\n\n      await waitFor(() => {\n        expect(firebaseApi.comment.likeComment).toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe('Multiple Mutations', () => {\n    it('should handle sequential like/unlike operations', async () => {\n      const initialComments = {\n        comments: [\n          {\n            id: commentId,\n            content: 'Great session!',\n            likeCount: 5,\n            isLiked: false,\n          },\n        ],\n        hasMore: false,\n      };\n\n      queryClient.setQueryData(COMMENT_KEYS.list(sessionId), initialComments);\n\n      const { result } = renderHook(\n        () => useCommentLike(sessionId),\n        { wrapper }\n      );\n\n      (firebaseApi.comment.likeComment as jest.Mock).mockResolvedValue(undefined);\n      (firebaseApi.comment.unlikeComment as jest.Mock).mockResolvedValue(undefined);\n\n      // Like\n      result.current.mutate({ commentId, action: 'like' });\n      await waitFor(() => {\n        const data = queryClient.getQueryData(COMMENT_KEYS.list(sessionId)) as any;\n        expect(data.comments[0].isLiked).toBe(true);\n        expect(data.comments[0].likeCount).toBe(6);\n      });\n\n      // Unlike\n      result.current.mutate({ commentId, action: 'unlike' });\n      await waitFor(() => {\n        const data = queryClient.getQueryData(COMMENT_KEYS.list(sessionId)) as any;\n        expect(data.comments[0].isLiked).toBe(false);\n        expect(data.comments[0].likeCount).toBe(5);\n      });\n    });\n\n    it('should handle likes on different comments independently', async () => {\n      const initialComments = {\n        comments: [\n          {\n            id: 'comment-1',\n            content: 'First comment',\n            likeCount: 5,\n            isLiked: false,\n          },\n          {\n            id: 'comment-2',\n            content: 'Second comment',\n            likeCount: 3,\n            isLiked: false,\n          },\n        ],\n        hasMore: false,\n      };\n\n      queryClient.setQueryData(COMMENT_KEYS.list(sessionId), initialComments);\n\n      const { result } = renderHook(\n        () => useCommentLike(sessionId),\n        { wrapper }\n      );\n\n      (firebaseApi.comment.likeComment as jest.Mock).mockResolvedValue(undefined);\n\n      // Like first comment\n      result.current.mutate({ commentId: 'comment-1', action: 'like' });\n\n      await waitFor(() => {\n        const data = queryClient.getQueryData(COMMENT_KEYS.list(sessionId)) as any;\n        expect(data.comments[0].isLiked).toBe(true);\n        expect(data.comments[0].likeCount).toBe(6);\n        // Second comment should be unchanged\n        expect(data.comments[1].isLiked).toBe(false);\n        expect(data.comments[1].likeCount).toBe(3);\n      });\n    });\n  });\n\n  describe('Cache Invalidation', () => {\n    it('should cancel ongoing queries before mutation', async () => {\n      const cancelQueriesSpy = jest.spyOn(queryClient, 'cancelQueries');\n\n      const { result } = renderHook(\n        () => useCommentLike(sessionId),\n        { wrapper }\n      );\n\n      (firebaseApi.comment.likeComment as jest.Mock).mockResolvedValueOnce(undefined);\n\n      result.current.mutate({ commentId, action: 'like' });\n\n      await waitFor(() => {\n        expect(cancelQueriesSpy).toHaveBeenCalledWith({\n          queryKey: COMMENT_KEYS.list(sessionId),\n        });\n      });\n    });\n  });\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/hooks/useActivitiesQuery.ts",
    "messages": [
      {
        "ruleId": "@tanstack/query/exhaustive-deps",
        "severity": 1,
        "message": "The following dependencies are missing in your queryKey: user.id",
        "line": 77,
        "column": 5,
        "nodeType": "Property",
        "messageId": "missingDeps",
        "endLine": 77,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "fixTo",
            "data": { "result": "['activity', 'stats', activityId, user?.id]" },
            "fix": {
              "range": [2198, 2231],
              "text": "['activity', 'stats', activityId, user?.id]"
            },
            "desc": "Fix to ['activity', 'stats', activityId, user?.id]"
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 110,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 110,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3182, 3185], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3182, 3185], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useQuery, useMutation, useQueryClient, UseQueryOptions } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport {\n  Activity,\n  ActivityStats,\n  CreateActivityData,\n  UpdateActivityData,\n} from '@/types';\nimport { firebaseActivityApi } from '@/lib/api';\nimport { CACHE_KEYS, CACHE_TIMES } from '@/lib/queryClient';\nimport { db } from '@/lib/firebase';\nimport { collection, getDocs, query, where, or, and } from 'firebase/firestore';\nimport { safeNumber } from '@/lib/utils';\n\n/**\n * Hook to fetch user activities with caching\n * Replaces ActivitiesContext for better performance and code splitting\n *\n * @param userId - User ID to fetch activities for (defaults to current user)\n * @param options - Additional React Query options\n */\nexport function useActivities(\n  userId?: string,\n  options?: Partial<UseQueryOptions<Activity[]>>\n) {\n  const { user } = useAuth();\n  const effectiveUserId = userId || user?.id;\n\n  return useQuery({\n    queryKey: CACHE_KEYS.PROJECTS(effectiveUserId || 'none'),\n    queryFn: async () => {\n      const activities = await firebaseActivityApi.getProjects();\n      // Icon migration happens automatically in the API\n      return activities;\n    },\n    enabled: !!effectiveUserId,\n    staleTime: CACHE_TIMES.LONG, // 15 minutes cache\n    gcTime: CACHE_TIMES.LONG,\n    ...options,\n  });\n}\n\n/**\n * Hook to get a single activity by ID\n * Derived from the activities list for efficiency\n */\nexport function useActivity(\n  activityId: string,\n  options?: Partial<UseQueryOptions<Activity | null>>\n) {\n  const { user } = useAuth();\n  const { data: activities } = useActivities(user?.id);\n\n  return useQuery({\n    queryKey: ['activity', activityId],\n    queryFn: () => {\n      const activity = activities?.find((a) => a.id === activityId);\n      return activity || null;\n    },\n    enabled: !!activities && !!activityId,\n    staleTime: CACHE_TIMES.LONG,\n    ...options,\n  });\n}\n\n/**\n * Hook to get activity statistics\n * Fetches on-demand for heavy computation\n */\nexport function useActivityStats(\n  activityId: string,\n  options?: Partial<UseQueryOptions<ActivityStats>>\n) {\n  const { user } = useAuth();\n\n  return useQuery({\n    queryKey: ['activity', 'stats', activityId],\n    queryFn: async () => {\n      if (!user?.id) {\n        return {\n          totalHours: 0,\n          weeklyHours: 0,\n          sessionCount: 0,\n          currentStreak: 0,\n          weeklyProgressPercentage: 0,\n          totalProgressPercentage: 0,\n          averageSessionDuration: 0,\n        };\n      }\n\n      // Query for both activityId and projectId (backwards compatibility)\n      const q = query(\n        collection(db, 'sessions'),\n        and(\n          where('userId', '==', user.id),\n          or(where('activityId', '==', activityId), where('projectId', '==', activityId))\n        )\n      );\n      const snapshot = await getDocs(q);\n\n      let totalSeconds = 0;\n      let weeklySeconds = 0;\n      let sessionCount = 0;\n      const now = new Date();\n      const weekStart = new Date(now);\n      weekStart.setDate(now.getDate() - now.getDay());\n      weekStart.setHours(0, 0, 0, 0);\n\n      snapshot.forEach((doc) => {\n        const data: any = doc.data();\n        const duration = safeNumber(data.duration, 0);\n        const start = data.startTime?.toDate ? data.startTime.toDate() : new Date(data.startTime);\n        totalSeconds += duration;\n        sessionCount += 1;\n        if (start >= weekStart) weeklySeconds += duration;\n      });\n\n      const totalHours = totalSeconds / 3600;\n      const weeklyHours = weeklySeconds / 3600;\n\n      // Streak placeholder for now\n      const currentStreak = sessionCount > 0 ? 1 : 0;\n\n      return {\n        totalHours,\n        weeklyHours,\n        sessionCount,\n        currentStreak,\n        weeklyProgressPercentage: 0,\n        totalProgressPercentage: 0,\n        averageSessionDuration: sessionCount > 0 ? totalSeconds / sessionCount : 0,\n      };\n    },\n    enabled: !!activityId && !!user,\n    staleTime: CACHE_TIMES.VERY_LONG, // 1 hour cache for stats\n    ...options,\n  });\n}\n\n/**\n * Hook to create a new activity with optimistic updates\n */\nexport function useCreateActivity() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const queryKey = CACHE_KEYS.PROJECTS(user?.id || 'none');\n\n  return useMutation({\n    mutationFn: (data: CreateActivityData) => firebaseActivityApi.createProject(data),\n\n    // Optimistic update\n    onMutate: async (newActivity) => {\n      // Cancel any outgoing refetches\n      await queryClient.cancelQueries({ queryKey });\n\n      // Snapshot the previous value\n      const previousActivities = queryClient.getQueryData<Activity[]>(queryKey);\n\n      // Optimistically create a temporary activity\n      const tempActivity: Activity = {\n        id: `temp-${Date.now()}`,\n        userId: user?.id || '',\n        name: newActivity.name,\n        description: newActivity.description,\n        icon: newActivity.icon || 'flat-color-icons:briefcase',\n        color: newActivity.color || '#007AFF',\n        status: 'active',\n        weeklyTarget: newActivity.weeklyTarget,\n        totalTarget: newActivity.totalTarget,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      // Add to cache optimistically\n      if (previousActivities) {\n        queryClient.setQueryData<Activity[]>(queryKey, [...previousActivities, tempActivity]);\n      }\n\n      return { previousActivities, tempActivity };\n    },\n\n    // On success, replace temp with real activity\n    onSuccess: (newActivity, variables, context) => {\n      const previousActivities = context?.previousActivities || [];\n      const tempActivity = context?.tempActivity;\n\n      // Replace temp activity with real one\n      queryClient.setQueryData<Activity[]>(\n        queryKey,\n        previousActivities\n          .filter((a) => a.id !== tempActivity?.id)\n          .concat(newActivity)\n      );\n    },\n\n    // On error, roll back\n    onError: (err, variables, context) => {\n      if (context?.previousActivities) {\n        queryClient.setQueryData(queryKey, context.previousActivities);\n      }\n      console.error('Error creating activity:', err);\n    },\n\n    // Always refetch after error or success\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey });\n    },\n  });\n}\n\n/**\n * Hook to update an existing activity with optimistic updates\n */\nexport function useUpdateActivity() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const queryKey = CACHE_KEYS.PROJECTS(user?.id || 'none');\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: UpdateActivityData }) =>\n      firebaseActivityApi.updateProject(id, data),\n\n    // Optimistic update\n    onMutate: async ({ id, data }) => {\n      await queryClient.cancelQueries({ queryKey });\n\n      const previousActivities = queryClient.getQueryData<Activity[]>(queryKey);\n\n      // Optimistically update the activity\n      if (previousActivities) {\n        queryClient.setQueryData<Activity[]>(\n          queryKey,\n          previousActivities.map((a) =>\n            a.id === id ? { ...a, ...data, updatedAt: new Date() } : a\n          )\n        );\n      }\n\n      return { previousActivities };\n    },\n\n    // On success, use the real updated activity\n    onSuccess: (updatedActivity, variables, context) => {\n      const previousActivities = context?.previousActivities || [];\n      queryClient.setQueryData<Activity[]>(\n        queryKey,\n        previousActivities.map((a) => (a.id === updatedActivity.id ? updatedActivity : a))\n      );\n    },\n\n    // On error, roll back\n    onError: (err, variables, context) => {\n      if (context?.previousActivities) {\n        queryClient.setQueryData(queryKey, context.previousActivities);\n      }\n      console.error('Error updating activity:', err);\n    },\n\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey });\n    },\n  });\n}\n\n/**\n * Hook to delete an activity with optimistic updates\n */\nexport function useDeleteActivity() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const queryKey = CACHE_KEYS.PROJECTS(user?.id || 'none');\n\n  return useMutation({\n    mutationFn: (activityId: string) => firebaseActivityApi.deleteProject(activityId),\n\n    // Optimistic update\n    onMutate: async (activityId) => {\n      await queryClient.cancelQueries({ queryKey });\n\n      const previousActivities = queryClient.getQueryData<Activity[]>(queryKey);\n\n      // Optimistically remove the activity\n      if (previousActivities) {\n        queryClient.setQueryData<Activity[]>(\n          queryKey,\n          previousActivities.filter((a) => a.id !== activityId)\n        );\n      }\n\n      return { previousActivities };\n    },\n\n    // On error, roll back\n    onError: (err, activityId, context) => {\n      if (context?.previousActivities) {\n        queryClient.setQueryData(queryKey, context.previousActivities);\n      }\n      console.error('Error deleting activity:', err);\n    },\n\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey });\n    },\n  });\n}\n\n/**\n * Hook to archive an activity\n * Convenience wrapper around useUpdateActivity\n */\nexport function useArchiveActivity() {\n  const updateActivity = useUpdateActivity();\n\n  return useMutation({\n    mutationFn: (activityId: string) =>\n      updateActivity.mutateAsync({ id: activityId, data: { status: 'archived' } }),\n  });\n}\n\n/**\n * Hook to restore an archived activity\n * Convenience wrapper around useUpdateActivity\n */\nexport function useRestoreActivity() {\n  const updateActivity = useUpdateActivity();\n\n  return useMutation({\n    mutationFn: (activityId: string) =>\n      updateActivity.mutateAsync({ id: activityId, data: { status: 'active' } }),\n  });\n}\n\n/**\n * Backward compatibility: Alias activities as projects\n */\nexport const useProjects = useActivities;\nexport const useProject = useActivity;\nexport const useProjectStats = useActivityStats;\nexport const useCreateProject = useCreateActivity;\nexport const useUpdateProject = useUpdateActivity;\nexport const useDeleteProject = useDeleteActivity;\nexport const useArchiveProject = useArchiveActivity;\nexport const useRestoreProject = useRestoreActivity;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/hooks/useAuth.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/hooks/useDebounce.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/hooks/useNotifications.ts",
    "messages": [
      {
        "ruleId": "@tanstack/query/exhaustive-deps",
        "severity": 1,
        "message": "The following dependencies are missing in your queryKey: user, limit",
        "line": 30,
        "column": 5,
        "nodeType": "Property",
        "messageId": "missingDeps",
        "endLine": 30,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useQuery, useMutation, useQueryClient, UseQueryOptions } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Notification } from '@/types';\nimport { firebaseNotificationApi } from '@/lib/api';\nimport { collection, query, where, orderBy, limit as firestoreLimit, onSnapshot } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { useEffect, useMemo } from 'react';\nimport { CACHE_KEYS, CACHE_TIMES } from '@/lib/queryClient';\n\n/**\n * Hook to fetch user notifications with optional real-time updates\n *\n * @param options.realtime - Enable real-time Firestore listener (default: false)\n * @param options.limit - Maximum number of notifications to fetch (default: 50)\n */\nexport function useNotifications(options?: {\n  realtime?: boolean;\n  limit?: number;\n  queryOptions?: Partial<UseQueryOptions<Notification[]>>;\n}) {\n  const { user, isAuthenticated } = useAuth();\n  const queryClient = useQueryClient();\n  const realtime = options?.realtime ?? false;\n  const limit = options?.limit ?? 50;\n\n  const queryKey = CACHE_KEYS.NOTIFICATIONS(user?.id || 'none');\n\n  // Base query for notifications\n  const notificationsQuery = useQuery({\n    queryKey,\n    queryFn: async () => {\n      if (!user) return [];\n      return firebaseNotificationApi.getUserNotifications(user.id, limit);\n    },\n    enabled: isAuthenticated && !!user,\n    staleTime: CACHE_TIMES.REAL_TIME, // 30 seconds\n    gcTime: CACHE_TIMES.MEDIUM, // 5 minutes\n    ...options?.queryOptions,\n  });\n\n  // Set up real-time listener if requested\n  useEffect(() => {\n    if (!realtime || !isAuthenticated || !user) return;\n\n    const notificationsRef = query(\n      collection(db, 'notifications'),\n      where('userId', '==', user.id),\n      orderBy('createdAt', 'desc'),\n      firestoreLimit(limit)\n    );\n\n    const unsubscribe = onSnapshot(\n      notificationsRef,\n      (snapshot) => {\n        const notifications: Notification[] = [];\n\n        snapshot.forEach((doc) => {\n          const data = doc.data();\n          const notification: Notification = {\n            id: doc.id,\n            userId: data.userId,\n            type: data.type,\n            title: data.title,\n            message: data.message,\n            linkUrl: data.linkUrl,\n            isRead: data.isRead || false,\n            createdAt: data.createdAt?.toDate() || new Date(),\n            actorId: data.actorId,\n            actorName: data.actorName,\n            actorUsername: data.actorUsername,\n            actorProfilePicture: data.actorProfilePicture,\n            sessionId: data.sessionId,\n            commentId: data.commentId,\n            groupId: data.groupId,\n            challengeId: data.challengeId,\n          };\n\n          notifications.push(notification);\n        });\n\n        // Update React Query cache with real-time data\n        queryClient.setQueryData(queryKey, notifications);\n      },\n      (error) => {\n        console.error('Error in notifications real-time listener:', error);\n      }\n    );\n\n    return () => unsubscribe();\n  }, [realtime, isAuthenticated, user, limit, queryClient, queryKey]);\n\n  return notificationsQuery;\n}\n\n/**\n * Hook to get unread notification count\n * Derived from notifications query for efficiency\n */\nexport function useUnreadCount() {\n  const { user } = useAuth();\n  const queryKey = CACHE_KEYS.NOTIFICATIONS(user?.id || 'none');\n  const queryClient = useQueryClient();\n\n  // Get cached notifications data\n  const notifications = queryClient.getQueryData<Notification[]>(queryKey);\n\n  return useMemo(\n    () => notifications?.filter((n) => !n.isRead).length ?? 0,\n    [notifications]\n  );\n}\n\n/**\n * Hook to mark a notification as read with optimistic updates\n */\nexport function useMarkNotificationRead() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const queryKey = CACHE_KEYS.NOTIFICATIONS(user?.id || 'none');\n\n  return useMutation({\n    mutationFn: (notificationId: string) =>\n      firebaseNotificationApi.markAsRead(notificationId),\n\n    // Optimistic update\n    onMutate: async (notificationId) => {\n      // Cancel any outgoing refetches\n      await queryClient.cancelQueries({ queryKey });\n\n      // Snapshot the previous value\n      const previousNotifications = queryClient.getQueryData<Notification[]>(queryKey);\n\n      // Optimistically update to the new value\n      if (previousNotifications) {\n        queryClient.setQueryData<Notification[]>(\n          queryKey,\n          previousNotifications.map((n) =>\n            n.id === notificationId ? { ...n, isRead: true } : n\n          )\n        );\n      }\n\n      // Return context with the previous value\n      return { previousNotifications };\n    },\n\n    // On error, roll back to the previous value\n    onError: (err, notificationId, context) => {\n      if (context?.previousNotifications) {\n        queryClient.setQueryData(queryKey, context.previousNotifications);\n      }\n      console.error('Error marking notification as read:', err);\n    },\n\n    // Always refetch after error or success\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey });\n    },\n  });\n}\n\n/**\n * Hook to mark all notifications as read\n */\nexport function useMarkAllNotificationsRead() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const queryKey = CACHE_KEYS.NOTIFICATIONS(user?.id || 'none');\n\n  return useMutation({\n    mutationFn: async () => {\n      if (!user) throw new Error('User not authenticated');\n      return firebaseNotificationApi.markAllAsRead(user.id);\n    },\n\n    // Optimistic update\n    onMutate: async () => {\n      await queryClient.cancelQueries({ queryKey });\n\n      const previousNotifications = queryClient.getQueryData<Notification[]>(queryKey);\n\n      if (previousNotifications) {\n        queryClient.setQueryData<Notification[]>(\n          queryKey,\n          previousNotifications.map((n) => ({ ...n, isRead: true }))\n        );\n      }\n\n      return { previousNotifications };\n    },\n\n    onError: (err, variables, context) => {\n      if (context?.previousNotifications) {\n        queryClient.setQueryData(queryKey, context.previousNotifications);\n      }\n      console.error('Error marking all notifications as read:', err);\n    },\n\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey });\n    },\n  });\n}\n\n/**\n * Hook to delete a notification with optimistic updates\n */\nexport function useDeleteNotification() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const queryKey = CACHE_KEYS.NOTIFICATIONS(user?.id || 'none');\n\n  return useMutation({\n    mutationFn: (notificationId: string) =>\n      firebaseNotificationApi.deleteNotification(notificationId),\n\n    // Optimistic update\n    onMutate: async (notificationId) => {\n      await queryClient.cancelQueries({ queryKey });\n\n      const previousNotifications = queryClient.getQueryData<Notification[]>(queryKey);\n\n      if (previousNotifications) {\n        queryClient.setQueryData<Notification[]>(\n          queryKey,\n          previousNotifications.filter((n) => n.id !== notificationId)\n        );\n      }\n\n      return { previousNotifications };\n    },\n\n    onError: (err, notificationId, context) => {\n      if (context?.previousNotifications) {\n        queryClient.setQueryData(queryKey, context.previousNotifications);\n      }\n      console.error('Error deleting notification:', err);\n    },\n\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey });\n    },\n  });\n}\n\n/**\n * Hook to clear all notifications\n */\nexport function useClearAllNotifications() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const queryKey = CACHE_KEYS.NOTIFICATIONS(user?.id || 'none');\n\n  return useMutation({\n    mutationFn: async () => {\n      if (!user) throw new Error('User not authenticated');\n\n      const notifications = queryClient.getQueryData<Notification[]>(queryKey) || [];\n\n      // Delete all notifications in parallel\n      await Promise.all(\n        notifications.map((notification) =>\n          firebaseNotificationApi.deleteNotification(notification.id)\n        )\n      );\n    },\n\n    // Optimistic update\n    onMutate: async () => {\n      await queryClient.cancelQueries({ queryKey });\n\n      const previousNotifications = queryClient.getQueryData<Notification[]>(queryKey);\n\n      // Clear the cache immediately\n      queryClient.setQueryData<Notification[]>(queryKey, []);\n\n      return { previousNotifications };\n    },\n\n    onError: (err, variables, context) => {\n      if (context?.previousNotifications) {\n        queryClient.setQueryData(queryKey, context.previousNotifications);\n      }\n      console.error('Error clearing all notifications:', err);\n    },\n\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey });\n    },\n  });\n}\n\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/hooks/useTimerQuery.ts",
    "messages": [
      {
        "ruleId": "@tanstack/query/exhaustive-deps",
        "severity": 1,
        "message": "The following dependencies are missing in your queryKey: user",
        "line": 22,
        "column": 5,
        "nodeType": "Property",
        "messageId": "missingDeps",
        "endLine": 22,
        "endColumn": 60
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * React Query hooks for timer-related data fetching\n *\n * This module provides React Query hooks for server-state related to timers.\n * This is the ONLY place where React Query is used for timer functionality.\n */\n\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { firebaseSessionApi } from '@/lib/api';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Session, CreateSessionData } from '@/types';\nimport { CACHE_KEYS, CACHE_TIMES } from '@/lib/queryClient';\n\n/**\n * Hook to fetch the active session from Firebase\n * Returns the persisted active session if one exists\n */\nexport function useActiveTimerQuery() {\n  const { user, isAuthenticated } = useAuth();\n\n  return useQuery({\n    queryKey: CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n    queryFn: async () => {\n      if (!user) return null;\n\n      const activeSession = await firebaseSessionApi.getActiveSession();\n      if (!activeSession) return null;\n\n      // Validate session age (max 24 hours)\n      const MAX_SESSION_AGE_MS = 24 * 60 * 60 * 1000;\n      const now = new Date();\n      const sessionAge = now.getTime() - activeSession.startTime.getTime();\n\n      if (sessionAge > MAX_SESSION_AGE_MS || sessionAge < 0) {\n        // Clear stale or invalid session\n        await firebaseSessionApi.clearActiveSession();\n        return null;\n      }\n\n      return activeSession;\n    },\n    enabled: isAuthenticated && !!user,\n    staleTime: CACHE_TIMES.REAL_TIME, // 30 seconds - frequently check for updates\n    refetchOnWindowFocus: true, // Refetch when window regains focus\n    refetchInterval: 10000, // Check every 10 seconds if session still exists\n     \n  });\n}\n\n// Backward compatibility alias\nexport const useActiveSession = useActiveTimerQuery;\n\n/**\n * Hook to start a new timer\n * Creates an active session in Firebase and updates cache\n */\nexport function useStartTimerMutation() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({\n      projectId,\n      customStartTime,\n    }: {\n      projectId: string;\n      customStartTime?: Date;\n    }) => {\n      if (!user) {\n        throw new Error('User must be authenticated to start timer');\n      }\n\n      const startTime = customStartTime || new Date();\n\n      // Save active session to Firebase\n      await firebaseSessionApi.saveActiveSession({\n        startTime,\n        projectId: projectId,\n        selectedTaskIds: [],\n        pausedDuration: 0,\n        isPaused: false,\n      });\n\n      return { projectId, startTime };\n    },\n    onSuccess: data => {\n      // Update the active session cache immediately with optimistic data\n      queryClient.setQueryData(CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'), {\n        startTime: data.startTime,\n        projectId: data.projectId,\n        selectedTaskIds: [],\n        pausedDuration: 0,\n        isPaused: false,\n      });\n    },\n  });\n}\n\n/**\n * Hook to pause the active timer\n * Saves paused state with elapsed time to Firebase\n */\nexport function usePauseTimerMutation() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({\n      startTime,\n      projectId,\n      elapsedSeconds,\n    }: {\n      startTime: Date;\n      projectId: string;\n      elapsedSeconds: number;\n    }) => {\n      await firebaseSessionApi.saveActiveSession({\n        startTime,\n        projectId,\n        selectedTaskIds: [],\n        pausedDuration: elapsedSeconds,\n        isPaused: true,\n      });\n\n      return { startTime, projectId, elapsedSeconds };\n    },\n    onSuccess: data => {\n      // Update cache with paused state\n      queryClient.setQueryData(CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'), {\n        startTime: data.startTime,\n        projectId: data.projectId,\n        selectedTaskIds: [],\n        pausedDuration: data.elapsedSeconds,\n        isPaused: true,\n      });\n    },\n  });\n}\n\n/**\n * Hook to resume a paused timer\n * Calculates adjusted start time and saves to Firebase\n */\nexport function useResumeTimerMutation() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({\n      pausedDuration,\n      projectId,\n    }: {\n      pausedDuration: number;\n      projectId: string;\n    }) => {\n      // Calculate the new start time to account for paused duration\n      const now = new Date();\n      const adjustedStartTime = new Date(now.getTime() - pausedDuration * 1000);\n\n      await firebaseSessionApi.saveActiveSession({\n        startTime: adjustedStartTime,\n        projectId,\n        selectedTaskIds: [],\n        pausedDuration: 0,\n        isPaused: false,\n      });\n\n      return { adjustedStartTime, projectId };\n    },\n    onSuccess: data => {\n      // Update cache with resumed state\n      queryClient.setQueryData(CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'), {\n        startTime: data.adjustedStartTime,\n        projectId: data.projectId,\n        selectedTaskIds: [],\n        pausedDuration: 0,\n        isPaused: false,\n      });\n    },\n  });\n}\n\n/**\n * Hook to save the active session to Firebase\n * Used for auto-save functionality\n */\nexport function useSaveActiveSession() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (sessionData: {\n      startTime: Date;\n      projectId: string;\n      selectedTaskIds: string[];\n      pausedDuration: number;\n      isPaused: boolean;\n    }) => {\n      return firebaseSessionApi.saveActiveSession(sessionData);\n    },\n    onSuccess: (data, variables) => {\n      // Update the active session cache immediately\n      queryClient.setQueryData(CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'), {\n        startTime: variables.startTime,\n        projectId: variables.projectId,\n        selectedTaskIds: variables.selectedTaskIds,\n        pausedDuration: variables.pausedDuration,\n        isPaused: variables.isPaused,\n      });\n    },\n  });\n}\n\n/**\n * Hook to cancel/reset the active timer\n * Clears the active session from Firebase without creating a session\n */\nexport function useCancelTimerMutation() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async () => {\n      return firebaseSessionApi.clearActiveSession();\n    },\n    onMutate: async () => {\n      // Optimistically clear the active session\n      await queryClient.cancelQueries({\n        queryKey: CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n      });\n\n      const previousActiveSession = queryClient.getQueryData(\n        CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none')\n      );\n\n      queryClient.setQueryData(\n        CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n        null\n      );\n\n      return { previousActiveSession };\n    },\n    onError: (err, variables, context) => {\n      // Restore previous active session on error\n      if (context?.previousActiveSession) {\n        queryClient.setQueryData(\n          CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n          context.previousActiveSession\n        );\n      }\n    },\n    onSuccess: () => {\n      // Clear the active session cache\n      queryClient.setQueryData(\n        CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n        null\n      );\n    },\n  });\n}\n\n/**\n * Hook to clear the active session from Firebase\n * Used when canceling or completing a session\n * @deprecated Use useCancelTimerMutation instead\n */\nexport function useClearActiveSession() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async () => {\n      return firebaseSessionApi.clearActiveSession();\n    },\n    onSuccess: () => {\n      // Clear the active session cache\n      queryClient.setQueryData(\n        CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n        null\n      );\n    },\n  });\n}\n\n/**\n * Hook to finish the timer and create a session\n * Clears active session and creates a completed session record\n */\nexport function useFinishTimerMutation() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({\n      title,\n      description,\n      tags,\n      howFelt,\n      privateNotes,\n      options,\n    }: {\n      title: string;\n      description?: string;\n      tags?: string[];\n      howFelt?: number;\n      privateNotes?: string;\n      options?: {\n        visibility?: 'everyone' | 'followers' | 'private';\n        showStartTime?: boolean;\n        publishToFeeds?: boolean;\n        customDuration?: number;\n        images?: string[];\n        activityId: string;\n        projectId: string;\n        startTime: Date;\n      };\n    }) => {\n      if (!options) {\n        throw new Error(\n          'Options with activityId, projectId, and startTime are required'\n        );\n      }\n\n      const sessionData: CreateSessionData = {\n        activityId: options.activityId,\n        projectId: options.projectId,\n        title,\n        description,\n        duration: options.customDuration || 0,\n        startTime: options.startTime,\n        tags,\n        visibility: options.visibility,\n        showStartTime: options.showStartTime,\n        publishToFeeds: options.publishToFeeds,\n        howFelt,\n        privateNotes,\n        images: options.images,\n      };\n\n      let session: Session;\n\n      if (options.visibility && options.visibility !== 'private') {\n        // Create session with post for non-private sessions\n        const result = await firebaseSessionApi.createSessionWithPost(\n          sessionData,\n          description || `Completed ${title}`,\n          options.visibility\n        );\n        session = result.session;\n      } else {\n        // Create private session only\n        session = await firebaseSessionApi.createSession(sessionData);\n      }\n\n      return session;\n    },\n    onMutate: async () => {\n      // Optimistically clear the active session\n      await queryClient.cancelQueries({\n        queryKey: CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n      });\n\n      const previousActiveSession = queryClient.getQueryData(\n        CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none')\n      );\n\n      queryClient.setQueryData(\n        CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n        null\n      );\n\n      return { previousActiveSession };\n    },\n    onSuccess: async session => {\n      // Clear active session from Firebase\n      await firebaseSessionApi.clearActiveSession();\n\n      // Ensure cache is cleared\n      queryClient.setQueryData(\n        CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n        null\n      );\n\n      // Invalidate sessions cache to show the new session\n      queryClient.invalidateQueries({\n        queryKey: CACHE_KEYS.SESSIONS(user?.id || 'none'),\n      });\n\n      // Invalidate user stats since a new session was added\n      queryClient.invalidateQueries({\n        queryKey: CACHE_KEYS.USER_STATS(user?.id || 'none'),\n      });\n\n      // Invalidate activity stats for the project\n      if (session.activityId) {\n        queryClient.invalidateQueries({\n          queryKey: CACHE_KEYS.ACTIVITY_STATS(session.activityId),\n        });\n      }\n    },\n    onError: (err, variables, context) => {\n      // Restore previous active session on error\n      if (context?.previousActiveSession) {\n        queryClient.setQueryData(\n          CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n          context.previousActiveSession\n        );\n      }\n    },\n  });\n}\n\n/**\n * Hook to create a session (finish timer)\n * Handles both private sessions and sessions with posts\n * @deprecated Use useFinishTimerMutation instead\n */\nexport function useCreateSession() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const clearActiveSession = useClearActiveSession();\n\n  return useMutation({\n    mutationFn: async ({\n      sessionData,\n      visibility,\n    }: {\n      sessionData: CreateSessionData;\n      visibility?: 'everyone' | 'followers' | 'private';\n    }) => {\n      let session: Session;\n\n      if (visibility && visibility !== 'private') {\n        // Create session with post for non-private sessions\n        const result = await firebaseSessionApi.createSessionWithPost(\n          sessionData,\n          sessionData.description || `Completed ${sessionData.title}`,\n          visibility\n        );\n        session = result.session;\n      } else {\n        // Create private session only\n        session = await firebaseSessionApi.createSession(sessionData);\n      }\n\n      return session;\n    },\n    onMutate: async () => {\n      // Optimistically clear the active session\n      await queryClient.cancelQueries({\n        queryKey: CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n      });\n\n      const previousActiveSession = queryClient.getQueryData(\n        CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none')\n      );\n\n      queryClient.setQueryData(\n        CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n        null\n      );\n\n      return { previousActiveSession };\n    },\n    onSuccess: async session => {\n      // Clear active session from Firebase\n      await clearActiveSession.mutateAsync();\n\n      // Invalidate sessions cache to show the new session\n      queryClient.invalidateQueries({\n        queryKey: CACHE_KEYS.SESSIONS(user?.id || 'none'),\n      });\n\n      // Invalidate user stats since a new session was added\n      queryClient.invalidateQueries({\n        queryKey: CACHE_KEYS.USER_STATS(user?.id || 'none'),\n      });\n\n      // Invalidate activity stats for the project\n      if (session.activityId) {\n        queryClient.invalidateQueries({\n          queryKey: CACHE_KEYS.ACTIVITY_STATS(session.activityId),\n        });\n      }\n    },\n    onError: (err, variables, context) => {\n      // Restore previous active session on error\n      if (context?.previousActiveSession) {\n        queryClient.setQueryData(\n          CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n          context.previousActiveSession\n        );\n      }\n    },\n  });\n}\n\n/**\n * Backward compatibility: Export aliases matching old context API\n */\nexport {\n  useActiveSession as useTimerActiveSession,\n  useSaveActiveSession as useTimerSave,\n  useClearActiveSession as useTimerClear,\n  useCreateSession as useTimerFinish,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/infrastructure/firebase/mappers/ActiveSessionMapper.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/infrastructure/firebase/mappers/GroupMapper.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/infrastructure/firebase/mappers/SessionMapper.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 78,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 78,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 131,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 131,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 242,
        "column": 44,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 242,
        "endColumn": 49
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Session Mapper\n *\n * Converts between Firestore documents and Session domain entities.\n */\n\nimport {\n  DocumentSnapshot,\n  Timestamp,\n  getDoc,\n  doc as firestoreDoc,\n} from 'firebase/firestore';\nimport {\n  Session,\n  SessionVisibility,\n  SessionUser,\n  SessionActivity,\n} from '@/domain/entities/Session';\nimport { db, auth } from '@/lib/firebase';\nimport { DEFAULT_ACTIVITIES } from '@/types';\n\nexport class SessionMapper {\n  /**\n   * Convert Firestore document to Session domain entity (without enrichment)\n   */\n  toDomain(doc: DocumentSnapshot): Session {\n    const data = doc.data();\n    if (!data) {\n      throw new Error(`Session document ${doc.id} does not exist`);\n    }\n\n    return new Session(\n      doc.id,\n      data.userId,\n      data.projectId,\n      data.activityId || null,\n      data.duration,\n      this.timestampToDate(data.createdAt),\n      data.title,\n      data.description,\n      (data.visibility as SessionVisibility) || 'everyone',\n      data.supportCount || 0,\n      data.commentCount || 0,\n      data.groupIds || []\n    );\n  }\n\n  /**\n   * Convert Firestore document to enriched Session domain entity (with user/activity data)\n   * Returns null if user data cannot be fetched (deleted/inaccessible users)\n   */\n  async toDomainEnriched(doc: DocumentSnapshot): Promise<Session | null> {\n    const data = doc.data();\n    if (!data) {\n      throw new Error(`Session document ${doc.id} does not exist`);\n    }\n\n    // Fetch user data - REQUIRED, skip session if user is inaccessible\n    let user: SessionUser | undefined;\n    try {\n      const userDoc = await getDoc(firestoreDoc(db, 'users', data.userId));\n      if (!userDoc.exists()) {\n        // User does not exist - skip session\n        return null;\n      }\n\n      const userData = userDoc.data();\n      user = {\n        id: data.userId,\n        email: userData.email || '',\n        name: userData.name || 'Unknown User',\n        username: userData.username || 'unknown',\n        bio: userData.bio,\n        profilePicture: userData.profilePicture,\n        createdAt: this.timestampToDate(userData.createdAt),\n        updatedAt: this.timestampToDate(userData.updatedAt),\n      };\n    } catch (error) {\n      // If we can't fetch the user (permissions, deleted, etc), skip this session\n      return null;\n    }\n\n    // Fetch activity data\n    let activity: SessionActivity | undefined;\n    const activityId = data.activityId || data.projectId;\n\n    if (activityId) {\n      // Check if it's a default activity first\n      const defaultActivity = DEFAULT_ACTIVITIES.find(a => a.id === activityId);\n\n      if (defaultActivity) {\n        activity = {\n          id: defaultActivity.id,\n          userId: data.userId,\n          name: defaultActivity.name,\n          description: '',\n          icon: defaultActivity.icon,\n          color: defaultActivity.color,\n          status: 'active' as const,\n          isDefault: true,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        };\n      } else {\n        // Fetch custom activity\n        try {\n          const activityDoc = await getDoc(\n            firestoreDoc(\n              db,\n              'projects',\n              data.userId,\n              'userProjects',\n              activityId\n            )\n          );\n          if (activityDoc.exists()) {\n            const activityData = activityDoc.data();\n            activity = {\n              id: activityId,\n              userId: data.userId,\n              name: activityData.name || 'Unknown Activity',\n              description: activityData.description || '',\n              icon: activityData.icon || 'flat-color-icons:briefcase',\n              color: activityData.color || '#007AFF',\n              status: activityData.status || 'active',\n              isDefault: false,\n              createdAt: this.timestampToDate(activityData.createdAt),\n              updatedAt: this.timestampToDate(activityData.updatedAt),\n            };\n          }\n        } catch (error) {\n          // Failed to fetch activity - use default\n        }\n      }\n    }\n\n    // Check if current user has supported this session\n    const supportedBy = data.supportedBy || [];\n    const isSupported = auth.currentUser\n      ? supportedBy.includes(auth.currentUser.uid)\n      : false;\n\n    return new Session(\n      doc.id,\n      data.userId,\n      data.projectId,\n      data.activityId || null,\n      data.duration,\n      this.timestampToDate(data.createdAt),\n      data.title,\n      data.description,\n      (data.visibility as SessionVisibility) || 'everyone',\n      data.supportCount || 0,\n      data.commentCount || 0,\n      data.groupIds || [],\n      // Enriched data\n      user,\n      activity,\n      activity, // project (backwards compatibility)\n      data.images || [],\n      isSupported,\n      supportedBy,\n      data.allowComments !== false,\n      this.timestampToDate(data.updatedAt),\n      this.timestampToDate(data.startTime),\n      data.tags || [],\n      data.showStartTime,\n      data.howFelt,\n      data.privateNotes,\n      data.isArchived || false\n    );\n  }\n\n  /**\n   * Convert Session domain entity to Firestore document data\n   */\n  toFirestore(session: Session): Record<string, unknown> {\n    const data: Record<string, unknown> = {\n      userId: session.userId,\n      projectId: session.projectId,\n      duration: session.duration,\n      createdAt: Timestamp.fromDate(session.createdAt),\n      visibility: session.visibility,\n      supportCount: session.supportCount,\n      commentCount: session.commentCount,\n    };\n\n    // Add optional fields only if defined\n    if (session.activityId !== null && session.activityId !== undefined) {\n      data.activityId = session.activityId;\n    }\n\n    if (session.title !== undefined) {\n      data.title = session.title;\n    }\n\n    if (session.description !== undefined) {\n      data.description = session.description;\n    }\n\n    if (session.groupIds && session.groupIds.length > 0) {\n      data.groupIds = Array.from(session.groupIds);\n    }\n\n    return data;\n  }\n\n  /**\n   * Convert Firestore Timestamp to Date\n   */\n  private timestampToDate(timestamp: Timestamp | Date | undefined): Date {\n    if (!timestamp) {\n      return new Date();\n    }\n\n    if (timestamp instanceof Date) {\n      return timestamp;\n    }\n\n    return timestamp.toDate();\n  }\n\n  /**\n   * Convert multiple Firestore documents to Session entities (without enrichment)\n   */\n  toDomainList(docs: DocumentSnapshot[]): Session[] {\n    return docs.map(doc => this.toDomain(doc));\n  }\n\n  /**\n   * Convert multiple Firestore documents to enriched Session entities (with user/activity data)\n   * Processes in batches for performance\n   */\n  async toDomainListEnriched(docs: DocumentSnapshot[]): Promise<Session[]> {\n    const sessions: Session[] = [];\n    const batchSize = 10;\n\n    for (let i = 0; i < docs.length; i += batchSize) {\n      const batch = docs.slice(i, i + batchSize);\n      const batchResults = await Promise.all(\n        batch.map(doc =>\n          this.toDomainEnriched(doc).catch(error => {\n            // Failed to enrich session - return null to filter out\n            return null;\n          })\n        )\n      );\n\n      // Filter out null values (failed enrichments)\n      const validSessions = batchResults.filter(\n        (session): session is Session => session !== null\n      );\n      sessions.push(...validSessions);\n    }\n\n    return sessions;\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/infrastructure/firebase/mappers/UserMapper.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/infrastructure/firebase/repositories/ActiveSessionRepository.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'getDoc' is defined but never used.",
        "line": 11,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'where' is defined but never used.",
        "line": 16,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 8
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * ActiveSession Repository\n *\n * Handles data access for active timer sessions.\n * Stores in users/{userId}/activeSession subcollection for better security.\n */\n\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  setDoc,\n  deleteDoc,\n  query,\n  where,\n  limit as limitFn,\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { ActiveSession } from '@/domain/entities/ActiveSession';\nimport { ActiveSessionMapper } from '../mappers/ActiveSessionMapper';\n\nexport class ActiveSessionRepository {\n  private readonly mapper: ActiveSessionMapper;\n\n  constructor() {\n    this.mapper = new ActiveSessionMapper();\n  }\n\n  /**\n   * Get active session for a user\n   */\n  async getActiveSession(userId: string): Promise<ActiveSession | null> {\n    try {\n      // Check subcollection: users/{userId}/activeSession\n      const activeSessionRef = collection(db, `users/${userId}/activeSession`);\n      const q = query(activeSessionRef, limitFn(1));\n      const snapshot = await getDocs(q);\n\n      if (snapshot.empty) {\n        return null;\n      }\n\n      const doc = snapshot.docs[0];\n      if (!doc) {\n        return null;\n      }\n      return this.mapper.toDomain(doc);\n    } catch (error) {\n      console.error(`Error getting active session for user ${userId}:`, error);\n      throw new Error(\n        `Failed to get active session: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Save active session\n   */\n  async saveActiveSession(session: ActiveSession): Promise<void> {\n    try {\n      const docRef = doc(\n        db,\n        `users/${session.userId}/activeSession`,\n        session.id\n      );\n      const data = this.mapper.toFirestore(session);\n\n      await setDoc(docRef, data);\n    } catch (error) {\n      console.error(`Error saving active session ${session.id}:`, error);\n      throw new Error(\n        `Failed to save active session: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Delete active session\n   */\n  async deleteActiveSession(userId: string, sessionId: string): Promise<void> {\n    try {\n      const docRef = doc(db, `users/${userId}/activeSession`, sessionId);\n      await deleteDoc(docRef);\n    } catch (error) {\n      console.error(`Error deleting active session ${sessionId}:`, error);\n      throw new Error(\n        `Failed to delete active session: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Clear all active sessions for a user (cleanup)\n   */\n  async clearActiveSession(userId: string): Promise<void> {\n    try {\n      const activeSessionRef = collection(db, `users/${userId}/activeSession`);\n      const snapshot = await getDocs(activeSessionRef);\n\n      const deletePromises = snapshot.docs.map(doc => deleteDoc(doc.ref));\n\n      await Promise.all(deletePromises);\n    } catch (error) {\n      console.error(\n        `Error clearing active sessions for user ${userId}:`,\n        error\n      );\n      throw new Error(\n        `Failed to clear active sessions: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Check if user has an active session\n   */\n  async hasActiveSession(userId: string): Promise<boolean> {\n    try {\n      const session = await this.getActiveSession(userId);\n      return session !== null;\n    } catch (error) {\n      console.error(`Error checking active session for user ${userId}:`, error);\n      return false;\n    }\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/infrastructure/firebase/repositories/FeedRepository.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/infrastructure/firebase/repositories/GroupRepository.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'updateDoc' is defined but never used.",
        "line": 14,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'increment' is defined but never used.",
        "line": 21,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Timestamp' is defined but never used.",
        "line": 22,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 12
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Group Repository\n *\n * Handles all data access for Groups.\n * Implements the Repository pattern for clean separation between domain and infrastructure.\n */\n\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  setDoc,\n  updateDoc,\n  deleteDoc,\n  query,\n  where,\n  orderBy,\n  limit as limitFn,\n  writeBatch,\n  increment,\n  Timestamp\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { Group } from '@/domain/entities/Group';\nimport { GroupMapper } from '../mappers/GroupMapper';\n\nexport class GroupRepository {\n  private readonly mapper: GroupMapper;\n  private readonly collectionName = 'groups';\n\n  constructor() {\n    this.mapper = new GroupMapper();\n  }\n\n  /**\n   * Find group by ID\n   */\n  async findById(groupId: string): Promise<Group | null> {\n    try {\n      const docRef = doc(db, this.collectionName, groupId);\n      const docSnap = await getDoc(docRef);\n\n      if (!docSnap.exists()) {\n        return null;\n      }\n\n      return this.mapper.toDomain(docSnap);\n    } catch (error) {\n      console.error(`Error finding group ${groupId}:`, error);\n      throw new Error(`Failed to find group: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Find groups by member ID\n   */\n  async findByMemberId(userId: string, limit: number = 50): Promise<Group[]> {\n    try {\n      const q = query(\n        collection(db, this.collectionName),\n        where('memberIds', 'array-contains', userId),\n        orderBy('createdAt', 'desc'),\n        limitFn(limit)\n      );\n\n      const snapshot = await getDocs(q);\n      return this.mapper.toDomainList(snapshot.docs);\n    } catch (error) {\n      console.error(`Error finding groups for user ${userId}:`, error);\n      throw new Error(`Failed to find groups: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Find public groups\n   */\n  async findPublic(limit: number = 50): Promise<Group[]> {\n    try {\n      const q = query(\n        collection(db, this.collectionName),\n        where('privacy', '==', 'public'),\n        orderBy('memberCount', 'desc'),\n        limitFn(limit)\n      );\n\n      const snapshot = await getDocs(q);\n      return this.mapper.toDomainList(snapshot.docs);\n    } catch (error) {\n      console.error('Error finding public groups:', error);\n      throw new Error(`Failed to find public groups: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Save group (create or update)\n   */\n  async save(group: Group): Promise<void> {\n    try {\n      const docRef = doc(db, this.collectionName, group.id);\n      const data = this.mapper.toFirestore(group);\n\n      await setDoc(docRef, data, { merge: true });\n    } catch (error) {\n      console.error(`Error saving group ${group.id}:`, error);\n      throw new Error(`Failed to save group: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Add member to group (updates group entity)\n   */\n  async addMember(groupId: string, userId: string): Promise<void> {\n    try {\n      // Firestore doesn't have array append in batches\n      // We need to read first, then write\n      const group = await this.findById(groupId);\n      if (!group) {\n        throw new Error('Group not found');\n      }\n\n      const updatedGroup = group.withAddedMember(userId);\n      await this.save(updatedGroup);\n    } catch (error) {\n      console.error(`Error adding member ${userId} to group ${groupId}:`, error);\n      throw new Error(`Failed to add member: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Remove member from group (transactional with count update)\n   */\n  async removeMember(groupId: string, userId: string): Promise<void> {\n    try {\n      const batch = writeBatch(db);\n      const groupRef = doc(db, this.collectionName, groupId);\n\n      // Note: Firestore doesn't have array remove operator in batches\n      // We need to read first, then write\n      const group = await this.findById(groupId);\n      if (!group) {\n        throw new Error('Group not found');\n      }\n\n      const updatedGroup = group.withRemovedMember(userId);\n      const data = this.mapper.toFirestore(updatedGroup);\n\n      batch.set(groupRef, data);\n      await batch.commit();\n    } catch (error) {\n      console.error(`Error removing member ${userId} from group ${groupId}:`, error);\n      throw new Error(`Failed to remove member: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Delete group\n   */\n  async delete(groupId: string): Promise<void> {\n    try {\n      const docRef = doc(db, this.collectionName, groupId);\n      await deleteDoc(docRef);\n    } catch (error) {\n      console.error(`Error deleting group ${groupId}:`, error);\n      throw new Error(`Failed to delete group: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Check if group exists\n   */\n  async exists(groupId: string): Promise<boolean> {\n    try {\n      const docRef = doc(db, this.collectionName, groupId);\n      const docSnap = await getDoc(docRef);\n      return docSnap.exists();\n    } catch (error) {\n      console.error(`Error checking if group ${groupId} exists:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Get member count for a group\n   */\n  async getMemberCount(groupId: string): Promise<number> {\n    try {\n      const docRef = doc(db, this.collectionName, groupId);\n      const docSnap = await getDoc(docRef);\n\n      if (!docSnap.exists()) {\n        return 0;\n      }\n\n      const data = docSnap.data();\n      return data.memberCount || data.memberIds?.length || 0;\n    } catch (error) {\n      console.error(`Error getting member count for group ${groupId}:`, error);\n      return 0;\n    }\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/infrastructure/firebase/repositories/SessionRepository.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/infrastructure/firebase/repositories/SocialGraphRepository.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'socialGraphError' is defined but never used.",
        "line": 32,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'socialGraphError' is defined but never used.",
        "line": 71,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 71,
        "endColumn": 32
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Social Graph Repository\n *\n * Handles queries for social relationships (follows, group memberships).\n */\n\nimport {\n  collection,\n  getDocs,\n  query,\n  where\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\n\nexport class SocialGraphRepository {\n  /**\n   * Get list of users that a user is following\n   */\n  async getFollowingIds(userId: string): Promise<string[]> {\n    try {\n      let followingIds: string[] = [];\n\n      // Try new social_graph structure first\n      try {\n        const outboundRef = collection(db, `social_graph/${userId}/outbound`);\n        const outboundSnapshot = await getDocs(outboundRef);\n\n        if (!outboundSnapshot.empty) {\n          followingIds = outboundSnapshot.docs.map(doc => doc.id);\n          return followingIds;\n        }\n      } catch (socialGraphError) {\n        // If social_graph doesn't exist, fall through to legacy follows\n      }\n\n      // Fallback to old follows collection\n      const followingQuery = query(\n        collection(db, 'follows'),\n        where('followerId', '==', userId)\n      );\n      const followingSnapshot = await getDocs(followingQuery);\n\n      followingIds = followingSnapshot.docs.map(doc => {\n        const data = doc.data();\n        return data.followingId;\n      });\n\n      return followingIds;\n    } catch (error) {\n      console.error(`Error getting following IDs for user ${userId}:`, error);\n      throw new Error(`Failed to get following IDs: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get list of followers for a user\n   */\n  async getFollowerIds(userId: string): Promise<string[]> {\n    try {\n      let followerIds: string[] = [];\n\n      // Try new social_graph structure first\n      try {\n        const inboundRef = collection(db, `social_graph/${userId}/inbound`);\n        const inboundSnapshot = await getDocs(inboundRef);\n\n        if (!inboundSnapshot.empty) {\n          followerIds = inboundSnapshot.docs.map(doc => doc.id);\n          return followerIds;\n        }\n      } catch (socialGraphError) {\n        // If social_graph doesn't exist, fall through to legacy follows\n      }\n\n      // Fallback to old follows collection\n      const followersQuery = query(\n        collection(db, 'follows'),\n        where('followingId', '==', userId)\n      );\n      const followersSnapshot = await getDocs(followersQuery);\n\n      followerIds = followersSnapshot.docs.map(doc => {\n        const data = doc.data();\n        return data.followerId;\n      });\n\n      return followerIds;\n    } catch (error) {\n      console.error(`Error getting follower IDs for user ${userId}:`, error);\n      throw new Error(`Failed to get follower IDs: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get all group member IDs for groups a user belongs to\n   */\n  async getGroupMemberIds(userId: string): Promise<string[]> {\n    try {\n      // Get user's groups\n      const membershipsQuery = query(\n        collection(db, 'groupMemberships'),\n        where('userId', '==', userId),\n        where('status', '==', 'active')\n      );\n      const membershipsSnapshot = await getDocs(membershipsQuery);\n      const groupIds = membershipsSnapshot.docs.map(doc => doc.data().groupId);\n\n      if (groupIds.length === 0) {\n        return [];\n      }\n\n      // Get all members from those groups (batch queries due to 'in' limitation)\n      const allMemberIds = new Set<string>();\n\n      // Process in batches of 10 (Firestore 'in' limit)\n      for (let i = 0; i < groupIds.length; i += 10) {\n        const batchGroupIds = groupIds.slice(i, i + 10);\n\n        const groupMembershipsQuery = query(\n          collection(db, 'groupMemberships'),\n          where('groupId', 'in', batchGroupIds),\n          where('status', '==', 'active')\n        );\n\n        const groupMembershipsSnapshot = await getDocs(groupMembershipsQuery);\n        groupMembershipsSnapshot.docs.forEach(doc => {\n          const memberId = doc.data().userId;\n          // Don't include the user themselves\n          if (memberId !== userId) {\n            allMemberIds.add(memberId);\n          }\n        });\n      }\n\n      return Array.from(allMemberIds);\n    } catch (error) {\n      console.error(`Error getting group member IDs for user ${userId}:`, error);\n      throw new Error(`Failed to get group member IDs: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Check if user A follows user B\n   */\n  async isFollowing(followerId: string, followingId: string): Promise<boolean> {\n    try {\n      const followingIds = await this.getFollowingIds(followerId);\n      return followingIds.includes(followingId);\n    } catch (error) {\n      console.error(`Error checking if ${followerId} follows ${followingId}:`, error);\n      return false;\n    }\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/infrastructure/firebase/repositories/UserRepository.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'writeBatch' is defined but never used.",
        "line": 19,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 19,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * User Repository\n *\n * Handles all data access for Users.\n * Implements the Repository pattern for clean separation between domain and infrastructure.\n */\n\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  setDoc,\n  updateDoc,\n  query,\n  where,\n  orderBy,\n  limit as limitFn,\n  writeBatch,\n  increment,\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { User } from '@/domain/entities/User';\nimport { UserMapper } from '../mappers/UserMapper';\n\nexport class UserRepository {\n  private readonly mapper: UserMapper;\n  private readonly collectionName = 'users';\n\n  constructor() {\n    this.mapper = new UserMapper();\n  }\n\n  /**\n   * Find user by ID\n   */\n  async findById(userId: string): Promise<User | null> {\n    try {\n      const docRef = doc(db, this.collectionName, userId);\n      const docSnap = await getDoc(docRef);\n\n      if (!docSnap.exists()) {\n        return null;\n      }\n\n      return this.mapper.toDomain(docSnap);\n    } catch (error) {\n      console.error(`Error finding user ${userId}:`, error);\n      throw new Error(\n        `Failed to find user: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Find user by username\n   */\n  async findByUsername(username: string): Promise<User | null> {\n    try {\n      const q = query(\n        collection(db, this.collectionName),\n        where('username', '==', username),\n        limitFn(1)\n      );\n\n      const snapshot = await getDocs(q);\n\n      if (snapshot.empty) {\n        return null;\n      }\n\n      const doc = snapshot.docs[0];\n      if (!doc) {\n        return null;\n      }\n      return this.mapper.toDomain(doc);\n    } catch (error) {\n      console.error(`Error finding user by username ${username}:`, error);\n      throw new Error(\n        `Failed to find user: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Find multiple users by IDs\n   */\n  async findByIds(userIds: string[]): Promise<User[]> {\n    try {\n      if (userIds.length === 0) {\n        return [];\n      }\n\n      // Firestore 'in' queries are limited to 10 items\n      // If we have more, we need to batch the requests\n      const batchSize = 10;\n      const batches: Promise<User[]>[] = [];\n\n      for (let i = 0; i < userIds.length; i += batchSize) {\n        const batchIds = userIds.slice(i, i + batchSize);\n        const batchPromise = this.fetchUserBatch(batchIds);\n        batches.push(batchPromise);\n      }\n\n      const results = await Promise.all(batches);\n      return results.flat();\n    } catch (error) {\n      console.error('Error finding users by IDs:', error);\n      throw new Error(\n        `Failed to find users: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Helper method to fetch a batch of users (max 10)\n   */\n  private async fetchUserBatch(userIds: string[]): Promise<User[]> {\n    const q = query(\n      collection(db, this.collectionName),\n      where('__name__', 'in', userIds)\n    );\n\n    const snapshot = await getDocs(q);\n    return this.mapper.toDomainList(snapshot.docs);\n  }\n\n  /**\n   * Search users by username (prefix match)\n   */\n  async searchByUsername(prefix: string, limit: number = 20): Promise<User[]> {\n    try {\n      // Firestore doesn't support full text search\n      // This is a simple prefix match using range queries\n      const q = query(\n        collection(db, this.collectionName),\n        where('username', '>=', prefix),\n        where('username', '<=', prefix + '\\uf8ff'),\n        orderBy('username'),\n        limitFn(limit)\n      );\n\n      const snapshot = await getDocs(q);\n      return this.mapper.toDomainList(snapshot.docs);\n    } catch (error) {\n      console.error(\n        `Error searching users by username prefix ${prefix}:`,\n        error\n      );\n      throw new Error(\n        `Failed to search users: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Save user (create or update)\n   */\n  async save(user: User): Promise<void> {\n    try {\n      const docRef = doc(db, this.collectionName, user.id);\n      const data = this.mapper.toFirestore(user);\n\n      await setDoc(docRef, data, { merge: true });\n    } catch (error) {\n      console.error(`Error saving user ${user.id}:`, error);\n      throw new Error(\n        `Failed to save user: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Update follower count\n   */\n  async updateFollowerCount(userId: string, delta: number): Promise<void> {\n    try {\n      const docRef = doc(db, this.collectionName, userId);\n      await updateDoc(docRef, {\n        followerCount: increment(delta),\n      });\n    } catch (error) {\n      console.error(`Error updating follower count for user ${userId}:`, error);\n      throw new Error(\n        `Failed to update follower count: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Update following count\n   */\n  async updateFollowingCount(userId: string, delta: number): Promise<void> {\n    try {\n      const docRef = doc(db, this.collectionName, userId);\n      await updateDoc(docRef, {\n        followingCount: increment(delta),\n      });\n    } catch (error) {\n      console.error(\n        `Error updating following count for user ${userId}:`,\n        error\n      );\n      throw new Error(\n        `Failed to update following count: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Check if user exists\n   */\n  async exists(userId: string): Promise<boolean> {\n    try {\n      const docRef = doc(db, this.collectionName, userId);\n      const docSnap = await getDoc(docRef);\n      return docSnap.exists();\n    } catch (error) {\n      console.error(`Error checking if user ${userId} exists:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Check if username is available\n   */\n  async isUsernameAvailable(username: string): Promise<boolean> {\n    try {\n      const user = await this.findByUsername(username);\n      return user === null;\n    } catch (error) {\n      console.error(\n        `Error checking username availability for ${username}:`,\n        error\n      );\n      return false;\n    }\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/instrumentation-client.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/instrumentation.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/__tests__/api-simple.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/__tests__/errorHandler.test.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ErrorSeverity' is defined but never used.",
        "line": 13,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 16
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Tests for error handler utility\n */\n\nimport {\n  handleError,\n  createApiError,\n  isPermissionError,\n  isNotFoundError,\n  isAuthError,\n  isNetworkError,\n  withNullOnError,\n  ErrorSeverity,\n} from '../errorHandler';\n\ndescribe('errorHandler', () => {\n  describe('createApiError', () => {\n    it('creates error from Firebase auth error', () => {\n      const firebaseError = {\n        code: 'auth/invalid-email',\n        message: 'The email address is badly formatted.',\n      };\n\n      const apiError = createApiError(firebaseError, 'Login');\n\n      expect(apiError.code).toBe('auth/invalid-email');\n      expect(apiError.message).toContain('Login');\n      expect(apiError.userMessage).toBe('Please enter a valid email address.');\n    });\n\n    it('creates error from Firestore error', () => {\n      const firestoreError = {\n        code: 'permission-denied',\n        message: 'Missing or insufficient permissions.',\n      };\n\n      const apiError = createApiError(firestoreError, 'Fetch user');\n\n      expect(apiError.code).toBe('permission-denied');\n      expect(apiError.userMessage).toBe(\"You don't have permission to perform this action.\");\n    });\n\n    it('creates error from generic Error', () => {\n      const error = new Error('Something went wrong');\n\n      const apiError = createApiError(error, 'Operation');\n\n      expect(apiError.code).toBe('unknown');\n      expect(apiError.message).toContain('Operation');\n      expect(apiError.userMessage).toBe('An error occurred. Please try again.');\n    });\n\n    it('uses default message when error code is unknown', () => {\n      const error = { code: 'unknown-error', message: 'Unknown' };\n      const defaultMessage = 'Custom default message';\n\n      const apiError = createApiError(error, 'Operation', defaultMessage);\n\n      expect(apiError.userMessage).toBe(defaultMessage);\n    });\n  });\n\n  describe('handleError', () => {\n    it('handles error and returns ApiError', () => {\n      const error = {\n        code: 'auth/user-not-found',\n        message: 'User not found',\n      };\n\n      const apiError = handleError(error, 'Login', {\n        silent: true, // Don't log during tests\n      });\n\n      expect(apiError.code).toBe('auth/user-not-found');\n      expect(apiError.userMessage).toContain('No account found');\n    });\n\n    it('respects custom default message', () => {\n      const error = new Error('Unknown error');\n\n      const apiError = handleError(error, 'Custom operation', {\n        defaultMessage: 'Custom error message',\n        silent: true,\n      });\n\n      expect(apiError.userMessage).toBe('Custom error message');\n    });\n  });\n\n  describe('isPermissionError', () => {\n    it('detects permission-denied error', () => {\n      const error = { code: 'permission-denied' };\n      expect(isPermissionError(error)).toBe(true);\n    });\n\n    it('detects auth/unauthorized error', () => {\n      const error = { code: 'auth/unauthorized' };\n      expect(isPermissionError(error)).toBe(true);\n    });\n\n    it('returns false for other errors', () => {\n      const error = { code: 'not-found' };\n      expect(isPermissionError(error)).toBe(false);\n    });\n  });\n\n  describe('isNotFoundError', () => {\n    it('detects not-found error', () => {\n      const error = { code: 'not-found' };\n      expect(isNotFoundError(error)).toBe(true);\n    });\n\n    it('detects storage/object-not-found error', () => {\n      const error = { code: 'storage/object-not-found' };\n      expect(isNotFoundError(error)).toBe(true);\n    });\n\n    it('returns false for other errors', () => {\n      const error = { code: 'permission-denied' };\n      expect(isNotFoundError(error)).toBe(false);\n    });\n  });\n\n  describe('isAuthError', () => {\n    it('detects unauthenticated error', () => {\n      const error = { code: 'unauthenticated' };\n      expect(isAuthError(error)).toBe(true);\n    });\n\n    it('detects auth/ prefixed errors', () => {\n      const error = { code: 'auth/invalid-credential' };\n      expect(isAuthError(error)).toBe(true);\n    });\n\n    it('returns false for other errors', () => {\n      const error = { code: 'not-found' };\n      expect(isAuthError(error)).toBe(false);\n    });\n  });\n\n  describe('isNetworkError', () => {\n    it('detects unavailable error', () => {\n      const error = { code: 'unavailable' };\n      expect(isNetworkError(error)).toBe(true);\n    });\n\n    it('detects network-related message', () => {\n      const error = new Error('Network connection failed');\n      expect(isNetworkError(error)).toBe(true);\n    });\n\n    it('returns false for other errors', () => {\n      const error = { code: 'not-found' };\n      expect(isNetworkError(error)).toBe(false);\n    });\n  });\n\n  describe('withNullOnError', () => {\n    it('returns result on success', async () => {\n      const operation = async () => 'success';\n\n      const result = await withNullOnError(operation, 'Test', {\n        silent: true,\n      });\n\n      expect(result).toBe('success');\n    });\n\n    it('returns null on permission error when configured', async () => {\n      const operation = async () => {\n        throw { code: 'permission-denied' };\n      };\n\n      const result = await withNullOnError(operation, 'Test', {\n        nullOnPermissionDenied: true,\n        silent: true,\n      });\n\n      expect(result).toBeNull();\n    });\n\n    it('returns null on not-found error when configured', async () => {\n      const operation = async () => {\n        throw { code: 'not-found' };\n      };\n\n      const result = await withNullOnError(operation, 'Test', {\n        nullOnNotFound: true,\n        silent: true,\n      });\n\n      expect(result).toBeNull();\n    });\n\n    it('throws on other errors', async () => {\n      const operation = async () => {\n        throw new Error('Test error');\n      };\n\n      await expect(\n        withNullOnError(operation, 'Test', {\n          silent: true,\n        })\n      ).rejects.toThrow();\n    });\n\n    it('does not return null when not configured', async () => {\n      const operation = async () => {\n        throw { code: 'permission-denied' };\n      };\n\n      await expect(\n        withNullOnError(operation, 'Test', {\n          silent: true,\n        })\n      ).rejects.toThrow();\n    });\n  });\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/__tests__/imageUpload.test.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 50,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 50,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1689, 1692], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1689, 1692], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 54,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 54,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1837, 1840], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1837, 1840], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 159,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 159,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5366, 5369], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5366, 5369], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 163,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 163,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5517, 5520], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5517, 5520], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { uploadImage, uploadImages, deleteImage, deleteImages, compressImage } from '../imageUpload';\nimport { storage, auth } from '../firebase';\nimport { ref, uploadBytes, getDownloadURL, deleteObject } from 'firebase/storage';\n\n// Mock Firebase modules\njest.mock('../firebase', () => ({\n  storage: {},\n  auth: {\n    currentUser: {\n      uid: 'test-user-123'\n    }\n  }\n}));\n\njest.mock('firebase/storage', () => ({\n  ref: jest.fn(),\n  uploadBytes: jest.fn(),\n  getDownloadURL: jest.fn(),\n  deleteObject: jest.fn()\n}));\n\ndescribe('imageUpload utilities', () => {\n  const mockFile = new File(['test content'], 'test-image.jpg', { type: 'image/jpeg' });\n  const mockStorageRef = { fullPath: 'session-images/test-user-123/test-image.jpg' };\n  const mockDownloadURL = 'https://firebasestorage.googleapis.com/test-image.jpg';\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    (ref as jest.Mock).mockReturnValue(mockStorageRef);\n    (uploadBytes as jest.Mock).mockResolvedValue({});\n    (getDownloadURL as jest.Mock).mockResolvedValue(mockDownloadURL);\n    (deleteObject as jest.Mock).mockResolvedValue(undefined);\n  });\n\n  describe('uploadImage', () => {\n    it('should upload a valid image file', async () => {\n      const result = await uploadImage(mockFile);\n\n      expect(result).toEqual({\n        url: mockDownloadURL,\n        path: mockStorageRef.fullPath\n      });\n      expect(ref).toHaveBeenCalled();\n      expect(uploadBytes).toHaveBeenCalledWith(mockStorageRef, mockFile);\n      expect(getDownloadURL).toHaveBeenCalledWith(mockStorageRef);\n    });\n\n    it('should throw error if user is not authenticated', async () => {\n      const originalUser = auth.currentUser;\n      (auth as any).currentUser = null;\n\n      await expect(uploadImage(mockFile)).rejects.toThrow('User must be authenticated to upload images');\n\n      (auth as any).currentUser = originalUser;\n    });\n\n    it('should throw error for non-image files', async () => {\n      const textFile = new File(['text content'], 'test.txt', { type: 'text/plain' });\n\n      await expect(uploadImage(textFile)).rejects.toThrow('File must be an image');\n    });\n\n    it('should throw error for files larger than 5MB', async () => {\n      const largeFile = new File(['x'.repeat(6 * 1024 * 1024)], 'large.jpg', { type: 'image/jpeg' });\n\n      await expect(uploadImage(largeFile)).rejects.toThrow('Image must be less than 5MB');\n    });\n\n    it('should use custom folder path', async () => {\n      await uploadImage(mockFile, 'custom-folder');\n\n      expect(ref).toHaveBeenCalledWith(\n        storage,\n        expect.stringContaining('custom-folder/test-user-123/')\n      );\n    });\n\n    it('should generate unique filenames', async () => {\n      await uploadImage(mockFile);\n      const firstCall = (ref as jest.Mock).mock.calls[0][1];\n\n      jest.clearAllMocks();\n      (ref as jest.Mock).mockReturnValue(mockStorageRef);\n\n      await uploadImage(mockFile);\n      const secondCall = (ref as jest.Mock).mock.calls[0][1];\n\n      expect(firstCall).not.toBe(secondCall);\n    });\n\n    it('should handle upload errors gracefully', async () => {\n      (uploadBytes as jest.Mock).mockRejectedValue(new Error('Network error'));\n\n      await expect(uploadImage(mockFile)).rejects.toThrow('Failed to upload image');\n    });\n  });\n\n  describe('uploadImages', () => {\n    it('should upload multiple images', async () => {\n      const files = [\n        new File(['content1'], 'image1.jpg', { type: 'image/jpeg' }),\n        new File(['content2'], 'image2.jpg', { type: 'image/jpeg' }),\n        new File(['content3'], 'image3.jpg', { type: 'image/jpeg' })\n      ];\n\n      const results = await uploadImages(files);\n\n      expect(results).toHaveLength(3);\n      expect(uploadBytes).toHaveBeenCalledTimes(3);\n      expect(results.every(r => r.url === mockDownloadURL)).toBe(true);\n    });\n\n    it('should throw error for more than 3 images', async () => {\n      const files = [\n        new File(['1'], '1.jpg', { type: 'image/jpeg' }),\n        new File(['2'], '2.jpg', { type: 'image/jpeg' }),\n        new File(['3'], '3.jpg', { type: 'image/jpeg' }),\n        new File(['4'], '4.jpg', { type: 'image/jpeg' })\n      ];\n\n      await expect(uploadImages(files)).rejects.toThrow('Maximum 3 images allowed');\n    });\n\n    it('should handle empty array', async () => {\n      const results = await uploadImages([]);\n\n      expect(results).toHaveLength(0);\n      expect(uploadBytes).not.toHaveBeenCalled();\n    });\n\n    it('should upload all images in parallel', async () => {\n      const files = [\n        new File(['1'], '1.jpg', { type: 'image/jpeg' }),\n        new File(['2'], '2.jpg', { type: 'image/jpeg' })\n      ];\n\n      const uploadPromise = uploadImages(files);\n\n      // All uploads should be initiated before any completes\n      await Promise.resolve(); // Let promises start\n      expect(uploadBytes).toHaveBeenCalledTimes(2);\n\n      await uploadPromise;\n    });\n  });\n\n  describe('deleteImage', () => {\n    it('should delete an image by path', async () => {\n      const path = 'session-images/test-user-123/test-image.jpg';\n\n      await deleteImage(path);\n\n      expect(ref).toHaveBeenCalledWith(storage, path);\n      expect(deleteObject).toHaveBeenCalledWith(mockStorageRef);\n    });\n\n    it('should throw error if user is not authenticated', async () => {\n      const originalUser = auth.currentUser;\n      (auth as any).currentUser = null;\n\n      await expect(deleteImage('test-path')).rejects.toThrow('User must be authenticated to delete images');\n\n      (auth as any).currentUser = originalUser;\n    });\n\n    it('should handle delete errors gracefully', async () => {\n      (deleteObject as jest.Mock).mockRejectedValue(new Error('File not found'));\n\n      await expect(deleteImage('test-path')).rejects.toThrow('Failed to delete image');\n    });\n  });\n\n  describe('deleteImages', () => {\n    it('should delete multiple images', async () => {\n      const paths = [\n        'session-images/user/image1.jpg',\n        'session-images/user/image2.jpg',\n        'session-images/user/image3.jpg'\n      ];\n\n      await deleteImages(paths);\n\n      expect(deleteObject).toHaveBeenCalledTimes(3);\n    });\n\n    it('should handle empty array', async () => {\n      await deleteImages([]);\n\n      expect(deleteObject).not.toHaveBeenCalled();\n    });\n\n    it('should delete all images in parallel', async () => {\n      const paths = ['path1.jpg', 'path2.jpg'];\n\n      const deletePromise = deleteImages(paths);\n\n      await Promise.resolve();\n      expect(deleteObject).toHaveBeenCalledTimes(2);\n\n      await deletePromise;\n    });\n  });\n\n  describe('compressImage', () => {\n    it('should return the original file without compression', async () => {\n      const file = new File(['content'], 'test.jpg', { type: 'image/jpeg' });\n\n      const result = await compressImage(file);\n\n      expect(result).toBe(file);\n      expect(result.name).toBe('test.jpg');\n      expect(result.type).toBe('image/jpeg');\n    });\n\n    it('should accept optional parameters without using them', async () => {\n      const file = new File(['content'], 'test.jpg', { type: 'image/jpeg' });\n\n      const result = await compressImage(file, 800, 800, 0.5);\n\n      expect(result).toBe(file);\n    });\n  });\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/__tests__/rateLimit.test.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 173,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 173,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Rate Limiting Tests\n */\n\nimport {\n  checkRateLimit,\n  withRateLimit,\n  getRateLimitInfo,\n  resetRateLimit,\n  RateLimitError,\n  formatRetryAfter,\n  rateLimiter,\n  RATE_LIMITS,\n} from '../rateLimit';\n\ndescribe('Rate Limiting', () => {\n  const testUserId = 'test-user-123';\n\n  beforeEach(() => {\n    // Reset all rate limits before each test\n    jest.clearAllMocks();\n  });\n\n  afterAll(() => {\n    // Clean up the rate limiter\n    rateLimiter.destroy();\n  });\n\n  describe('checkRateLimit', () => {\n    it('should allow requests within rate limit', () => {\n      expect(() => {\n        checkRateLimit(testUserId, 'AUTH_LOGIN');\n      }).not.toThrow();\n    });\n\n    it('should throw RateLimitError when limit exceeded', () => {\n      const userId = testUserId + '-exceed';\n      const limit = RATE_LIMITS.AUTH_LOGIN.maxRequests;\n\n      // Make requests up to the limit\n      for (let i = 0; i < limit; i++) {\n        checkRateLimit(userId, 'AUTH_LOGIN');\n      }\n\n      // Next request should throw\n      expect(() => {\n        checkRateLimit(userId, 'AUTH_LOGIN');\n      }).toThrow(RateLimitError);\n    });\n\n    it('should track different operations separately', () => {\n      const userId = testUserId + '-separate';\n      // Use up login limit\n      const loginLimit = RATE_LIMITS.AUTH_LOGIN.maxRequests;\n      for (let i = 0; i < loginLimit; i++) {\n        checkRateLimit(userId, 'AUTH_LOGIN');\n      }\n\n      // Signup should still work\n      expect(() => {\n        checkRateLimit(userId, 'AUTH_SIGNUP');\n      }).not.toThrow();\n    });\n\n    it('should track different users separately', () => {\n      const user1 = 'user-1';\n      const user2 = 'user-2';\n      const limit = RATE_LIMITS.FOLLOW.maxRequests;\n\n      // Use up limit for user1\n      for (let i = 0; i < limit; i++) {\n        checkRateLimit(user1, 'FOLLOW');\n      }\n\n      // User1 should be rate limited\n      expect(() => {\n        checkRateLimit(user1, 'FOLLOW');\n      }).toThrow(RateLimitError);\n\n      // User2 should still work\n      expect(() => {\n        checkRateLimit(user2, 'FOLLOW');\n      }).not.toThrow();\n    });\n  });\n\n  describe('RateLimitError', () => {\n    it('should include retry information', () => {\n      const limit = RATE_LIMITS.SUPPORT.maxRequests;\n\n      for (let i = 0; i < limit; i++) {\n        checkRateLimit(testUserId, 'SUPPORT');\n      }\n\n      try {\n        checkRateLimit(testUserId, 'SUPPORT');\n        fail('Should have thrown RateLimitError');\n      } catch (error) {\n        expect(error).toBeInstanceOf(RateLimitError);\n        if (error instanceof RateLimitError) {\n          expect(error.retryAfter).toBeGreaterThan(0);\n          expect(error.limit).toBe(limit);\n          expect(error.message).toContain('slow down');\n        }\n      }\n    });\n\n    it('should apply exponential backoff for repeated violations', () => {\n      const limit = RATE_LIMITS.COMMENT.maxRequests;\n\n      // First violation\n      for (let i = 0; i <= limit; i++) {\n        try {\n          checkRateLimit(testUserId + '-backoff', 'COMMENT');\n        } catch (error) {\n          if (error instanceof RateLimitError) {\n            const firstRetryAfter = error.retryAfter;\n\n            // Try again (second violation)\n            try {\n              checkRateLimit(testUserId + '-backoff', 'COMMENT');\n            } catch (error2) {\n              if (error2 instanceof RateLimitError) {\n                // Second violation should have longer retry time\n                expect(error2.retryAfter).toBeGreaterThanOrEqual(\n                  firstRetryAfter\n                );\n              }\n            }\n          }\n        }\n      }\n    });\n  });\n\n  describe('withRateLimit', () => {\n    it('should execute function if within rate limit', async () => {\n      const mockFn = jest.fn().mockResolvedValue('success');\n\n      const result = await withRateLimit(testUserId, 'PROJECT_CREATE', mockFn);\n\n      expect(result).toBe('success');\n      expect(mockFn).toHaveBeenCalledTimes(1);\n    });\n\n    it('should throw RateLimitError if limit exceeded', async () => {\n      const mockFn = jest.fn().mockResolvedValue('success');\n      const limit = RATE_LIMITS.PROJECT_CREATE.maxRequests;\n\n      // Use up the limit\n      for (let i = 0; i < limit; i++) {\n        await withRateLimit(testUserId + '-fn', 'PROJECT_CREATE', mockFn);\n      }\n\n      // Next call should throw\n      await expect(\n        withRateLimit(testUserId + '-fn', 'PROJECT_CREATE', mockFn)\n      ).rejects.toThrow(RateLimitError);\n    });\n\n    it('should not execute function if rate limited', async () => {\n      const mockFn = jest.fn().mockResolvedValue('success');\n      const limit = RATE_LIMITS.TASK_CREATE.maxRequests;\n\n      // Use up the limit\n      for (let i = 0; i < limit; i++) {\n        checkRateLimit(testUserId + '-noexec', 'TASK_CREATE');\n      }\n\n      // Function should not be called\n      try {\n        await withRateLimit(testUserId + '-noexec', 'TASK_CREATE', mockFn);\n      } catch (error) {\n        // Expected to throw\n      }\n\n      expect(mockFn).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('getRateLimitInfo', () => {\n    it('should return correct info for unused limit', () => {\n      const info = getRateLimitInfo(testUserId + '-info', 'SESSION_CREATE');\n\n      expect(info.remaining).toBe(RATE_LIMITS.SESSION_CREATE.maxRequests);\n      expect(info.limit).toBe(RATE_LIMITS.SESSION_CREATE.maxRequests);\n      expect(info.resetTime).toBeNull();\n      expect(info.violations).toBe(0);\n    });\n\n    it('should return correct remaining count', () => {\n      const userId = testUserId + '-remaining';\n      const limit = RATE_LIMITS.FOLLOW.maxRequests;\n\n      // Use 3 requests\n      checkRateLimit(userId, 'FOLLOW');\n      checkRateLimit(userId, 'FOLLOW');\n      checkRateLimit(userId, 'FOLLOW');\n\n      const info = getRateLimitInfo(userId, 'FOLLOW');\n\n      expect(info.remaining).toBe(limit - 3);\n      expect(info.limit).toBe(limit);\n    });\n\n    it('should return reset time when limit is active', () => {\n      const userId = testUserId + '-reset';\n\n      checkRateLimit(userId, 'SUPPORT');\n\n      const info = getRateLimitInfo(userId, 'SUPPORT');\n\n      expect(info.resetTime).toBeGreaterThan(0);\n    });\n  });\n\n  describe('resetRateLimit', () => {\n    it('should reset rate limit for user and operation', () => {\n      const userId = testUserId + '-reset-test';\n      const limit = RATE_LIMITS.FILE_UPLOAD.maxRequests;\n\n      // Use up the limit\n      for (let i = 0; i < limit; i++) {\n        checkRateLimit(userId, 'FILE_UPLOAD');\n      }\n\n      // Should be rate limited\n      expect(() => {\n        checkRateLimit(userId, 'FILE_UPLOAD');\n      }).toThrow(RateLimitError);\n\n      // Reset\n      resetRateLimit(userId, 'FILE_UPLOAD');\n\n      // Should work again\n      expect(() => {\n        checkRateLimit(userId, 'FILE_UPLOAD');\n      }).not.toThrow();\n    });\n  });\n\n  describe('formatRetryAfter', () => {\n    it('should format seconds correctly', () => {\n      expect(formatRetryAfter(1)).toBe('1 second');\n      expect(formatRetryAfter(30)).toBe('30 seconds');\n      expect(formatRetryAfter(59)).toBe('59 seconds');\n    });\n\n    it('should format minutes correctly', () => {\n      expect(formatRetryAfter(60)).toBe('1 minute');\n      expect(formatRetryAfter(90)).toBe('2 minutes');\n      expect(formatRetryAfter(300)).toBe('5 minutes');\n    });\n  });\n\n  describe('RATE_LIMITS configuration', () => {\n    it('should have reasonable limits for authentication', () => {\n      expect(RATE_LIMITS.AUTH_LOGIN.maxRequests).toBeLessThanOrEqual(10);\n      expect(RATE_LIMITS.AUTH_LOGIN.windowMs).toBeGreaterThanOrEqual(60000);\n\n      expect(RATE_LIMITS.AUTH_SIGNUP.maxRequests).toBeLessThanOrEqual(5);\n      expect(RATE_LIMITS.AUTH_SIGNUP.windowMs).toBeGreaterThanOrEqual(300000);\n    });\n\n    it('should have reasonable limits for social operations', () => {\n      expect(RATE_LIMITS.FOLLOW.maxRequests).toBeGreaterThan(10);\n      expect(RATE_LIMITS.SUPPORT.maxRequests).toBeGreaterThan(10);\n      expect(RATE_LIMITS.COMMENT.maxRequests).toBeGreaterThan(5);\n    });\n\n    it('should have reasonable limits for content creation', () => {\n      expect(RATE_LIMITS.SESSION_CREATE.maxRequests).toBeGreaterThan(10);\n      expect(RATE_LIMITS.PROJECT_CREATE.maxRequests).toBeGreaterThan(5);\n      expect(RATE_LIMITS.TASK_CREATE.maxRequests).toBeGreaterThan(10);\n    });\n\n    it('should have user-friendly error messages', () => {\n      Object.values(RATE_LIMITS).forEach(config => {\n        expect(config.message).toBeTruthy();\n        expect(config.message.length).toBeGreaterThan(10);\n      });\n    });\n  });\n\n  describe('Time window expiration', () => {\n    it('should reset counter after time window expires', async () => {\n      const userId = testUserId + '-expire';\n\n      // Make a request\n      checkRateLimit(userId, 'FOLLOW');\n\n      const info1 = getRateLimitInfo(userId, 'FOLLOW');\n      expect(info1.remaining).toBe(RATE_LIMITS.FOLLOW.maxRequests - 1);\n\n      // Wait for window to expire (simulate by resetting)\n      resetRateLimit(userId, 'FOLLOW');\n\n      const info2 = getRateLimitInfo(userId, 'FOLLOW');\n      expect(info2.remaining).toBe(RATE_LIMITS.FOLLOW.maxRequests);\n    }, 10000);\n  });\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 203,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 203,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5326, 5329], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5326, 5329], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import axios, { AxiosInstance, AxiosResponse } from 'axios';\nimport {\n  AuthResponse,\n  LoginCredentials,\n  SignupCredentials,\n  AuthUser,\n  Project,\n  ProjectStats,\n  CreateProjectData,\n  UpdateProjectData,\n  ActiveTimer,\n  Session,\n  CreateSessionData,\n  SessionFormData,\n  SessionFilters,\n  SessionSort,\n  SessionListResponse,\n  UserProfile,\n  UserStats,\n  ActivityData,\n  WeeklyActivity,\n  ProjectBreakdown,\n  PrivacySettings,\n  UserSearchResult,\n  SuggestedUser\n} from '@/types';\n\n// Create axios instance\nconst api: AxiosInstance = axios.create({\n  baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Token management (in memory)\nlet authToken: string | null = null;\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    if (authToken) {\n      config.headers.Authorization = `Bearer ${authToken}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle 401 errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Clear token and redirect to login\n      authToken = null;\n      if (typeof window !== 'undefined') {\n        window.location.href = '/login';\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Auth API methods\nexport const authApi = {\n  // Set token for authenticated requests\n  setToken: (token: string) => {\n    authToken = token;\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('auth_token', token);\n    }\n  },\n\n  // Clear token\n  clearToken: () => {\n    authToken = null;\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem('auth_token');\n    }\n  },\n\n  // Get current token\n  getToken: () => {\n    if (authToken) return authToken;\n    if (typeof window !== 'undefined') {\n      return localStorage.getItem('auth_token');\n    }\n    return null;\n  },\n\n  // Login\n  login: async (credentials: LoginCredentials): Promise<AuthResponse> => {\n    const response: AxiosResponse<AuthResponse> = await api.post('/auth/login', credentials);\n    return response.data;\n  },\n\n  // Signup\n  signup: async (credentials: SignupCredentials): Promise<AuthResponse> => {\n    const response: AxiosResponse<AuthResponse> = await api.post('/auth/signup', credentials);\n    return response.data;\n  },\n\n  // Logout\n  logout: async (): Promise<void> => {\n    await api.post('/auth/logout');\n    authToken = null;\n  },\n\n  // Get current user\n  getCurrentUser: async (): Promise<AuthUser> => {\n    const response: AxiosResponse<AuthUser> = await api.get('/auth/me');\n    return response.data;\n  },\n\n  // Verify token\n  verifyToken: async (): Promise<boolean> => {\n    try {\n      await api.get('/auth/verify');\n      return true;\n    } catch {\n      return false;\n    }\n  },\n};\n\n// Project API methods\nexport const projectApi = {\n  // Get all user's projects\n  getProjects: async (): Promise<Project[]> => {\n    const response: AxiosResponse<Project[]> = await api.get('/projects');\n    return response.data;\n  },\n\n  // Get single project by ID\n  getProject: async (id: string): Promise<Project> => {\n    const response: AxiosResponse<Project> = await api.get(`/projects/${id}`);\n    return response.data;\n  },\n\n  // Create new project\n  createProject: async (data: CreateProjectData): Promise<Project> => {\n    const response: AxiosResponse<Project> = await api.post('/projects', data);\n    return response.data;\n  },\n\n  // Update project\n  updateProject: async (id: string, data: UpdateProjectData): Promise<Project> => {\n    const response: AxiosResponse<Project> = await api.put(`/projects/${id}`, data);\n    return response.data;\n  },\n\n  // Delete project\n  deleteProject: async (id: string): Promise<void> => {\n    await api.delete(`/projects/${id}`);\n  },\n\n  // Get project statistics\n  getProjectStats: async (id: string): Promise<ProjectStats> => {\n    const response: AxiosResponse<ProjectStats> = await api.get(`/projects/${id}/stats`);\n    return response.data;\n  },\n\n  // Archive project\n  archiveProject: async (id: string): Promise<Project> => {\n    const response: AxiosResponse<Project> = await api.patch(`/projects/${id}/archive`);\n    return response.data;\n  },\n\n  // Restore project\n  restoreProject: async (id: string): Promise<Project> => {\n    const response: AxiosResponse<Project> = await api.patch(`/projects/${id}/restore`);\n    return response.data;\n  },\n};\n\n// Timer API methods\nexport const timerApi = {\n  // Start a new timer session\n  startSession: async (projectId: string): Promise<ActiveTimer> => {\n    const response: AxiosResponse<ActiveTimer> = await api.post('/sessions/start', {\n      projectId,\n    });\n    return response.data;\n  },\n\n  // Update active timer (for pause/resume)\n  updateActiveTimer: async (timerId: string, pausedDuration: number): Promise<ActiveTimer> => {\n    const response: AxiosResponse<ActiveTimer> = await api.put(`/sessions/active/${timerId}`, {\n      pausedDuration,\n    });\n    return response.data;\n  },\n\n  // Get active timer\n  getActiveTimer: async (): Promise<ActiveTimer | null> => {\n    try {\n      const response: AxiosResponse<ActiveTimer> = await api.get('/sessions/active');\n      return response.data;\n    } catch (error: any) {\n      if (error.response?.status === 404) {\n        return null; // No active timer\n      }\n      throw error;\n    }\n  },\n\n  // Finish timer and create session\n  finishSession: async (timerId: string, sessionData: CreateSessionData): Promise<Session> => {\n    const response: AxiosResponse<Session> = await api.post(`/sessions/finish/${timerId}`, sessionData);\n    return response.data;\n  },\n\n  // Cancel active timer\n  cancelActiveTimer: async (timerId: string): Promise<void> => {\n    await api.delete(`/sessions/active/${timerId}`);\n  },\n};\n\n// Session API methods\nexport const sessionApi = {\n  // Create a new session (manual entry)\n  createSession: async (sessionData: SessionFormData): Promise<Session> => {\n    const response: AxiosResponse<Session> = await api.post('/sessions', sessionData);\n    return response.data;\n  },\n\n  // Get user's sessions with filtering and pagination\n  getSessions: async (\n    page: number = 1,\n    limit: number = 20,\n    filters: SessionFilters = {},\n    sort: SessionSort = { field: 'startTime', direction: 'desc' }\n  ): Promise<SessionListResponse> => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString(),\n      sortField: sort.field,\n      sortDirection: sort.direction,\n      ...(filters.projectId && { projectId: filters.projectId }),\n      ...(filters.dateFrom && { dateFrom: filters.dateFrom.toISOString() }),\n      ...(filters.dateTo && { dateTo: filters.dateTo.toISOString() }),\n      ...(filters.tags && { tags: filters.tags.join(',') }),\n      ...(filters.visibility && { visibility: filters.visibility }),\n      ...(filters.search && { search: filters.search }),\n    });\n\n    const response: AxiosResponse<SessionListResponse> = await api.get(`/sessions?${params}`);\n    return response.data;\n  },\n\n  // Get single session by ID\n  getSession: async (id: string): Promise<Session> => {\n    const response: AxiosResponse<Session> = await api.get(`/sessions/${id}`);\n    return response.data;\n  },\n\n  // Update session\n  updateSession: async (id: string, sessionData: Partial<SessionFormData>): Promise<Session> => {\n    const response: AxiosResponse<Session> = await api.put(`/sessions/${id}`, sessionData);\n    return response.data;\n  },\n\n  // Delete session\n  deleteSession: async (id: string): Promise<void> => {\n    await api.delete(`/sessions/${id}`);\n  },\n\n  // Archive session\n  archiveSession: async (id: string): Promise<Session> => {\n    const response: AxiosResponse<Session> = await api.patch(`/sessions/${id}/archive`);\n    return response.data;\n  },\n\n  // Unarchive session\n  unarchiveSession: async (id: string): Promise<Session> => {\n    const response: AxiosResponse<Session> = await api.patch(`/sessions/${id}/unarchive`);\n    return response.data;\n  },\n};\n\n// User API methods\nexport const userApi = {\n  // Get user profile by username\n  getUserProfile: async (username: string): Promise<UserProfile> => {\n    const response: AxiosResponse<UserProfile> = await api.get(`/users/${username}`);\n    return response.data;\n  },\n\n  // Update user profile\n  updateProfile: async (data: Partial<{\n    name: string;\n    bio: string;\n    location: string;\n    profilePicture: string;\n  }>): Promise<UserProfile> => {\n    const response: AxiosResponse<UserProfile> = await api.put('/users/profile', data);\n    return response.data;\n  },\n\n  // Get user statistics\n  getUserStats: async (userId: string): Promise<UserStats> => {\n    const response: AxiosResponse<UserStats> = await api.get(`/users/${userId}/stats`);\n    return response.data;\n  },\n\n  // Get activity data for calendar heatmap\n  getActivityData: async (userId: string, year: number): Promise<ActivityData[]> => {\n    const response: AxiosResponse<ActivityData[]> = await api.get(`/users/${userId}/activity?year=${year}`);\n    return response.data;\n  },\n\n  // Get weekly activity data\n  getWeeklyActivity: async (userId: string, weeks: number = 12): Promise<WeeklyActivity[]> => {\n    const response: AxiosResponse<WeeklyActivity[]> = await api.get(`/users/${userId}/weekly-activity?weeks=${weeks}`);\n    return response.data;\n  },\n\n  // Get project breakdown\n  getProjectBreakdown: async (userId: string): Promise<ProjectBreakdown[]> => {\n    const response: AxiosResponse<ProjectBreakdown[]> = await api.get(`/users/${userId}/project-breakdown`);\n    return response.data;\n  },\n\n  // Follow user\n  followUser: async (userId: string): Promise<void> => {\n    await api.post(`/users/${userId}/follow`);\n  },\n\n  // Unfollow user\n  unfollowUser: async (userId: string): Promise<void> => {\n    await api.delete(`/users/${userId}/follow`);\n  },\n\n  // Get followers\n  getFollowers: async (userId: string, page: number = 1, limit: number = 20): Promise<{\n    users: UserProfile[];\n    totalCount: number;\n    hasMore: boolean;\n  }> => {\n    const response: AxiosResponse<{\n      users: UserProfile[];\n      totalCount: number;\n      hasMore: boolean;\n    }> = await api.get(`/users/${userId}/followers?page=${page}&limit=${limit}`);\n    return response.data;\n  },\n\n  // Get following\n  getFollowing: async (userId: string, page: number = 1, limit: number = 20): Promise<{\n    users: UserProfile[];\n    totalCount: number;\n    hasMore: boolean;\n  }> => {\n    const response: AxiosResponse<{\n      users: UserProfile[];\n      totalCount: number;\n      hasMore: boolean;\n    }> = await api.get(`/users/${userId}/following?page=${page}&limit=${limit}`);\n    return response.data;\n  },\n\n  // Search users\n  searchUsers: async (query: string, page: number = 1, limit: number = 20): Promise<{\n    users: UserSearchResult[];\n    totalCount: number;\n    hasMore: boolean;\n  }> => {\n    const response: AxiosResponse<{\n      users: UserSearchResult[];\n      totalCount: number;\n      hasMore: boolean;\n    }> = await api.get(`/users/search?q=${encodeURIComponent(query)}&page=${page}&limit=${limit}`);\n    return response.data;\n  },\n\n  // Get suggested users\n  getSuggestedUsers: async (limit: number = 10): Promise<SuggestedUser[]> => {\n    const response: AxiosResponse<SuggestedUser[]> = await api.get(`/users/suggested?limit=${limit}`);\n    return response.data;\n  },\n\n  // Get privacy settings\n  getPrivacySettings: async (): Promise<PrivacySettings> => {\n    const response: AxiosResponse<PrivacySettings> = await api.get('/users/privacy-settings');\n    return response.data;\n  },\n\n  // Update privacy settings\n  updatePrivacySettings: async (settings: Partial<PrivacySettings>): Promise<PrivacySettings> => {\n    const response: AxiosResponse<PrivacySettings> = await api.put('/users/privacy-settings', settings);\n    return response.data;\n  },\n\n  // Block user\n  blockUser: async (userId: string): Promise<void> => {\n    await api.post(`/users/${userId}/block`);\n  },\n\n  // Unblock user\n  unblockUser: async (userId: string): Promise<void> => {\n    await api.delete(`/users/${userId}/block`);\n  },\n};\n\n// ============================================================================\n// FIREBASE API RE-EXPORTS\n// ============================================================================\n// Re-export Firebase API modules for backward compatibility.\n// The @/lib/api path alias resolves to this file, so we re-export the\n// Firebase modules here so components can import from '@/lib/api'.\n//\n// Import the modules from /api/index.ts (Firebase API)\nexport {\n  // Auth Module\n  firebaseAuthApi,\n  // User Module\n  firebaseUserApi,\n  // Projects Module\n  firebaseProjectApi,\n  // Sessions Module\n  firebaseSessionApi,\n  populateSessionsWithDetails,\n  // Posts Module (Legacy - sessions ARE posts)\n  firebasePostApi,\n  // Social Modules\n  updateSocialGraph,\n  fetchUserDataForSocialContext,\n  buildCommentUserDetails,\n  firebaseCommentApi,\n  // Challenges Module\n  firebaseChallengeApi,\n  // Streaks Module\n  firebaseStreakApi,\n  // Achievements Module\n  firebaseAchievementApi,\n  ACHIEVEMENT_DEFINITIONS,\n  // Notifications Module\n  firebaseNotificationApi,\n  challengeNotifications,\n  // Shared Utilities\n  convertTimestamp,\n  convertToTimestamp,\n  removeUndefinedFields,\n  getErrorMessage,\n  PRIVATE_USER_FALLBACK_NAME,\n  PRIVATE_USER_USERNAME_PREFIX,\n  // Combined API object\n  firebaseApi,\n  // Activity API\n  firebaseActivityApi,\n  // Types\n  type AuthResponse,\n  type LoginCredentials,\n  type SignupCredentials,\n  type AuthUser,\n  type User,\n  type UserProfile,\n  type UserStats,\n  type ActivityData,\n  type WeeklyActivity,\n  type ProjectBreakdown,\n  type PrivacySettings,\n  type UserSearchResult,\n  type SuggestedUser,\n  type Project,\n  type Activity,\n  type CreateProjectData,\n  type UpdateProjectData,\n  type ProjectStats,\n  type Session,\n  type SessionWithDetails,\n  type CreateSessionData,\n  type SessionFormData,\n  type SessionFilters,\n  type SessionSort,\n  type SessionListResponse,\n  type Post,\n  type PostWithDetails,\n  type CreatePostData,\n  type UpdatePostData,\n  type PostSupport,\n  type FeedResponse,\n  type FeedFilters,\n  type Comment,\n  type CommentWithDetails,\n  type CreateCommentData,\n  type UpdateCommentData,\n  type CommentLike,\n  type CommentsResponse,\n  type Notification,\n  type Group,\n  type CreateGroupData,\n  type UpdateGroupData,\n  type GroupFilters,\n  type GroupMembership,\n  type GroupStats,\n  type GroupLeaderboard,\n  type GroupLeaderboardEntry,\n  type Challenge,\n  type CreateChallengeData,\n  type UpdateChallengeData,\n  type ChallengeFilters,\n  type ChallengeParticipant,\n  type ChallengeProgress,\n  type ChallengeLeaderboard,\n  type ChallengeLeaderboardEntry,\n  type ChallengeStats,\n} from './api/index';\n\nexport default api;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/achievements/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setDoc' is defined but never used.",
        "line": 16,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 9
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Achievements API Module\n * Handles achievement definitions and tracking\n */\n\n// ============================================================================\n// IMPORTS\n// ============================================================================\n\n// Firebase imports\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  setDoc,\n  addDoc,\n  updateDoc,\n  query,\n  where,\n  orderBy,\n  limit as limitFn,\n  serverTimestamp,\n} from 'firebase/firestore';\n\n// Local Firebase config\nimport { db, auth } from '@/lib/firebase';\n\n// Error handling\nimport { handleError } from '@/lib/errorHandler';\n\n// Shared utilities\nimport { convertTimestamp } from '../shared/utils';\n\n// Types\nimport type {\n  AchievementType,\n  Achievement,\n  AchievementProgress,\n  UserAchievementData,\n} from '@/types';\n\n// ============================================================================\n// ACHIEVEMENT DEFINITIONS\n// ============================================================================\n\n/**\n * Achievement metadata defining all available achievements\n */\nexport const ACHIEVEMENT_DEFINITIONS: Record<\n  AchievementType,\n  { name: string; description: string; icon: string; targetValue?: number }\n> = {\n  'streak-7': {\n    name: '7 Day Streak',\n    description: 'Complete sessions for 7 days in a row',\n    icon: '🔥',\n    targetValue: 7,\n  },\n  'streak-30': {\n    name: '30 Day Streak',\n    description: 'Complete sessions for 30 days in a row',\n    icon: '🔥',\n    targetValue: 30,\n  },\n  'streak-100': {\n    name: '100 Day Streak',\n    description: 'Complete sessions for 100 days in a row',\n    icon: '🔥',\n    targetValue: 100,\n  },\n  'streak-365': {\n    name: 'Year Streak',\n    description: 'Complete sessions for 365 days in a row',\n    icon: '🔥',\n    targetValue: 365,\n  },\n  'hours-10': {\n    name: 'First 10 Hours',\n    description: 'Log 10 hours of work',\n    icon: '⏱️',\n    targetValue: 10,\n  },\n  'hours-50': {\n    name: '50 Hours',\n    description: 'Log 50 hours of work',\n    icon: '⏱️',\n    targetValue: 50,\n  },\n  'hours-100': {\n    name: '100 Hours',\n    description: 'Log 100 hours of work',\n    icon: '⏱️',\n    targetValue: 100,\n  },\n  'hours-500': {\n    name: '500 Hours',\n    description: 'Log 500 hours of work',\n    icon: '⏱️',\n    targetValue: 500,\n  },\n  'hours-1000': {\n    name: '1000 Hours',\n    description: 'Log 1000 hours of work',\n    icon: '⏱️',\n    targetValue: 1000,\n  },\n  'challenge-complete': {\n    name: 'Challenge Complete',\n    description: 'Complete a challenge',\n    icon: '🏆',\n  },\n  'challenge-winner': {\n    name: 'Challenge Winner',\n    description: 'Win a challenge',\n    icon: '👑',\n  },\n  'personal-record-session': {\n    name: 'Personal Record',\n    description: 'Complete your longest session',\n    icon: '🎯',\n  },\n  'personal-record-day': {\n    name: 'Best Day Ever',\n    description: 'Complete your most productive day',\n    icon: '🌟',\n  },\n  'early-bird': {\n    name: 'Early Bird',\n    description: 'Complete a session before 6 AM',\n    icon: '🌅',\n  },\n  'night-owl': {\n    name: 'Night Owl',\n    description: 'Complete a session after 10 PM',\n    icon: '🦉',\n  },\n  'weekend-warrior': {\n    name: 'Weekend Warrior',\n    description: 'Complete 10 weekend sessions',\n    icon: '💪',\n  },\n  'consistency-king': {\n    name: 'Consistency King',\n    description: 'Complete sessions for 30 consecutive days',\n    icon: '👑',\n  },\n};\n\nexport const firebaseAchievementApi = {\n  // Get user's achievements\n  getUserAchievements: async (userId: string): Promise<Achievement[]> => {\n    try {\n      const achievementsQuery = query(\n        collection(db, 'achievements'),\n        where('userId', '==', userId),\n        orderBy('earnedAt', 'desc')\n      );\n\n      const snapshot = await getDocs(achievementsQuery);\n      return snapshot.docs.map(\n        doc =>\n          ({\n            id: doc.id,\n            ...doc.data(),\n            earnedAt: convertTimestamp(doc.data().earnedAt),\n          }) as Achievement\n      );\n    } catch (error) {\n      const apiError = handleError(error, 'Get achievements', {\n        defaultMessage: 'Failed to get achievements',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Get achievement progress for all achievement types\n  getAchievementProgress: async (\n    userId: string\n  ): Promise<AchievementProgress[]> => {\n    try {\n      const [achievements, userData] = await Promise.all([\n        firebaseAchievementApi.getUserAchievements(userId),\n        firebaseAchievementApi.getUserAchievementData(userId),\n      ]);\n\n      const unlockedTypes = new Set(achievements.map(a => a.type));\n      const progress: AchievementProgress[] = [];\n\n      // Streak achievements\n      const streakAchievements: AchievementType[] = [\n        'streak-7',\n        'streak-30',\n        'streak-100',\n        'streak-365',\n      ];\n      streakAchievements.forEach(type => {\n        const def = ACHIEVEMENT_DEFINITIONS[type];\n        const isUnlocked = unlockedTypes.has(type);\n        const achievement = achievements.find(a => a.type === type);\n\n        progress.push({\n          type,\n          name: def.name,\n          description: def.description,\n          icon: def.icon,\n          currentValue: userData.currentStreak,\n          targetValue: def.targetValue || 0,\n          percentage: Math.min(\n            100,\n            (userData.currentStreak / (def.targetValue || 1)) * 100\n          ),\n          isUnlocked,\n          unlockedAt: achievement?.earnedAt,\n        });\n      });\n\n      // Hour achievements\n      const hourAchievements: AchievementType[] = [\n        'hours-10',\n        'hours-50',\n        'hours-100',\n        'hours-500',\n        'hours-1000',\n      ];\n      hourAchievements.forEach(type => {\n        const def = ACHIEVEMENT_DEFINITIONS[type];\n        const isUnlocked = unlockedTypes.has(type);\n        const achievement = achievements.find(a => a.type === type);\n\n        progress.push({\n          type,\n          name: def.name,\n          description: def.description,\n          icon: def.icon,\n          currentValue: userData.totalHours,\n          targetValue: def.targetValue || 0,\n          percentage: Math.min(\n            100,\n            (userData.totalHours / (def.targetValue || 1)) * 100\n          ),\n          isUnlocked,\n          unlockedAt: achievement?.earnedAt,\n        });\n      });\n\n\n      return progress;\n    } catch (error) {\n      const apiError = handleError(error, 'Get achievement progress', {\n        defaultMessage: 'Failed to get achievement progress',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Get user data for achievement checking\n  getUserAchievementData: async (\n    userId: string\n  ): Promise<UserAchievementData> => {\n    try {\n      // Dynamic imports to avoid circular dependencies\n      const { firebaseStreakApi } = await import('../streaks');\n      const { firebaseUserApi } = await import('../users');\n\n      const [streakData, userStats] = await Promise.all([\n        firebaseStreakApi.getStreakData(userId),\n        firebaseUserApi.getUserStats(userId),\n      ]);\n\n      // Get session stats\n      const sessionsQuery = query(\n        collection(db, 'sessions'),\n        where('userId', '==', userId),\n        orderBy('duration', 'desc'),\n        limitFn(1)\n      );\n      const sessionsSnapshot = await getDocs(sessionsQuery);\n      const longestSession = sessionsSnapshot.docs[0]?.data()?.duration || 0;\n\n      return {\n        userId,\n        totalHours: userStats.totalHours,\n        currentStreak: streakData.currentStreak,\n        longestStreak: streakData.longestStreak,\n        totalSessions: userStats.sessionsThisMonth, // Approximate\n        longestSession: Math.floor(longestSession / 60),\n        mostHoursInDay: 0, // TODO: Calculate from daily stats\n        challengesCompleted: 0, // TODO: Get from challenges\n        challengesWon: 0, // TODO: Get from challenges\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Get user achievement data', {\n        defaultMessage: 'Failed to get user achievement data',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Check and award new achievements after session\n  checkAchievements: async (\n    userId: string,\n    sessionId?: string\n  ): Promise<Achievement[]> => {\n    try {\n      const [existingAchievements, userData] = await Promise.all([\n        firebaseAchievementApi.getUserAchievements(userId),\n        firebaseAchievementApi.getUserAchievementData(userId),\n      ]);\n\n      const unlockedTypes = new Set(existingAchievements.map(a => a.type));\n      const newAchievements: Achievement[] = [];\n\n      // Check streak achievements\n      if (userData.currentStreak >= 7 && !unlockedTypes.has('streak-7')) {\n        newAchievements.push(\n          await firebaseAchievementApi.awardAchievement(\n            userId,\n            'streak-7',\n            sessionId\n          )\n        );\n      }\n      if (userData.currentStreak >= 30 && !unlockedTypes.has('streak-30')) {\n        newAchievements.push(\n          await firebaseAchievementApi.awardAchievement(\n            userId,\n            'streak-30',\n            sessionId\n          )\n        );\n      }\n      if (userData.currentStreak >= 100 && !unlockedTypes.has('streak-100')) {\n        newAchievements.push(\n          await firebaseAchievementApi.awardAchievement(\n            userId,\n            'streak-100',\n            sessionId\n          )\n        );\n      }\n      if (userData.currentStreak >= 365 && !unlockedTypes.has('streak-365')) {\n        newAchievements.push(\n          await firebaseAchievementApi.awardAchievement(\n            userId,\n            'streak-365',\n            sessionId\n          )\n        );\n      }\n\n      // Check hour achievements\n      if (userData.totalHours >= 10 && !unlockedTypes.has('hours-10')) {\n        newAchievements.push(\n          await firebaseAchievementApi.awardAchievement(\n            userId,\n            'hours-10',\n            sessionId\n          )\n        );\n      }\n      if (userData.totalHours >= 50 && !unlockedTypes.has('hours-50')) {\n        newAchievements.push(\n          await firebaseAchievementApi.awardAchievement(\n            userId,\n            'hours-50',\n            sessionId\n          )\n        );\n      }\n      if (userData.totalHours >= 100 && !unlockedTypes.has('hours-100')) {\n        newAchievements.push(\n          await firebaseAchievementApi.awardAchievement(\n            userId,\n            'hours-100',\n            sessionId\n          )\n        );\n      }\n      if (userData.totalHours >= 500 && !unlockedTypes.has('hours-500')) {\n        newAchievements.push(\n          await firebaseAchievementApi.awardAchievement(\n            userId,\n            'hours-500',\n            sessionId\n          )\n        );\n      }\n      if (userData.totalHours >= 1000 && !unlockedTypes.has('hours-1000')) {\n        newAchievements.push(\n          await firebaseAchievementApi.awardAchievement(\n            userId,\n            'hours-1000',\n            sessionId\n          )\n        );\n      }\n\n\n      // Check time-based achievements if recent session provided\n      if (userData.recentSession) {\n        const sessionHour = userData.recentSession.startTime.getHours();\n\n        if (sessionHour < 6 && !unlockedTypes.has('early-bird')) {\n          newAchievements.push(\n            await firebaseAchievementApi.awardAchievement(\n              userId,\n              'early-bird',\n              sessionId\n            )\n          );\n        }\n\n        if (sessionHour >= 22 && !unlockedTypes.has('night-owl')) {\n          newAchievements.push(\n            await firebaseAchievementApi.awardAchievement(\n              userId,\n              'night-owl',\n              sessionId\n            )\n          );\n        }\n      }\n\n      return newAchievements;\n    } catch (error) {\n      const apiError = handleError(error, 'Check achievements', {\n        defaultMessage: 'Failed to check achievements',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Award an achievement\n  awardAchievement: async (\n    userId: string,\n    type: AchievementType,\n    sessionId?: string\n  ): Promise<Achievement> => {\n    try {\n      const def = ACHIEVEMENT_DEFINITIONS[type];\n      const achievementData = {\n        userId,\n        type,\n        name: def.name,\n        description: def.description,\n        icon: def.icon,\n        earnedAt: serverTimestamp(),\n        sessionId: sessionId || null,\n        isShared: false,\n      };\n\n      const docRef = await addDoc(\n        collection(db, 'achievements'),\n        achievementData\n      );\n\n      // Create notification\n      await addDoc(collection(db, 'notifications'), {\n        userId,\n        type: 'achievement',\n        title: 'Achievement Unlocked!',\n        message: `You earned the \"${def.name}\" achievement!`,\n        linkUrl: `/profile/${userId}?tab=achievements`,\n        isRead: false,\n        createdAt: serverTimestamp(),\n      });\n\n      return {\n        id: docRef.id,\n        ...achievementData,\n        earnedAt: new Date(),\n      } as Achievement;\n    } catch (error) {\n      const apiError = handleError(error, 'Award achievement', {\n        defaultMessage: 'Failed to award achievement',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Share achievement to feed\n  shareAchievement: async (achievementId: string): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const achievementDoc = await getDoc(\n        doc(db, 'achievements', achievementId)\n      );\n      if (!achievementDoc.exists()) {\n        throw new Error('Achievement not found');\n      }\n\n      const achievement = achievementDoc.data() as Achievement;\n      if (achievement.userId !== auth.currentUser.uid) {\n        throw new Error('Unauthorized');\n      }\n\n      // Create a post about the achievement\n      await addDoc(collection(db, 'posts'), {\n        userId: auth.currentUser.uid,\n        type: 'achievement',\n        content: `Just unlocked the \"${achievement.name}\" achievement! ${achievement.icon}`,\n        achievementId,\n        visibility: 'everyone',\n        supportCount: 0,\n        commentCount: 0,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n      });\n\n      // Mark achievement as shared\n      await updateDoc(doc(db, 'achievements', achievementId), {\n        isShared: true,\n      });\n    } catch (error) {\n      const apiError = handleError(error, 'Share achievement', {\n        defaultMessage: 'Failed to share achievement',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n};\n\n// Firebase Notification API\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/auth/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'apiError' is assigned a value but never used.",
        "line": 53,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'checkEmailExistsInFirestore' is assigned a value but never used.",
        "line": 66,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'apiError' is assigned a value but never used.",
        "line": 77,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 77,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 318,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 318,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8841, 8844], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8841, 8844], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 399,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 399,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11865, 11868], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11865, 11868], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 408,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 408,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12224, 12227], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12224, 12227], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'token' is defined but never used.",
        "line": 442,
        "column": 26,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 442,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'token' is defined but never used.",
        "line": 496,
        "column": 23,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 496,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 501,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 501,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'credential' is assigned a value but never used.",
        "line": 514,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 514,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 575,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 575,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17236, 17239], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17236, 17239], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 11,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Authentication API Module\n * Handles user authentication operations: login, signup, Google OAuth, and session management\n */\n\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  setDoc,\n  query,\n  where,\n  limit as limitFn,\n  serverTimestamp,\n} from 'firebase/firestore';\nimport {\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  signOut,\n  onAuthStateChanged,\n  User as FirebaseUser,\n  updateProfile,\n  GoogleAuthProvider,\n  signInWithPopup,\n  getRedirectResult,\n} from 'firebase/auth';\nimport { db, auth } from '@/lib/firebase';\nimport { handleError, ErrorSeverity } from '@/lib/errorHandler';\nimport { checkRateLimit, RateLimitError } from '@/lib/rateLimit';\nimport { convertTimestamp } from '../shared/utils';\nimport type {\n  AuthResponse,\n  LoginCredentials,\n  SignupCredentials,\n  AuthUser,\n} from '@/types';\n\n/**\n * Check if a username already exists in Firestore\n */\nconst checkUsernameExists = async (username: string): Promise<boolean> => {\n  try {\n    const usersRef = collection(db, 'users');\n    const q = query(\n      usersRef,\n      where('usernameLower', '==', username.toLowerCase()),\n      limitFn(1)\n    );\n    const snapshot = await getDocs(q);\n    return !snapshot.empty;\n  } catch (error) {\n    const apiError = handleError(error, 'Check username availability', {\n      severity: ErrorSeverity.WARNING,\n    });\n    // If there's an error checking, allow the signup to proceed\n    // Firebase Auth will handle duplicate emails\n    return false;\n  }\n};\n\n/**\n * Check if an email already exists in Firestore\n * Note: Firebase Auth is the primary check for email uniqueness\n */\nconst checkEmailExistsInFirestore = async (email: string): Promise<boolean> => {\n  try {\n    const usersRef = collection(db, 'users');\n    const q = query(\n      usersRef,\n      where('email', '==', email.toLowerCase()),\n      limitFn(1)\n    );\n    const snapshot = await getDocs(q);\n    return !snapshot.empty;\n  } catch (error) {\n    const apiError = handleError(error, 'Check email availability', {\n      severity: ErrorSeverity.WARNING,\n    });\n    return false;\n  }\n};\n\n/**\n * Generate a unique username from an email and optional display name\n */\nconst generateUniqueUsername = async (\n  email: string,\n  displayName?: string\n): Promise<string> => {\n  // Try using display name first if provided\n  if (displayName) {\n    const baseUsername = displayName\n      .toLowerCase()\n      .replace(/[^a-z0-9]/g, '')\n      .substring(0, 20);\n\n    if (baseUsername.length >= 3) {\n      // Try the base username first\n      if (!(await checkUsernameExists(baseUsername))) {\n        return baseUsername;\n      }\n\n      // Try with numbers appended\n      for (let i = 1; i <= 999; i++) {\n        const candidate = `${baseUsername}${i}`;\n        if (!(await checkUsernameExists(candidate))) {\n          return candidate;\n        }\n      }\n    }\n  }\n\n  // Fall back to email-based username\n  const emailParts = email.split('@');\n  const emailPart = emailParts[0];\n  if (!emailPart) {\n    throw new Error('Invalid email format');\n  }\n  const baseUsername = emailPart\n    .toLowerCase()\n    .replace(/[^a-z0-9]/g, '')\n    .substring(0, 20);\n\n  // Try the base username first\n  if (baseUsername.length >= 3 && !(await checkUsernameExists(baseUsername))) {\n    return baseUsername;\n  }\n\n  // Try with numbers appended\n  for (let i = 1; i <= 9999; i++) {\n    const candidate = `${baseUsername}${i}`;\n    if (!(await checkUsernameExists(candidate))) {\n      return candidate;\n    }\n  }\n\n  // Last resort: use a random string\n  const randomSuffix = Math.random().toString(36).substring(2, 10);\n  return `user_${randomSuffix}`;\n};\n\n/**\n * Authentication API\n * All authentication-related operations\n */\nexport const firebaseAuthApi = {\n  /**\n   * Login with email and password\n   */\n  login: async (credentials: LoginCredentials): Promise<AuthResponse> => {\n    try {\n      // Rate limit login attempts by email\n      checkRateLimit(credentials.email, 'AUTH_LOGIN');\n\n      const userCredential = await signInWithEmailAndPassword(\n        auth,\n        credentials.email,\n        credentials.password\n      );\n      const firebaseUser = userCredential.user;\n\n      // Get user profile from Firestore\n      const userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));\n      let userData = userDoc.data();\n\n      // If user profile doesn't exist, create it\n      if (!userData) {\n        const newUserData = {\n          email: credentials.email,\n          name: 'New User',\n          username: credentials.email.split('@')[0],\n          bio: '',\n          location: '',\n          profilePicture: null,\n          followersCount: 0,\n          followingCount: 0,\n          totalHours: 0,\n          profileVisibility: 'everyone',\n          activityVisibility: 'everyone',\n          projectVisibility: 'everyone',\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp(),\n        };\n\n        await setDoc(doc(db, 'users', firebaseUser.uid), newUserData);\n        userData = newUserData;\n      }\n\n      const user: AuthUser = {\n        id: firebaseUser.uid,\n        email: firebaseUser.email!,\n        name: userData.name,\n        username: userData.username,\n        bio: userData.bio,\n        location: userData.location,\n        profilePicture: userData.profilePicture,\n        createdAt: convertTimestamp(userData.createdAt),\n        updatedAt: convertTimestamp(userData.updatedAt),\n      };\n\n      const token = await firebaseUser.getIdToken();\n\n      return { user, token };\n    } catch (error) {\n      // Re-throw rate limit errors as-is\n      if (error instanceof RateLimitError) {\n        throw error;\n      }\n      const apiError = handleError(error, 'Login', {\n        defaultMessage: 'Login failed',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Sign up a new user with email and password\n   */\n  signup: async (credentials: SignupCredentials): Promise<AuthResponse> => {\n    try {\n      // Rate limit signup attempts by email\n      checkRateLimit(credentials.email, 'AUTH_SIGNUP');\n\n      // Validate username uniqueness BEFORE creating Firebase Auth user\n      const usernameExists = await checkUsernameExists(credentials.username);\n      if (usernameExists) {\n        throw new Error(\n          'This username is already taken. Please choose a different username.'\n        );\n      }\n\n      // Create Firebase Auth user (this will throw if email already exists)\n      const userCredential = await createUserWithEmailAndPassword(\n        auth,\n        credentials.email,\n        credentials.password\n      );\n      const firebaseUser = userCredential.user;\n\n      // Create user profile in Firestore\n      const userData = {\n        email: credentials.email,\n        name: credentials.name,\n        username: credentials.username,\n        usernameLower: credentials.username.toLowerCase(),\n        nameLower: credentials.name.toLowerCase(),\n        bio: '',\n        location: '',\n        profilePicture: null,\n        followersCount: 0,\n        followingCount: 0,\n        totalHours: 0,\n        inboundFriendshipCount: 0,\n        outboundFriendshipCount: 0,\n        mutualFriendshipCount: 0,\n        profileVisibility: 'everyone',\n        activityVisibility: 'everyone',\n        projectVisibility: 'everyone',\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n      };\n\n      await setDoc(doc(db, 'users', firebaseUser.uid), userData);\n\n      // Update Firebase Auth profile\n      await updateProfile(firebaseUser, {\n        displayName: credentials.name,\n      });\n\n      const user: AuthUser = {\n        id: firebaseUser.uid,\n        email: credentials.email,\n        name: credentials.name,\n        username: credentials.username,\n        bio: '',\n        location: '',\n        profilePicture: undefined,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      const token = await firebaseUser.getIdToken();\n\n      return { user, token };\n    } catch (error) {\n      // Re-throw rate limit errors as-is\n      if (error instanceof RateLimitError) {\n        throw error;\n      }\n      const apiError = handleError(error, 'Signup', {\n        defaultMessage: 'Signup failed',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Sign in with Google OAuth\n   */\n  signInWithGoogle: async (): Promise<AuthResponse> => {\n    try {\n      const provider = new GoogleAuthProvider();\n      // Add scopes for better user info\n      provider.addScope('profile');\n      provider.addScope('email');\n\n      // Set custom parameters\n      provider.setCustomParameters({\n        prompt: 'select_account',\n      });\n\n      let userCredential;\n\n      try {\n        // Use popup for better UX and to avoid cross-origin issues\n        userCredential = await signInWithPopup(auth, provider);\n      } catch (popupError: any) {\n        console.error('[signInWithGoogle] Popup error:', popupError);\n        console.error('[signInWithGoogle] Error code:', popupError.code);\n        console.error('[signInWithGoogle] Error message:', popupError.message);\n\n        // Handle specific error codes\n        if (popupError.code === 'auth/popup-blocked') {\n          throw new Error(\n            'Popup was blocked by your browser. Please allow popups for this site.'\n          );\n        } else if (popupError.code === 'auth/popup-closed-by-user') {\n          throw new Error('Sign-in was cancelled.');\n        } else if (popupError.code === 'auth/cancelled-popup-request') {\n          throw new Error('Sign-in was cancelled.');\n        } else if (popupError.code === 'auth/unauthorized-domain') {\n          throw new Error(\n            'This domain is not authorized for Google Sign-in. Please contact support.'\n          );\n        } else if (popupError.code === 'auth/network-request-failed') {\n          throw new Error(\n            'Network error. Please check your internet connection and try again.'\n          );\n        }\n        // Re-throw if it's a different error\n        throw popupError;\n      }\n\n      const firebaseUser = userCredential.user;\n\n      // Check if user profile exists\n      const userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));\n      let userData = userDoc.data();\n\n      // If user profile doesn't exist, create it\n      if (!userData) {\n        // Generate a unique username using the helper function\n        const username = await generateUniqueUsername(\n          firebaseUser.email!,\n          firebaseUser.displayName || undefined\n        );\n\n        userData = {\n          email: firebaseUser.email!,\n          name: firebaseUser.displayName || 'New User',\n          username: username,\n          usernameLower: username.toLowerCase(),\n          nameLower: (firebaseUser.displayName || 'New User').toLowerCase(),\n          bio: '',\n          location: '',\n          profilePicture: firebaseUser.photoURL || null,\n          followersCount: 0,\n          followingCount: 0,\n          totalHours: 0,\n          inboundFriendshipCount: 0,\n          outboundFriendshipCount: 0,\n          mutualFriendshipCount: 0,\n          profileVisibility: 'everyone',\n          activityVisibility: 'everyone',\n          projectVisibility: 'everyone',\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp(),\n        };\n\n        await setDoc(doc(db, 'users', firebaseUser.uid), userData);\n      }\n\n      const user: AuthUser = {\n        id: firebaseUser.uid,\n        email: firebaseUser.email!,\n        name: userData.name,\n        username: userData.username,\n        bio: userData.bio,\n        location: userData.location,\n        profilePicture: userData.profilePicture,\n        createdAt: convertTimestamp(userData.createdAt),\n        updatedAt: convertTimestamp(userData.updatedAt),\n      };\n\n      const token = await firebaseUser.getIdToken();\n\n      return { user, token };\n    } catch (error: any) {\n      console.error('Google sign-in error:', error);\n\n      // Special case: if redirect is in progress, pass through without modification\n      if (error.message === 'REDIRECT_IN_PROGRESS') {\n        throw error;\n      }\n\n      // If the error is already a custom Error with a message, re-throw it as-is\n      if (error instanceof Error && !(error as any).code) {\n        throw error;\n      }\n\n      // Provide more specific error messages for Firebase errors\n      if (error.message && error.message.includes('Firebase Console')) {\n        throw error;\n      }\n\n      const apiError = handleError(error, 'Google sign-in', {\n        defaultMessage:\n          'Google sign-in failed. Please check that Google authentication is enabled in Firebase Console.',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Logout current user\n   */\n  logout: async (): Promise<void> => {\n    try {\n      await signOut(auth);\n    } catch (error) {\n      const apiError = handleError(error, 'Logout', {\n        defaultMessage: 'Logout failed',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get current authenticated user\n   */\n  getCurrentUser: async (token?: string): Promise<AuthUser> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('No authenticated user');\n      }\n\n      const userDoc = await getDoc(doc(db, 'users', auth.currentUser.uid));\n      let userData = userDoc.data();\n\n      // If user profile doesn't exist, create a basic one\n      if (!userData) {\n        const basicUserData = {\n          email: auth.currentUser.email!,\n          name: auth.currentUser.displayName || 'New User',\n          username: auth.currentUser.email!.split('@')[0],\n          bio: '',\n          location: '',\n          profilePicture: auth.currentUser.photoURL || null,\n          followersCount: 0,\n          followingCount: 0,\n          totalHours: 0,\n          profileVisibility: 'everyone',\n          activityVisibility: 'everyone',\n          projectVisibility: 'everyone',\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp(),\n        };\n\n        await setDoc(doc(db, 'users', auth.currentUser.uid), basicUserData);\n        userData = basicUserData;\n      }\n\n      return {\n        id: auth.currentUser.uid,\n        email: auth.currentUser.email!,\n        name: userData.name,\n        username: userData.username,\n        bio: userData.bio,\n        location: userData.location,\n        profilePicture: userData.profilePicture,\n        createdAt: convertTimestamp(userData.createdAt),\n        updatedAt: convertTimestamp(userData.updatedAt),\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Get current user', {\n        defaultMessage: 'Failed to get current user',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Verify authentication token\n   */\n  verifyToken: async (token: string): Promise<boolean> => {\n    try {\n      // Firebase handles token verification automatically\n      // We just need to check if user is authenticated\n      return !!auth.currentUser;\n    } catch (error) {\n      return false;\n    }\n  },\n\n  /**\n   * Handle Google redirect result (for mobile OAuth flow)\n   */\n  handleGoogleRedirectResult: async (): Promise<AuthResponse | null> => {\n    try {\n      const result = await getRedirectResult(auth);\n\n      if (result) {\n        const credential = GoogleAuthProvider.credentialFromResult(result);\n      }\n\n      if (!result) {\n        // No redirect result (user didn't come from redirect flow)\n        return null;\n      }\n\n      const firebaseUser = result.user;\n\n      // Check if user profile exists\n      const userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));\n      let userData = userDoc.data();\n\n      // If user profile doesn't exist, create it\n      if (!userData) {\n        const username = await generateUniqueUsername(\n          firebaseUser.email!,\n          firebaseUser.displayName || undefined\n        );\n\n        userData = {\n          email: firebaseUser.email!,\n          name: firebaseUser.displayName || 'New User',\n          username: username,\n          usernameLower: username.toLowerCase(),\n          nameLower: (firebaseUser.displayName || 'New User').toLowerCase(),\n          bio: '',\n          location: '',\n          profilePicture: firebaseUser.photoURL || null,\n          followersCount: 0,\n          followingCount: 0,\n          totalHours: 0,\n          inboundFriendshipCount: 0,\n          outboundFriendshipCount: 0,\n          mutualFriendshipCount: 0,\n          profileVisibility: 'everyone',\n          activityVisibility: 'everyone',\n          projectVisibility: 'everyone',\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp(),\n        };\n\n        await setDoc(doc(db, 'users', firebaseUser.uid), userData);\n      }\n\n      const user: AuthUser = {\n        id: firebaseUser.uid,\n        email: firebaseUser.email!,\n        name: userData.name,\n        username: userData.username,\n        bio: userData.bio,\n        location: userData.location,\n        profilePicture: userData.profilePicture,\n        createdAt: convertTimestamp(userData.createdAt),\n        updatedAt: convertTimestamp(userData.updatedAt),\n      };\n\n      const token = await firebaseUser.getIdToken();\n\n      return { user, token };\n    } catch (error: any) {\n      console.error('[handleGoogleRedirectResult] ERROR:', error);\n      console.error('[handleGoogleRedirectResult] Error details:', {\n        message: error.message,\n        code: error.code,\n        stack: error.stack,\n      });\n\n      const apiError = handleError(error, 'Google sign-in redirect', {\n        defaultMessage: 'Google sign-in failed. Please try again.',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Listen to authentication state changes\n   */\n  onAuthStateChanged: (callback: (user: FirebaseUser | null) => void) => {\n    return onAuthStateChanged(auth, callback);\n  },\n\n  /**\n   * Check if username is available for signup\n   */\n  checkUsernameAvailability: async (username: string): Promise<boolean> => {\n    const exists = await checkUsernameExists(username);\n    return !exists; // Return true if available (username does not exist)\n  },\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/challenges/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'deleteDoc' is defined but never used.",
        "line": 18,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Timestamp' is defined but never used.",
        "line": 24,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ChallengeParticipant' is defined but never used.",
        "line": 47,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 47,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'startDate' is assigned a value but never used.",
        "line": 279,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 279,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 486,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 486,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14914, 14917], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14914, 14917], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'now' is assigned a value but never used.",
        "line": 507,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 507,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 565,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 565,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17996, 17999], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17996, 17999], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'StreakData' is defined but never used.",
        "line": 885,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 885,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'StreakDay' is defined but never used.",
        "line": 886,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 886,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'StreakStats' is defined but never used.",
        "line": 887,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 887,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Achievement' is defined but never used.",
        "line": 888,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 888,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'AchievementType' is defined but never used.",
        "line": 889,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 889,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'UserAchievementData' is defined but never used.",
        "line": 890,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 890,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'AchievementProgress' is defined but never used.",
        "line": 891,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 891,
        "endColumn": 22
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 14,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Challenges API Module\n * Handles challenge system: CRUD operations, participants, leaderboards, progress tracking\n */\n\n// ============================================================================\n// IMPORTS\n// ============================================================================\n\n// Firebase imports\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n  query,\n  where,\n  orderBy,\n  limit as limitFn,\n  serverTimestamp,\n  Timestamp,\n  writeBatch,\n  increment,\n} from 'firebase/firestore';\n\n// Local Firebase config\nimport { db, auth } from '@/lib/firebase';\n\n// Error handling\nimport { handleError, ErrorSeverity } from '@/lib/errorHandler';\n\n// Error messages\nimport { ERROR_MESSAGES } from '@/config/errorMessages';\n\n// Shared utilities\nimport { convertTimestamp, removeUndefinedFields } from '../shared/utils';\n\n// Types\nimport type {\n  Challenge,\n  CreateChallengeData,\n  UpdateChallengeData,\n  ChallengeFilters,\n  ChallengeParticipant,\n  ChallengeProgress,\n  ChallengeLeaderboard,\n  ChallengeLeaderboardEntry,\n  ChallengeStats,\n} from '@/types';\n\n// ============================================================================\n// PUBLIC API\n// ============================================================================\n\nexport const firebaseChallengeApi = {\n  // Create a new challenge (group admins only)\n  createChallenge: async (data: CreateChallengeData): Promise<Challenge> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      // If groupId is provided, verify user is admin\n      if (data.groupId) {\n        const groupDoc = await getDoc(doc(db, 'groups', data.groupId));\n        if (!groupDoc.exists()) {\n          throw new Error('Group not found');\n        }\n        const groupData = groupDoc.data();\n        if (!groupData.adminUserIds.includes(auth.currentUser.uid)) {\n          throw new Error('Only group admins can create challenges');\n        }\n      }\n\n      const challengeData = {\n        ...data,\n        createdByUserId: auth.currentUser.uid,\n        participantCount: 0,\n        isActive: true,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n      };\n\n      const docRef = await addDoc(collection(db, 'challenges'), challengeData);\n\n      return {\n        id: docRef.id,\n        ...data,\n        createdByUserId: auth.currentUser.uid,\n        participantCount: 0,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Create challenge', {\n        defaultMessage: ERROR_MESSAGES.UNKNOWN_ERROR,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Get challenge by ID\n  getChallenge: async (challengeId: string): Promise<Challenge> => {\n    try {\n      const challengeDoc = await getDoc(doc(db, 'challenges', challengeId));\n\n      if (!challengeDoc.exists()) {\n        throw new Error('Challenge not found');\n      }\n\n      const data = challengeDoc.data();\n      return {\n        id: challengeDoc.id,\n        groupId: data.groupId,\n        name: data.name,\n        description: data.description,\n        type: data.type,\n        goalValue: data.goalValue,\n        startDate: convertTimestamp(data.startDate),\n        endDate: convertTimestamp(data.endDate),\n        participantCount: data.participantCount || 0,\n        createdByUserId: data.createdByUserId,\n        createdAt: convertTimestamp(data.createdAt),\n        updatedAt: convertTimestamp(data.updatedAt),\n        rules: data.rules,\n        projectIds: data.projectIds,\n        isActive: data.isActive !== false,\n        rewards: data.rewards,\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Get challenge', {\n        defaultMessage: ERROR_MESSAGES.CHALLENGE_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Get challenges with filters\n  getChallenges: async (\n    filters: ChallengeFilters = {}\n  ): Promise<Challenge[]> => {\n    try {\n      // Start with a simple query to avoid complex index requirements\n      let challengesQuery = query(\n        collection(db, 'challenges'),\n        orderBy('createdAt', 'desc')\n      );\n\n      // Apply simple filters first\n      if (filters.groupId) {\n        challengesQuery = query(\n          collection(db, 'challenges'),\n          where('groupId', '==', filters.groupId),\n          orderBy('createdAt', 'desc')\n        );\n      } else if (filters.type) {\n        challengesQuery = query(\n          collection(db, 'challenges'),\n          where('type', '==', filters.type),\n          orderBy('createdAt', 'desc')\n        );\n      }\n\n      const snapshot = await getDocs(challengesQuery);\n      const challenges: Challenge[] = [];\n      const now = new Date();\n\n      for (const challengeDoc of snapshot.docs) {\n        const data = challengeDoc.data();\n\n        // Apply client-side filtering for complex conditions\n        const startDate = convertTimestamp(data.startDate);\n        const endDate = convertTimestamp(data.endDate);\n        const isActive = data.isActive !== false;\n\n        // Filter by status (client-side to avoid complex queries)\n        if (filters.status === 'active') {\n          if (!(now >= startDate && now <= endDate && isActive)) {\n            continue;\n          }\n        } else if (filters.status === 'upcoming') {\n          if (!(now < startDate && isActive)) {\n            continue;\n          }\n        } else if (filters.status === 'completed') {\n          if (!(now > endDate || !isActive)) {\n            continue;\n          }\n        }\n\n        // Filter by type (if not already filtered at query level)\n        if (filters.type && !filters.groupId && data.type !== filters.type) {\n          continue;\n        }\n\n        // If filtering by participation, check if current user is participating\n        if (filters.isParticipating && auth.currentUser) {\n          try {\n            const participantDoc = await getDoc(\n              doc(\n                db,\n                'challengeParticipants',\n                `${auth.currentUser.uid}_${challengeDoc.id}`\n              )\n            );\n            if (!participantDoc.exists()) {\n              continue;\n            }\n          } catch (error) {\n            // If we can't check participation, skip this challenge\n            handleError(\n              error,\n              `Check participation for challenge ${challengeDoc.id}`,\n              { severity: ErrorSeverity.WARNING }\n            );\n            continue;\n          }\n        }\n\n        challenges.push({\n          id: challengeDoc.id,\n          groupId: data.groupId,\n          name: data.name,\n          description: data.description,\n          type: data.type,\n          goalValue: data.goalValue,\n          startDate,\n          endDate,\n          participantCount: data.participantCount || 0,\n          createdByUserId: data.createdByUserId,\n          createdAt: convertTimestamp(data.createdAt),\n          updatedAt: convertTimestamp(data.updatedAt),\n          rules: data.rules,\n          projectIds: data.projectIds,\n          isActive,\n          rewards: data.rewards,\n        });\n      }\n\n      return challenges;\n    } catch (error) {\n      handleError(error, 'in getChallenges', { severity: ErrorSeverity.ERROR });\n      const apiError = handleError(error, 'Get challenges', {\n        defaultMessage: ERROR_MESSAGES.CHALLENGE_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Join a challenge\n  joinChallenge: async (challengeId: string): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const participantId = `${auth.currentUser.uid}_${challengeId}`;\n\n      // Check if already participating\n      const existingParticipant = await getDoc(\n        doc(db, 'challengeParticipants', participantId)\n      );\n      if (existingParticipant.exists()) {\n        throw new Error('Already participating in this challenge');\n      }\n\n      // Check if challenge exists and is active\n      const challengeDoc = await getDoc(doc(db, 'challenges', challengeId));\n      if (!challengeDoc.exists()) {\n        throw new Error('Challenge not found');\n      }\n\n      const challengeData = challengeDoc.data();\n      const now = new Date();\n      const startDate = convertTimestamp(challengeData.startDate);\n      const endDate = convertTimestamp(challengeData.endDate);\n\n      if (!challengeData.isActive) {\n        throw new Error('Challenge is not active');\n      }\n      if (now > endDate) {\n        throw new Error('Challenge has ended');\n      }\n\n      const batch = writeBatch(db);\n\n      // Add participant\n      batch.set(doc(db, 'challengeParticipants', participantId), {\n        challengeId,\n        userId: auth.currentUser.uid,\n        joinedAt: serverTimestamp(),\n        progress: 0,\n        isCompleted: false,\n      });\n\n      // Update participant count\n      batch.update(doc(db, 'challenges', challengeId), {\n        participantCount: increment(1),\n        updatedAt: serverTimestamp(),\n      });\n\n      await batch.commit();\n    } catch (error) {\n      const apiError = handleError(error, 'Join challenge', {\n        defaultMessage: ERROR_MESSAGES.CHALLENGE_JOIN_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Leave a challenge\n  leaveChallenge: async (challengeId: string): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const participantId = `${auth.currentUser.uid}_${challengeId}`;\n\n      // Check if participating\n      const participantDoc = await getDoc(\n        doc(db, 'challengeParticipants', participantId)\n      );\n      if (!participantDoc.exists()) {\n        throw new Error('Not participating in this challenge');\n      }\n\n      const batch = writeBatch(db);\n\n      // Remove participant\n      batch.delete(doc(db, 'challengeParticipants', participantId));\n\n      // Update participant count\n      batch.update(doc(db, 'challenges', challengeId), {\n        participantCount: increment(-1),\n        updatedAt: serverTimestamp(),\n      });\n\n      await batch.commit();\n    } catch (error) {\n      const apiError = handleError(error, 'Leave challenge', {\n        defaultMessage: ERROR_MESSAGES.CHALLENGE_LEAVE_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Get challenge leaderboard\n  getChallengeLeaderboard: async (\n    challengeId: string\n  ): Promise<ChallengeLeaderboard> => {\n    try {\n      // Get all participants for this challenge\n      const participantsQuery = query(\n        collection(db, 'challengeParticipants'),\n        where('challengeId', '==', challengeId),\n        orderBy('progress', 'desc')\n      );\n\n      const participantsSnapshot = await getDocs(participantsQuery);\n      const entries: ChallengeLeaderboardEntry[] = [];\n\n      let rank = 1;\n      for (const participantDoc of participantsSnapshot.docs) {\n        const participantData = participantDoc.data();\n\n        // Get user data\n        try {\n          const userDoc = await getDoc(\n            doc(db, 'users', participantData.userId)\n          );\n          const userData = userDoc.data();\n\n          if (userData) {\n            entries.push({\n              userId: participantData.userId,\n              user: {\n                id: participantData.userId,\n                email: userData.email || '',\n                name: userData.name || 'Unknown User',\n                username: userData.username || 'unknown',\n                bio: userData.bio,\n                location: userData.location,\n                profilePicture: userData.profilePicture,\n                createdAt: convertTimestamp(userData.createdAt) || new Date(),\n                updatedAt: convertTimestamp(userData.updatedAt) || new Date(),\n              },\n              progress: participantData.progress || 0,\n              rank,\n              isCompleted: participantData.isCompleted || false,\n              completedAt: participantData.completedAt\n                ? convertTimestamp(participantData.completedAt)\n                : undefined,\n            });\n            rank++;\n          }\n        } catch (error) {\n          handleError(\n            error,\n            `Load user data for participant ${participantData.userId}`,\n            { severity: ErrorSeverity.WARNING }\n          );\n        }\n      }\n\n      return {\n        challengeId,\n        entries,\n        lastUpdated: new Date(),\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Get challenge leaderboard', {\n        defaultMessage: ERROR_MESSAGES.CHALLENGE_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Get user's progress in a challenge\n  getChallengeProgress: async (\n    challengeId: string,\n    userId?: string\n  ): Promise<ChallengeProgress | null> => {\n    try {\n      const targetUserId = userId || auth.currentUser?.uid;\n      if (!targetUserId) {\n        throw new Error('User not authenticated');\n      }\n\n      const participantId = `${targetUserId}_${challengeId}`;\n      const participantDoc = await getDoc(\n        doc(db, 'challengeParticipants', participantId)\n      );\n\n      if (!participantDoc.exists()) {\n        return null;\n      }\n\n      const participantData = participantDoc.data();\n      const challengeDoc = await getDoc(doc(db, 'challenges', challengeId));\n      const challengeData = challengeDoc.data();\n\n      // Calculate percentage based on challenge type and goal\n      let percentage = 0;\n      if (challengeData?.goalValue && participantData.progress) {\n        percentage = Math.min(\n          (participantData.progress / challengeData.goalValue) * 100,\n          100\n        );\n      }\n\n      // Get rank by counting participants with higher progress\n      const higherProgressQuery = query(\n        collection(db, 'challengeParticipants'),\n        where('challengeId', '==', challengeId),\n        where('progress', '>', participantData.progress || 0)\n      );\n      const higherProgressSnapshot = await getDocs(higherProgressQuery);\n      const rank = higherProgressSnapshot.size + 1;\n\n      return {\n        challengeId,\n        userId: targetUserId,\n        currentValue: participantData.progress || 0,\n        targetValue: challengeData?.goalValue,\n        percentage,\n        rank,\n        isCompleted: participantData.isCompleted || false,\n        lastUpdated: convertTimestamp(participantData.updatedAt) || new Date(),\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Get challenge progress', {\n        defaultMessage: ERROR_MESSAGES.CHALLENGE_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Update challenge progress (called when sessions are logged)\n  updateChallengeProgress: async (\n    userId: string,\n    sessionData: any\n  ): Promise<void> => {\n    try {\n      // Get all active challenges the user is participating in\n      const participantsQuery = query(\n        collection(db, 'challengeParticipants'),\n        where('userId', '==', userId)\n      );\n\n      const participantsSnapshot = await getDocs(participantsQuery);\n      const batch = writeBatch(db);\n\n      for (const participantDoc of participantsSnapshot.docs) {\n        const participantData = participantDoc.data();\n        const challengeId = participantData.challengeId;\n\n        // Get challenge details\n        const challengeDoc = await getDoc(doc(db, 'challenges', challengeId));\n        if (!challengeDoc.exists()) continue;\n\n        const challengeData = challengeDoc.data();\n        const now = new Date();\n        const startDate = convertTimestamp(challengeData.startDate);\n        const endDate = convertTimestamp(challengeData.endDate);\n        const sessionStart = convertTimestamp(sessionData.startTime);\n\n        // Skip if challenge is not active or session is outside challenge period\n        if (\n          !challengeData.isActive ||\n          sessionStart < startDate ||\n          sessionStart > endDate\n        ) {\n          continue;\n        }\n\n        // Skip if challenge has specific projects and session project is not included\n        if (challengeData.projectIds && challengeData.projectIds.length > 0) {\n          if (!challengeData.projectIds.includes(sessionData.projectId)) {\n            continue;\n          }\n        }\n\n        // Calculate progress increment based on challenge type\n        let progressIncrement = 0;\n        switch (challengeData.type) {\n          case 'most-activity':\n            progressIncrement = sessionData.duration / 3600; // Convert seconds to hours\n            break;\n          case 'fastest-effort':\n            // Duration-based effort (tasks are deprecated)\n            // Using session duration as a proxy for effort\n            const hours = sessionData.duration / 3600;\n            if (hours > 0) {\n              // For fastest-effort, track the longest single session duration\n              if (hours > (participantData.progress || 0)) {\n                progressIncrement = hours - (participantData.progress || 0);\n              }\n            }\n            break;\n          case 'longest-session':\n            // Update if this session is longer than current best\n            const sessionHours = sessionData.duration / 3600;\n            if (sessionHours > (participantData.progress || 0)) {\n              progressIncrement =\n                sessionHours - (participantData.progress || 0);\n            }\n            break;\n          case 'group-goal':\n            progressIncrement = sessionData.duration / 3600; // Contribute hours to group goal\n            break;\n        }\n\n        if (progressIncrement > 0) {\n          const newProgress =\n            (participantData.progress || 0) + progressIncrement;\n          const isCompleted = challengeData.goalValue\n            ? newProgress >= challengeData.goalValue\n            : false;\n\n          const updateData: any = {\n            progress: newProgress,\n            updatedAt: serverTimestamp(),\n          };\n\n          if (isCompleted && !participantData.isCompleted) {\n            updateData.isCompleted = true;\n            updateData.completedAt = serverTimestamp();\n          }\n\n          batch.update(participantDoc.ref, updateData);\n        }\n      }\n\n      await batch.commit();\n    } catch (error) {\n      handleError(error, 'update challenge progress', {\n        severity: ErrorSeverity.ERROR,\n      });\n      // Don't throw error to avoid breaking session creation\n    }\n  },\n\n  // Get challenge statistics\n  getChallengeStats: async (challengeId: string): Promise<ChallengeStats> => {\n    try {\n      const challengeDoc = await getDoc(doc(db, 'challenges', challengeId));\n      if (!challengeDoc.exists()) {\n        throw new Error('Challenge not found');\n      }\n\n      const challengeData = challengeDoc.data();\n      const endDate = convertTimestamp(challengeData.endDate);\n      const now = new Date();\n      const timeRemaining = Math.max(0, endDate.getTime() - now.getTime());\n      const daysRemaining = Math.ceil(timeRemaining / (1000 * 60 * 60 * 24));\n\n      // Get all participants\n      const participantsQuery = query(\n        collection(db, 'challengeParticipants'),\n        where('challengeId', '==', challengeId)\n      );\n\n      const participantsSnapshot = await getDocs(participantsQuery);\n      const totalParticipants = participantsSnapshot.size;\n      let completedParticipants = 0;\n      let totalProgress = 0;\n\n      participantsSnapshot.forEach(doc => {\n        const data = doc.data();\n        if (data.isCompleted) {\n          completedParticipants++;\n        }\n        totalProgress += data.progress || 0;\n      });\n\n      const averageProgress =\n        totalParticipants > 0 ? totalProgress / totalParticipants : 0;\n\n      // Get top performers (top 3)\n      const leaderboard =\n        await firebaseChallengeApi.getChallengeLeaderboard(challengeId);\n      const topPerformers = leaderboard.entries.slice(0, 3);\n\n      return {\n        totalParticipants,\n        completedParticipants,\n        averageProgress,\n        topPerformers,\n        timeRemaining: Math.floor(timeRemaining / 1000), // Convert to seconds\n        daysRemaining,\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Get challenge stats', {\n        defaultMessage: 'Failed to get challenge stats',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Update challenge (admin only)\n  updateChallenge: async (\n    challengeId: string,\n    data: UpdateChallengeData\n  ): Promise<Challenge> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const challengeDoc = await getDoc(doc(db, 'challenges', challengeId));\n      if (!challengeDoc.exists()) {\n        throw new Error('Challenge not found');\n      }\n\n      const challengeData = challengeDoc.data();\n\n      // Check if user is admin (challenge creator or group admin)\n      let isAdmin = challengeData.createdByUserId === auth.currentUser.uid;\n\n      if (!isAdmin && challengeData.groupId) {\n        const groupDoc = await getDoc(doc(db, 'groups', challengeData.groupId));\n        if (groupDoc.exists()) {\n          const groupData = groupDoc.data();\n          isAdmin = groupData.adminUserIds.includes(auth.currentUser.uid);\n        }\n      }\n\n      if (!isAdmin) {\n        throw new Error(\n          'Only challenge creators or group admins can update challenges'\n        );\n      }\n\n      const updateData = removeUndefinedFields({\n        ...data,\n        updatedAt: serverTimestamp(),\n      });\n\n      await updateDoc(doc(db, 'challenges', challengeId), updateData);\n\n      // Return updated challenge\n      return await firebaseChallengeApi.getChallenge(challengeId);\n    } catch (error) {\n      const apiError = handleError(error, 'Update challenge', {\n        defaultMessage: 'Failed to update challenge',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Delete challenge (admin only)\n  deleteChallenge: async (challengeId: string): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const challengeDoc = await getDoc(doc(db, 'challenges', challengeId));\n      if (!challengeDoc.exists()) {\n        throw new Error('Challenge not found');\n      }\n\n      const challengeData = challengeDoc.data();\n\n      // Check if user is admin\n      let isAdmin = challengeData.createdByUserId === auth.currentUser.uid;\n\n      if (!isAdmin && challengeData.groupId) {\n        const groupDoc = await getDoc(doc(db, 'groups', challengeData.groupId));\n        if (groupDoc.exists()) {\n          const groupData = groupDoc.data();\n          isAdmin = groupData.adminUserIds.includes(auth.currentUser.uid);\n        }\n      }\n\n      if (!isAdmin) {\n        throw new Error(\n          'Only challenge creators or group admins can delete challenges'\n        );\n      }\n\n      const batch = writeBatch(db);\n\n      // Delete challenge\n      batch.delete(doc(db, 'challenges', challengeId));\n\n      // Delete all participants\n      const participantsQuery = query(\n        collection(db, 'challengeParticipants'),\n        where('challengeId', '==', challengeId)\n      );\n      const participantsSnapshot = await getDocs(participantsQuery);\n\n      participantsSnapshot.forEach(participantDoc => {\n        batch.delete(participantDoc.ref);\n      });\n\n      await batch.commit();\n    } catch (error) {\n      const apiError = handleError(error, 'Delete challenge', {\n        defaultMessage: 'Failed to delete challenge',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Search challenges with filters and limitFn\n  searchChallenges: async (\n    filters: ChallengeFilters = {},\n    limitCount: number = 50\n  ): Promise<Challenge[]> => {\n    try {\n      // Use getChallenges but apply limitFn\n      let challengesQuery = query(\n        collection(db, 'challenges'),\n        orderBy('createdAt', 'desc'),\n        limitFn(limitCount)\n      );\n\n      // Apply simple filters\n      if (filters.groupId) {\n        challengesQuery = query(\n          collection(db, 'challenges'),\n          where('groupId', '==', filters.groupId),\n          orderBy('createdAt', 'desc'),\n          limitFn(limitCount)\n        );\n      } else if (filters.type) {\n        challengesQuery = query(\n          collection(db, 'challenges'),\n          where('type', '==', filters.type),\n          orderBy('createdAt', 'desc'),\n          limitFn(limitCount)\n        );\n      }\n\n      const snapshot = await getDocs(challengesQuery);\n      const challenges: Challenge[] = [];\n      const now = new Date();\n\n      for (const challengeDoc of snapshot.docs) {\n        const data = challengeDoc.data();\n\n        // Apply client-side filtering for complex conditions\n        const startDate = convertTimestamp(data.startDate);\n        const endDate = convertTimestamp(data.endDate);\n        const isActive = data.isActive !== false;\n\n        // Filter by status (client-side)\n        if (filters.status === 'active') {\n          if (!(now >= startDate && now <= endDate && isActive)) {\n            continue;\n          }\n        } else if (filters.status === 'upcoming') {\n          if (!(now < startDate && isActive)) {\n            continue;\n          }\n        } else if (filters.status === 'completed') {\n          if (!(now > endDate || !isActive)) {\n            continue;\n          }\n        }\n\n        challenges.push({\n          id: challengeDoc.id,\n          groupId: data.groupId,\n          name: data.name,\n          description: data.description,\n          type: data.type,\n          goalValue: data.goalValue,\n          startDate,\n          endDate,\n          participantCount: data.participantCount || 0,\n          createdByUserId: data.createdByUserId,\n          createdAt: convertTimestamp(data.createdAt),\n          updatedAt: convertTimestamp(data.updatedAt),\n          rules: data.rules,\n          projectIds: data.projectIds,\n          isActive,\n          rewards: data.rewards,\n          category: data.category,\n        });\n      }\n\n      return challenges;\n    } catch (error) {\n      handleError(error, 'in searchChallenges', {\n        severity: ErrorSeverity.ERROR,\n      });\n      const apiError = handleError(error, 'Search challenges', {\n        defaultMessage: 'Failed to search challenges',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Get challenges that a user is participating in\n  getUserChallenges: async (userId: string): Promise<Challenge[]> => {\n    try {\n      // Get all challenge participations for this user\n      const participantsQuery = query(\n        collection(db, 'challengeParticipants'),\n        where('userId', '==', userId)\n      );\n\n      const participantsSnapshot = await getDocs(participantsQuery);\n      const challenges: Challenge[] = [];\n\n      // Fetch each challenge\n      for (const participantDoc of participantsSnapshot.docs) {\n        const participantData = participantDoc.data();\n        const challengeId = participantData.challengeId;\n\n        try {\n          const challenge =\n            await firebaseChallengeApi.getChallenge(challengeId);\n          challenges.push(challenge);\n        } catch (error) {\n          handleError(error, `Load challenge ${challengeId}`, {\n            severity: ErrorSeverity.WARNING,\n          });\n        }\n      }\n\n      // Sort by most recent first\n      challenges.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n      return challenges;\n    } catch (error) {\n      const apiError = handleError(error, 'Get user challenges', {\n        defaultMessage: 'Failed to get user challenges',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n};\n\n// Import additional types for streak and achievement\nimport type {\n  StreakData,\n  StreakDay,\n  StreakStats,\n  Achievement,\n  AchievementType,\n  UserAchievementData,\n  AchievementProgress,\n} from '@/types';\n\n// Streak API methods\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/groups/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'query' is defined but never used.",
        "line": 284,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 284,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'groupId' is defined but never used.",
        "line": 299,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 299,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'timeRange' is defined but never used.",
        "line": 300,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 300,
        "endColumn": 14
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Groups API Module\n * Handles group management: CRUD operations, membership, and statistics\n */\n\n// ============================================================================\n// IMPORTS\n// ============================================================================\n\nimport { db } from '@/lib/firebase';\nimport {\n  doc,\n  getDoc,\n  setDoc,\n  updateDoc,\n  deleteDoc,\n  serverTimestamp,\n} from 'firebase/firestore';\nimport { removeUndefinedFields, convertTimestamp } from '../shared/utils';\n\n// Types\nimport type { Group, CreateGroupData, UpdateGroupData } from '@/types';\n\n// ============================================================================\n// GROUPS API\n// ============================================================================\n\nexport const firebaseGroupApi = {\n  /**\n   * Get a group by ID\n   */\n  getGroup: async (groupId: string): Promise<Group | null> => {\n    try {\n      const docRef = doc(db, 'groups', groupId);\n      const docSnap = await getDoc(docRef);\n\n      if (!docSnap.exists()) {\n        return null;\n      }\n\n      const data = docSnap.data();\n      const memberIds = data.memberIds || [];\n      return {\n        id: docSnap.id,\n        name: data.name,\n        description: data.description,\n        imageUrl: data.imageUrl,\n        category: data.category,\n        type: data.type,\n        privacySetting: data.privacySetting,\n        location: data.location,\n        adminUserIds: data.adminUserIds || [],\n        memberIds: memberIds,\n        memberCount: data.memberCount ?? memberIds.length,\n        createdByUserId: data.createdByUserId,\n        createdAt: convertTimestamp(data.createdAt),\n        updatedAt: convertTimestamp(data.updatedAt),\n      } as Group;\n    } catch (error) {\n      console.error('Error getting group:', error);\n      throw new Error(\n        typeof error === 'string' ? error : 'Failed to get group'\n      );\n    }\n  },\n\n  /**\n   * Create a new group\n   */\n  createGroup: async (\n    groupData: CreateGroupData,\n    userId: string\n  ): Promise<Group> => {\n    try {\n      const groupId = doc(db, 'groups').id;\n      const now = serverTimestamp();\n\n      const newGroup = {\n        ...removeUndefinedFields(groupData),\n        adminUserIds: [userId],\n        memberIds: [userId],\n        memberCount: 1,\n        createdByUserId: userId,\n        createdAt: now,\n        updatedAt: now,\n      };\n\n      const docRef = doc(db, 'groups', groupId);\n      await setDoc(docRef, newGroup);\n\n      return {\n        id: groupId,\n        ...groupData,\n        adminUserIds: [userId],\n        memberIds: [userId],\n        memberCount: 1,\n        createdByUserId: userId,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      } as Group;\n    } catch (error) {\n      console.error('Error creating group:', error);\n      throw new Error('Failed to create group');\n    }\n  },\n\n  /**\n   * Update a group\n   */\n  updateGroup: async (\n    groupId: string,\n    updateData: UpdateGroupData\n  ): Promise<void> => {\n    try {\n      const docRef = doc(db, 'groups', groupId);\n      const updatePayload = {\n        ...removeUndefinedFields(updateData),\n        updatedAt: serverTimestamp(),\n      };\n\n      await updateDoc(docRef, updatePayload);\n    } catch (error) {\n      console.error('Error updating group:', error);\n      throw new Error('Failed to update group');\n    }\n  },\n\n  /**\n   * Delete a group\n   */\n  deleteGroup: async (groupId: string): Promise<void> => {\n    try {\n      const docRef = doc(db, 'groups', groupId);\n      await deleteDoc(docRef);\n    } catch (error) {\n      console.error('Error deleting group:', error);\n      throw new Error('Failed to delete group');\n    }\n  },\n\n  /**\n   * Add a member to a group\n   */\n  addMember: async (groupId: string, userId: string): Promise<void> => {\n    try {\n      const groupRef = doc(db, 'groups', groupId);\n      const groupSnap = await getDoc(groupRef);\n\n      if (!groupSnap.exists()) {\n        throw new Error('Group not found');\n      }\n\n      const groupData = groupSnap.data();\n      const memberIds = groupData.memberIds || [];\n\n      if (memberIds.includes(userId)) {\n        throw new Error('User is already a member of this group');\n      }\n\n      await updateDoc(groupRef, {\n        memberIds: [...memberIds, userId],\n        updatedAt: serverTimestamp(),\n      });\n    } catch (error) {\n      console.error('Error adding member to group:', error);\n      throw new Error('Failed to add member');\n    }\n  },\n\n  /**\n   * Remove a member from a group\n   */\n  removeMember: async (groupId: string, userId: string): Promise<void> => {\n    try {\n      const groupRef = doc(db, 'groups', groupId);\n      const groupSnap = await getDoc(groupRef);\n\n      if (!groupSnap.exists()) {\n        throw new Error('Group not found');\n      }\n\n      const groupData = groupSnap.data();\n      const memberIds = groupData.memberIds || [];\n\n      if (!memberIds.includes(userId)) {\n        throw new Error('User is not a member of this group');\n      }\n\n      await updateDoc(groupRef, {\n        memberIds: memberIds.filter((id: string) => id !== userId),\n        updatedAt: serverTimestamp(),\n      });\n    } catch (error) {\n      console.error('Error removing member from group:', error);\n      throw new Error('Failed to remove member');\n    }\n  },\n\n  /**\n   * Join a group\n   */\n  joinGroup: async (groupId: string, userId: string): Promise<void> => {\n    try {\n      // Use GroupService for business logic\n      const { GroupService } = await import(\n        '@/features/groups/services/GroupService'\n      );\n      const groupService = new GroupService();\n      await groupService.joinGroup(groupId, userId);\n    } catch (error) {\n      console.error('Error joining group:', error);\n      throw new Error(\n        typeof error === 'string'\n          ? error\n          : error instanceof Error\n            ? error.message\n            : 'Failed to join group'\n      );\n    }\n  },\n\n  /**\n   * Leave a group\n   */\n  leaveGroup: async (groupId: string, userId: string): Promise<void> => {\n    try {\n      // Use GroupService for business logic\n      const { GroupService } = await import(\n        '@/features/groups/services/GroupService'\n      );\n      const groupService = new GroupService();\n      await groupService.leaveGroup(groupId, userId);\n    } catch (error) {\n      console.error('Error leaving group:', error);\n      throw new Error(\n        typeof error === 'string'\n          ? error\n          : error instanceof Error\n            ? error.message\n            : 'Failed to leave group'\n      );\n    }\n  },\n\n  /**\n   * Get all groups for a user\n   */\n  getUserGroups: async (userId: string, limit?: number): Promise<Group[]> => {\n    try {\n      // Use GroupService for business logic\n      const { GroupService } = await import(\n        '@/features/groups/services/GroupService'\n      );\n      const groupService = new GroupService();\n      const domainGroups = await groupService.getUserGroups(userId, limit);\n\n      // Convert domain Group entities to API Group interface\n      return domainGroups.map(g => ({\n        id: g.id,\n        name: g.name,\n        description: g.description,\n        imageUrl: g.imageUrl,\n        category: g.category,\n        type: 'other' as const, // Default type, not in domain entity\n        privacySetting:\n          g.privacy === 'approval-required' ? 'approval-required' : 'public',\n        location: g.location,\n        adminUserIds: Array.from(g.adminUserIds),\n        memberIds: Array.from(g.memberIds),\n        memberCount: g.getMemberCount(),\n        createdByUserId: g.createdByUserId,\n        createdAt: g.createdAt,\n        updatedAt: g.createdAt, // Use createdAt as fallback\n      }));\n    } catch (error) {\n      console.error('Error getting user groups:', error);\n      throw new Error('Failed to get user groups');\n    }\n  },\n\n  /**\n   * Search groups by name or description\n   */\n  searchGroups: async (query: string): Promise<Group[]> => {\n    try {\n      // Note: For production, implement proper text search\n      // This is a placeholder implementation\n      return [];\n    } catch (error) {\n      console.error('Error searching groups:', error);\n      throw new Error('Failed to search groups');\n    }\n  },\n\n  /**\n   * Get group analytics data for a time range\n   */\n  getGroupAnalytics: async (\n    groupId: string,\n    timeRange: 'week' | 'month' | 'year'\n  ): Promise<{\n    hoursData: Array<{ date: string; hours: number; members: number }>;\n    membershipGrowth: Array<{ date: string; members: number }>;\n  }> => {\n    try {\n      // Placeholder implementation\n      // In production, this would fetch actual session data from Firestore\n      return {\n        hoursData: [],\n        membershipGrowth: [],\n      };\n    } catch (error) {\n      console.error('Error getting group analytics:', error);\n      throw new Error('Failed to get group analytics');\n    }\n  },\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/notifications/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'auth' is defined but never used.",
        "line": 28,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'challengeType' is defined but never used.",
        "line": 201,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 201,
        "endColumn": 18
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Notifications API Module  \n * Handles notification CRUD and challenge-specific notifications\n */\n\n// ============================================================================\n// IMPORTS\n// ============================================================================\n\n// Firebase imports\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n  query,\n  where,\n  orderBy,\n  limit as limitFn,\n  serverTimestamp,\n  writeBatch,\n} from 'firebase/firestore';\n\n// Local Firebase config\nimport { db, auth } from '@/lib/firebase';\n\n// Error handling\nimport { handleError, ErrorSeverity } from '@/lib/errorHandler';\n\n// Shared utilities\nimport { convertTimestamp } from '../shared/utils';\n\n// Types\nimport type { Notification } from '@/types';\n\n// ============================================================================\n// PUBLIC API\n// ============================================================================\n\nexport const firebaseNotificationApi = {\n  // Create a notification\n  createNotification: async (\n    notification: Omit<Notification, 'id' | 'createdAt'>\n  ): Promise<Notification> => {\n    try {\n      const notificationData = {\n        ...notification,\n        createdAt: serverTimestamp(),\n      };\n\n      const docRef = await addDoc(\n        collection(db, 'notifications'),\n        notificationData\n      );\n\n      return {\n        id: docRef.id,\n        ...notification,\n        createdAt: new Date(),\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Create notification', {\n        defaultMessage: 'Failed to create notification',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Get notifications for a user\n  getUserNotifications: async (\n    userId: string,\n    limitCount: number = 50\n  ): Promise<Notification[]> => {\n    try {\n      const notificationsQuery = query(\n        collection(db, 'notifications'),\n        where('userId', '==', userId),\n        orderBy('createdAt', 'desc'),\n        limitFn(limitCount > 0 ? limitCount : 50)\n      );\n\n      const snapshot = await getDocs(notificationsQuery);\n      const notifications: Notification[] = [];\n\n      snapshot.forEach(doc => {\n        const data = doc.data();\n        notifications.push({\n          id: doc.id,\n          userId: data.userId,\n          type: data.type,\n          title: data.title,\n          message: data.message,\n          linkUrl: data.linkUrl,\n          isRead: data.isRead || false,\n          createdAt: convertTimestamp(data.createdAt),\n          actorId: data.actorId,\n          actorName: data.actorName,\n          actorUsername: data.actorUsername,\n          actorProfilePicture: data.actorProfilePicture,\n          sessionId: data.sessionId,\n          commentId: data.commentId,\n          groupId: data.groupId,\n          challengeId: data.challengeId,\n        });\n      });\n\n      return notifications;\n    } catch (error) {\n      const apiError = handleError(error, 'Get notifications', {\n        defaultMessage: 'Failed to get notifications',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Mark notification as read\n  markAsRead: async (notificationId: string): Promise<void> => {\n    try {\n      await updateDoc(doc(db, 'notifications', notificationId), {\n        isRead: true,\n        updatedAt: serverTimestamp(),\n      });\n    } catch (error) {\n      const apiError = handleError(error, 'Mark notification as read', {\n        defaultMessage: 'Failed to mark notification as read',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Mark all notifications as read for a user\n  markAllAsRead: async (userId: string): Promise<void> => {\n    try {\n      const notificationsQuery = query(\n        collection(db, 'notifications'),\n        where('userId', '==', userId),\n        where('isRead', '==', false)\n      );\n\n      const snapshot = await getDocs(notificationsQuery);\n      const batch = writeBatch(db);\n\n      snapshot.forEach(doc => {\n        batch.update(doc.ref, {\n          isRead: true,\n          updatedAt: serverTimestamp(),\n        });\n      });\n\n      await batch.commit();\n    } catch (error) {\n      const apiError = handleError(error, 'Mark all notifications as read', {\n        defaultMessage: 'Failed to mark all notifications as read',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Delete a notification\n  deleteNotification: async (notificationId: string): Promise<void> => {\n    try {\n      await deleteDoc(doc(db, 'notifications', notificationId));\n    } catch (error) {\n      const apiError = handleError(error, 'Delete notification', {\n        defaultMessage: 'Failed to delete notification',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Get unread notification count\n  getUnreadCount: async (userId: string): Promise<number> => {\n    try {\n      const notificationsQuery = query(\n        collection(db, 'notifications'),\n        where('userId', '==', userId),\n        where('isRead', '==', false)\n      );\n\n      const snapshot = await getDocs(notificationsQuery);\n      return snapshot.size;\n    } catch (error) {\n      const apiError = handleError(error, 'Get unread count', {\n        defaultMessage: 'Failed to get unread count',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n};\n\n// Challenge Notification Helper Functions\nexport const challengeNotifications = {\n  // Notify when a user completes a challenge\n  notifyCompletion: async (\n    challengeId: string,\n    userId: string,\n    challengeName: string,\n    challengeType: string\n  ): Promise<void> => {\n    try {\n      const notification: Omit<Notification, 'id' | 'createdAt'> = {\n        userId,\n        type: 'challenge',\n        title: '🏆 Challenge Completed!',\n        message: `Congratulations! You've completed the \"${challengeName}\" challenge.`,\n        challengeId,\n        isRead: false,\n      };\n\n      await firebaseNotificationApi.createNotification(notification);\n    } catch (error) {\n      handleError(error, 'send completion notification', {\n        severity: ErrorSeverity.ERROR,\n      });\n    }\n  },\n\n  // Notify other participants when someone joins a challenge\n  notifyParticipantJoined: async (\n    challengeId: string,\n    newParticipantId: string,\n    newParticipantName: string,\n    challengeName: string\n  ): Promise<void> => {\n    try {\n      // Get all other participants\n      const participantsQuery = query(\n        collection(db, 'challengeParticipants'),\n        where('challengeId', '==', challengeId)\n      );\n\n      const participantsSnapshot = await getDocs(participantsQuery);\n      const batch = writeBatch(db);\n\n      participantsSnapshot.forEach(participantDoc => {\n        const participantData = participantDoc.data();\n\n        // Don't notify the person who just joined\n        if (participantData.userId !== newParticipantId) {\n          const notificationRef = doc(collection(db, 'notifications'));\n          batch.set(notificationRef, {\n            userId: participantData.userId,\n            type: 'challenge',\n            title: '👋 New Challenger!',\n            message: `${newParticipantName} joined the \"${challengeName}\" challenge.`,\n            challengeId,\n            actorName: newParticipantName,\n            isRead: false,\n            createdAt: serverTimestamp(),\n          });\n        }\n      });\n\n      await batch.commit();\n    } catch (error) {\n      handleError(error, 'send participant joined notifications', {\n        severity: ErrorSeverity.ERROR,\n      });\n    }\n  },\n\n  // Notify all participants when challenge is ending soon\n  notifyEndingSoon: async (\n    challengeId: string,\n    challengeName: string,\n    daysRemaining: number\n  ): Promise<void> => {\n    try {\n      // Get all participants\n      const participantsQuery = query(\n        collection(db, 'challengeParticipants'),\n        where('challengeId', '==', challengeId)\n      );\n\n      const participantsSnapshot = await getDocs(participantsQuery);\n      const batch = writeBatch(db);\n\n      participantsSnapshot.forEach(participantDoc => {\n        const participantData = participantDoc.data();\n\n        const notificationRef = doc(collection(db, 'notifications'));\n        batch.set(notificationRef, {\n          userId: participantData.userId,\n          type: 'challenge',\n          title: '⏰ Challenge Ending Soon!',\n          message: `The \"${challengeName}\" challenge ends in ${daysRemaining} day${daysRemaining !== 1 ? 's' : ''}. Make your final push!`,\n          challengeId,\n          isRead: false,\n          createdAt: serverTimestamp(),\n        });\n      });\n\n      await batch.commit();\n    } catch (error) {\n      handleError(error, 'send ending soon notifications', {\n        severity: ErrorSeverity.ERROR,\n      });\n    }\n  },\n\n  // Notify when a new challenge is created in a group\n  notifyNewChallenge: async (\n    challengeId: string,\n    challengeName: string,\n    challengeType: string,\n    groupId: string,\n    creatorName: string\n  ): Promise<void> => {\n    try {\n      // Get all group members\n      const groupDoc = await getDoc(doc(db, 'groups', groupId));\n      if (!groupDoc.exists()) return;\n\n      const groupData = groupDoc.data();\n      const memberIds = groupData.memberUserIds || [];\n      const batch = writeBatch(db);\n\n      memberIds.forEach((memberId: string) => {\n        // Don't notify the creator\n        if (memberId !== groupData.createdByUserId) {\n          const notificationRef = doc(collection(db, 'notifications'));\n          batch.set(notificationRef, {\n            userId: memberId,\n            type: 'challenge',\n            title: '🎯 New Challenge Available!',\n            message: `${creatorName} created a new \"${challengeName}\" challenge in your group.`,\n            challengeId,\n            groupId,\n            actorName: creatorName,\n            isRead: false,\n            createdAt: serverTimestamp(),\n          });\n        }\n      });\n\n      await batch.commit();\n    } catch (error) {\n      handleError(error, 'send new challenge notifications', {\n        severity: ErrorSeverity.ERROR,\n      });\n    }\n  },\n\n  // Notify when rank changes significantly (moved up 3+ positions)\n  notifyRankChange: async (\n    challengeId: string,\n    userId: string,\n    challengeName: string,\n    newRank: number,\n    previousRank: number\n  ): Promise<void> => {\n    try {\n      // Only notify for significant improvements (moved up 3+ positions)\n      if (previousRank - newRank >= 3) {\n        const notification: Omit<Notification, 'id' | 'createdAt'> = {\n          userId,\n          type: 'challenge',\n          title: '📈 Rank Improved!',\n          message: `You moved up to #${newRank} in the \"${challengeName}\" challenge!`,\n          challengeId,\n          isRead: false,\n        };\n\n        await firebaseNotificationApi.createNotification(notification);\n      }\n    } catch (error) {\n      handleError(error, 'send rank change notification', {\n        severity: ErrorSeverity.ERROR,\n      });\n    }\n  },\n\n  // Notify when reaching milestones (25%, 50%, 75%, 90% of goal)\n  notifyMilestone: async (\n    challengeId: string,\n    userId: string,\n    challengeName: string,\n    progress: number,\n    goalValue: number\n  ): Promise<void> => {\n    try {\n      const percentage = (progress / goalValue) * 100;\n      const milestones = [25, 50, 75, 90];\n\n      for (const milestone of milestones) {\n        if (percentage >= milestone && percentage < milestone + 5) {\n          // 5% buffer to avoid duplicate notifications\n          const notification: Omit<Notification, 'id' | 'createdAt'> = {\n            userId,\n            type: 'challenge',\n            title: `🎯 ${milestone}% Complete!`,\n            message: `You're ${milestone}% of the way through the \"${challengeName}\" challenge. Keep going!`,\n            challengeId,\n            isRead: false,\n          };\n\n          await firebaseNotificationApi.createNotification(notification);\n          break; // Only send one milestone notification at a time\n        }\n      }\n    } catch (error) {\n      handleError(error, 'send milestone notification', {\n        severity: ErrorSeverity.ERROR,\n      });\n    }\n  },\n};\n\n// Activity API (alias for Project API for new naming convention)\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/projects/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/sessions/helpers.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 20,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 20,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [508, 511], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [508, 511], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 50,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 50,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1529, 1532], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1529, 1532], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Sessions module helper functions\n * Shared utilities for session operations\n */\n\nimport { doc, getDoc } from 'firebase/firestore';\n\nimport { db, auth } from '@/lib/firebase';\nimport {\n  handleError,\n  isPermissionError,\n  isNotFoundError,\n  ErrorSeverity,\n} from '@/lib/errorHandler';\nimport { convertTimestamp } from '../shared/utils';\nimport type { SessionWithDetails } from '@/types';\nimport { DEFAULT_ACTIVITIES } from '@/types';\n\nexport const populateSessionsWithDetails = async (\n  sessionDocs: any[]\n): Promise<SessionWithDetails[]> => {\n  const sessions: SessionWithDetails[] = [];\n  const batchSize = 10;\n\n  for (let i = 0; i < sessionDocs.length; i += batchSize) {\n    const batch = sessionDocs.slice(i, i + batchSize);\n    const batchPromises = batch.map(async sessionDoc => {\n      const sessionData = sessionDoc.data();\n\n      // Get user data - skip session if user has been deleted or is inaccessible\n      let userDoc;\n      try {\n        userDoc = await getDoc(doc(db, 'users', sessionData.userId));\n      } catch (error) {\n        // Handle permission errors for deleted users\n        if (isPermissionError(error) || isNotFoundError(error)) {\n          return null;\n        }\n        // Re-throw other errors\n        throw error;\n      }\n\n      if (!userDoc.exists()) {\n        // User no longer exists - skip session\n        return null;\n      }\n      const userData = userDoc.data();\n\n      // Get activity data (check both activityId and projectId for backwards compatibility)\n      let activityData: any = null;\n      const activityId = sessionData.activityId || sessionData.projectId;\n\n      if (activityId) {\n        // First, check if it's a default activity\n        const defaultActivity = DEFAULT_ACTIVITIES.find(\n          a => a.id === activityId\n        );\n\n        if (defaultActivity) {\n          activityData = {\n            id: defaultActivity.id,\n            name: defaultActivity.name,\n            icon: defaultActivity.icon,\n            color: defaultActivity.color,\n            description: '',\n            status: 'active',\n            isDefault: true,\n          };\n        } else {\n          // If not a default activity, try to fetch from custom activities collection\n          try {\n            const activityDoc = await getDoc(\n              doc(\n                db,\n                'projects',\n                sessionData.userId,\n                'userProjects',\n                activityId\n              )\n            );\n            if (activityDoc.exists()) {\n              activityData = activityDoc.data();\n            }\n          } catch (error) {\n            handleError(error, `Fetch activity ${activityId}`, {\n              severity: ErrorSeverity.WARNING,\n            });\n          }\n        }\n      }\n\n      // Check if current user has supported this session\n      const supportedBy = sessionData.supportedBy || [];\n      const isSupported = supportedBy.includes(auth.currentUser!.uid);\n\n      // Build the session with full details\n      const session: SessionWithDetails = {\n        id: sessionDoc.id,\n        userId: sessionData.userId,\n        activityId: sessionData.activityId || sessionData.projectId || '',\n        projectId: sessionData.projectId || sessionData.activityId || '',\n        title: sessionData.title || 'Untitled Session',\n        description: sessionData.description || '',\n        duration: sessionData.duration || 0,\n        startTime: convertTimestamp(sessionData.startTime) || new Date(),\n        tags: sessionData.tags || [],\n        visibility: sessionData.visibility || 'everyone',\n        showStartTime: sessionData.showStartTime,\n        howFelt: sessionData.howFelt,\n        privateNotes: sessionData.privateNotes,\n        images: sessionData.images || [],\n        allowComments: sessionData.allowComments !== false,\n        isArchived: sessionData.isArchived || false,\n        supportCount: sessionData.supportCount || 0,\n        supportedBy: supportedBy,\n        commentCount: sessionData.commentCount || 0,\n        isSupported,\n        createdAt: convertTimestamp(sessionData.createdAt),\n        updatedAt: convertTimestamp(sessionData.updatedAt),\n        user: {\n          id: sessionData.userId,\n          email: userData?.email || '',\n          name: userData?.name || 'Unknown User',\n          username: userData?.username || 'unknown',\n          bio: userData?.bio,\n          location: userData?.location,\n          profilePicture: userData?.profilePicture,\n          createdAt: convertTimestamp(userData?.createdAt) || new Date(),\n          updatedAt: convertTimestamp(userData?.updatedAt) || new Date(),\n        },\n        activity: activityData\n          ? {\n              id: activityData.id || activityId || '',\n              userId: sessionData.userId,\n              name: activityData.name || 'Unknown Activity',\n              description: activityData.description || '',\n              icon: activityData.icon || 'flat-color-icons:briefcase',\n              color: activityData.color || '#007AFF',\n              status: activityData.status || 'active',\n              isDefault: activityData.isDefault || false,\n              createdAt: activityData.createdAt\n                ? convertTimestamp(activityData.createdAt)\n                : new Date(),\n              updatedAt: activityData.updatedAt\n                ? convertTimestamp(activityData.updatedAt)\n                : new Date(),\n            }\n          : {\n              id: activityId || '',\n              userId: sessionData.userId,\n              name: 'Unknown Activity',\n              description: '',\n              icon: 'flat-color-icons:briefcase',\n              color: '#007AFF',\n              status: 'active',\n              createdAt: new Date(),\n              updatedAt: new Date(),\n            },\n        project: activityData\n          ? {\n              id: activityData.id || activityId || '',\n              userId: sessionData.userId,\n              name: activityData.name || 'Unknown Activity',\n              description: activityData.description || '',\n              icon: activityData.icon || 'flat-color-icons:briefcase',\n              color: activityData.color || '#007AFF',\n              status: activityData.status || 'active',\n              isDefault: activityData.isDefault || false,\n              createdAt: activityData.createdAt\n                ? convertTimestamp(activityData.createdAt)\n                : new Date(),\n              updatedAt: activityData.updatedAt\n                ? convertTimestamp(activityData.updatedAt)\n                : new Date(),\n            }\n          : {\n              id: activityId || '',\n              userId: sessionData.userId,\n              name: 'Unknown Activity',\n              description: '',\n              icon: 'flat-color-icons:briefcase',\n              color: '#007AFF',\n              status: 'active',\n              createdAt: new Date(),\n              updatedAt: new Date(),\n            },\n      };\n\n      return session;\n    });\n\n    const batchResults = await Promise.all(batchPromises);\n    // Filter out null values (sessions from deleted users)\n    const validSessions = batchResults.filter(\n      (session): session is SessionWithDetails => session !== null\n    );\n    sessions.push(...validSessions);\n  }\n\n  return sessions;\n};\n\n// Helper function to check if username already exists\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/sessions/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'startAfter' is defined but never used.",
        "line": 23,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'writeBatch' is defined but never used.",
        "line": 26,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'increment' is defined but never used.",
        "line": 27,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 27,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'removeUndefinedFields' is defined but never used.",
        "line": 47,
        "column": 28,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 47,
        "endColumn": 49
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'populateSessionsWithDetails' is defined but never used.",
        "line": 51,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 51,
        "endColumn": 37
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SessionFormData' is defined but never used.",
        "line": 66,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SessionSort' is defined but never used.",
        "line": 68,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 68,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 87,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 87,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2076, 2079], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2076, 2079], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 143,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 143,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3989, 3992], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3989, 3992], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'storageError' is defined but never used.",
        "line": 436,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 436,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'page' is assigned a value but never used.",
        "line": 646,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 646,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 742,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 742,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23908, 23911], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23908, 23911], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 12,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Sessions API Module\n * Handles session/activity tracking: CRUD operations, feed, supports\n */\n\n// ============================================================================\n// IMPORTS\n// ============================================================================\n\n// Firebase imports\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n  query,\n  where,\n  orderBy,\n  limit as limitFn,\n  startAfter,\n  serverTimestamp,\n  Timestamp,\n  writeBatch,\n  increment,\n  setDoc,\n} from 'firebase/firestore';\n\n// Local Firebase config\nimport { db, auth } from '@/lib/firebase';\n\n// Error handling\nimport {\n  handleError,\n  isPermissionError,\n  isNotFoundError,\n  ErrorSeverity,\n} from '@/lib/errorHandler';\nimport { checkRateLimit } from '@/lib/rateLimit';\n\n// Error messages\nimport { ERROR_MESSAGES } from '@/config/errorMessages';\n\n// Shared utilities\nimport { convertTimestamp, removeUndefinedFields } from '../shared/utils';\nimport { fetchUserDataForSocialContext } from '../social/helpers';\n\n// Session helpers\nimport { populateSessionsWithDetails } from './helpers';\n\n// Import other API modules\nimport { firebasePostApi } from './posts';\nimport { firebaseChallengeApi } from '../challenges';\n\n// Config\nimport { TIMEOUTS } from '@/config/constants';\nimport { TIMEOUT_ERRORS } from '@/config/errorMessages';\n\n// Types\nimport type {\n  Session,\n  SessionWithDetails,\n  CreateSessionData,\n  SessionFormData,\n  SessionFilters,\n  SessionSort,\n  SessionListResponse,\n  User,\n  Project,\n  Post,\n  Activity,\n} from '@/types';\n\n// ============================================================================\n// HELPER FUNCTIONS\n// ============================================================================\n\n/**\n * Validate and normalize project/activity status from Firestore\n * Ensures the status is one of the allowed values, falls back to 'active' if invalid\n *\n * @param status - The status value from Firestore (may be any string)\n * @returns A valid status value: 'active', 'completed', or 'archived'\n */\nfunction normalizeStatus(status: any): 'active' | 'completed' | 'archived' {\n  if (status === 'completed' || status === 'archived') {\n    return status;\n  }\n  return 'active';\n}\n\n/**\n * Create a timeout promise that rejects after a specified duration\n * Used to prevent Firebase queries from hanging indefinitely\n *\n * @param ms - Timeout duration in milliseconds\n * @param errorMessage - Error message to throw on timeout\n * @returns Promise that rejects after the specified duration\n */\nfunction createTimeout(ms: number, errorMessage: string): Promise<never> {\n  return new Promise((_, reject) => {\n    setTimeout(() => reject(new Error(errorMessage)), ms);\n  });\n}\n\n/**\n * Wrap a Firebase query with timeout protection\n * Races the query against a timeout to prevent hanging requests\n *\n * @param queryPromise - The Firebase query promise to execute\n * @param timeoutMs - Timeout duration in milliseconds (default: TIMEOUTS.FIREBASE_QUERY)\n * @returns Promise that resolves with query result or rejects on timeout\n */\nasync function withTimeout<T>(\n  queryPromise: Promise<T>,\n  timeoutMs: number = TIMEOUTS.FIREBASE_QUERY\n): Promise<T> {\n  return Promise.race([\n    queryPromise,\n    createTimeout(timeoutMs, TIMEOUT_ERRORS.FIREBASE_QUERY),\n  ]);\n}\n\n// ============================================================================\n// PUBLIC API\n// ============================================================================\n\nexport const firebaseSessionApi = {\n  // Create a new session\n  createSession: async (data: CreateSessionData): Promise<Session> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      // Rate limitFn session creation\n      checkRateLimit(auth.currentUser.uid, 'SESSION_CREATE');\n\n      // Prepare session data for Firestore\n      const activityId = data.activityId || data.projectId || ''; // Support both for backwards compatibility\n      const sessionData: any = {\n        userId: auth.currentUser.uid,\n        activityId: activityId, // New field\n        projectId: activityId, // Keep for backwards compatibility\n        title: data.title,\n        description: data.description || '',\n        duration: data.duration,\n        startTime: Timestamp.fromDate(data.startTime),\n        // tags removed - no longer used\n        visibility: data.visibility || 'private',\n        showStartTime: data.showStartTime || false,\n        privateNotes: data.privateNotes || '',\n        images: data.images || [],\n        allowComments: data.allowComments !== false,\n        isArchived: false,\n        // Social engagement fields (sessions ARE posts)\n        supportCount: 0,\n        supportedBy: [], // Initialize empty array for user IDs who support this session\n        commentCount: 0,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n      };\n\n      // Only add howFelt if it's defined (Firestore doesn't allow undefined values)\n      if (data.howFelt !== undefined) {\n        sessionData.howFelt = data.howFelt;\n      }\n\n      const docRef = await addDoc(collection(db, 'sessions'), sessionData);\n\n      // CRITICAL: Clear active session immediately after creating the session\n      // This ensures the timer is stopped even if the user navigates away\n      try {\n        await firebaseSessionApi.clearActiveSession();\n      } catch (error) {\n        handleError(error, 'clear active session', {\n          severity: ErrorSeverity.WARNING,\n        });\n        // Don't fail session creation if clearing active session fails\n      }\n\n      // Update challenge progress for this session\n      try {\n        await firebaseChallengeApi.updateChallengeProgress(\n          auth.currentUser.uid,\n          {\n            ...sessionData,\n            id: docRef.id,\n            startTime: data.startTime,\n          }\n        );\n      } catch (error) {\n        handleError(error, 'update challenge progress', {\n          severity: ErrorSeverity.WARNING,\n        });\n        // Don't fail session creation if challenge update fails\n      }\n\n      // Return session with proper structure\n      const newSession: Session = {\n        id: docRef.id,\n        userId: auth.currentUser.uid,\n        activityId: activityId,\n        projectId: activityId, // Backwards compatibility\n        title: data.title,\n        description: data.description,\n        duration: data.duration,\n        startTime: data.startTime,\n        // tags removed - no longer used\n        visibility: sessionData.visibility,\n        showStartTime: sessionData.showStartTime,\n        howFelt: data.howFelt,\n        privateNotes: data.privateNotes,\n        images: data.images || [],\n        allowComments: sessionData.allowComments,\n        isArchived: false,\n        // Social engagement fields (sessions ARE posts)\n        supportCount: 0,\n        commentCount: 0,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      return newSession;\n    } catch (error) {\n      const apiError = handleError(error, 'Create session', {\n        defaultMessage: ERROR_MESSAGES.SESSION_SAVE_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Create a session with an optional post based on visibility settings\n   *\n   * @param sessionData - The session data to create\n   * @param postContent - The content for the post (if visibility is not private)\n   * @param visibility - Who can see this session: 'everyone', 'followers', or 'private'\n   * @returns Promise resolving to an object containing the created session and optional post\n   * @throws Error if user is not authenticated or session creation fails\n   */\n  createSessionWithPost: async (\n    sessionData: CreateSessionData,\n    postContent: string,\n    visibility: 'everyone' | 'followers' | 'private'\n  ): Promise<{ session: Session; post?: Post }> => {\n    try {\n      // Create session first with the correct visibility\n      const session = await firebaseSessionApi.createSession({\n        ...sessionData,\n        visibility,\n      });\n\n      let post: Post | undefined;\n\n      // Create post if not private\n      if (visibility !== 'private') {\n        post = await firebasePostApi.createPost({\n          sessionId: session.id,\n          content: postContent,\n          visibility,\n        });\n      }\n\n      return { session, post };\n    } catch (error) {\n      handleError(error, 'in createSessionWithPost', {\n        severity: ErrorSeverity.ERROR,\n      });\n      const apiError = handleError(error, 'Create session with post', {\n        defaultMessage: ERROR_MESSAGES.SESSION_SAVE_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Save the active timer session to Firestore for persistence across tabs/devices\n   *\n   * @param timerData - The timer data to save\n   * @param timerData.startTime - When the timer started\n   * @param timerData.projectId - The project being tracked\n   * @param timerData.selectedTaskIds - Array of task IDs being tracked\n   * @param timerData.pausedDuration - Total time paused in milliseconds (optional)\n   * @param timerData.isPaused - Whether the timer is currently paused (optional)\n   * @returns Promise that resolves when the session is saved\n   * @throws Error if user is not authenticated or save fails\n   */\n  saveActiveSession: async (timerData: {\n    startTime: Date;\n    projectId: string;\n    selectedTaskIds: string[];\n    pausedDuration?: number;\n    isPaused?: boolean;\n  }): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const userId = auth.currentUser.uid;\n\n      // Ensure user document exists first (Firestore requires parent docs for subcollections)\n      const userRef = doc(db, 'users', userId);\n      await setDoc(\n        userRef,\n        {\n          uid: userId,\n          updatedAt: serverTimestamp(),\n        },\n        { merge: true }\n      );\n\n      // Save the active session\n      const activeSessionRef = doc(\n        db,\n        'users',\n        userId,\n        'activeSession',\n        'current'\n      );\n      await setDoc(activeSessionRef, {\n        startTime: Timestamp.fromDate(timerData.startTime),\n        projectId: timerData.projectId,\n        selectedTaskIds: timerData.selectedTaskIds,\n        pausedDuration: timerData.pausedDuration || 0,\n        isPaused: !!timerData.isPaused,\n        lastUpdated: serverTimestamp(),\n        createdAt: serverTimestamp(),\n      });\n    } catch (error) {\n      const apiError = handleError(error, 'Save active session');\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Retrieve the active timer session from Firestore\n   *\n   * @returns Promise resolving to the active session data or null if no active session exists\n   */\n  getActiveSession: async (): Promise<{\n    startTime: Date;\n    projectId: string;\n    selectedTaskIds: string[];\n    pausedDuration: number;\n    isPaused: boolean;\n  } | null> => {\n    try {\n      if (!auth.currentUser) {\n        return null;\n      }\n\n      const userId = auth.currentUser.uid;\n      const activeSessionRef = doc(\n        db,\n        'users',\n        userId,\n        'activeSession',\n        'current'\n      );\n      const activeSessionDoc = await getDoc(activeSessionRef);\n\n      if (!activeSessionDoc.exists()) {\n        return null;\n      }\n\n      const data = activeSessionDoc.data();\n\n      // Validate data exists and has required fields\n      if (!data || !data.startTime || !data.projectId) {\n        handleError(\n          new Error('Active session data is incomplete'),\n          'Get active session',\n          { severity: ErrorSeverity.WARNING }\n        );\n        return null;\n      }\n\n      return {\n        startTime: data.startTime.toDate(),\n        projectId: data.projectId,\n        selectedTaskIds: data.selectedTaskIds || [],\n        pausedDuration: data.pausedDuration || 0,\n        isPaused: !!data.isPaused,\n      };\n    } catch (error) {\n      // If it's a permission error or document doesn't exist, silently return null\n      if (isPermissionError(error) || isNotFoundError(error)) {\n        return null;\n      }\n      handleError(error, 'Get active session', {\n        severity: ErrorSeverity.ERROR,\n      });\n      return null;\n    }\n  },\n\n  /**\n   * Clear the active timer session from Firestore and broadcast cancellation to other tabs\n   *\n   * @returns Promise that resolves when the session is cleared\n   * @throws Error if clearing the session fails (except for permission/not found errors)\n   */\n  clearActiveSession: async (): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        return;\n      }\n\n      const userId = auth.currentUser.uid;\n      const activeSessionRef = doc(\n        db,\n        'users',\n        userId,\n        'activeSession',\n        'current'\n      );\n\n      // Delete the document immediately to prevent race conditions\n      // This is atomic and prevents any in-flight auto-save from restoring the session\n      await deleteDoc(activeSessionRef);\n\n      // Broadcast cancellation to other tabs using localStorage event\n      try {\n        const event = {\n          type: 'session-cancelled',\n          timestamp: Date.now(),\n          userId: userId,\n        };\n        localStorage.setItem('timer-event', JSON.stringify(event));\n        // Remove immediately to trigger the event\n        localStorage.removeItem('timer-event');\n      } catch (storageError) {\n        // Ignore storage errors (e.g., in private browsing mode)\n      }\n    } catch (error) {\n      const apiError = handleError(error, 'Clear active session', {\n        defaultMessage: 'Failed to clear active session',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get sessions for a user with fully populated user and project data\n   * Sessions are used as the primary content type (like posts on Strava)\n   *\n   * @param userId - The user ID whose sessions to retrieve\n   * @param limitCount - Maximum number of sessions to return (default: 20)\n   * @param isOwnProfile - Whether viewing own profile (shows all sessions including private)\n   * @returns Promise resolving to array of sessions with user and project details\n   * @throws Error if user is not authenticated or fetch fails\n   */\n  getUserSessions: async (\n    userId: string,\n    limitCount: number = 20,\n    isOwnProfile: boolean = false\n  ): Promise<SessionWithDetails[]> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      let sessionsQuery;\n\n      if (isOwnProfile) {\n        // Show all sessions for own profile\n        sessionsQuery = query(\n          collection(db, 'sessions'),\n          where('userId', '==', userId),\n          orderBy('createdAt', 'desc'),\n          limitFn(limitCount)\n        );\n      } else {\n        // Show only public sessions for other profiles\n        sessionsQuery = query(\n          collection(db, 'sessions'),\n          where('userId', '==', userId),\n          where('visibility', '==', 'everyone'),\n          orderBy('createdAt', 'desc'),\n          limitFn(limitCount)\n        );\n      }\n\n      const querySnapshot = await withTimeout(getDocs(sessionsQuery));\n      const sessions: SessionWithDetails[] = [];\n\n      // Get user data once (since all sessions are from the same user)\n      const userDoc = await withTimeout(getDoc(doc(db, 'users', userId)));\n      const userData = userDoc.data();\n      const user: User = {\n        id: userId,\n        email: userData?.email || '',\n        name: userData?.name || 'Unknown User',\n        username: userData?.username || 'unknown',\n        bio: userData?.bio,\n        location: userData?.location,\n        profilePicture: userData?.profilePicture,\n        createdAt: convertTimestamp(userData?.createdAt) || new Date(),\n        updatedAt: convertTimestamp(userData?.updatedAt) || new Date(),\n      };\n\n      // Process each session\n      for (const sessionDoc of querySnapshot.docs) {\n        const sessionData = sessionDoc.data();\n\n        // Get project data\n        let projectData = null;\n        const projectId = sessionData.projectId;\n        if (projectId) {\n          try {\n            const projectDoc = await getDoc(\n              doc(db, 'projects', userId, 'userProjects', projectId)\n            );\n            if (projectDoc.exists()) {\n              projectData = projectDoc.data();\n            }\n          } catch (error) {\n            handleError(error, `Fetch project ${projectId}`, {\n              severity: ErrorSeverity.WARNING,\n            });\n          }\n        }\n\n        const project: Project = projectData\n          ? {\n              id: projectId,\n              userId: userId,\n              name: projectData.name || 'Unknown Project',\n              description: projectData.description || '',\n              icon: projectData.icon || '📁',\n              color: projectData.color || '#64748B',\n              weeklyTarget: projectData.weeklyTarget,\n              totalTarget: projectData.totalTarget,\n              status: normalizeStatus(projectData.status),\n              createdAt: convertTimestamp(projectData.createdAt) || new Date(),\n              updatedAt: convertTimestamp(projectData.updatedAt) || new Date(),\n            }\n          : {\n              id: projectId || 'unknown',\n              userId: userId,\n              name: 'Unknown Project',\n              description: '',\n              icon: '📁',\n              color: '#64748B',\n              status: 'active',\n              createdAt: new Date(),\n              updatedAt: new Date(),\n            };\n\n        sessions.push({\n          id: sessionDoc.id,\n          userId: sessionData.userId,\n          activityId: sessionData.activityId || sessionData.projectId || '',\n          projectId: sessionData.projectId || sessionData.activityId || '',\n          title: sessionData.title || 'Untitled Session',\n          description: sessionData.description || '',\n          duration: sessionData.duration || 0,\n          startTime: convertTimestamp(sessionData.startTime) || new Date(),\n          tags: sessionData.tags || [],\n          visibility: sessionData.visibility || 'everyone',\n          showStartTime: sessionData.showStartTime,\n          howFelt: sessionData.howFelt,\n          privateNotes: sessionData.privateNotes,\n          isArchived: sessionData.isArchived || false,\n          images: sessionData.images || [],\n          allowComments: sessionData.allowComments !== false,\n          supportCount: sessionData.supportCount || 0,\n          commentCount: sessionData.commentCount || 0,\n          createdAt: convertTimestamp(sessionData.createdAt) || new Date(),\n          updatedAt: convertTimestamp(sessionData.updatedAt) || new Date(),\n          user,\n          project,\n          activity: project,\n        });\n      }\n\n      return sessions;\n    } catch (error) {\n      handleError(error, 'get user sessions', {\n        severity: ErrorSeverity.ERROR,\n      });\n      const apiError = handleError(error, 'Get user sessions', {\n        defaultMessage: ERROR_MESSAGES.SESSION_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get the total count of sessions for a user\n   *\n   * @param userId - The user ID whose session count to retrieve\n   * @param isOwnProfile - Whether viewing own profile (counts all sessions including private)\n   * @returns Promise resolving to the session count (returns 0 on error)\n   */\n  getUserSessionsCount: async (\n    userId: string,\n    isOwnProfile: boolean = false\n  ): Promise<number> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      let sessionsQuery;\n\n      if (isOwnProfile) {\n        // Count all sessions for own profile\n        sessionsQuery = query(\n          collection(db, 'sessions'),\n          where('userId', '==', userId)\n        );\n      } else {\n        // Count only public sessions for other profiles\n        sessionsQuery = query(\n          collection(db, 'sessions'),\n          where('userId', '==', userId),\n          where('visibility', '==', 'everyone')\n        );\n      }\n\n      const querySnapshot = await withTimeout(getDocs(sessionsQuery));\n      return querySnapshot.size;\n    } catch (error) {\n      handleError(error, 'get user sessions count', {\n        severity: ErrorSeverity.ERROR,\n      });\n      return 0;\n    }\n  },\n\n  /**\n   * Get sessions for the authenticated user with optional filters\n   *\n   * @param page - Page number for pagination (default: 1)\n   * @param limitCount - Maximum number of sessions per page (default: 20)\n   * @param filters - Optional filters to apply (e.g., projectId)\n   * @returns Promise resolving to sessions list with pagination metadata\n   * @throws Error if user is not authenticated or fetch fails\n   */\n  getSessions: async (\n    page: number = 1,\n    limitCount: number = 20,\n    filters: SessionFilters = {}\n  ): Promise<SessionListResponse> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      let sessionsQuery = query(\n        collection(db, 'sessions'),\n        where('userId', '==', auth.currentUser.uid),\n        orderBy('startTime', 'desc'),\n        limitFn(limitCount)\n      );\n\n      if (filters.projectId) {\n        sessionsQuery = query(\n          collection(db, 'sessions'),\n          where('userId', '==', auth.currentUser.uid),\n          where('projectId', '==', filters.projectId),\n          orderBy('startTime', 'desc'),\n          limitFn(limitCount)\n        );\n      }\n\n      const querySnapshot = await withTimeout(getDocs(sessionsQuery));\n      const sessions: Session[] = [];\n\n      querySnapshot.forEach(doc => {\n        const data = doc.data();\n        sessions.push({\n          id: doc.id,\n          userId: data.userId,\n          activityId: data.activityId || data.projectId || '',\n          projectId: data.projectId || data.activityId || '',\n          title: data.title,\n          description: data.description,\n          duration: data.duration,\n          startTime: convertTimestamp(data.startTime),\n          tags: data.tags || [],\n          visibility: data.visibility || 'private',\n          showStartTime: data.showStartTime,\n          howFelt: data.howFelt,\n          privateNotes: data.privateNotes,\n          isArchived: data.isArchived || false,\n          images: data.images || [],\n          allowComments: data.allowComments !== false,\n          supportCount: data.supportCount || 0,\n          commentCount: data.commentCount || 0,\n          createdAt: convertTimestamp(data.createdAt),\n          updatedAt: convertTimestamp(data.updatedAt),\n        });\n      });\n\n      return {\n        sessions,\n        totalCount: sessions.length,\n        hasMore: querySnapshot.docs.length === limitCount,\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Get sessions', {\n        defaultMessage: ERROR_MESSAGES.SESSION_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Update an existing session with new data\n   *\n   * @param sessionId - The ID of the session to update\n   * @param data - Partial session data with fields to update\n   * @returns Promise that resolves when the session is updated\n   * @throws Error if user is not authenticated, session not found, or permission denied\n   */\n  updateSession: async (\n    sessionId: string,\n    data: Partial<CreateSessionData>\n  ): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const sessionRef = doc(db, 'sessions', sessionId);\n      const sessionDoc = await getDoc(sessionRef);\n\n      if (\n        !sessionDoc.exists() ||\n        sessionDoc.data().userId !== auth.currentUser.uid\n      ) {\n        throw new Error('Session not found or permission denied');\n      }\n\n      // Prepare update data\n      const updateData: any = {\n        updatedAt: serverTimestamp(),\n      };\n\n      if (data.title !== undefined) updateData.title = data.title;\n      if (data.description !== undefined)\n        updateData.description = data.description;\n      if (data.projectId !== undefined) updateData.projectId = data.projectId;\n      if (data.visibility !== undefined)\n        updateData.visibility = data.visibility;\n      if (data.tags !== undefined) updateData.tags = data.tags;\n      if (data.howFelt !== undefined) updateData.howFelt = data.howFelt;\n      if (data.privateNotes !== undefined)\n        updateData.privateNotes = data.privateNotes;\n      if (data.images !== undefined) updateData.images = data.images;\n      if (data.allowComments !== undefined)\n        updateData.allowComments = data.allowComments;\n      if (data.startTime !== undefined)\n        updateData.startTime = Timestamp.fromDate(data.startTime);\n      if (data.duration !== undefined) updateData.duration = data.duration;\n\n      // Remove undefined values\n      Object.keys(updateData).forEach(\n        key => updateData[key] === undefined && delete updateData[key]\n      );\n\n      await updateDoc(sessionRef, updateData);\n    } catch (error) {\n      const apiError = handleError(error, 'Update session', {\n        defaultMessage: ERROR_MESSAGES.SESSION_UPDATE_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Delete a session permanently\n   *\n   * @param sessionId - The ID of the session to delete\n   * @returns Promise that resolves when the session is deleted\n   * @throws Error if user is not authenticated, session not found, or permission denied\n   */\n  deleteSession: async (sessionId: string): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const sessionRef = doc(db, 'sessions', sessionId);\n      const sessionDoc = await getDoc(sessionRef);\n\n      if (\n        !sessionDoc.exists() ||\n        sessionDoc.data().userId !== auth.currentUser.uid\n      ) {\n        throw new Error('Session not found or permission denied');\n      }\n\n      await deleteDoc(sessionRef);\n    } catch (error) {\n      const apiError = handleError(error, 'Delete session', {\n        defaultMessage: ERROR_MESSAGES.SESSION_DELETE_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get a single session by ID (basic data only, no populated details)\n   *\n   * @param sessionId - The ID of the session to retrieve\n   * @returns Promise resolving to the session data\n   * @throws Error if user is not authenticated, session not found, or permission denied\n   */\n  getSession: async (sessionId: string): Promise<Session> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const sessionRef = doc(db, 'sessions', sessionId);\n      const sessionDoc = await getDoc(sessionRef);\n\n      if (!sessionDoc.exists()) {\n        throw new Error('Session not found');\n      }\n\n      const data = sessionDoc.data();\n\n      // Check if user has permission to view\n      if (data.userId !== auth.currentUser.uid) {\n        throw new Error('Permission denied');\n      }\n\n      return {\n        id: sessionDoc.id,\n        userId: data.userId,\n        activityId: data.activityId || data.projectId || '',\n        projectId: data.projectId || data.activityId || '',\n        title: data.title,\n        description: data.description,\n        duration: data.duration,\n        startTime: convertTimestamp(data.startTime),\n        tags: data.tags || [],\n        visibility: data.visibility || 'private',\n        showStartTime: data.showStartTime,\n        howFelt: data.howFelt,\n        privateNotes: data.privateNotes,\n        isArchived: data.isArchived || false,\n        images: data.images || [],\n        allowComments: data.allowComments !== false,\n        supportCount: data.supportCount || 0,\n        commentCount: data.commentCount || 0,\n        createdAt: convertTimestamp(data.createdAt),\n        updatedAt: convertTimestamp(data.updatedAt),\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Get session', {\n        defaultMessage: ERROR_MESSAGES.SESSION_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get a single session with fully populated user and project details\n   *\n   * @param sessionId - The ID of the session to retrieve\n   * @returns Promise resolving to the session with user, project, and support status\n   * @throws Error if user is not authenticated, session not found, or permission denied\n   */\n  getSessionWithDetails: async (\n    sessionId: string\n  ): Promise<SessionWithDetails> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const sessionRef = doc(db, 'sessions', sessionId);\n      const sessionDoc = await getDoc(sessionRef);\n\n      if (!sessionDoc.exists()) {\n        throw new Error('Session not found');\n      }\n\n      const data = sessionDoc.data();\n\n      // Get user data\n      const userData = await fetchUserDataForSocialContext(data.userId);\n\n      // Get project data\n      let activity: Activity | null = null;\n      if (data.projectId || data.activityId) {\n        const activityId = data.activityId || data.projectId;\n        const activityRef = doc(\n          db,\n          'projects',\n          data.userId,\n          'userProjects',\n          activityId\n        );\n        const activityDoc = await getDoc(activityRef);\n        if (activityDoc.exists()) {\n          const activityData = activityDoc.data();\n          activity = {\n            id: activityDoc.id,\n            userId: data.userId,\n            name: activityData.name,\n            description: activityData.description || '',\n            color: activityData.color || '#007AFF',\n            icon: activityData.icon || 'FolderIcon',\n            status: normalizeStatus(activityData.status),\n            createdAt: convertTimestamp(activityData.createdAt),\n            updatedAt: convertTimestamp(activityData.updatedAt),\n          };\n        }\n      }\n\n      // Check if current user has supported this session\n      const supportedBy = data.supportedBy || [];\n      const isSupported = supportedBy.includes(auth.currentUser.uid);\n\n      // Create default activity object\n      const defaultActivity: Activity = {\n        id: '',\n        userId: data.userId,\n        name: 'No Activity',\n        description: '',\n        color: '#007AFF',\n        icon: 'FolderIcon',\n        status: 'active' as const,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      return {\n        id: sessionDoc.id,\n        userId: data.userId,\n        activityId: data.activityId || data.projectId || '',\n        projectId: data.projectId || data.activityId || '',\n        title: data.title,\n        description: data.description,\n        duration: data.duration,\n        startTime: convertTimestamp(data.startTime),\n        tags: data.tags || [],\n        visibility: data.visibility || 'private',\n        showStartTime: data.showStartTime,\n        howFelt: data.howFelt,\n        privateNotes: data.privateNotes,\n        isArchived: data.isArchived || false,\n        images: data.images || [],\n        allowComments: data.allowComments !== false,\n        supportCount: data.supportCount || 0,\n        supportedBy: supportedBy,\n        commentCount: data.commentCount || 0,\n        isSupported,\n        createdAt: convertTimestamp(data.createdAt),\n        updatedAt: convertTimestamp(data.updatedAt),\n        user: {\n          id: data.userId,\n          name: userData?.name || 'Unknown User',\n          username: userData?.username || '',\n          email: userData?.email || '',\n          profilePicture: userData?.profilePicture,\n          bio: userData?.bio,\n          location: userData?.location,\n          createdAt: userData?.createdAt || new Date(),\n          updatedAt: userData?.updatedAt || new Date(),\n        },\n        activity: activity || defaultActivity,\n        project: activity || defaultActivity,\n      };\n    } catch (error) {\n      // Don't log permission errors - these are expected for private/restricted sessions\n      const silent = isPermissionError(error);\n      const apiError = handleError(error, 'Get session with details', {\n        defaultMessage: ERROR_MESSAGES.SESSION_LOAD_FAILED,\n        silent,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n};\n\n// Helper function to process post documents into PostWithDetails\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/sessions/posts.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Timestamp' is defined but never used.",
        "line": 31,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 31,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'increment' is defined but never used.",
        "line": 32,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'removeUndefinedFields' is defined but never used.",
        "line": 48,
        "column": 28,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 48,
        "endColumn": 49
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'PostSupport' is defined but never used.",
        "line": 62,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 62,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'User' is defined but never used.",
        "line": 66,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Project' is defined but never used.",
        "line": 67,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'processPosts' is assigned a value but never used.",
        "line": 74,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 74,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 74,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 74,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1563, 1566], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1563, 1566], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'projectData' is assigned a value but never used.",
        "line": 100,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 100,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'projectId' is assigned a value but never used.",
        "line": 246,
        "column": 40,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 246,
        "endColumn": 49
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'socialGraphError' is defined but never used.",
        "line": 317,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 317,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'socialGraphError' is defined but never used.",
        "line": 470,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 470,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'socialGraphError' is defined but never used.",
        "line": 625,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 625,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'projectData' is assigned a value but never used.",
        "line": 993,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 993,
        "endColumn": 26
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 14,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Posts API Module (LEGACY)\n *\n * ⚠️ DEPRECATED: Posts are now sessions. This module exists for backward compatibility only.\n *\n * Sessions ARE the primary content type, not posts. All post operations\n * delegate to session operations.\n *\n * @deprecated Use firebaseSessionApi instead\n */\n\n// ============================================================================\n// IMPORTS\n// ============================================================================\n\n// Firebase imports\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n  query,\n  where,\n  orderBy,\n  limit as limitFn,\n  startAfter,\n  serverTimestamp,\n  Timestamp,\n  increment,\n  runTransaction,\n  onSnapshot,\n} from 'firebase/firestore';\n\n// Local Firebase config\nimport { db, auth } from '@/lib/firebase';\n\n// Error handling\nimport {\n  handleError,\n  ErrorSeverity,\n  isPermissionError,\n} from '@/lib/errorHandler';\n\n// Shared utilities\nimport { convertTimestamp, removeUndefinedFields } from '../shared/utils';\n\n// Session helpers\nimport { populateSessionsWithDetails } from './helpers';\n\n// Rate limiting\nimport { checkRateLimit } from '@/lib/rateLimit';\n\n// Types\nimport type {\n  Post,\n  PostWithDetails,\n  CreatePostData,\n  UpdatePostData,\n  PostSupport,\n  FeedResponse,\n  FeedFilters,\n  Session,\n  User,\n  Project,\n} from '@/types';\n\n// ============================================================================\n// PRIVATE HELPERS\n// ============================================================================\n\nconst processPosts = async (postDocs: any[]): Promise<PostWithDetails[]> => {\n  const posts: PostWithDetails[] = [];\n  const batchSize = 10;\n\n  for (let i = 0; i < postDocs.length; i += batchSize) {\n    const batch = postDocs.slice(i, i + batchSize);\n    const batchPromises = batch.map(async postDoc => {\n      const postData = postDoc.data();\n\n      // Get user data\n      const userDoc = await getDoc(doc(db, 'users', postData.userId));\n      const userData = userDoc.data();\n\n      // Get session data\n      const sessionDoc = await getDoc(doc(db, 'sessions', postData.sessionId));\n      const sessionData = sessionDoc.data();\n\n      // Get project data\n      let projectData = null;\n      const projectId = sessionData?.projectId;\n      if (projectId) {\n        try {\n          const projectDoc = await getDoc(\n            doc(db, 'projects', postData.userId, 'userProjects', projectId)\n          );\n          if (projectDoc.exists()) {\n            projectData = projectDoc.data();\n          }\n        } catch (error) {\n          handleError(error, `Fetch project ${projectId}`, {\n            severity: ErrorSeverity.WARNING,\n          });\n        }\n      }\n\n      // Check if current user has supported this post\n      const supportDoc = auth.currentUser\n        ? await getDoc(\n            doc(db, 'postSupports', `${auth.currentUser.uid}_${postDoc.id}`)\n          )\n        : null;\n      const isSupported = supportDoc?.exists() || false;\n\n      // Build the post with full details\n      const post: PostWithDetails = {\n        id: postDoc.id,\n        sessionId: postData.sessionId,\n        userId: postData.userId,\n        content: postData.content,\n        supportCount: postData.supportCount || 0,\n        commentCount: postData.commentCount || 0,\n        isSupported,\n        visibility: postData.visibility || 'everyone',\n        createdAt: convertTimestamp(postData.createdAt),\n        updatedAt: convertTimestamp(postData.updatedAt),\n        user: {\n          id: postData.userId,\n          email: userData?.email || '',\n          name: userData?.name || 'Unknown User',\n          username: userData?.username || 'unknown',\n          bio: userData?.bio,\n          location: userData?.location,\n          profilePicture: userData?.profilePicture,\n          createdAt: convertTimestamp(userData?.createdAt) || new Date(),\n          updatedAt: convertTimestamp(userData?.updatedAt) || new Date(),\n        },\n        session: sessionData\n          ? {\n              id: postData.sessionId,\n              userId: postData.userId,\n              activityId: sessionData.activityId || sessionData.projectId || '',\n              projectId: sessionData.projectId || sessionData.activityId || '',\n              title: sessionData.title || 'Untitled Session',\n              description: sessionData.description || '',\n              duration: sessionData.duration || 0,\n              startTime: convertTimestamp(sessionData.startTime) || new Date(),\n              tags: sessionData.tags || [],\n              visibility: sessionData.visibility || 'everyone',\n              showStartTime: sessionData.showStartTime,\n              howFelt: sessionData.howFelt,\n              privateNotes: sessionData.privateNotes,\n              isArchived: sessionData.isArchived || false,\n              supportCount: sessionData.supportCount || 0,\n              commentCount: sessionData.commentCount || 0,\n              createdAt: convertTimestamp(sessionData.createdAt) || new Date(),\n              updatedAt: convertTimestamp(sessionData.updatedAt) || new Date(),\n            }\n          : ({\n              id: postData.sessionId,\n              userId: postData.userId,\n              activityId: '',\n              projectId: '',\n              title: 'Session Not Found',\n              description: '',\n              duration: 0,\n              startTime: new Date(),\n              tags: [],\n              visibility: 'everyone',\n              isArchived: false,\n              supportCount: 0,\n              commentCount: 0,\n              createdAt: new Date(),\n              updatedAt: new Date(),\n            } as Session),\n      };\n\n      return post;\n    });\n\n    const batchResults = await Promise.all(batchPromises);\n    posts.push(...batchResults);\n  }\n\n  return posts;\n};\n\n// Firebase Post API\n\n// ============================================================================\n// PUBLIC API\n// ============================================================================\n\nexport const firebasePostApi = {\n  // Create a new post\n  createPost: async (data: CreatePostData): Promise<Post> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const postData = {\n        ...data,\n        userId: auth.currentUser.uid,\n        supportCount: 0,\n        commentCount: 0,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n      };\n\n      const docRef = await addDoc(collection(db, 'posts'), postData);\n\n      return {\n        id: docRef.id,\n        sessionId: data.sessionId,\n        userId: auth.currentUser.uid,\n        content: data.content,\n        visibility: data.visibility,\n        supportCount: 0,\n        commentCount: 0,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Create post', {\n        defaultMessage: 'Failed to create post',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Get sessions for feed (Strava-like - sessions are the content)\n  getFeedSessions: async (\n    limitCount: number = 20,\n    cursor?: string,\n    filters: FeedFilters = {}\n  ): Promise<FeedResponse> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      let sessionsQuery;\n      const { type = 'recent', userId, projectId, groupId } = filters;\n\n      // Handle different feed types - fetch from sessions collection\n      if (type === 'group' && groupId) {\n        // Group: fetch sessions from group members\n        const membershipsQuery = query(\n          collection(db, 'groupMemberships'),\n          where('groupId', '==', groupId),\n          where('status', '==', 'active')\n        );\n        const membershipsSnapshot = await getDocs(membershipsQuery);\n        const memberIds = membershipsSnapshot.docs.map(\n          doc => doc.data().userId\n        );\n\n        if (memberIds.length === 0) {\n          return { sessions: [], hasMore: false, nextCursor: undefined };\n        }\n\n        // Fetch sessions from group members\n        // Due to Firestore limitations, fetch all and filter\n        sessionsQuery = query(\n          collection(db, 'sessions'),\n          where('visibility', 'in', ['everyone', 'followers']),\n          orderBy('createdAt', 'desc'),\n          limitFn(limitCount * 3) // Fetch more to account for filtering\n        );\n\n        if (cursor) {\n          const cursorDoc = await getDoc(doc(db, 'sessions', cursor));\n          if (cursorDoc.exists()) {\n            sessionsQuery = query(\n              collection(db, 'sessions'),\n              where('visibility', 'in', ['everyone', 'followers']),\n              orderBy('createdAt', 'desc'),\n              startAfter(cursorDoc),\n              limitFn(limitCount * 3)\n            );\n          }\n        }\n\n        const querySnapshot = await getDocs(sessionsQuery);\n        // Filter to only sessions from group members\n        const filteredDocs = querySnapshot.docs\n          .filter(doc => memberIds.includes(doc.data().userId))\n          .slice(0, limitCount + 1);\n\n        const sessions = await populateSessionsWithDetails(\n          filteredDocs.slice(0, limitCount)\n        );\n        const hasMore = filteredDocs.length > limitCount;\n        const nextCursor = hasMore\n          ? filteredDocs[limitCount - 1]?.id\n          : undefined;\n\n        return { sessions, hasMore, nextCursor };\n      } else if (type === 'following') {\n        // Get list of users the current user is following\n        let followingIds: string[] = [];\n\n        // Try new social_graph structure first\n        try {\n          const outboundRef = collection(\n            db,\n            `social_graph/${auth.currentUser.uid}/outbound`\n          );\n          const outboundSnapshot = await getDocs(outboundRef);\n\n          if (!outboundSnapshot.empty) {\n            followingIds = outboundSnapshot.docs.map(doc => doc.id);\n          }\n        } catch (socialGraphError) {\n          // If social_graph doesn't exist or has permission issues, continue to fallback\n        }\n\n        // Fallback to old follows collection if no following found via social_graph\n        if (followingIds.length === 0) {\n          const followingQuery = query(\n            collection(db, 'follows'),\n            where('followerId', '==', auth.currentUser.uid)\n          );\n          const followingSnapshot = await getDocs(followingQuery);\n\n          followingIds = followingSnapshot.docs.map(doc => {\n            const data = doc.data();\n            return data.followingId;\n          });\n        }\n\n        // DO NOT include current user's sessions in following feed\n\n        // If not following anyone yet, return empty feed\n        if (followingIds.length === 0) {\n          return { sessions: [], hasMore: false, nextCursor: undefined };\n        }\n\n        // Fetch sessions from followed users only\n        // Due to Firestore limitations, fetch all and filter\n        sessionsQuery = query(\n          collection(db, 'sessions'),\n          where('visibility', 'in', ['everyone', 'followers']),\n          orderBy('createdAt', 'desc'),\n          limitFn(limitCount * 3) // Fetch more to account for filtering\n        );\n\n        if (cursor) {\n          const cursorDoc = await getDoc(doc(db, 'sessions', cursor));\n          if (cursorDoc.exists()) {\n            sessionsQuery = query(\n              collection(db, 'sessions'),\n              where('visibility', 'in', ['everyone', 'followers']),\n              orderBy('createdAt', 'desc'),\n              startAfter(cursorDoc),\n              limitFn(limitCount * 3)\n            );\n          }\n        }\n\n        const querySnapshot = await getDocs(sessionsQuery);\n        // Filter to only sessions from followed users\n        const filteredDocs = querySnapshot.docs\n          .filter(doc => followingIds.includes(doc.data().userId))\n          .slice(0, limitCount + 1);\n\n        const sessions = await populateSessionsWithDetails(\n          filteredDocs.slice(0, limitCount)\n        );\n        const hasMore = filteredDocs.length > limitCount;\n        const nextCursor = hasMore\n          ? filteredDocs[limitCount - 1]?.id\n          : undefined;\n\n        return { sessions, hasMore, nextCursor };\n      } else if (type === 'trending') {\n        // Trending: fetch recent public sessions\n        const sevenDaysAgo = new Date();\n        sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n\n        sessionsQuery = query(\n          collection(db, 'sessions'),\n          where('visibility', '==', 'everyone'),\n          where('createdAt', '>=', sevenDaysAgo),\n          orderBy('createdAt', 'desc'),\n          limitFn(100) // Fetch more for sorting\n        );\n\n        const querySnapshot = await getDocs(sessionsQuery);\n\n        // For trending, we'd ideally sort by engagement, but since sessions don't have\n        // support/comment counts directly, we'll just show recent public sessions\n        // In a production app, you'd maintain engagement scores on sessions\n        const sessionDocs = querySnapshot.docs;\n\n        // Apply cursor if provided\n        let startIndex = 0;\n        if (cursor) {\n          startIndex = sessionDocs.findIndex(doc => doc.id === cursor) + 1;\n        }\n\n        const paginatedDocs = sessionDocs.slice(\n          startIndex,\n          startIndex + limitCount + 1\n        );\n        const sessions = await populateSessionsWithDetails(\n          paginatedDocs.slice(0, limitCount)\n        );\n        const hasMore = paginatedDocs.length > limitCount;\n        const nextCursor = hasMore\n          ? paginatedDocs[limitCount - 1]?.id\n          : undefined;\n\n        return { sessions, hasMore, nextCursor };\n      } else if (type === 'user') {\n        // User: fetch sessions for a specific user\n        const targetUserId = userId || auth.currentUser.uid;\n\n        sessionsQuery = query(\n          collection(db, 'sessions'),\n          where('userId', '==', targetUserId),\n          orderBy('createdAt', 'desc'),\n          limitFn(limitCount + 1)\n        );\n\n        if (cursor) {\n          const cursorDoc = await getDoc(doc(db, 'sessions', cursor));\n          if (cursorDoc.exists()) {\n            sessionsQuery = query(\n              collection(db, 'sessions'),\n              where('userId', '==', targetUserId),\n              orderBy('createdAt', 'desc'),\n              startAfter(cursorDoc),\n              limitFn(limitCount + 1)\n            );\n          }\n        }\n\n        const querySnapshot = await getDocs(sessionsQuery);\n        const sessionDocs = querySnapshot.docs.slice(0, limitCount);\n        const sessions = await populateSessionsWithDetails(sessionDocs);\n        const hasMore = querySnapshot.docs.length > limitCount;\n        const nextCursor = hasMore\n          ? sessionDocs[sessionDocs.length - 1]?.id\n          : undefined;\n\n        return {\n          sessions,\n          hasMore,\n          nextCursor,\n        };\n      } else if (type === 'group-members-unfollowed') {\n        // Get list of users the current user is following\n        let followingIds: string[] = [];\n\n        // Try new social_graph structure first\n        try {\n          const outboundRef = collection(\n            db,\n            `social_graph/${auth.currentUser.uid}/outbound`\n          );\n          const outboundSnapshot = await getDocs(outboundRef);\n\n          if (!outboundSnapshot.empty) {\n            followingIds = outboundSnapshot.docs.map(doc => doc.id);\n          }\n        } catch (socialGraphError) {\n          // If social_graph doesn't exist or has permission issues, continue to fallback\n        }\n\n        // Fallback to old follows collection if no following found via social_graph\n        if (followingIds.length === 0) {\n          const followingQuery = query(\n            collection(db, 'follows'),\n            where('followerId', '==', auth.currentUser.uid)\n          );\n          const followingSnapshot = await getDocs(followingQuery);\n\n          followingIds = followingSnapshot.docs.map(doc => {\n            const data = doc.data();\n            return data.followingId;\n          });\n        }\n\n        // Get all groups the user is a member of\n        const membershipQuery = query(\n          collection(db, 'groupMemberships'),\n          where('userId', '==', auth.currentUser.uid),\n          where('status', '==', 'active')\n        );\n        const membershipSnapshot = await getDocs(membershipQuery);\n        const userGroupIds = membershipSnapshot.docs.map(\n          doc => doc.data().groupId\n        );\n\n        if (userGroupIds.length === 0) {\n          return { sessions: [], hasMore: false, nextCursor: undefined };\n        }\n\n        // Get all members from all the user's groups\n        const allGroupMemberIds: string[] = [];\n        for (const groupId of userGroupIds) {\n          const groupMembersQuery = query(\n            collection(db, 'groupMemberships'),\n            where('groupId', '==', groupId),\n            where('status', '==', 'active')\n          );\n          const groupMembersSnapshot = await getDocs(groupMembersQuery);\n          groupMembersSnapshot.docs.forEach(doc => {\n            const memberId = doc.data().userId;\n            // Exclude current user and people they follow\n            if (\n              memberId !== auth.currentUser!.uid &&\n              !followingIds.includes(memberId)\n            ) {\n              if (!allGroupMemberIds.includes(memberId)) {\n                allGroupMemberIds.push(memberId);\n              }\n            }\n          });\n        }\n\n        if (allGroupMemberIds.length === 0) {\n          return { sessions: [], hasMore: false, nextCursor: undefined };\n        }\n\n        // Fetch sessions from group members (excluding followed users and current user)\n        sessionsQuery = query(\n          collection(db, 'sessions'),\n          where('visibility', 'in', ['everyone', 'followers']),\n          orderBy('createdAt', 'desc'),\n          limitFn(limitCount * 3) // Fetch more to account for filtering\n        );\n\n        if (cursor) {\n          const cursorDoc = await getDoc(doc(db, 'sessions', cursor));\n          if (cursorDoc.exists()) {\n            sessionsQuery = query(\n              collection(db, 'sessions'),\n              where('visibility', 'in', ['everyone', 'followers']),\n              orderBy('createdAt', 'desc'),\n              startAfter(cursorDoc),\n              limitFn(limitCount * 3)\n            );\n          }\n        }\n\n        const querySnapshot = await getDocs(sessionsQuery);\n        // Filter to only sessions from group members who user doesn't follow\n        const filteredDocs = querySnapshot.docs\n          .filter(doc => {\n            const sessionUserId = doc.data().userId;\n            const isInGroupMembers = allGroupMemberIds.includes(sessionUserId);\n            const isFollowed = followingIds.includes(sessionUserId);\n            const isCurrentUser = sessionUserId === auth.currentUser!.uid;\n\n            // Must be in group members list AND not in following list AND not current user\n            return isInGroupMembers && !isFollowed && !isCurrentUser;\n          })\n          .slice(0, limitCount + 1);\n\n        const sessions = await populateSessionsWithDetails(\n          filteredDocs.slice(0, limitCount)\n        );\n        const hasMore = filteredDocs.length > limitCount;\n        const nextCursor = hasMore\n          ? filteredDocs[limitCount - 1]?.id\n          : undefined;\n\n        return { sessions, hasMore, nextCursor };\n      } else if (type === 'all') {\n        // All: chronological feed of all public sessions (not filtering anyone out)\n        sessionsQuery = query(\n          collection(db, 'sessions'),\n          where('visibility', 'in', ['everyone', 'followers']),\n          orderBy('createdAt', 'desc'),\n          limitFn(limitCount + 1)\n        );\n\n        if (cursor) {\n          const cursorDoc = await getDoc(doc(db, 'sessions', cursor));\n          if (cursorDoc.exists()) {\n            sessionsQuery = query(\n              collection(db, 'sessions'),\n              where('visibility', 'in', ['everyone', 'followers']),\n              orderBy('createdAt', 'desc'),\n              startAfter(cursorDoc),\n              limitFn(limitCount + 1)\n            );\n          }\n        }\n\n        const querySnapshot = await getDocs(sessionsQuery);\n        const sessionDocs = querySnapshot.docs.slice(0, limitCount);\n        const sessions = await populateSessionsWithDetails(sessionDocs);\n        const hasMore = querySnapshot.docs.length > limitCount;\n        const nextCursor = hasMore\n          ? sessionDocs[sessionDocs.length - 1]?.id\n          : undefined;\n\n        return {\n          sessions,\n          hasMore,\n          nextCursor,\n        };\n      } else {\n        // Recent: default chronological feed - only show sessions from followed users\n        // Get list of users the current user is following\n        let followingIds: string[] = [];\n\n        // Try new social_graph structure first\n        try {\n          const outboundRef = collection(\n            db,\n            `social_graph/${auth.currentUser.uid}/outbound`\n          );\n          const outboundSnapshot = await getDocs(outboundRef);\n\n          if (!outboundSnapshot.empty) {\n            followingIds = outboundSnapshot.docs.map(doc => doc.id);\n          }\n        } catch (socialGraphError) {\n          // If social_graph doesn't exist or has permission issues, continue to fallback\n        }\n\n        // Fallback to old follows collection if no following found via social_graph\n        if (followingIds.length === 0) {\n          const followingQuery = query(\n            collection(db, 'follows'),\n            where('followerId', '==', auth.currentUser.uid)\n          );\n          const followingSnapshot = await getDocs(followingQuery);\n\n          followingIds = followingSnapshot.docs.map(doc => {\n            const data = doc.data();\n            return data.followingId;\n          });\n        }\n\n        // Include current user's sessions too\n        followingIds.push(auth.currentUser.uid);\n\n        // If not following anyone yet, return empty feed\n        if (\n          followingIds.length === 1 &&\n          followingIds[0] === auth.currentUser.uid\n        ) {\n          return { sessions: [], hasMore: false, nextCursor: undefined };\n        }\n\n        // Fetch sessions from followed users\n        // Due to Firestore limitations, fetch all and filter\n        sessionsQuery = query(\n          collection(db, 'sessions'),\n          where('visibility', 'in', ['everyone', 'followers']),\n          orderBy('createdAt', 'desc'),\n          limitFn(limitCount * 3) // Fetch more to account for filtering\n        );\n\n        if (cursor) {\n          const cursorDoc = await getDoc(doc(db, 'sessions', cursor));\n          if (cursorDoc.exists()) {\n            sessionsQuery = query(\n              collection(db, 'sessions'),\n              where('visibility', 'in', ['everyone', 'followers']),\n              orderBy('createdAt', 'desc'),\n              startAfter(cursorDoc),\n              limitFn(limitCount * 3)\n            );\n          }\n        }\n\n        const querySnapshot = await getDocs(sessionsQuery);\n\n        // Filter to only sessions from followed users\n        const filteredDocs = querySnapshot.docs\n          .filter(doc => followingIds.includes(doc.data().userId))\n          .slice(0, limitCount + 1);\n\n        const sessions = await populateSessionsWithDetails(\n          filteredDocs.slice(0, limitCount)\n        );\n        const hasMore = filteredDocs.length > limitCount;\n        const nextCursor = hasMore\n          ? filteredDocs[limitCount - 1]?.id\n          : undefined;\n\n        return {\n          sessions,\n          hasMore,\n          nextCursor,\n        };\n      }\n    } catch (error) {\n      handleError(error, 'in getFeedSessions', {\n        severity: ErrorSeverity.ERROR,\n      });\n      const apiError = handleError(error, 'Get feed sessions', {\n        defaultMessage: 'Failed to get feed sessions',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Support a session (like/kudos)\n  supportSession: async (sessionId: string): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      // Rate limitFn support actions\n      checkRateLimit(auth.currentUser.uid, 'SUPPORT');\n\n      const sessionRef = doc(db, 'sessions', sessionId);\n\n      // Use transaction to safely add user ID to supportedBy array\n      await runTransaction(db, async transaction => {\n        const sessionDoc = await transaction.get(sessionRef);\n\n        if (!sessionDoc.exists()) {\n          throw new Error('Session not found');\n        }\n\n        const sessionData = sessionDoc.data();\n        const supportedBy = sessionData.supportedBy || [];\n\n        // Check if user already supported this session\n        if (supportedBy.includes(auth.currentUser!.uid)) {\n          return; // Already supported, do nothing\n        }\n\n        // Add user ID to supportedBy array and update supportCount\n        transaction.update(sessionRef, {\n          supportedBy: [...supportedBy, auth.currentUser!.uid],\n          supportCount: supportedBy.length + 1,\n          updatedAt: serverTimestamp(),\n        });\n      });\n\n      // Create notification for support action (outside transaction)\n      try {\n        const sessionDoc = await getDoc(sessionRef);\n        const sessionData = sessionDoc.data();\n\n        // Only notify if supporting someone else's session\n        if (sessionData && sessionData.userId !== auth.currentUser.uid) {\n          const currentUserDoc = await getDoc(\n            doc(db, 'users', auth.currentUser.uid)\n          );\n          const userData = currentUserDoc.data();\n\n          await addDoc(collection(db, 'notifications'), {\n            userId: sessionData.userId,\n            type: 'support',\n            title: 'New support',\n            message: `${userData?.name || 'Someone'} supported your session`,\n            linkUrl: `/sessions/${sessionId}`,\n            actorId: auth.currentUser.uid,\n            sessionId: sessionId,\n            isRead: false,\n            createdAt: serverTimestamp(),\n          });\n        }\n      } catch (notifError) {\n        // Log error but don't fail the support action\n        handleError(notifError, 'create support notification', {\n          severity: ErrorSeverity.ERROR,\n          silent: true,\n        });\n      }\n    } catch (error) {\n      const apiError = handleError(error, 'Support session', {\n        defaultMessage: 'Failed to support session',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Remove support from a session\n  removeSupportFromSession: async (sessionId: string): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const sessionRef = doc(db, 'sessions', sessionId);\n\n      // Use transaction to safely remove user ID from supportedBy array\n      await runTransaction(db, async transaction => {\n        const sessionDoc = await transaction.get(sessionRef);\n\n        if (!sessionDoc.exists()) {\n          throw new Error('Session not found');\n        }\n\n        const sessionData = sessionDoc.data();\n        const supportedBy = sessionData.supportedBy || [];\n\n        // Check if user has supported this session\n        if (!supportedBy.includes(auth.currentUser!.uid)) {\n          return; // Not supported, do nothing\n        }\n\n        // Remove user ID from supportedBy array and update supportCount\n        const newSupportedBy = supportedBy.filter(\n          (id: string) => id !== auth.currentUser!.uid\n        );\n        transaction.update(sessionRef, {\n          supportedBy: newSupportedBy,\n          supportCount: newSupportedBy.length,\n          updatedAt: serverTimestamp(),\n        });\n      });\n    } catch (error) {\n      const apiError = handleError(error, 'Remove support', {\n        defaultMessage: 'Failed to remove support',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Update post\n  updatePost: async (postId: string, data: UpdatePostData): Promise<Post> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const updateData = {\n        ...data,\n        updatedAt: serverTimestamp(),\n      };\n\n      await updateDoc(doc(db, 'posts', postId), updateData);\n\n      // Get updated post\n      const postDoc = await getDoc(doc(db, 'posts', postId));\n      const postData = postDoc.data()!;\n\n      return {\n        id: postId,\n        visibility: postData.visibility || 'everyone',\n        sessionId: postData.sessionId,\n        userId: postData.userId,\n        content: postData.content,\n        supportCount: postData.supportCount || 0,\n        commentCount: postData.commentCount || 0,\n        createdAt: convertTimestamp(postData.createdAt),\n        updatedAt: convertTimestamp(postData.updatedAt),\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Update post', {\n        defaultMessage: 'Failed to update post',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Delete post\n  deletePost: async (postId: string): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      // Verify post belongs to user\n      const postDoc = await getDoc(doc(db, 'posts', postId));\n      const postData = postDoc.data();\n\n      if (!postData || postData.userId !== auth.currentUser.uid) {\n        throw new Error('Post not found or access denied');\n      }\n\n      await deleteDoc(doc(db, 'posts', postId));\n    } catch (error) {\n      const apiError = handleError(error, 'Delete post', {\n        defaultMessage: 'Failed to delete post',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Listen to real-time updates for session support counts\n  listenToSessionUpdates: (\n    sessionIds: string[],\n    callback: (\n      updates: Record<string, { supportCount: number; isSupported: boolean }>\n    ) => void\n  ) => {\n    if (!auth.currentUser) return () => {};\n\n    const unsubscribers: (() => void)[] = [];\n    const currentUserId = auth.currentUser.uid;\n\n    sessionIds.forEach(sessionId => {\n      // Listen to session support count changes and support status\n      const sessionUnsubscribe = onSnapshot(\n        doc(db, 'sessions', sessionId),\n        sessionDoc => {\n          if (sessionDoc.exists()) {\n            const sessionData = sessionDoc.data();\n            const supportedBy = sessionData.supportedBy || [];\n            callback({\n              [sessionId]: {\n                supportCount: sessionData.supportCount || 0,\n                isSupported: supportedBy.includes(currentUserId),\n              },\n            });\n          }\n        },\n        error => {\n          // Silently ignore permission-denied errors - these can occur when:\n          // 1. Session visibility changes while listener is active\n          // 2. Session is deleted while listener is active\n          // 3. User unfollows session owner and visibility is 'followers'\n          if (isPermissionError(error)) {\n            return;\n          }\n          // For other errors, log them normally\n          handleError(error, `Listen to session ${sessionId}`, {\n            severity: ErrorSeverity.ERROR,\n          });\n        }\n      );\n\n      unsubscribers.push(sessionUnsubscribe);\n    });\n\n    // Return cleanup function\n    return () => {\n      unsubscribers.forEach(unsubscribe => unsubscribe());\n    };\n  },\n\n  // Get user's posts\n  getUserPosts: async (\n    userId: string,\n    limitCount: number = 20,\n    isOwnProfile: boolean = false\n  ): Promise<PostWithDetails[]> => {\n    try {\n      let postsQuery;\n\n      if (isOwnProfile) {\n        // Show all posts for own profile\n        postsQuery = query(\n          collection(db, 'posts'),\n          where('userId', '==', userId),\n          orderBy('createdAt', 'desc'),\n          limitFn(limitCount)\n        );\n      } else {\n        // Show only public posts for other profiles\n        postsQuery = query(\n          collection(db, 'posts'),\n          where('userId', '==', userId),\n          where('visibility', '==', 'everyone'),\n          orderBy('createdAt', 'desc'),\n          limitFn(limitCount)\n        );\n      }\n\n      const querySnapshot = await getDocs(postsQuery);\n      const posts: PostWithDetails[] = [];\n\n      // Process posts to populate data\n      for (const postDoc of querySnapshot.docs) {\n        const postData = postDoc.data();\n\n        // Get user data\n        const userDoc = await getDoc(doc(db, 'users', postData.userId));\n        const userData = userDoc.data();\n\n        // Get session data\n        const sessionDoc = await getDoc(\n          doc(db, 'sessions', postData.sessionId)\n        );\n        const sessionData = sessionDoc.data();\n\n        // Get project data\n        let projectData = null;\n        const projectId = sessionData?.projectId;\n        if (projectId) {\n          try {\n            const projectDoc = await getDoc(\n              doc(db, 'projects', postData.userId, 'userProjects', projectId)\n            );\n            if (projectDoc.exists()) {\n              projectData = projectDoc.data();\n            }\n          } catch (error) {\n            handleError(error, `Fetch project ${projectId}`, {\n              severity: ErrorSeverity.WARNING,\n            });\n          }\n        }\n\n        posts.push({\n          id: postDoc.id,\n          sessionId: postData.sessionId,\n          userId: postData.userId,\n          content: postData.content,\n          visibility: postData.visibility || 'everyone',\n          supportCount: postData.supportCount || 0,\n          commentCount: postData.commentCount || 0,\n          isSupported: false, // Will be updated based on current user\n          createdAt: convertTimestamp(postData.createdAt),\n          updatedAt: convertTimestamp(postData.updatedAt),\n          user: {\n            id: postData.userId,\n            email: userData?.email || '',\n            name: userData?.name || 'Unknown User',\n            username: userData?.username || 'unknown',\n            bio: userData?.bio,\n            location: userData?.location,\n            profilePicture: userData?.profilePicture,\n            createdAt: convertTimestamp(userData?.createdAt) || new Date(),\n            updatedAt: convertTimestamp(userData?.updatedAt) || new Date(),\n          },\n          session: sessionData\n            ? {\n                id: postData.sessionId,\n                userId: postData.userId,\n                activityId:\n                  sessionData.activityId || sessionData.projectId || '',\n                projectId:\n                  sessionData.projectId || sessionData.activityId || '',\n                title: sessionData.title || 'Untitled Session',\n                description: sessionData.description || '',\n                duration: sessionData.duration || 0,\n                startTime:\n                  convertTimestamp(sessionData.startTime) || new Date(),\n                tags: sessionData.tags || [],\n                visibility: sessionData.visibility || 'everyone',\n                showStartTime: sessionData.showStartTime,\n                howFelt: sessionData.howFelt,\n                privateNotes: sessionData.privateNotes,\n                isArchived: sessionData.isArchived || false,\n                supportCount: sessionData.supportCount || 0,\n                commentCount: sessionData.commentCount || 0,\n                createdAt:\n                  convertTimestamp(sessionData.createdAt) || new Date(),\n                updatedAt:\n                  convertTimestamp(sessionData.updatedAt) || new Date(),\n              }\n            : ({\n                id: postData.sessionId,\n                userId: postData.userId,\n                activityId: '',\n                projectId: '',\n                title: 'Session Not Found',\n                description: '',\n                duration: 0,\n                startTime: new Date(),\n                tags: [],\n                visibility: 'everyone',\n                isArchived: false,\n                supportCount: 0,\n                commentCount: 0,\n                createdAt: new Date(),\n                updatedAt: new Date(),\n              } as Session),\n        });\n      }\n\n      return posts;\n    } catch (error) {\n      const apiError = handleError(error, 'Get user posts', {\n        defaultMessage: 'Failed to get user posts',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n};\n\n// Firebase Comment API\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/shared/utils.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 13,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 13,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [398, 401], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [398, 401], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 24,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 24,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [674, 677], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [674, 677], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 45,
        "column": 64,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 45,
        "endColumn": 67,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1176, 1179], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1176, 1179], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Shared utilities for Firebase API modules\n * Common helpers used across multiple domain modules\n */\n\nimport { Timestamp, DocumentData } from 'firebase/firestore';\nimport { handleError } from '@/lib/errorHandler';\n\n/**\n * Legacy helper for backwards compatibility - wraps handleError\n * @deprecated Use handleError directly for better error context\n */\nexport const getErrorMessage = (error: any, defaultMessage: string): string => {\n  const apiError = handleError(error, 'Operation', {\n    defaultMessage,\n    silent: true,\n  });\n  return apiError.userMessage;\n};\n\n/**\n * Convert Firestore timestamp to JavaScript Date\n */\nexport const convertTimestamp = (timestamp: any): Date => {\n  if (timestamp?.toDate) {\n    return timestamp.toDate();\n  }\n  if (timestamp instanceof Date) {\n    return timestamp;\n  }\n  return new Date(timestamp);\n};\n\n/**\n * Convert JavaScript Date to Firestore Timestamp\n */\nexport const convertToTimestamp = (date: Date): Timestamp => {\n  return Timestamp.fromDate(date);\n};\n\n/**\n * Remove undefined values from object\n * Firestore does not accept undefined values in documents\n */\nexport const removeUndefinedFields = <T extends Record<string, any>>(\n  input: T\n): T => {\n  const entries = Object.entries(input).filter(\n    ([, value]) => value !== undefined\n  );\n  return Object.fromEntries(entries) as T;\n};\n\n/**\n * Constants for private user fallbacks\n */\nexport const PRIVATE_USER_FALLBACK_NAME = 'Private User';\nexport const PRIVATE_USER_USERNAME_PREFIX = 'private';\n\n/**\n * Build user details for social contexts, handling private/inaccessible users\n */\nexport const buildCommentUserDetails = (\n  userId: string,\n  userData: DocumentData | null\n): {\n  id: string;\n  email: string;\n  name: string;\n  username: string;\n  bio?: string;\n  location?: string;\n  profilePicture?: string;\n  createdAt: Date;\n  updatedAt: Date;\n} => {\n  const fallbackUsername = `${PRIVATE_USER_USERNAME_PREFIX}-${userId.slice(0, 6)}`;\n  const createdAt = userData?.createdAt\n    ? convertTimestamp(userData.createdAt)\n    : new Date();\n  const updatedAt = userData?.updatedAt\n    ? convertTimestamp(userData.updatedAt)\n    : new Date();\n\n  return {\n    id: userId,\n    email: userData?.email || '',\n    name: userData?.name || PRIVATE_USER_FALLBACK_NAME,\n    username: userData?.username || fallbackUsername,\n    bio: userData?.bio,\n    location: userData?.location,\n    profilePicture: userData?.profilePicture,\n    createdAt,\n    updatedAt,\n  };\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/social/comments.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isNotFoundError' is defined but never used.",
        "line": 41,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 41,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ErrorSeverity' is defined but never used.",
        "line": 42,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 42,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'removeUndefinedFields' is defined but never used.",
        "line": 50,
        "column": 28,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 49
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'CommentLike' is defined but never used.",
        "line": 64,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 64,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 100,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 100,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2435, 2438], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2435, 2438], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Comments API Module\n * Handles comment CRUD operations and likes\n */\n\n// ============================================================================\n// IMPORTS\n// ============================================================================\n\n// Firebase imports\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n  query,\n  where,\n  orderBy,\n  limit as limitFn,\n  serverTimestamp,\n  increment,\n  writeBatch,\n  setDoc,\n  startAfter,\n  DocumentSnapshot,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  DocumentData,\n} from 'firebase/firestore';\n\n// Local Firebase config\nimport { db, auth } from '@/lib/firebase';\n\n// Error handling\nimport {\n  handleError,\n  isPermissionError,\n  isNotFoundError,\n  ErrorSeverity,\n} from '@/lib/errorHandler';\nimport { checkRateLimit } from '@/lib/rateLimit';\n\n// Error messages\nimport { ERROR_MESSAGES } from '@/config/errorMessages';\n\n// Shared utilities\nimport { convertTimestamp, removeUndefinedFields } from '../shared/utils';\n\n// Social helpers\nimport {\n  fetchUserDataForSocialContext,\n  buildCommentUserDetails,\n} from './helpers';\n\n// Types\nimport type {\n  Comment,\n  CommentWithDetails,\n  CreateCommentData,\n  UpdateCommentData,\n  CommentLike,\n  CommentsResponse,\n} from '@/types';\n\n// ============================================================================\n// PUBLIC API\n// ============================================================================\n\nexport const firebaseCommentApi = {\n  /**\n   * Create a new comment or reply on a session\n   * Automatically creates notifications for mentions, session owners, and parent comment owners\n   *\n   * @param data - The comment data including sessionId, content, and optional parentId for replies\n   * @returns Promise resolving to the created comment with user details\n   * @throws Error if user is not authenticated, rate limit exceeded, or creation fails\n   */\n  createComment: async (\n    data: CreateCommentData\n  ): Promise<CommentWithDetails> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      // Rate limitFn comment creation\n      checkRateLimit(auth.currentUser.uid, 'COMMENT');\n\n      const userId = auth.currentUser.uid;\n\n      // Extract mentions from content\n      const mentionRegex = /@(\\w+)/g;\n      const mentions = [...data.content.matchAll(mentionRegex)].map(\n        match => match[1]\n      );\n\n      const commentData: any = {\n        sessionId: data.sessionId,\n        userId,\n        content: data.content,\n        likeCount: 0,\n        replyCount: 0,\n        isEdited: false,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n      };\n\n      // Only add parentId if it exists\n      if (data.parentId) {\n        commentData.parentId = data.parentId;\n      }\n\n      const docRef = await addDoc(collection(db, 'comments'), commentData);\n\n      // Increment comment count on session\n      const sessionRef = doc(db, 'sessions', data.sessionId);\n      await updateDoc(sessionRef, {\n        commentCount: increment(1),\n      });\n\n      // If this is a reply, increment reply count on parent comment\n      if (data.parentId) {\n        const parentCommentRef = doc(db, 'comments', data.parentId);\n        await updateDoc(parentCommentRef, {\n          replyCount: increment(1),\n        });\n      }\n\n      // Get user data\n      const userDoc = await getDoc(doc(db, 'users', userId));\n      const userData = userDoc.data();\n\n      // Create notifications for mentions\n      if (mentions.length > 0) {\n        // Get users by username\n        const usersQuery = query(\n          collection(db, 'users'),\n          where('username', 'in', mentions)\n        );\n        const usersSnapshot = await getDocs(usersQuery);\n\n        const notificationPromises = usersSnapshot.docs.map(async userDoc => {\n          const mentionedUserId = userDoc.id;\n          if (mentionedUserId !== userId) {\n            // Create notification\n            await addDoc(collection(db, 'notifications'), {\n              userId: mentionedUserId,\n              type: 'mention',\n              title: 'New mention',\n              message: `${userData?.name} mentioned you in a comment`,\n              linkUrl: `/sessions/${data.sessionId}`,\n              actorId: userId,\n              actorName: userData?.name,\n              actorUsername: userData?.username,\n              actorProfilePicture: userData?.profilePicture,\n              sessionId: data.sessionId,\n              commentId: docRef.id,\n              isRead: false,\n              createdAt: serverTimestamp(),\n            });\n          }\n        });\n\n        await Promise.all(notificationPromises);\n      }\n\n      // Create notification for session owner (if not commenting on own session)\n      if (!data.parentId) {\n        const sessionDoc = await getDoc(sessionRef);\n        const sessionData = sessionDoc.data();\n\n        if (sessionData && sessionData.userId !== userId) {\n          await addDoc(collection(db, 'notifications'), {\n            userId: sessionData.userId,\n            type: 'comment',\n            title: 'New comment',\n            message: `${userData?.name} commented on your session`,\n            linkUrl: `/sessions/${data.sessionId}`,\n            actorId: userId,\n            actorName: userData?.name,\n            actorUsername: userData?.username,\n            actorProfilePicture: userData?.profilePicture,\n            sessionId: data.sessionId,\n            commentId: docRef.id,\n            isRead: false,\n            createdAt: serverTimestamp(),\n          });\n        }\n      } else {\n        // Create notification for parent comment owner (if replying to someone else)\n        const parentCommentDoc = await getDoc(\n          doc(db, 'comments', data.parentId)\n        );\n        const parentCommentData = parentCommentDoc.data();\n\n        if (parentCommentData && parentCommentData.userId !== userId) {\n          await addDoc(collection(db, 'notifications'), {\n            userId: parentCommentData.userId,\n            type: 'reply',\n            title: 'New reply',\n            message: `${userData?.name} replied to your comment`,\n            linkUrl: `/sessions/${data.sessionId}`,\n            actorId: userId,\n            actorName: userData?.name,\n            actorUsername: userData?.username,\n            actorProfilePicture: userData?.profilePicture,\n            sessionId: data.sessionId,\n            commentId: docRef.id,\n            isRead: false,\n            createdAt: serverTimestamp(),\n          });\n        }\n      }\n\n      return {\n        id: docRef.id,\n        sessionId: data.sessionId,\n        userId,\n        parentId: data.parentId,\n        content: data.content,\n        likeCount: 0,\n        replyCount: 0,\n        isLiked: false,\n        isEdited: false,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        user: buildCommentUserDetails(userId, userData || null),\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Create comment', {\n        defaultMessage: ERROR_MESSAGES.COMMENT_POST_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Update an existing comment's content\n   *\n   * @param commentId - The ID of the comment to update\n   * @param data - The updated comment data (content)\n   * @returns Promise resolving to the updated comment\n   * @throws Error if user is not authenticated, comment not found, or not authorized\n   */\n  updateComment: async (\n    commentId: string,\n    data: UpdateCommentData\n  ): Promise<Comment> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const commentRef = doc(db, 'comments', commentId);\n      const commentDoc = await getDoc(commentRef);\n\n      if (!commentDoc.exists()) {\n        throw new Error('Comment not found');\n      }\n\n      const commentData = commentDoc.data();\n\n      if (commentData.userId !== auth.currentUser.uid) {\n        throw new Error('Not authorized to edit this comment');\n      }\n\n      await updateDoc(commentRef, {\n        content: data.content,\n        isEdited: true,\n        updatedAt: serverTimestamp(),\n      });\n\n      return {\n        id: commentId,\n        ...commentData,\n        content: data.content,\n        isEdited: true,\n        createdAt: convertTimestamp(commentData.createdAt),\n        updatedAt: new Date(),\n      } as Comment;\n    } catch (error) {\n      const apiError = handleError(error, 'Update comment', {\n        defaultMessage: ERROR_MESSAGES.COMMENT_POST_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Delete a comment and all its replies\n   *\n   * @param commentId - The ID of the comment to delete\n   * @returns Promise that resolves when the comment and replies are deleted\n   * @throws Error if user is not authenticated, comment not found, or not authorized\n   */\n  deleteComment: async (commentId: string): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const commentRef = doc(db, 'comments', commentId);\n      const commentDoc = await getDoc(commentRef);\n\n      if (!commentDoc.exists()) {\n        throw new Error('Comment not found');\n      }\n\n      const commentData = commentDoc.data();\n\n      if (commentData.userId !== auth.currentUser.uid) {\n        throw new Error('Not authorized to delete this comment');\n      }\n\n      // Delete all replies to this comment\n      const repliesQuery = query(\n        collection(db, 'comments'),\n        where('parentId', '==', commentId)\n      );\n      const repliesSnapshot = await getDocs(repliesQuery);\n\n      const batch = writeBatch(db);\n\n      repliesSnapshot.docs.forEach(doc => {\n        batch.delete(doc.ref);\n      });\n\n      batch.delete(commentRef);\n\n      await batch.commit();\n\n      // Decrement comment count on session\n      const sessionRef = doc(db, 'sessions', commentData.sessionId);\n      await updateDoc(sessionRef, {\n        commentCount: increment(-1 - repliesSnapshot.size), // -1 for the comment itself, and -repliesSnapshot.size for replies\n      });\n\n      // If this is a reply, decrement reply count on parent comment\n      if (commentData.parentId) {\n        const parentCommentRef = doc(db, 'comments', commentData.parentId);\n        await updateDoc(parentCommentRef, {\n          replyCount: increment(-1),\n        });\n      }\n    } catch (error) {\n      const apiError = handleError(error, 'Delete comment', {\n        defaultMessage: ERROR_MESSAGES.COMMENT_DELETE_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Like a comment\n   *\n   * @param commentId - The ID of the comment to like\n   * @returns Promise that resolves when the like is added\n   * @throws Error if user is not authenticated, comment already liked, or like fails\n   */\n  likeComment: async (commentId: string): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const userId = auth.currentUser.uid;\n      const likeId = `${userId}_${commentId}`;\n      const likeRef = doc(db, 'commentLikes', likeId);\n\n      const likeDoc = await getDoc(likeRef);\n\n      if (likeDoc.exists()) {\n        throw new Error('Already liked this comment');\n      }\n\n      await setDoc(likeRef, {\n        commentId,\n        userId,\n        createdAt: serverTimestamp(),\n      });\n\n      // Increment like count on comment\n      const commentRef = doc(db, 'comments', commentId);\n      await updateDoc(commentRef, {\n        likeCount: increment(1),\n      });\n    } catch (error) {\n      const apiError = handleError(error, 'Like comment', {\n        defaultMessage: 'Failed to like comment',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Unlike a comment (remove like)\n   *\n   * @param commentId - The ID of the comment to unlike\n   * @returns Promise that resolves when the like is removed\n   * @throws Error if user is not authenticated, comment not liked, or unlike fails\n   */\n  unlikeComment: async (commentId: string): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const userId = auth.currentUser.uid;\n      const likeId = `${userId}_${commentId}`;\n      const likeRef = doc(db, 'commentLikes', likeId);\n\n      const likeDoc = await getDoc(likeRef);\n\n      if (!likeDoc.exists()) {\n        throw new Error('Comment not liked');\n      }\n\n      await deleteDoc(likeRef);\n\n      // Decrement like count on comment\n      const commentRef = doc(db, 'comments', commentId);\n      await updateDoc(commentRef, {\n        likeCount: increment(-1),\n      });\n    } catch (error) {\n      const apiError = handleError(error, 'Unlike comment', {\n        defaultMessage: 'Failed to unlike comment',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get top-level comments for a session with pagination\n   * Returns only parent comments (no replies) - use getReplies for nested comments\n   *\n   * @param sessionId - The session ID whose comments to retrieve\n   * @param limitCount - Maximum number of comments to return (default: 20)\n   * @param lastDoc - Optional Firestore document snapshot for pagination\n   * @returns Promise resolving to comments with hasMore flag (returns empty on permission errors)\n   */\n  getSessionComments: async (\n    sessionId: string,\n    limitCount: number = 20,\n    lastDoc?: DocumentSnapshot\n  ): Promise<CommentsResponse> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const userId = auth.currentUser.uid;\n\n      // Get top-level comments (no parentId)\n      let q;\n\n      if (lastDoc) {\n        q = query(\n          collection(db, 'comments'),\n          where('sessionId', '==', sessionId),\n          orderBy('createdAt', 'desc'),\n          startAfter(lastDoc),\n          limitFn(limitCount + 1)\n        );\n      } else {\n        q = query(\n          collection(db, 'comments'),\n          where('sessionId', '==', sessionId),\n          orderBy('createdAt', 'desc'),\n          limitFn(limitCount + 1)\n        );\n      }\n\n      const snapshot: QuerySnapshot<DocumentData> = await getDocs(q);\n\n      // Filter for top-level comments only (no parentId)\n      const topLevelDocs: QueryDocumentSnapshot<DocumentData>[] =\n        snapshot.docs.filter(\n          (doc: QueryDocumentSnapshot<DocumentData>) => !doc.data().parentId\n        );\n\n      const hasMore: boolean = topLevelDocs.length > limitCount;\n      const docs: QueryDocumentSnapshot<DocumentData>[] = hasMore\n        ? topLevelDocs.slice(0, -1)\n        : topLevelDocs;\n\n      // Get all comment likes for current user in one query\n      const commentIds: string[] = docs.map(\n        (d: QueryDocumentSnapshot<DocumentData>) => d.id\n      );\n      let likedCommentIds = new Set<string>();\n      if (commentIds.length > 0) {\n        const likesQuery = query(\n          collection(db, 'commentLikes'),\n          where('userId', '==', userId),\n          where('commentId', 'in', commentIds)\n        );\n        const likesSnapshot = await getDocs(likesQuery);\n        likedCommentIds = new Set(\n          likesSnapshot.docs.map(d => d.data().commentId)\n        );\n      }\n\n      // Build comments with user details\n      const comments: CommentWithDetails[] = await Promise.all(\n        docs.map(async (docSnapshot: QueryDocumentSnapshot<DocumentData>) => {\n          const data = docSnapshot.data();\n\n          const userData = await fetchUserDataForSocialContext(data.userId);\n\n          return {\n            id: docSnapshot.id,\n            sessionId: data.sessionId,\n            userId: data.userId,\n            parentId: data.parentId,\n            content: data.content,\n            likeCount: data.likeCount || 0,\n            replyCount: data.replyCount || 0,\n            isLiked: likedCommentIds.has(docSnapshot.id),\n            isEdited: data.isEdited || false,\n            createdAt: convertTimestamp(data.createdAt),\n            updatedAt: convertTimestamp(data.updatedAt),\n            user: buildCommentUserDetails(data.userId, userData),\n          };\n        })\n      );\n\n      return {\n        comments,\n        hasMore,\n      };\n    } catch (error) {\n      // Handle permission errors gracefully - return empty comments\n      if (isPermissionError(error)) {\n        // Don't log permission errors - they're expected for restricted sessions\n        return {\n          comments: [],\n          hasMore: false,\n        };\n      }\n\n      // For other errors, log and throw with appropriate message\n      const apiError = handleError(error, 'Get session comments', {\n        defaultMessage: ERROR_MESSAGES.COMMENT_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Legacy alias for getSessionComments - get top-level comments for a session\n   * Kept for backward compatibility with older code\n   *\n   * @param sessionId - The session ID whose comments to retrieve\n   * @param limitCount - Maximum number of comments to return (default: 20)\n   * @param lastDoc - Optional Firestore document snapshot for pagination\n   * @returns Promise resolving to comments with hasMore flag and nextCursor\n   * @throws Error if user is not authenticated or fetch fails\n   */\n  getPostComments: async (\n    sessionId: string,\n    limitCount: number = 20,\n    lastDoc?: DocumentSnapshot\n  ): Promise<CommentsResponse> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const userId = auth.currentUser.uid;\n\n      // Get top-level comments (no parentId)\n      // Note: Firestore doesn't support querying for undefined, so we check for both null and absence\n      let q;\n\n      if (lastDoc) {\n        q = query(\n          collection(db, 'comments'),\n          where('sessionId', '==', sessionId),\n          orderBy('createdAt', 'desc'),\n          startAfter(lastDoc),\n          limitFn(limitCount + 1)\n        );\n      } else {\n        q = query(\n          collection(db, 'comments'),\n          where('sessionId', '==', sessionId),\n          orderBy('createdAt', 'desc'),\n          limitFn(limitCount + 1)\n        );\n      }\n\n      const snapshot: QuerySnapshot<DocumentData> = await getDocs(q);\n\n      // Filter for top-level comments only (no parentId)\n      const topLevelDocs: QueryDocumentSnapshot<DocumentData>[] =\n        snapshot.docs.filter(\n          (doc: QueryDocumentSnapshot<DocumentData>) => !doc.data().parentId\n        );\n\n      const hasMore: boolean = topLevelDocs.length > limitCount;\n      const docs: QueryDocumentSnapshot<DocumentData>[] = hasMore\n        ? topLevelDocs.slice(0, -1)\n        : topLevelDocs;\n\n      // Get all comment likes for current user in one query\n      const commentIds: string[] = docs.map(\n        (d: QueryDocumentSnapshot<DocumentData>) => d.id\n      );\n      let likedCommentIds = new Set<string>();\n      if (commentIds.length > 0) {\n        const likesQuery = query(\n          collection(db, 'commentLikes'),\n          where('userId', '==', userId),\n          where('commentId', 'in', commentIds)\n        );\n        const likesSnapshot = await getDocs(likesQuery);\n        likedCommentIds = new Set(\n          likesSnapshot.docs.map(d => d.data().commentId)\n        );\n      }\n\n      // Build comments with user details\n      const comments: CommentWithDetails[] = await Promise.all(\n        docs.map(async (docSnapshot: QueryDocumentSnapshot<DocumentData>) => {\n          const data = docSnapshot.data();\n\n          const userData = await fetchUserDataForSocialContext(data.userId);\n\n          return {\n            id: docSnapshot.id,\n            sessionId: data.sessionId,\n            userId: data.userId,\n            parentId: data.parentId,\n            content: data.content,\n            likeCount: data.likeCount || 0,\n            replyCount: data.replyCount || 0,\n            isLiked: likedCommentIds.has(docSnapshot.id),\n            isEdited: data.isEdited || false,\n            createdAt: convertTimestamp(data.createdAt),\n            updatedAt: convertTimestamp(data.updatedAt),\n            user: buildCommentUserDetails(data.userId, userData),\n          };\n        })\n      );\n\n      const lastDocInResult: QueryDocumentSnapshot<DocumentData> | undefined =\n        docs[docs.length - 1];\n      return {\n        comments,\n        hasMore,\n        nextCursor: hasMore && lastDocInResult ? lastDocInResult.id : undefined,\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Get comments', {\n        defaultMessage: ERROR_MESSAGES.COMMENT_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get all replies for a specific comment\n   *\n   * @param commentId - The ID of the parent comment\n   * @returns Promise resolving to array of reply comments with user details\n   * @throws Error if user is not authenticated or fetch fails\n   */\n  getReplies: async (commentId: string): Promise<CommentWithDetails[]> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const userId = auth.currentUser.uid;\n\n      const q = query(\n        collection(db, 'comments'),\n        where('parentId', '==', commentId),\n        orderBy('createdAt', 'asc')\n      );\n\n      const snapshot = await getDocs(q);\n\n      // Get all comment likes for current user in one query\n      const commentIds = snapshot.docs.map(d => d.id);\n      let likedCommentIds = new Set<string>();\n      if (commentIds.length > 0) {\n        const likesQuery = query(\n          collection(db, 'commentLikes'),\n          where('userId', '==', userId),\n          where('commentId', 'in', commentIds)\n        );\n        const likesSnapshot = await getDocs(likesQuery);\n        likedCommentIds = new Set(\n          likesSnapshot.docs.map(d => d.data().commentId)\n        );\n      }\n\n      const replies: CommentWithDetails[] = await Promise.all(\n        snapshot.docs.map(async docSnapshot => {\n          const data = docSnapshot.data();\n\n          const userData = await fetchUserDataForSocialContext(data.userId);\n\n          return {\n            id: docSnapshot.id,\n            sessionId: data.sessionId,\n            userId: data.userId,\n            parentId: data.parentId,\n            content: data.content,\n            likeCount: data.likeCount || 0,\n            replyCount: data.replyCount || 0,\n            isLiked: likedCommentIds.has(docSnapshot.id),\n            isEdited: data.isEdited || false,\n            createdAt: convertTimestamp(data.createdAt),\n            updatedAt: convertTimestamp(data.updatedAt),\n            user: buildCommentUserDetails(data.userId, userData),\n          };\n        })\n      );\n\n      return replies;\n    } catch (error) {\n      const apiError = handleError(error, 'Get replies', {\n        defaultMessage: ERROR_MESSAGES.COMMENT_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get top comments for a session sorted by like count\n   * Useful for showing popular comments in previews\n   *\n   * @param sessionId - The session ID whose top comments to retrieve\n   * @param limitCount - Maximum number of top comments to return (default: 2)\n   * @returns Promise resolving to array of top comments (empty array on permission errors)\n   */\n  getTopComments: async (\n    sessionId: string,\n    limitCount: number = 2\n  ): Promise<CommentWithDetails[]> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const userId = auth.currentUser.uid;\n\n      // Get top-level comments sorted by likeCount\n      const q = query(\n        collection(db, 'comments'),\n        where('sessionId', '==', sessionId),\n        orderBy('likeCount', 'desc'),\n        limitFn(limitCount)\n      );\n\n      const snapshot = await getDocs(q);\n\n      // Filter for top-level comments only (no parentId)\n      const topLevelDocs = snapshot.docs.filter(doc => !doc.data().parentId);\n\n      // Get all comment likes for current user in one query\n      const commentIds = topLevelDocs.map(d => d.id);\n      let likedCommentIds = new Set<string>();\n      if (commentIds.length > 0) {\n        const likesQuery = query(\n          collection(db, 'commentLikes'),\n          where('userId', '==', userId),\n          where('commentId', 'in', commentIds)\n        );\n        const likesSnapshot = await getDocs(likesQuery);\n        likedCommentIds = new Set(\n          likesSnapshot.docs.map(d => d.data().commentId)\n        );\n      }\n\n      // Build comments with user details\n      const comments: CommentWithDetails[] = await Promise.all(\n        topLevelDocs.map(async docSnapshot => {\n          const data = docSnapshot.data();\n\n          const userData = await fetchUserDataForSocialContext(data.userId);\n\n          return {\n            id: docSnapshot.id,\n            sessionId: data.sessionId,\n            userId: data.userId,\n            parentId: data.parentId,\n            content: data.content,\n            likeCount: data.likeCount || 0,\n            replyCount: data.replyCount || 0,\n            isLiked: likedCommentIds.has(docSnapshot.id),\n            isEdited: data.isEdited || false,\n            createdAt: convertTimestamp(data.createdAt),\n            updatedAt: convertTimestamp(data.updatedAt),\n            user: buildCommentUserDetails(data.userId, userData),\n          };\n        })\n      );\n\n      return comments;\n    } catch (error) {\n      // Handle permission errors gracefully - return empty array\n      if (isPermissionError(error)) {\n        return [];\n      }\n\n      // For other errors, throw with appropriate message\n      const apiError = handleError(error, 'Get top comments', {\n        defaultMessage: ERROR_MESSAGES.COMMENT_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n};\n\n// ==================== GROUP API ====================\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/social/helpers.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'auth' is defined but never used.",
        "line": 16,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 81,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 81,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2179, 2182], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2179, 2182], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 82,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 82,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2235, 2238], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2235, 2238], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Social module helper functions\n * Shared utilities for social features (follows, supports, comments)\n */\n\nimport {\n  collection,\n  doc,\n  getDoc,\n  addDoc,\n  runTransaction,\n  increment,\n  serverTimestamp,\n  DocumentData,\n} from 'firebase/firestore';\nimport { db, auth } from '@/lib/firebase';\nimport {\n  handleError,\n  isPermissionError,\n  isNotFoundError,\n  ErrorSeverity,\n} from '@/lib/errorHandler';\nimport {\n  PRIVATE_USER_FALLBACK_NAME,\n  PRIVATE_USER_USERNAME_PREFIX,\n  convertTimestamp,\n} from '../shared/utils';\nimport type { User } from '@/types';\n\n/**\n * Manage social graph and friendship counts transactionally\n * Handles follow/unfollow actions with proper count management\n */\nexport const updateSocialGraph = async (\n  currentUserId: string,\n  targetUserId: string,\n  action: 'follow' | 'unfollow'\n): Promise<void> => {\n  const currentUserRef = doc(db, 'users', currentUserId);\n  const targetUserRef = doc(db, 'users', targetUserId);\n\n  const currentUserSocialGraphRef = doc(\n    db,\n    `social_graph/${currentUserId}/outbound`,\n    targetUserId\n  );\n  const targetUserSocialGraphRef = doc(\n    db,\n    `social_graph/${targetUserId}/inbound`,\n    currentUserId\n  );\n\n  try {\n    await runTransaction(db, async transaction => {\n      // ALL READS MUST HAPPEN FIRST before any writes\n      const currentUserDoc = await transaction.get(currentUserRef);\n      const targetUserDoc = await transaction.get(targetUserRef);\n      const isFollowing = (\n        await transaction.get(currentUserSocialGraphRef)\n      ).exists();\n      const mutualCheckRef = doc(\n        db,\n        `social_graph/${targetUserId}/outbound`,\n        currentUserId\n      );\n      const isMutualOrWasMutual = (\n        await transaction.get(mutualCheckRef)\n      ).exists();\n\n      if (!currentUserDoc.exists() || !targetUserDoc.exists()) {\n        throw new Error('One or both users not found.');\n      }\n\n      const currentUserData = currentUserDoc.data();\n      const targetUserData = targetUserDoc.data();\n\n      if (action === 'follow' && isFollowing) return;\n      if (action === 'unfollow' && !isFollowing) return;\n\n      const now = new Date();\n      const currentUserUpdate: any = { updatedAt: now };\n      const targetUserUpdate: any = { updatedAt: now };\n\n      // NOW DO ALL WRITES\n      if (action === 'follow') {\n        transaction.set(currentUserSocialGraphRef, {\n          id: targetUserId,\n          type: 'outbound',\n          user: targetUserData,\n          createdAt: now,\n        });\n        transaction.set(targetUserSocialGraphRef, {\n          id: currentUserId,\n          type: 'inbound',\n          user: currentUserData,\n          createdAt: now,\n        });\n\n        currentUserUpdate.outboundFriendshipCount = increment(1);\n        currentUserUpdate.followingCount = increment(1);\n        targetUserUpdate.inboundFriendshipCount = increment(1);\n        targetUserUpdate.followersCount = increment(1);\n\n        // Check for mutual friendship (using pre-read value)\n        if (isMutualOrWasMutual) {\n          currentUserUpdate.mutualFriendshipCount = increment(1);\n          targetUserUpdate.mutualFriendshipCount = increment(1);\n        }\n      } else {\n        // unfollow\n        transaction.delete(currentUserSocialGraphRef);\n        transaction.delete(targetUserSocialGraphRef);\n\n        currentUserUpdate.outboundFriendshipCount = increment(-1);\n        currentUserUpdate.followingCount = increment(-1);\n        targetUserUpdate.inboundFriendshipCount = increment(-1);\n        targetUserUpdate.followersCount = increment(-1);\n\n        // Check for mutual friendship (using pre-read value)\n        if (isMutualOrWasMutual) {\n          currentUserUpdate.mutualFriendshipCount = increment(-1);\n          targetUserUpdate.mutualFriendshipCount = increment(-1);\n        }\n      }\n\n      transaction.update(currentUserRef, currentUserUpdate);\n      transaction.update(targetUserRef, targetUserUpdate);\n    });\n\n    // Create notification for follow action (outside transaction)\n    if (action === 'follow') {\n      try {\n        const currentUserData = await getDoc(currentUserRef);\n        const userData = currentUserData.data();\n\n        await addDoc(collection(db, 'notifications'), {\n          userId: targetUserId,\n          type: 'follow',\n          title: 'New follower',\n          message: `${userData?.name || 'Someone'} started following you`,\n          linkUrl: `/profile/${userData?.username}`,\n          actorId: currentUserId,\n          actorName: userData?.name,\n          actorUsername: userData?.username,\n          actorProfilePicture: userData?.profilePicture,\n          isRead: false,\n          createdAt: serverTimestamp(),\n        });\n      } catch (notifError) {\n        // Log error but don't fail the follow action\n        handleError(notifError, 'create follow notification', {\n          severity: ErrorSeverity.ERROR,\n          silent: true,\n        });\n      }\n    }\n  } catch (error) {\n    const apiError = handleError(\n      error,\n      `${action.charAt(0).toUpperCase() + action.slice(1)} user`\n    );\n    throw new Error(apiError.userMessage);\n  }\n};\n\n/**\n * Fetch user data for social contexts, handling permissions and privacy\n */\nexport const fetchUserDataForSocialContext = async (\n  userId: string\n): Promise<DocumentData | null> => {\n  try {\n    const userDoc = await getDoc(doc(db, 'users', userId));\n    if (!userDoc.exists()) {\n      return null;\n    }\n    return userDoc.data();\n  } catch (error) {\n    if (isPermissionError(error) || isNotFoundError(error)) {\n      return null;\n    }\n    const apiError = handleError(error, 'Fetch user data');\n    throw new Error(apiError.userMessage);\n  }\n};\n\n/**\n * Build user details for comment display, handling private/inaccessible users\n */\nexport const buildCommentUserDetails = (\n  userId: string,\n  userData: DocumentData | null\n): User => {\n  const fallbackUsername = `${PRIVATE_USER_USERNAME_PREFIX}-${userId.slice(0, 6)}`;\n  const createdAt = userData?.createdAt\n    ? convertTimestamp(userData.createdAt)\n    : new Date();\n  const updatedAt = userData?.updatedAt\n    ? convertTimestamp(userData.updatedAt)\n    : new Date();\n\n  return {\n    id: userId,\n    email: userData?.email || '',\n    name: userData?.name || PRIVATE_USER_FALLBACK_NAME,\n    username: userData?.username || fallbackUsername,\n    bio: userData?.bio,\n    location: userData?.location,\n    profilePicture: userData?.profilePicture,\n    createdAt,\n    updatedAt,\n  };\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/streaks/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'deleteDoc' is defined but never used.",
        "line": 18,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'serverTimestamp' is defined but never used.",
        "line": 19,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 19,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'addDoc' is defined but never used.",
        "line": 21,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'User' is defined but never used.",
        "line": 38,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 38,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'index' is defined but never used.",
        "line": 191,
        "column": 35,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 191,
        "endColumn": 40
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Streaks API Module\n * Handles streak tracking and calculations\n */\n\n// ============================================================================\n// IMPORTS\n// ============================================================================\n\n// Firebase imports\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  setDoc,\n  updateDoc,\n  deleteDoc,\n  serverTimestamp,\n  Timestamp,\n  addDoc,\n  query,\n  where,\n  orderBy,\n  limit as limitFn,\n} from 'firebase/firestore';\n\n// Local Firebase config\nimport { db, auth } from '@/lib/firebase';\n\n// Error handling\nimport { handleError, isPermissionError } from '@/lib/errorHandler';\n\n// Shared utilities\nimport { convertTimestamp } from '../shared/utils';\n\n// Types\nimport type { User, StreakData, StreakStats } from '@/types';\n\n// ============================================================================\n// PUBLIC API\n// ============================================================================\n\nexport const firebaseStreakApi = {\n  /**\n   * Get streak data for a user, initializing if it doesn't exist\n   *\n   * @param userId - The user ID whose streak data to retrieve\n   * @returns Promise resolving to the user's streak data (returns empty streak on permission errors)\n   */\n  getStreakData: async (userId: string): Promise<StreakData> => {\n    try {\n      const streakDoc = await getDoc(doc(db, 'streaks', userId));\n\n      if (!streakDoc.exists()) {\n        // Initialize streak data if it doesn't exist\n        const initialStreak: StreakData = {\n          userId,\n          currentStreak: 0,\n          longestStreak: 0,\n          lastActivityDate: new Date(0),\n          totalStreakDays: 0,\n          streakHistory: [],\n          isPublic: true,\n        };\n\n        // Try to create the document, but if permission is denied (viewing another user's profile),\n        // just return the initial streak without creating it\n        try {\n          await setDoc(doc(db, 'streaks', userId), {\n            ...initialStreak,\n            lastActivityDate: Timestamp.fromDate(\n              initialStreak.lastActivityDate\n            ),\n          });\n        } catch (createError) {\n          // If we can't create (permission denied), just return the empty streak\n          if (isPermissionError(createError)) {\n            return initialStreak;\n          }\n          throw createError;\n        }\n\n        return initialStreak;\n      }\n\n      const data = streakDoc.data();\n      return {\n        userId: data.userId,\n        currentStreak: data.currentStreak || 0,\n        longestStreak: data.longestStreak || 0,\n        lastActivityDate: convertTimestamp(data.lastActivityDate),\n        totalStreakDays: data.totalStreakDays || 0,\n        streakHistory: data.streakHistory || [],\n        isPublic: data.isPublic !== false,\n      };\n    } catch (error) {\n      // Handle permission errors gracefully - return empty streak\n      if (isPermissionError(error)) {\n        return {\n          userId,\n          currentStreak: 0,\n          longestStreak: 0,\n          lastActivityDate: new Date(0),\n          totalStreakDays: 0,\n          streakHistory: [],\n          isPublic: true,\n        };\n      }\n\n      const apiError = handleError(error, 'Get streak data', {\n        defaultMessage: 'Failed to get streak data',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Calculate real-time streak statistics from actual session data\n   * Computes current streak, longest streak, and risk status\n   *\n   * @param userId - The user ID whose streak stats to calculate\n   * @returns Promise resolving to calculated streak statistics\n   * @throws Error if fetch or calculation fails\n   */\n  getStreakStats: async (userId: string): Promise<StreakStats> => {\n    try {\n      // Fetch sessions to calculate actual streak from data\n      const sessionsQuery = query(\n        collection(db, 'sessions'),\n        where('userId', '==', userId),\n        orderBy('startTime', 'desc'),\n        limitFn(365) // Get last year of sessions\n      );\n      const sessionsSnapshot = await getDocs(sessionsQuery);\n      const sessions = sessionsSnapshot.docs.map(doc => ({\n        ...doc.data(),\n        startTime: convertTimestamp(doc.data().startTime),\n      }));\n\n      // Group sessions by day (YYYY-MM-DD)\n      const sessionsByDay = new Map<string, boolean>();\n      sessions.forEach(session => {\n        const date = new Date(session.startTime);\n        const dayKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n        sessionsByDay.set(dayKey, true);\n      });\n\n      // Calculate current streak by going backwards from today\n      const now = new Date();\n      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n      let currentStreak = 0;\n      const checkDate = new Date(today);\n      let lastActivityDate: Date | null = null;\n\n      // Start checking from today, going backwards\n      for (let i = 0; i < 365; i++) {\n        const dayKey = `${checkDate.getFullYear()}-${String(checkDate.getMonth() + 1).padStart(2, '0')}-${String(checkDate.getDate()).padStart(2, '0')}`;\n        const hasSession = sessionsByDay.has(dayKey);\n\n        if (i === 0) {\n          // Today - if no session, start checking from yesterday\n          if (hasSession) {\n            currentStreak = 1;\n            lastActivityDate = new Date(checkDate);\n          } else {\n          }\n        } else {\n          // Previous days\n          if (hasSession) {\n            currentStreak++;\n            if (!lastActivityDate) {\n              lastActivityDate = new Date(checkDate);\n            }\n          } else {\n            // Gap found - stop counting\n            break;\n          }\n        }\n\n        // Move to previous day\n        checkDate.setDate(checkDate.getDate() - 1);\n      }\n\n      // Calculate longest streak and total days\n      const sortedDays = Array.from(sessionsByDay.keys()).sort();\n      let longestStreak = 0;\n      let tempStreak = 0;\n      let prevDate: Date | null = null;\n\n      sortedDays.forEach((dayKey, index) => {\n        const [year, month, day] = dayKey.split('-').map(Number);\n        if (year === undefined || month === undefined || day === undefined) {\n          throw new Error(`Invalid date format in dayKey: ${dayKey}`);\n        }\n        const currentDate = new Date(year, month - 1, day);\n\n        if (!prevDate) {\n          // First day\n          tempStreak = 1;\n        } else {\n          const daysDiff = Math.floor(\n            (currentDate.getTime() - prevDate.getTime()) / (1000 * 60 * 60 * 24)\n          );\n          if (daysDiff === 1) {\n            // Consecutive day\n            tempStreak++;\n          } else {\n            // Gap - reset streak\n            tempStreak = 1;\n          }\n        }\n\n        longestStreak = Math.max(longestStreak, tempStreak);\n        prevDate = currentDate;\n      });\n\n      const totalStreakDays = sessionsByDay.size;\n\n      // Determine if streak is at risk\n      const daysSinceActivity = lastActivityDate\n        ? Math.floor(\n            (today.getTime() - lastActivityDate.getTime()) /\n              (1000 * 60 * 60 * 24)\n          )\n        : 999;\n      const streakAtRisk = currentStreak > 0 && daysSinceActivity >= 1;\n\n      // Calculate next milestone\n      const milestones = [7, 30, 100, 365, 500, 1000];\n      const nextMilestone =\n        milestones.find(m => m > currentStreak) ||\n        milestones[milestones.length - 1] ||\n        1000; // Fallback to 1000 if array is empty\n\n      const result: StreakStats = {\n        currentStreak,\n        longestStreak,\n        totalStreakDays,\n        lastActivityDate,\n        streakAtRisk,\n        nextMilestone,\n      };\n\n      return result;\n    } catch (error) {\n      console.error('=== FIREBASE API: Error in getStreakStats ===', error);\n      const apiError = handleError(error, 'Get streak stats', {\n        defaultMessage: 'Failed to get streak stats',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Update streak data after a session is completed\n   * Handles consecutive days, streak breaks, and history tracking\n   *\n   * @param userId - The user ID whose streak to update\n   * @param sessionDate - The date of the completed session\n   * @returns Promise resolving to the updated streak data\n   * @throws Error if update fails\n   */\n  updateStreak: async (\n    userId: string,\n    sessionDate: Date\n  ): Promise<StreakData> => {\n    try {\n      const streakData = await firebaseStreakApi.getStreakData(userId);\n\n      const sessionDay = new Date(\n        sessionDate.getFullYear(),\n        sessionDate.getMonth(),\n        sessionDate.getDate()\n      );\n      const lastActivityDay = new Date(\n        streakData.lastActivityDate.getFullYear(),\n        streakData.lastActivityDate.getMonth(),\n        streakData.lastActivityDate.getDate()\n      );\n\n      const daysDiff = Math.floor(\n        (sessionDay.getTime() - lastActivityDay.getTime()) /\n          (1000 * 60 * 60 * 24)\n      );\n\n      let newCurrentStreak = streakData.currentStreak;\n      let newLongestStreak = streakData.longestStreak;\n      let newTotalStreakDays = streakData.totalStreakDays;\n\n      // Special case: If current streak is 0 (first session ever or after long break)\n      // Check if this is truly the first session or if we're restarting\n      const isFirstEverSession =\n        streakData.currentStreak === 0 && streakData.totalStreakDays === 0;\n      const isRestartingStreak =\n        streakData.currentStreak === 0 && streakData.totalStreakDays > 0;\n\n      if (isFirstEverSession || isRestartingStreak) {\n        // First session or restarting - start streak at 1\n        if (isFirstEverSession) {\n          newTotalStreakDays = 1;\n        } else {\n          newTotalStreakDays += 1;\n        }\n        newCurrentStreak = 1;\n        newLongestStreak = Math.max(1, newLongestStreak);\n      } else if (daysDiff === 0) {\n        // Same day, no change to streak\n      } else if (daysDiff === 1) {\n        // Consecutive day, increment streak\n        newCurrentStreak += 1;\n        newTotalStreakDays += 1;\n        if (newCurrentStreak > newLongestStreak) {\n          newLongestStreak = newCurrentStreak;\n        }\n      } else if (daysDiff > 1) {\n        // Streak broken, reset to 1\n        newCurrentStreak = 1;\n        newTotalStreakDays += 1;\n      } else if (daysDiff < 0) {\n        // Session is in the past before last activity\n      }\n\n      // Update streak history (keep last 365 days)\n      const dateStr = sessionDay.toISOString().split('T')[0];\n      if (!dateStr) {\n        throw new Error('Invalid date format');\n      }\n      const existingDayIndex = streakData.streakHistory.findIndex(\n        d => d.date === dateStr\n      );\n\n      let newHistory = [...streakData.streakHistory];\n      if (existingDayIndex >= 0) {\n        const existingDay = newHistory[existingDayIndex];\n        if (existingDay) {\n          existingDay.sessionCount += 1;\n        }\n      } else {\n        newHistory.push({\n          date: dateStr,\n          hasActivity: true,\n          sessionCount: 1,\n          totalMinutes: 0,\n        });\n      }\n\n      // Keep only last 365 days\n      newHistory = newHistory.slice(-365);\n\n      const updatedStreak: StreakData = {\n        ...streakData,\n        currentStreak: newCurrentStreak,\n        longestStreak: newLongestStreak,\n        lastActivityDate: sessionDate,\n        totalStreakDays: newTotalStreakDays,\n        streakHistory: newHistory,\n      };\n\n      await setDoc(doc(db, 'streaks', userId), {\n        ...updatedStreak,\n        lastActivityDate: Timestamp.fromDate(sessionDate),\n      });\n\n      return updatedStreak;\n    } catch (error) {\n      const apiError = handleError(error, 'Update streak', {\n        defaultMessage: 'Failed to update streak',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Toggle the visibility of a user's streak (public/private)\n   *\n   * @param userId - The user ID whose streak visibility to toggle\n   * @returns Promise resolving to the new visibility state (true = public, false = private)\n   * @throws Error if user is not authorized or toggle fails\n   */\n  toggleStreakVisibility: async (userId: string): Promise<boolean> => {\n    try {\n      if (!auth.currentUser || auth.currentUser.uid !== userId) {\n        throw new Error('Unauthorized');\n      }\n\n      const streakData = await firebaseStreakApi.getStreakData(userId);\n      const newVisibility = !streakData.isPublic;\n\n      await updateDoc(doc(db, 'streaks', userId), {\n        isPublic: newVisibility,\n      });\n\n      return newVisibility;\n    } catch (error) {\n      const apiError = handleError(error, 'Toggle streak visibility', {\n        defaultMessage: 'Failed to toggle streak visibility',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Update the visibility of a user's streak to a specific value\n   *\n   * @param userId - The user ID whose streak visibility to update\n   * @param isPublic - Whether the streak should be public\n   * @returns Promise that resolves when visibility is updated\n   * @throws Error if user is not authorized or update fails\n   */\n  updateStreakVisibility: async (\n    userId: string,\n    isPublic: boolean\n  ): Promise<void> => {\n    try {\n      if (!auth.currentUser || auth.currentUser.uid !== userId) {\n        throw new Error('Unauthorized');\n      }\n\n      await updateDoc(doc(db, 'streaks', userId), {\n        isPublic,\n      });\n    } catch (error) {\n      const apiError = handleError(error, 'Update streak visibility', {\n        defaultMessage: 'Failed to update streak visibility',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Admin function: Restore a user's streak to a specific value\n   * TODO: Add admin permission check\n   *\n   * @param userId - The user ID whose streak to restore\n   * @param streakValue - The streak value to restore to\n   * @returns Promise that resolves when the streak is restored\n   * @throws Error if user is not authenticated or restore fails\n   */\n  restoreStreak: async (userId: string, streakValue: number): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('Unauthorized');\n      }\n\n      // TODO: Add admin check\n\n      await updateDoc(doc(db, 'streaks', userId), {\n        currentStreak: streakValue,\n        lastActivityDate: Timestamp.fromDate(new Date()),\n      });\n    } catch (error) {\n      const apiError = handleError(error, 'Restore streak', {\n        defaultMessage: 'Failed to restore streak',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/users/getFollowingIds.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'socialGraphError' is defined but never used.",
        "line": 29,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 30
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Fast Following IDs Fetcher\n *\n * Optimized function to fetch ONLY the IDs of users you're following.\n * This is much faster than fetching full user objects since we only need\n * to check if someone is in the following list, not display their info.\n */\n\nimport { db } from '@/lib/firebase';\nimport { collection, getDocs, query, where } from 'firebase/firestore';\n\n/**\n * Get just the IDs of users that this user is following\n * Returns a Set for O(1) lookup performance\n */\nexport async function getFollowingIds(userId: string): Promise<Set<string>> {\n  try {\n    const followingIds: string[] = [];\n\n    // Try new social_graph structure first (faster)\n    try {\n      const outboundRef = collection(db, `social_graph/${userId}/outbound`);\n      const outboundSnapshot = await getDocs(outboundRef);\n\n      if (!outboundSnapshot.empty) {\n        // Just get the document IDs - no need to read data\n        return new Set(outboundSnapshot.docs.map(doc => doc.id));\n      }\n    } catch (socialGraphError) {\n      // If social_graph doesn't exist, continue to fallback\n    }\n\n    // Fallback to old follows collection\n    const followingQuery = query(\n      collection(db, 'follows'),\n      where('followerId', '==', userId)\n    );\n    const followingSnapshot = await getDocs(followingQuery);\n\n    followingSnapshot.forEach(doc => {\n      const data = doc.data();\n      if (data.followingId) {\n        followingIds.push(data.followingId);\n      }\n    });\n\n    return new Set(followingIds);\n  } catch (error) {\n    console.error('Error fetching following IDs:', error);\n    return new Set(); // Return empty set on error\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/users/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setDoc' is defined but never used.",
        "line": 24,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 606,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 606,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19405, 19408], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19405, 19408], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'socialGraphError' is defined but never used.",
        "line": 845,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 845,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'socialGraphError' is defined but never used.",
        "line": 924,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 924,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'page' is assigned a value but never used.",
        "line": 1038,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1038,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1084,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1084,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [35350, 35353], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [35350, 35353], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 1369,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1369,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [44994, 44997], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [44994, 44997], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 1483,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1483,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 1495,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1495,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 1505,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1505,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 10,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * User API Module\n * Handles user profile operations: CRUD, stats, privacy, search, social graph\n */\n\n// ============================================================================\n// IMPORTS\n// ============================================================================\n\n// Firebase imports\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  updateDoc,\n  deleteDoc,\n  query,\n  where,\n  orderBy,\n  limit as limitFn,\n  serverTimestamp,\n  Timestamp,\n  setDoc,\n} from 'firebase/firestore';\n\nimport {\n  ref,\n  uploadBytes,\n  getDownloadURL,\n  deleteObject,\n} from 'firebase/storage';\n\n// Local Firebase config\nimport { db, auth, storage } from '@/lib/firebase';\n\n// Error handling\nimport {\n  handleError,\n  isPermissionError,\n  isNotFoundError,\n  ErrorSeverity,\n} from '@/lib/errorHandler';\n\n// Rate limiting\nimport { checkRateLimit } from '@/lib/rateLimit';\n\n// Error messages\nimport { ERROR_MESSAGES } from '@/config/errorMessages';\n\n// Shared utilities\nimport { convertTimestamp } from '../shared/utils';\nimport { safeNumber } from '@/lib/utils';\n\n// Social helpers\nimport { updateSocialGraph } from '../social/helpers';\n\n// Types\nimport type {\n  User,\n  UserProfile,\n  UserStats,\n  ActivityData,\n  WeeklyActivity,\n  ProjectBreakdown,\n  PrivacySettings,\n  UserSearchResult,\n  SuggestedUser,\n} from '@/types';\n\nexport const firebaseUserApi = {\n  /**\n   * Get user profile by username with privacy checks and follower count recalculation\n   *\n   * @param username - The username of the user to retrieve\n   * @returns Promise resolving to the user profile with social stats\n   * @throws Error if user not found, profile is private, or access is denied\n   */\n  getUserProfile: async (username: string): Promise<UserProfile> => {\n    try {\n      const usersQuery = query(\n        collection(db, 'users'),\n        where('username', '==', username)\n      );\n      const querySnapshot = await getDocs(usersQuery);\n\n      if (querySnapshot.empty) {\n        // Don't log \"not found\" as an error - it's expected user behavior\n        throw new Error('User not found');\n      }\n\n      const userDoc = querySnapshot.docs[0];\n      if (!userDoc) {\n        throw new Error('User not found');\n      }\n      const userData = userDoc.data();\n      const isOwnProfile = auth.currentUser?.uid === userDoc.id;\n\n      // Check privacy settings\n      const profileVisibility = userData.profileVisibility || 'everyone';\n\n      // If profile is private and not the owner, deny access\n      if (!isOwnProfile && profileVisibility === 'private') {\n        throw new Error('This profile is private');\n      }\n\n      // Check if current user is following this user\n      let isFollowing = false;\n      if (auth.currentUser && !isOwnProfile) {\n        const socialGraphDoc = await getDoc(\n          doc(db, `social_graph/${auth.currentUser.uid}/outbound`, userDoc.id)\n        );\n        isFollowing = socialGraphDoc.exists();\n      }\n\n      // If profile is followers-only, check if current user is a follower\n      if (!isOwnProfile && profileVisibility === 'followers' && !isFollowing) {\n        throw new Error('This profile is only visible to followers');\n      }\n\n      // Ensure follower/following counts are accurate\n      // For OWN profile, always recalc from follows to avoid stale zeros across ports/domains\n      // For others' profiles, recalc only if missing to reduce reads\n      let followersCount = userData.followersCount || 0;\n      let followingCount = userData.followingCount || 0;\n\n      const shouldRecalculate =\n        isOwnProfile ||\n        userData.followersCount === undefined ||\n        userData.followingCount === undefined;\n      if (shouldRecalculate) {\n        try {\n          // Count followers (people who follow this user) using social_graph\n          const inboundRef = collection(\n            db,\n            `social_graph/${userDoc.id}/inbound`\n          );\n          const inboundSnapshot = await getDocs(inboundRef);\n          followersCount = inboundSnapshot.size;\n\n          // Count following (people this user follows) using social_graph\n          const outboundRef = collection(\n            db,\n            `social_graph/${userDoc.id}/outbound`\n          );\n          const outboundSnapshot = await getDocs(outboundRef);\n          followingCount = outboundSnapshot.size;\n\n          // Update the user document with correct counts\n          // For own profile, always update to keep counts fresh\n          // For others, update if they were missing\n          if (\n            isOwnProfile ||\n            userData.followersCount === undefined ||\n            userData.followingCount === undefined\n          ) {\n            await updateDoc(doc(db, 'users', userDoc.id), {\n              followersCount,\n              followingCount,\n              updatedAt: serverTimestamp(),\n            });\n          }\n        } catch (error) {\n          // Handle permission errors silently - this is expected for privacy-protected data\n          if (!isPermissionError(error)) {\n            handleError(error, 'Recalculate follower counts', {\n              severity: ErrorSeverity.WARNING,\n            });\n          }\n          // Keep the default values if recalculation fails\n        }\n      }\n\n      return {\n        id: userDoc.id,\n        username: userData.username,\n        name: userData.name,\n        bio: userData.bio,\n        location: userData.location,\n        profilePicture: userData.profilePicture,\n        followersCount,\n        followingCount,\n        totalHours: userData.totalHours || 0,\n        isFollowing,\n        isPrivate: profileVisibility === 'private',\n        createdAt: convertTimestamp(userData.createdAt),\n        updatedAt: convertTimestamp(userData.updatedAt),\n      };\n    } catch (error) {\n      // Don't log \"not found\" and privacy errors - these are expected user flows\n      const errorMessage =\n        error instanceof Error ? error.message : 'Failed to get user profile';\n      const isExpectedError =\n        errorMessage === 'User not found' ||\n        errorMessage === 'This profile is private' ||\n        errorMessage === 'This profile is only visible to followers';\n\n      if (!isExpectedError) {\n        handleError(error, 'Get user profile', {\n          defaultMessage: ERROR_MESSAGES.PROFILE_LOAD_FAILED,\n        });\n      }\n\n      throw error;\n    }\n  },\n\n  /**\n   * Get user by ID for internal references (e.g., group admins, challenge participants)\n   *\n   * @param userId - The user ID to retrieve\n   * @returns Promise resolving to the user data\n   * @throws Error if user not found or permission denied\n   */\n  getUserById: async (userId: string): Promise<User> => {\n    try {\n      const userDoc = await getDoc(doc(db, 'users', userId));\n\n      if (!userDoc.exists()) {\n        throw new Error('User not found');\n      }\n\n      const userData = userDoc.data();\n\n      return {\n        id: userDoc.id,\n        username: userData.username || '',\n        name: userData.name || 'Unknown User',\n        email: userData.email || '',\n        bio: userData.bio,\n        location: userData.location,\n        profilePicture: userData.profilePicture,\n        createdAt: convertTimestamp(userData.createdAt),\n        updatedAt: convertTimestamp(userData.updatedAt),\n      };\n    } catch (error) {\n      // Handle permission errors for deleted users gracefully\n      if (isPermissionError(error)) {\n        throw new Error('User not found');\n      }\n      const apiError = handleError(error, 'Get user by ID', {\n        defaultMessage: 'Failed to get user',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get daily activity data for a user for a specific year\n   * Returns hours and session count for each day of the year\n   *\n   * @param userId - The user ID whose activity to retrieve\n   * @param year - The year to get activity for\n   * @returns Promise resolving to array of daily activity data (365/366 entries)\n   * @throws Error if fetch fails\n   */\n  getUserDailyActivity: async (\n    userId: string,\n    year: number\n  ): Promise<ActivityData[]> => {\n    try {\n      const startOfYear = new Date(year, 0, 1, 0, 0, 0, 0);\n      const endOfYear = new Date(year, 11, 31, 23, 59, 59, 999);\n\n      const sessionsQuery = query(\n        collection(db, 'sessions'),\n        where('userId', '==', userId),\n        where('startTime', '>=', Timestamp.fromDate(startOfYear)),\n        where('startTime', '<=', Timestamp.fromDate(endOfYear))\n      );\n\n      const snapshot = await getDocs(sessionsQuery);\n\n      const dayToTotals: Record<string, { seconds: number; sessions: number }> =\n        {};\n\n      snapshot.forEach(docSnap => {\n        const data = docSnap.data();\n        const start: Date = convertTimestamp(data.startTime);\n        const dateStr = start.toISOString().substring(0, 10);\n        const durationSeconds = safeNumber(data.duration, 0);\n\n        if (!dayToTotals[dateStr]) {\n          dayToTotals[dateStr] = { seconds: 0, sessions: 0 };\n        }\n        dayToTotals[dateStr].seconds += durationSeconds;\n        dayToTotals[dateStr].sessions += 1;\n      });\n\n      // Generate full year range with zeros where no data\n      const results: ActivityData[] = [];\n      for (\n        let d = new Date(startOfYear);\n        d <= endOfYear;\n        d.setDate(d.getDate() + 1)\n      ) {\n        const dateStr = d.toISOString().substring(0, 10);\n        const item = dayToTotals[dateStr];\n        results.push({\n          date: dateStr,\n          hours: item ? item.seconds / 3600 : 0,\n          sessions: item ? item.sessions : 0,\n        });\n      }\n\n      return results;\n    } catch (error) {\n      const apiError = handleError(error, 'Get daily activity', {\n        defaultMessage: 'Failed to get daily activity',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get weekly activity data for a user for the past N weeks\n   *\n   * @param userId - The user ID whose activity to retrieve\n   * @param numberOfWeeks - Number of weeks to retrieve (default: 12)\n   * @returns Promise resolving to array of weekly activity data\n   * @throws Error if fetch fails\n   */\n  getUserWeeklyActivity: async (\n    userId: string,\n    numberOfWeeks: number = 12\n  ): Promise<WeeklyActivity[]> => {\n    try {\n      const end = new Date();\n      const start = new Date();\n      start.setDate(end.getDate() - numberOfWeeks * 7);\n\n      const sessionsQuery = query(\n        collection(db, 'sessions'),\n        where('userId', '==', userId),\n        where('startTime', '>=', Timestamp.fromDate(start)),\n        where('startTime', '<=', Timestamp.fromDate(end))\n      );\n\n      const snapshot = await getDocs(sessionsQuery);\n\n      // Buckets keyed by ISO week number within the range\n      const weekToTotals: Record<\n        string,\n        { seconds: number; sessions: number }\n      > = {};\n\n      const getWeekKey = (date: Date): string => {\n        const d = new Date(\n          Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())\n        );\n        const dayNum = d.getUTCDay() || 7;\n        d.setUTCDate(d.getUTCDate() + 4 - dayNum);\n        const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));\n        const weekNo = Math.ceil(\n          ((d.getTime() - yearStart.getTime()) / 86400000 + 1) / 7\n        );\n        return `${d.getUTCFullYear()}-W${weekNo}`;\n      };\n\n      snapshot.forEach(docSnap => {\n        const data = docSnap.data();\n        const startTime: Date = convertTimestamp(data.startTime);\n        const key = getWeekKey(startTime);\n        const durationSeconds = safeNumber(data.duration, 0);\n        if (!weekToTotals[key]) weekToTotals[key] = { seconds: 0, sessions: 0 };\n        weekToTotals[key].seconds += durationSeconds;\n        weekToTotals[key].sessions += 1;\n      });\n\n      // Generate continuous sequence of weeks\n      const results: WeeklyActivity[] = [];\n      const iter = new Date(start);\n      for (let i = 0; i < numberOfWeeks; i++) {\n        const key = getWeekKey(iter);\n        const item = weekToTotals[key];\n        results.push({\n          week: key,\n          hours: item ? item.seconds / 3600 : 0,\n          sessions: item ? item.sessions : 0,\n        });\n        iter.setDate(iter.getDate() + 7);\n      }\n\n      return results;\n    } catch (error) {\n      const apiError = handleError(error, 'Get weekly activity', {\n        defaultMessage: 'Failed to get weekly activity',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get project breakdown showing time distribution across projects\n   *\n   * @param userId - The user ID whose project breakdown to retrieve\n   * @param year - Optional year to filter by (omit for all-time)\n   * @returns Promise resolving to array of project breakdowns with hours and percentages\n   * @throws Error if fetch fails\n   */\n  getUserProjectBreakdown: async (\n    userId: string,\n    year?: number\n  ): Promise<ProjectBreakdown[]> => {\n    try {\n      let sessionsQueryBase = query(\n        collection(db, 'sessions'),\n        where('userId', '==', userId)\n      );\n\n      if (year) {\n        const startOfYear = new Date(year, 0, 1, 0, 0, 0, 0);\n        const endOfYear = new Date(year, 11, 31, 23, 59, 59, 999);\n        sessionsQueryBase = query(\n          collection(db, 'sessions'),\n          where('userId', '==', userId),\n          where('startTime', '>=', Timestamp.fromDate(startOfYear)),\n          where('startTime', '<=', Timestamp.fromDate(endOfYear))\n        );\n      }\n\n      const snapshot = await getDocs(sessionsQueryBase);\n\n      // Aggregate seconds per projectId\n      const projectToSeconds: Record<string, number> = {};\n      snapshot.forEach(docSnap => {\n        const data = docSnap.data();\n        const projectId = data.projectId || 'unknown';\n        const durationSeconds = safeNumber(data.duration, 0);\n        projectToSeconds[projectId] =\n          (projectToSeconds[projectId] || 0) + durationSeconds;\n      });\n\n      const totalSeconds =\n        Object.values(projectToSeconds).reduce((a, b) => a + b, 0) || 1;\n\n      const results: ProjectBreakdown[] = [];\n      // For each project, fetch project details for name/color\n      for (const [projectId, seconds] of Object.entries(projectToSeconds)) {\n        let name = 'Unknown Project';\n        let color = '#64748B';\n        try {\n          const projectDoc = await getDoc(\n            doc(db, 'projects', userId, 'userProjects', projectId)\n          );\n          const proj = projectDoc.data();\n          if (proj) {\n            name = proj.name || name;\n            color = proj.color || color;\n          }\n        } catch {}\n\n        const hours = seconds / 3600;\n        const percentage = (seconds / totalSeconds) * 100;\n        results.push({\n          projectId,\n          projectName: name,\n          hours,\n          percentage,\n          color,\n        });\n      }\n\n      // Sort by hours desc\n      results.sort((a, b) => b.hours - a.hours);\n      return results;\n    } catch (error) {\n      const apiError = handleError(error, 'Get project breakdown', {\n        defaultMessage: 'Failed to get project breakdown',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Upload a profile picture to Firebase Storage\n   *\n   * @param file - The image file to upload (JPEG, PNG, GIF, or WebP, max 5MB)\n   * @returns Promise resolving to the download URL of the uploaded image\n   * @throws Error if user is not authenticated, file is invalid, or upload fails\n   */\n  uploadProfilePicture: async (file: File): Promise<string> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      // Validate file type\n      const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\n      if (!validTypes.includes(file.type)) {\n        throw new Error(\n          'Invalid file type. Please upload a JPEG, PNG, GIF, or WebP image.'\n        );\n      }\n\n      // Validate file size (5MB max)\n      const maxSize = 5 * 1024 * 1024;\n      if (file.size > maxSize) {\n        throw new Error('File size too large. Maximum size is 5MB.');\n      }\n\n      // Create a unique filename with timestamp\n      const timestamp = Date.now();\n      const fileExtension = file.name.split('.').pop() || 'jpg';\n      const fileName = `profile_${timestamp}.${fileExtension}`;\n\n      // Create storage reference\n      const storageRef = ref(\n        storage,\n        `profile-pictures/${auth.currentUser.uid}/${fileName}`\n      );\n\n      // Upload file\n      const snapshot = await uploadBytes(storageRef, file, {\n        contentType: file.type,\n        customMetadata: {\n          uploadedBy: auth.currentUser.uid,\n          uploadedAt: new Date().toISOString(),\n        },\n      });\n\n      // Get download URL\n      const downloadURL = await getDownloadURL(snapshot.ref);\n\n      return downloadURL;\n    } catch (error) {\n      const apiError = handleError(error, 'Upload profile picture', {\n        defaultMessage: 'Failed to upload profile picture',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Delete a profile picture from Firebase Storage\n   * Only deletes Firebase Storage URLs, skips external URLs (e.g., Google profile photos)\n   *\n   * @param profilePictureUrl - The URL of the profile picture to delete\n   * @returns Promise that resolves when the picture is deleted (errors are handled gracefully)\n   */\n  deleteProfilePicture: async (profilePictureUrl: string): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      // Only delete if it's a Firebase Storage URL\n      if (!profilePictureUrl.includes('firebasestorage.googleapis.com')) {\n        return; // Skip deletion for external URLs (e.g., Google profile photos)\n      }\n\n      // Extract the storage path from the URL\n      const storageRef = ref(storage, profilePictureUrl);\n\n      // Delete the file (will fail silently if file doesn't exist)\n      try {\n        await deleteObject(storageRef);\n      } catch (error) {\n        // Ignore errors if file doesn't exist\n        if (!isNotFoundError(error)) {\n          handleError(error, 'Delete old profile picture', {\n            severity: ErrorSeverity.WARNING,\n          });\n        }\n      }\n    } catch (error) {\n      handleError(error, 'in deleteProfilePicture', {\n        severity: ErrorSeverity.WARNING,\n      });\n      // Don't throw error - this is a cleanup operation\n    }\n  },\n\n  /**\n   * Update the authenticated user's profile information\n   *\n   * @param data - Partial profile data with fields to update\n   * @returns Promise resolving to the updated user profile\n   * @throws Error if user is not authenticated or update fails\n   */\n  updateProfile: async (\n    data: Partial<{\n      name: string;\n      bio: string;\n      tagline: string;\n      pronouns: string;\n      location: string;\n      website: string;\n      profilePicture: string;\n      socialLinks: {\n        twitter?: string;\n        github?: string;\n        linkedin?: string;\n      };\n      profileVisibility: 'everyone' | 'followers' | 'private';\n      activityVisibility: 'everyone' | 'followers' | 'private';\n      projectVisibility: 'everyone' | 'followers' | 'private';\n    }>\n  ): Promise<UserProfile> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      // Strip undefined values to avoid Firestore errors\n      const cleanData: Record<string, any> = {};\n      Object.entries(data).forEach(([key, value]) => {\n        if (value !== undefined) {\n          cleanData[key] = value;\n        }\n      });\n\n      // Add lowercase fields for searchability\n      if (cleanData.name) {\n        cleanData.nameLower = cleanData.name.toLowerCase();\n      }\n\n      const updateData = {\n        ...cleanData,\n        updatedAt: serverTimestamp(),\n      };\n\n      await updateDoc(doc(db, 'users', auth.currentUser.uid), updateData);\n\n      // Get updated profile\n      const userDoc = await getDoc(doc(db, 'users', auth.currentUser.uid));\n      const userData = userDoc.data()!;\n\n      return {\n        id: auth.currentUser.uid,\n        username: userData.username,\n        name: userData.name,\n        bio: userData.bio,\n        location: userData.location,\n        profilePicture: userData.profilePicture,\n        followersCount: userData.followersCount || 0,\n        followingCount: userData.followingCount || 0,\n        totalHours: userData.totalHours || 0,\n        isFollowing: false,\n        isPrivate: userData.profileVisibility === 'private',\n        createdAt: convertTimestamp(userData.createdAt),\n        updatedAt: convertTimestamp(userData.updatedAt),\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Update profile', {\n        defaultMessage: ERROR_MESSAGES.PROFILE_UPDATE_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get comprehensive statistics for a user including hours, streaks, and productivity metrics\n   *\n   * @param userId - The user ID whose stats to retrieve\n   * @returns Promise resolving to user stats (returns default stats on error)\n   */\n  getUserStats: async (userId: string): Promise<UserStats> => {\n    try {\n      // Compute stats from sessions collection\n      const sessionsQuery = query(\n        collection(db, 'sessions'),\n        where('userId', '==', userId)\n      );\n      const sessionsSnapshot = await getDocs(sessionsQuery);\n\n      let totalSeconds = 0;\n      let weeklySeconds = 0;\n      let monthlySeconds = 0;\n      let sessionsThisWeek = 0;\n      let sessionsThisMonth = 0;\n      const sessionDurations: number[] = [];\n      const hourBuckets: Record<number, number> = {};\n\n      const now = new Date();\n      const weekStart = new Date(now);\n      weekStart.setDate(now.getDate() - now.getDay()); // Sunday start\n      weekStart.setHours(0, 0, 0, 0);\n\n      const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n\n      sessionsSnapshot.forEach(docSnap => {\n        const data = docSnap.data();\n        const duration = Number(data.duration) || 0; // seconds\n        const start = convertTimestamp(data.startTime);\n        totalSeconds += duration;\n        sessionDurations.push(duration);\n\n        // Most productive hour (by count)\n        const h = new Date(start).getHours();\n        hourBuckets[h] = (hourBuckets[h] || 0) + 1;\n\n        if (start >= weekStart) {\n          weeklySeconds += duration;\n          sessionsThisWeek += 1;\n        }\n        if (start >= monthStart) {\n          monthlySeconds += duration;\n          sessionsThisMonth += 1;\n        }\n      });\n\n      // Streaks: simple placeholder based on recent days with activity\n      // Count consecutive days from today with at least one session\n      const daysWithActivity = new Set<string>();\n      sessionsSnapshot.forEach(docSnap => {\n        const start = convertTimestamp(docSnap.data().startTime);\n        daysWithActivity.add(start.toISOString().substring(0, 10));\n      });\n      let currentStreak = 0;\n      const cursor = new Date();\n      cursor.setHours(0, 0, 0, 0);\n      while (daysWithActivity.has(cursor.toISOString().substring(0, 10))) {\n        currentStreak += 1;\n        cursor.setDate(cursor.getDate() - 1);\n      }\n      const longestStreak = Math.max(currentStreak, 0);\n\n      // Average session duration (in minutes)\n      const averageSessionDuration = sessionDurations.length\n        ? Math.round(\n            sessionDurations.reduce((a, b) => a + b, 0) /\n              sessionDurations.length /\n              60\n          )\n        : 0;\n\n      // Most productive hour (0-23)\n      let mostProductiveHour = 0;\n      let maxCount = -1;\n      Object.entries(hourBuckets).forEach(([hourStr, count]) => {\n        const hour = Number(hourStr);\n        if (count > maxCount) {\n          maxCount = count as number;\n          mostProductiveHour = hour;\n        }\n      });\n\n      return {\n        totalHours: totalSeconds / 3600,\n        weeklyHours: weeklySeconds / 3600,\n        monthlyHours: monthlySeconds / 3600,\n        currentStreak,\n        longestStreak,\n        sessionsThisWeek,\n        sessionsThisMonth,\n        averageSessionDuration,\n        mostProductiveHour,\n        favoriteProject: undefined,\n      };\n    } catch (error) {\n      handleError(error, 'get user stats', { severity: ErrorSeverity.ERROR });\n      // Return default stats instead of throwing error\n      return {\n        totalHours: 0,\n        weeklyHours: 0,\n        monthlyHours: 0,\n        sessionsThisWeek: 0,\n        sessionsThisMonth: 0,\n        currentStreak: 0,\n        longestStreak: 0,\n        averageSessionDuration: 0,\n        mostProductiveHour: 0,\n        favoriteProject: undefined,\n      };\n    }\n  },\n\n  /**\n   * Follow a user and update the social graph\n   *\n   * @param userId - The ID of the user to follow\n   * @returns Promise that resolves when the follow is complete\n   * @throws Error if user is not authenticated, rate limit exceeded, or follow fails\n   */\n  followUser: async (userId: string): Promise<void> => {\n    if (!auth.currentUser) {\n      throw new Error('User not authenticated');\n    }\n    // Rate limitFn follow actions\n    checkRateLimit(auth.currentUser.uid, 'FOLLOW');\n    await updateSocialGraph(auth.currentUser.uid, userId, 'follow');\n  },\n\n  /**\n   * Unfollow a user and update the social graph\n   *\n   * @param userId - The ID of the user to unfollow\n   * @returns Promise that resolves when the unfollow is complete\n   * @throws Error if user is not authenticated, rate limit exceeded, or unfollow fails\n   */\n  unfollowUser: async (userId: string): Promise<void> => {\n    if (!auth.currentUser) {\n      throw new Error('User not authenticated');\n    }\n    // Rate limitFn unfollow actions (uses same limitFn as follow)\n    checkRateLimit(auth.currentUser.uid, 'FOLLOW');\n    await updateSocialGraph(auth.currentUser.uid, userId, 'unfollow');\n  },\n\n  /**\n   * Check if the current user is following a target user\n   *\n   * @param currentUserId - The ID of the current user\n   * @param targetUserId - The ID of the target user to check\n   * @returns Promise resolving to true if following, false otherwise\n   */\n  isFollowing: async (\n    currentUserId: string,\n    targetUserId: string\n  ): Promise<boolean> => {\n    try {\n      const socialGraphDoc = await getDoc(\n        doc(db, `social_graph/${currentUserId}/outbound`, targetUserId)\n      );\n      return socialGraphDoc.exists();\n    } catch (error) {\n      handleError(error, 'checking follow status', {\n        severity: ErrorSeverity.ERROR,\n      });\n      return false;\n    }\n  },\n\n  /**\n   * Get all followers for a user (people who follow this user)\n   * Supports both new social_graph structure and legacy follows collection\n   *\n   * @param userId - The user ID whose followers to retrieve\n   * @returns Promise resolving to array of follower users (empty array on error)\n   * @throws Error if fetch fails (except permission errors which return empty array)\n   */\n  getFollowers: async (userId: string): Promise<User[]> => {\n    try {\n      let followerIds: string[] = [];\n\n      // Try new social_graph structure first\n      try {\n        const inboundRef = collection(db, `social_graph/${userId}/inbound`);\n        const inboundSnapshot = await getDocs(inboundRef);\n\n        if (!inboundSnapshot.empty) {\n          followerIds = inboundSnapshot.docs.map(doc => doc.id);\n        }\n      } catch (socialGraphError) {\n        // If social_graph doesn't exist or has permission issues, continue to fallback\n      }\n\n      // Fallback to old follows collection if no followers found via social_graph\n      if (followerIds.length === 0) {\n        const followersQuery = query(\n          collection(db, 'follows'),\n          where('followingId', '==', userId)\n        );\n        const followersSnapshot = await getDocs(followersQuery);\n\n        followerIds = followersSnapshot.docs.map(doc => {\n          const data = doc.data();\n          return data.followerId;\n        });\n      }\n\n      if (followerIds.length === 0) {\n        return [];\n      }\n\n      // Get user details for all followers\n      const followers: User[] = [];\n\n      for (const followerId of followerIds) {\n        const userDoc = await getDoc(doc(db, 'users', followerId));\n        if (userDoc.exists()) {\n          const userData = userDoc.data();\n          followers.push({\n            id: userDoc.id,\n            username: userData.username,\n            email: userData.email,\n            name: userData.name,\n            bio: userData.bio || '',\n            profilePicture: userData.profilePicture,\n            followersCount: userData.followersCount || 0,\n            followingCount: userData.followingCount || 0,\n            createdAt: userData.createdAt?.toDate() || new Date(),\n            updatedAt: userData.updatedAt?.toDate() || new Date(),\n          });\n        } else {\n        }\n      }\n\n      return followers;\n    } catch (error) {\n      // Handle permission errors silently for privacy-protected data\n      if (isPermissionError(error)) {\n        return [];\n      }\n      console.error('[getFollowers] Error:', error);\n      const apiError = handleError(error, 'Fetch followers', {\n        defaultMessage: ERROR_MESSAGES.PROFILE_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get all users that a user is following\n   * Supports both new social_graph structure and legacy follows collection\n   *\n   * @param userId - The user ID whose following list to retrieve\n   * @returns Promise resolving to array of following users (empty array on error)\n   * @throws Error if fetch fails (except permission errors which return empty array)\n   */\n  getFollowing: async (userId: string): Promise<User[]> => {\n    try {\n      let followingIds: string[] = [];\n\n      // Try new social_graph structure first\n      try {\n        const outboundRef = collection(db, `social_graph/${userId}/outbound`);\n        const outboundSnapshot = await getDocs(outboundRef);\n\n        if (!outboundSnapshot.empty) {\n          followingIds = outboundSnapshot.docs.map(doc => doc.id);\n        }\n      } catch (socialGraphError) {\n        // If social_graph doesn't exist or has permission issues, continue to fallback\n      }\n\n      // Fallback to old follows collection if no following found via social_graph\n      if (followingIds.length === 0) {\n        const followingQuery = query(\n          collection(db, 'follows'),\n          where('followerId', '==', userId)\n        );\n        const followingSnapshot = await getDocs(followingQuery);\n\n        followingIds = followingSnapshot.docs.map(doc => {\n          const data = doc.data();\n          return data.followingId;\n        });\n      }\n\n      if (followingIds.length === 0) {\n        return [];\n      }\n\n      // Get user details for all following\n      const following: User[] = [];\n\n      for (const followingId of followingIds) {\n        const userDoc = await getDoc(doc(db, 'users', followingId));\n        if (userDoc.exists()) {\n          const userData = userDoc.data();\n          following.push({\n            id: userDoc.id,\n            username: userData.username,\n            email: userData.email,\n            name: userData.name,\n            bio: userData.bio || '',\n            profilePicture: userData.profilePicture,\n            followersCount: userData.followersCount || 0,\n            followingCount: userData.followingCount || 0,\n            createdAt: userData.createdAt?.toDate() || new Date(),\n            updatedAt: userData.updatedAt?.toDate() || new Date(),\n          });\n        } else {\n        }\n      }\n\n      return following;\n    } catch (error) {\n      // Handle permission errors silently for privacy-protected data\n      if (isPermissionError(error)) {\n        return [];\n      }\n      console.error('[getFollowing] Error:', error);\n      const apiError = handleError(error, 'Fetch following', {\n        defaultMessage: ERROR_MESSAGES.PROFILE_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Recalculate and sync follower/following counts from the follows collection\n   * Useful for fixing stale or incorrect counts\n   *\n   * @param userId - The user ID whose counts to sync\n   * @returns Promise resolving to the updated follower and following counts\n   * @throws Error if sync fails\n   */\n  syncFollowerCounts: async (\n    userId: string\n  ): Promise<{ followersCount: number; followingCount: number }> => {\n    try {\n      // Count followers (people who follow this user)\n      const followersQuery = query(\n        collection(db, 'follows'),\n        where('followingId', '==', userId)\n      );\n      const followersSnapshot = await getDocs(followersQuery);\n      const followersCount = followersSnapshot.size;\n\n      // Count following (people this user follows)\n      const followingQuery = query(\n        collection(db, 'follows'),\n        where('followerId', '==', userId)\n      );\n      const followingSnapshot = await getDocs(followingQuery);\n      const followingCount = followingSnapshot.size;\n\n      // Update the user document with correct counts\n      await updateDoc(doc(db, 'users', userId), {\n        followersCount,\n        followingCount,\n        updatedAt: serverTimestamp(),\n      });\n\n      return { followersCount, followingCount };\n    } catch (error) {\n      const apiError = handleError(error, 'Sync follower counts', {\n        defaultMessage: 'Failed to sync follower counts',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Search for users by username or name (case-insensitive prefix matching)\n   *\n   * @param searchTerm - The search term to match against username/name\n   * @param page - Page number for pagination (default: 1)\n   * @param limitCount - Maximum number of results to return (default: 20)\n   * @returns Promise resolving to search results with pagination metadata\n   * @throws Error if rate limit exceeded or search fails\n   */\n  searchUsers: async (\n    searchTerm: string,\n    page: number = 1,\n    limitCount: number = 20\n  ): Promise<{\n    users: UserSearchResult[];\n    totalCount: number;\n    hasMore: boolean;\n  }> => {\n    try {\n      // Rate limitFn search operations\n      if (auth.currentUser) {\n        checkRateLimit(auth.currentUser.uid, 'SEARCH');\n      }\n\n      const term = (searchTerm || '').trim();\n      if (!term) {\n        return { users: [], totalCount: 0, hasMore: false };\n      }\n\n      // Convert search term to lowercase for case-insensitive search\n      const termLower = term.toLowerCase();\n\n      // 1) Search by username prefix (case-insensitive)\n      const usernameQ = query(\n        collection(db, 'users'),\n        orderBy('usernameLower'),\n        where('usernameLower', '>=', termLower),\n        where('usernameLower', '<=', termLower + '\\uf8ff'),\n        limitFn(limitCount)\n      );\n\n      // 2) Search by name prefix (case-insensitive)\n      const nameQ = query(\n        collection(db, 'users'),\n        orderBy('nameLower'),\n        where('nameLower', '>=', termLower),\n        where('nameLower', '<=', termLower + '\\uf8ff'),\n        limitFn(limitCount)\n      );\n\n      const [usernameSnap, nameSnap] = await Promise.all([\n        getDocs(usernameQ),\n        getDocs(nameQ),\n      ]);\n\n      // Merge and de-duplicate results, prefer username matches first\n      const byId: Record<string, UserSearchResult> = {};\n      const pushDoc = (docSnap: any) => {\n        const userData = docSnap.data();\n        byId[docSnap.id] = {\n          id: docSnap.id,\n          username: userData.username,\n          name: userData.name,\n          bio: userData.bio,\n          profilePicture: userData.profilePicture,\n          followersCount:\n            userData.inboundFriendshipCount || userData.followersCount || 0,\n          isFollowing: false,\n        } as UserSearchResult;\n      };\n\n      usernameSnap.forEach(pushDoc);\n      nameSnap.forEach(d => {\n        if (!byId[d.id]) pushDoc(d);\n      });\n\n      // Convert to array and apply a basic relevance sort: exact prefix on username > name > others\n      let users = Object.values(byId)\n        .sort((a, b) => {\n          const t = term.toLowerCase();\n          const aUser = a.username?.toLowerCase() || '';\n          const bUser = b.username?.toLowerCase() || '';\n          const aName = a.name?.toLowerCase() || '';\n          const bName = b.name?.toLowerCase() || '';\n\n          const aScore =\n            (aUser.startsWith(t) ? 2 : 0) + (aName.startsWith(t) ? 1 : 0);\n          const bScore =\n            (bUser.startsWith(t) ? 2 : 0) + (bName.startsWith(t) ? 1 : 0);\n          return bScore - aScore;\n        })\n        .slice(0, limitCount);\n\n      // Check if current user is following each user\n      if (auth.currentUser) {\n        const followingChecks = await Promise.all(\n          users.map(async user => {\n            if (user.id === auth.currentUser!.uid) {\n              return { ...user, isFollowing: false }; // Don't check for own profile\n            }\n            const socialGraphDoc = await getDoc(\n              doc(db, `social_graph/${auth.currentUser!.uid}/outbound`, user.id)\n            );\n            return { ...user, isFollowing: socialGraphDoc.exists() };\n          })\n        );\n        users = followingChecks;\n      }\n\n      return {\n        users,\n        totalCount: users.length,\n        hasMore: users.length === limitCount,\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Search users', {\n        defaultMessage: 'Failed to search users',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get suggested users to follow based on popularity\n   * Filters out current user and users already being followed\n   *\n   * @param limitCount - Maximum number of suggestions to return (default: 10)\n   * @returns Promise resolving to array of suggested users with follow reasons\n   * @throws Error if fetch fails (returns empty array on error)\n   */\n  getSuggestedUsers: async (\n    limitCount: number = 10\n  ): Promise<SuggestedUser[]> => {\n    try {\n      if (!auth.currentUser) {\n        return [];\n      }\n\n      // Get list of users we're already following directly from social_graph\n      const outboundRef = collection(\n        db,\n        `social_graph/${auth.currentUser.uid}/outbound`\n      );\n      const outboundSnapshot = await getDocs(outboundRef);\n      const followingIds = new Set(outboundSnapshot.docs.map(doc => doc.id));\n      followingIds.add(auth.currentUser.uid); // Also exclude current user\n\n      // Also check old follows collection for backward compatibility if social_graph is empty\n      if (followingIds.size === 1) {\n        // Only current user in set\n        const followingQuery = query(\n          collection(db, 'follows'),\n          where('followerId', '==', auth.currentUser.uid)\n        );\n        const followingSnapshot = await getDocs(followingQuery);\n        followingSnapshot.docs.forEach(doc => {\n          const data = doc.data();\n          if (data.followingId) {\n            followingIds.add(data.followingId);\n          }\n        });\n      }\n\n      // Query users ordered by popularity (follower count descending)\n      // Fetch a reasonable buffer to account for already-followed users\n      // If we need 5 suggestions and user follows ~20 people, fetching 30 should be sufficient\n      const fetchLimit = Math.min(limitCount * 5, 50); // 5x multiplier, max 50\n      const usersQuery = query(\n        collection(db, 'users'),\n        where('profileVisibility', '==', 'everyone'),\n        orderBy('followersCount', 'desc'),\n        limitFn(fetchLimit)\n      );\n\n      const querySnapshot = await getDocs(usersQuery);\n      const suggestions: SuggestedUser[] = [];\n\n      // Filter and collect until we have enough suggestions\n      for (const doc of querySnapshot.docs) {\n        if (suggestions.length >= limitCount) {\n          break;\n        }\n\n        // Skip users we're already following or current user\n        if (followingIds.has(doc.id)) {\n          continue;\n        }\n\n        const userData = doc.data();\n        suggestions.push({\n          id: doc.id,\n          username: userData.username,\n          name: userData.name,\n          bio: userData.bio,\n          profilePicture: userData.profilePicture,\n          followersCount: userData.followersCount || 0,\n          reason:\n            (userData.followersCount || 0) > 10\n              ? 'popular_user'\n              : 'similar_interests',\n          isFollowing: false,\n        });\n      }\n\n      return suggestions;\n    } catch (error) {\n      handleError(error, 'getting suggested users', {\n        severity: ErrorSeverity.ERROR,\n      });\n      const apiError = handleError(error, 'Get suggested users', {\n        defaultMessage: 'Failed to get suggested users',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get privacy settings for the authenticated user\n   *\n   * @returns Promise resolving to the user's privacy settings\n   * @throws Error if user is not authenticated or fetch fails\n   */\n  getPrivacySettings: async (): Promise<PrivacySettings> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const userDoc = await getDoc(doc(db, 'users', auth.currentUser.uid));\n      const userData = userDoc.data();\n\n      return {\n        profileVisibility: userData?.profileVisibility || 'everyone',\n        activityVisibility: userData?.activityVisibility || 'everyone',\n        projectVisibility: userData?.projectVisibility || 'everyone',\n        blockedUsers: userData?.blockedUsers || [],\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Get privacy settings', {\n        defaultMessage: 'Failed to get privacy settings',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Update privacy settings for the authenticated user\n   *\n   * @param settings - Partial privacy settings with fields to update\n   * @returns Promise resolving to the updated privacy settings\n   * @throws Error if user is not authenticated or update fails\n   */\n  updatePrivacySettings: async (\n    settings: Partial<PrivacySettings>\n  ): Promise<PrivacySettings> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const updateData = {\n        ...settings,\n        updatedAt: serverTimestamp(),\n      };\n\n      await updateDoc(doc(db, 'users', auth.currentUser.uid), updateData);\n\n      return {\n        profileVisibility: settings.profileVisibility || 'everyone',\n        activityVisibility: settings.activityVisibility || 'everyone',\n        projectVisibility: settings.projectVisibility || 'everyone',\n        blockedUsers: settings.blockedUsers || [],\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Update privacy settings', {\n        defaultMessage: 'Failed to update privacy settings',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Check if a username is available (not already taken)\n   *\n   * @param username - The username to check\n   * @returns Promise resolving to true if available, false if taken\n   * @throws Error if check fails\n   */\n  checkUsernameAvailability: async (username: string): Promise<boolean> => {\n    try {\n      const usersQuery = query(\n        collection(db, 'users'),\n        where('username', '==', username),\n        limitFn(1)\n      );\n      const querySnapshot = await getDocs(usersQuery);\n      return querySnapshot.empty;\n    } catch (error) {\n      // Handle Firebase permission errors gracefully\n      if (isPermissionError(error)) {\n        handleError(error, 'Check username availability', {\n          severity: ErrorSeverity.WARNING,\n        });\n        // In case of permission error, assume username is available to allow registration to proceed\n        // The actual uniqueness will be enforced by Firebase Auth and server-side validation\n        return true;\n      }\n      const apiError = handleError(error, 'Check username availability');\n      throw new Error(\n        apiError.userMessage ||\n          'Unable to verify username availability. Please try again.'\n      );\n    }\n  },\n\n  /**\n   * Migration utility: Add lowercase username and name fields for search functionality\n   * Should only be run once as a data migration\n   *\n   * @returns Promise resolving to migration statistics (success, failed, total counts)\n   * @throws Error if user is not authenticated or migration fails\n   */\n  migrateUsersToLowercase: async (): Promise<{\n    success: number;\n    failed: number;\n    total: number;\n  }> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const usersQuery = query(collection(db, 'users'), limitFn(500));\n      const querySnapshot = await getDocs(usersQuery);\n\n      let success = 0;\n      let failed = 0;\n      const total = querySnapshot.size;\n\n      for (const userDoc of querySnapshot.docs) {\n        try {\n          const userData = userDoc.data();\n          const updates: any = { updatedAt: serverTimestamp() };\n\n          if (userData.username && !userData.usernameLower) {\n            updates.usernameLower = userData.username.toLowerCase();\n          }\n\n          if (userData.name && !userData.nameLower) {\n            updates.nameLower = userData.name.toLowerCase();\n          }\n\n          // Only update if there are new fields to add\n          if (Object.keys(updates).length > 1) {\n            await updateDoc(doc(db, 'users', userDoc.id), updates);\n            success++;\n          }\n        } catch (error) {\n          failed++;\n          console.error(`Failed to migrate user ${userDoc.id}:`, error);\n        }\n      }\n\n      const result = { success, failed, total };\n      return result;\n    } catch (error) {\n      const apiError = handleError(error, 'Migrate users to lowercase', {\n        defaultMessage: 'Failed to migrate users',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Delete user account and all associated data permanently\n   * Includes sessions, comments, follows, projects, tasks, streaks, and profile picture\n   *\n   * @returns Promise that resolves when account is completely deleted\n   * @throws Error if user is not authenticated or deletion fails\n   */\n  deleteAccount: async (): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('No authenticated user');\n      }\n\n      const userId = auth.currentUser.uid;\n\n      // 1. Delete all user's sessions\n      const sessionsQuery = query(\n        collection(db, 'sessions'),\n        where('userId', '==', userId)\n      );\n      const sessionsSnapshot = await getDocs(sessionsQuery);\n      const sessionDeletes = sessionsSnapshot.docs.map(doc =>\n        deleteDoc(doc.ref)\n      );\n      await Promise.all(sessionDeletes);\n\n      // 2. Delete all user's comments\n      const commentsQuery = query(\n        collection(db, 'comments'),\n        where('userId', '==', userId)\n      );\n      const commentsSnapshot = await getDocs(commentsQuery);\n      const commentDeletes = commentsSnapshot.docs.map(doc =>\n        deleteDoc(doc.ref)\n      );\n      await Promise.all(commentDeletes);\n\n      // 3. Delete all follow relationships where user is follower or following\n      const followsAsFollowerQuery = query(\n        collection(db, 'follows'),\n        where('followerId', '==', userId)\n      );\n      const followsAsFollowingQuery = query(\n        collection(db, 'follows'),\n        where('followingId', '==', userId)\n      );\n      const [followsAsFollowerSnapshot, followsAsFollowingSnapshot] =\n        await Promise.all([\n          getDocs(followsAsFollowerQuery),\n          getDocs(followsAsFollowingQuery),\n        ]);\n      const followDeletes = [\n        ...followsAsFollowerSnapshot.docs.map(doc => deleteDoc(doc.ref)),\n        ...followsAsFollowingSnapshot.docs.map(doc => deleteDoc(doc.ref)),\n      ];\n      await Promise.all(followDeletes);\n\n      // 4. Delete user's projects and their tasks\n      const projectsRef = collection(db, 'projects', userId, 'userProjects');\n      const projectsSnapshot = await getDocs(projectsRef);\n\n      for (const projectDoc of projectsSnapshot.docs) {\n        // Delete tasks in each project\n        const tasksRef = collection(\n          db,\n          'projects',\n          userId,\n          'userProjects',\n          projectDoc.id,\n          'tasks'\n        );\n        const tasksSnapshot = await getDocs(tasksRef);\n        const taskDeletes = tasksSnapshot.docs.map(doc => deleteDoc(doc.ref));\n        await Promise.all(taskDeletes);\n\n        // Delete the project\n        await deleteDoc(projectDoc.ref);\n      }\n\n      // 5. Delete user's streak data\n      try {\n        const streakRef = doc(db, 'streaks', userId);\n        await deleteDoc(streakRef);\n      } catch (error) {}\n\n      // 6. Delete user's active session data\n      try {\n        const activeSessionRef = doc(\n          db,\n          'users',\n          userId,\n          'activeSession',\n          'current'\n        );\n        await deleteDoc(activeSessionRef);\n      } catch (error) {}\n\n      // 7. Delete profile picture from storage if it exists\n      try {\n        const userDoc = await getDoc(doc(db, 'users', userId));\n        const userData = userDoc.data();\n        if (userData?.profilePicture) {\n          const storageRef = ref(storage, `profile-pictures/${userId}`);\n          await deleteObject(storageRef);\n        }\n      } catch (error) {}\n\n      // 8. Delete the user document from Firestore\n      await deleteDoc(doc(db, 'users', userId));\n\n      // 9. Finally, delete the Firebase Auth user\n      await auth.currentUser.delete();\n    } catch (error) {\n      const apiError = handleError(error, 'Delete account', {\n        defaultMessage:\n          'Failed to delete account. Please try logging out and back in, then try again.',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/cache.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ttlMs' is assigned a value but never used.",
        "line": 48,
        "column": 39,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 48,
        "endColumn": 44
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 59,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 59,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'e' is defined but never used.",
        "line": 147,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 147,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 237,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 237,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5975, 5978], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5975, 5978], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ttlMs' is assigned a value but never used.",
        "line": 240,
        "column": 39,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 240,
        "endColumn": 44
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 297,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 297,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7421, 7424], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7421, 7424], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'prefix' is defined but never used.",
        "line": 426,
        "column": 39,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 426,
        "endColumn": 45
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Client-side caching utilities to reduce Firestore reads\n *\n * This module provides:\n * 1. localStorage caching for user preferences and static data\n * 2. sessionStorage caching for temporary data within a session\n * 3. Memory caching for frequently accessed data\n * 4. Query deduplication to prevent duplicate concurrent requests\n */\n\nimport { debug } from './debug';\nimport { CACHE_TIMES } from '@/config/constants';\n\n// ==================== STORAGE UTILITIES ====================\n\nconst STORAGE_PREFIX = 'ambira_';\nconst CACHE_VERSION = 'v1';\n\ninterface CacheItem<T> {\n  data: T;\n  timestamp: number;\n  version: string;\n}\n\n/**\n * Safely access localStorage with error handling\n */\nfunction getStorage(type: 'local' | 'session'): Storage | null {\n  try {\n    const storage = type === 'local' ? localStorage : sessionStorage;\n    // Test if storage is accessible\n    const testKey = `${STORAGE_PREFIX}test`;\n    storage.setItem(testKey, 'test');\n    storage.removeItem(testKey);\n    return storage;\n  } catch (e) {\n    debug.warn(`${type}Storage is not available:`, e);\n    return null;\n  }\n}\n\n/**\n * LocalStorage cache with TTL support\n */\nexport class LocalCache {\n  private static readonly PREFIX = `${STORAGE_PREFIX}${CACHE_VERSION}_`;\n\n  static set<T>(key: string, data: T, ttlMs: number = CACHE_TIMES.DAILY): void {\n    const storage = getStorage('local');\n    if (!storage) return;\n\n    try {\n      const item: CacheItem<T> = {\n        data,\n        timestamp: Date.now(),\n        version: CACHE_VERSION,\n      };\n      storage.setItem(`${this.PREFIX}${key}`, JSON.stringify(item));\n    } catch (e) {\n      // Storage might be full, try to clear old items\n      this.clearExpired();\n      try {\n        const item: CacheItem<T> = {\n          data,\n          timestamp: Date.now(),\n          version: CACHE_VERSION,\n        };\n        storage.setItem(`${this.PREFIX}${key}`, JSON.stringify(item));\n      } catch (e2) {\n        debug.warn('Failed to cache data:', e2);\n      }\n    }\n  }\n\n  static get<T>(key: string, ttlMs: number = CACHE_TIMES.DAILY): T | null {\n    const storage = getStorage('local');\n    if (!storage) return null;\n\n    try {\n      const itemStr = storage.getItem(`${this.PREFIX}${key}`);\n      if (!itemStr) return null;\n\n      const item: CacheItem<T> = JSON.parse(itemStr);\n\n      // Check version\n      if (item.version !== CACHE_VERSION) {\n        storage.removeItem(`${this.PREFIX}${key}`);\n        return null;\n      }\n\n      // Check TTL\n      const age = Date.now() - item.timestamp;\n      if (age > ttlMs) {\n        storage.removeItem(`${this.PREFIX}${key}`);\n        return null;\n      }\n\n      return item.data;\n    } catch (e) {\n      debug.warn('Failed to retrieve cached data:', e);\n      return null;\n    }\n  }\n\n  static remove(key: string): void {\n    const storage = getStorage('local');\n    if (!storage) return;\n    storage.removeItem(`${this.PREFIX}${key}`);\n  }\n\n  static clear(): void {\n    const storage = getStorage('local');\n    if (!storage) return;\n\n    try {\n      const keys = Object.keys(storage);\n      keys.forEach(key => {\n        if (key.startsWith(this.PREFIX)) {\n          storage.removeItem(key);\n        }\n      });\n    } catch (e) {\n      debug.warn('Failed to clear cache:', e);\n    }\n  }\n\n  static clearExpired(): void {\n    const storage = getStorage('local');\n    if (!storage) return;\n\n    try {\n      const keys = Object.keys(storage);\n      const now = Date.now();\n\n      keys.forEach(key => {\n        if (!key.startsWith(this.PREFIX)) return;\n\n        try {\n          const itemStr = storage.getItem(key);\n          if (!itemStr) return;\n\n          const item: CacheItem<unknown> = JSON.parse(itemStr);\n          // Remove items older than 7 days\n          if (now - item.timestamp > CACHE_TIMES.WEEKLY) {\n            storage.removeItem(key);\n          }\n        } catch (e) {\n          // Invalid item, remove it\n          storage.removeItem(key);\n        }\n      });\n    } catch (e) {\n      debug.warn('Failed to clear expired cache:', e);\n    }\n  }\n}\n\n/**\n * SessionStorage cache (cleared when browser tab closes)\n */\nexport class SessionCache {\n  private static readonly PREFIX = `${STORAGE_PREFIX}${CACHE_VERSION}_`;\n\n  static set<T>(key: string, data: T): void {\n    const storage = getStorage('session');\n    if (!storage) return;\n\n    try {\n      const item: CacheItem<T> = {\n        data,\n        timestamp: Date.now(),\n        version: CACHE_VERSION,\n      };\n      storage.setItem(`${this.PREFIX}${key}`, JSON.stringify(item));\n    } catch (e) {\n      debug.warn('Failed to cache data in session:', e);\n    }\n  }\n\n  static get<T>(key: string): T | null {\n    const storage = getStorage('session');\n    if (!storage) return null;\n\n    try {\n      const itemStr = storage.getItem(`${this.PREFIX}${key}`);\n      if (!itemStr) return null;\n\n      const item: CacheItem<T> = JSON.parse(itemStr);\n\n      // Check version\n      if (item.version !== CACHE_VERSION) {\n        storage.removeItem(`${this.PREFIX}${key}`);\n        return null;\n      }\n\n      return item.data;\n    } catch (e) {\n      debug.warn('Failed to retrieve cached data from session:', e);\n      return null;\n    }\n  }\n\n  static remove(key: string): void {\n    const storage = getStorage('session');\n    if (!storage) return;\n    storage.removeItem(`${this.PREFIX}${key}`);\n  }\n\n  static clear(): void {\n    const storage = getStorage('session');\n    if (!storage) return;\n\n    try {\n      const keys = Object.keys(storage);\n      keys.forEach(key => {\n        if (key.startsWith(this.PREFIX)) {\n          storage.removeItem(key);\n        }\n      });\n    } catch (e) {\n      debug.warn('Failed to clear session cache:', e);\n    }\n  }\n}\n\n// ==================== MEMORY CACHE ====================\n\ninterface MemoryCacheItem<T> {\n  data: T;\n  timestamp: number;\n}\n\n/**\n * In-memory cache for ultra-fast access (cleared on page refresh)\n */\nexport class MemoryCache {\n  private static cache = new Map<string, MemoryCacheItem<any>>();\n  private static readonly MAX_SIZE = 100; // Prevent memory leaks\n\n  static set<T>(key: string, data: T, ttlMs: number = CACHE_TIMES.MEDIUM): void {\n    // If cache is too large, remove oldest items\n    if (this.cache.size >= this.MAX_SIZE) {\n      const oldestKey = this.cache.keys().next().value as string | undefined;\n      if (oldestKey) {\n        this.cache.delete(oldestKey);\n      }\n    }\n\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now(),\n    });\n  }\n\n  static get<T>(key: string, ttlMs: number = CACHE_TIMES.MEDIUM): T | null {\n    const item = this.cache.get(key);\n    if (!item) return null;\n\n    const age = Date.now() - item.timestamp;\n    if (age > ttlMs) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return item.data;\n  }\n\n  static remove(key: string): void {\n    this.cache.delete(key);\n  }\n\n  static clear(): void {\n    this.cache.clear();\n  }\n\n  static clearExpired(ttlMs: number = CACHE_TIMES.MEDIUM): void {\n    const now = Date.now();\n    for (const [key, item] of this.cache.entries()) {\n      if (now - item.timestamp > ttlMs) {\n        this.cache.delete(key);\n      }\n    }\n  }\n}\n\n// ==================== QUERY DEDUPLICATION ====================\n\ninterface PendingQuery<T> {\n  promise: Promise<T>;\n  timestamp: number;\n}\n\n/**\n * Prevents duplicate concurrent requests for the same data\n */\nexport class QueryDeduplicator {\n  private static pending = new Map<string, PendingQuery<any>>();\n\n  static async dedupe<T>(\n    key: string,\n    queryFn: () => Promise<T>,\n    ttlMs: number = 1000\n  ): Promise<T> {\n    // Check if there's a pending request for this key\n    const existing = this.pending.get(key);\n    if (existing) {\n      const age = Date.now() - existing.timestamp;\n      if (age < ttlMs) {\n        // Return the existing promise\n        return existing.promise;\n      }\n    }\n\n    // Create new request\n    const promise = queryFn()\n      .finally(() => {\n        // Clean up after request completes\n        this.pending.delete(key);\n      });\n\n    this.pending.set(key, {\n      promise,\n      timestamp: Date.now(),\n    });\n\n    return promise;\n  }\n\n  static clear(): void {\n    this.pending.clear();\n  }\n}\n\n// ==================== CACHE HELPERS ====================\n\n/**\n * Multi-layer cache wrapper for Firestore queries\n *\n * Checks caches in order:\n * 1. Memory cache (fastest)\n * 2. SessionStorage (fast, tab-scoped)\n * 3. LocalStorage (persistent)\n * 4. Firestore query (slowest)\n */\nexport async function cachedQuery<T>(\n  key: string,\n  queryFn: () => Promise<T>,\n  options: {\n    memoryTtl?: number;\n    sessionCache?: boolean;\n    localTtl?: number;\n    dedupe?: boolean;\n  } = {}\n): Promise<T> {\n  const {\n    memoryTtl = CACHE_TIMES.SHORT, // 1 minute in memory\n    sessionCache = false,\n    localTtl = 0, // 0 = no localStorage caching\n    dedupe = true,\n  } = options;\n\n  // Check memory cache first\n  const memoryData = MemoryCache.get<T>(key, memoryTtl);\n  if (memoryData !== null) {\n    return memoryData;\n  }\n\n  // Check session cache\n  if (sessionCache) {\n    const sessionData = SessionCache.get<T>(key);\n    if (sessionData !== null) {\n      // Store in memory for even faster next access\n      MemoryCache.set(key, sessionData, memoryTtl);\n      return sessionData;\n    }\n  }\n\n  // Check local cache\n  if (localTtl > 0) {\n    const localData = LocalCache.get<T>(key, localTtl);\n    if (localData !== null) {\n      // Store in higher-level caches\n      MemoryCache.set(key, localData, memoryTtl);\n      if (sessionCache) {\n        SessionCache.set(key, localData);\n      }\n      return localData;\n    }\n  }\n\n  // Execute query (with optional deduplication)\n  const executeQuery = async (): Promise<T> => {\n    const data = await queryFn();\n\n    // Store in all caches\n    MemoryCache.set(key, data, memoryTtl);\n    if (sessionCache) {\n      SessionCache.set(key, data);\n    }\n    if (localTtl > 0) {\n      LocalCache.set(key, data, localTtl);\n    }\n\n    return data;\n  };\n\n  if (dedupe) {\n    return QueryDeduplicator.dedupe(key, executeQuery);\n  } else {\n    return executeQuery();\n  }\n}\n\n/**\n * Invalidate cached data across all layers\n */\nexport function invalidateCache(key: string): void {\n  MemoryCache.remove(key);\n  SessionCache.remove(key);\n  LocalCache.remove(key);\n}\n\n/**\n * Invalidate all caches with a specific prefix\n */\nexport function invalidateCachePrefix(prefix: string): void {\n  // Memory cache\n  MemoryCache.clear(); // Simple clear for now\n\n  // Session and local storage would need iteration\n  // This is a simplified version\n}\n\n/**\n * Clear all caches (useful on logout)\n */\nexport function clearAllCaches(): void {\n  MemoryCache.clear();\n  SessionCache.clear();\n  LocalCache.clear();\n  QueryDeduplicator.clear();\n}\n\n// Clear expired items periodically\nif (typeof window !== 'undefined') {\n  setInterval(() => {\n    MemoryCache.clearExpired();\n    LocalCache.clearExpired();\n  }, CACHE_TIMES.MEDIUM); // Every 5 minutes\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/challengeScheduler.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Challenge' is defined but never used.",
        "line": 7,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'leaderboard' is assigned a value but never used.",
        "line": 53,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 22
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Challenge Scheduler Utilities\n * Functions to check for challenges that need notifications\n */\n\nimport { firebaseChallengeApi, challengeNotifications } from './api';\nimport { Challenge } from '@/types';\n\n/**\n * Check for challenges ending soon and send notifications\n * This should be called daily (e.g., via a cron job or scheduled function)\n */\nexport async function checkChallengesEndingSoon(): Promise<void> {\n  try {\n    \n    // Get all active challenges\n    const challenges = await firebaseChallengeApi.getChallenges({\n      status: 'active'\n    });\n\n    const now = new Date();\n    const oneDayFromNow = new Date(now.getTime() + 24 * 60 * 60 * 1000);\n    const twoDaysFromNow = new Date(now.getTime() + 48 * 60 * 60 * 1000);\n\n    for (const challenge of challenges) {\n      const endDate = new Date(challenge.endDate);\n      \n      // Check if challenge ends within 1-2 days\n      if (endDate > oneDayFromNow && endDate <= twoDaysFromNow) {\n        const daysRemaining = Math.ceil((endDate.getTime() - now.getTime()) / (24 * 60 * 60 * 1000));\n        \n        \n        await challengeNotifications.notifyEndingSoon(\n          challenge.id,\n          challenge.name,\n          daysRemaining\n        );\n      }\n    }\n    \n  } catch (error) {\n    console.error('Error checking challenges ending soon:', error);\n  }\n}\n\n/**\n * Check for rank changes in challenges and send notifications\n * This should be called after challenge progress updates\n */\nexport async function checkRankChanges(challengeId: string): Promise<void> {\n  try {\n    // Get current leaderboard\n    const leaderboard = await firebaseChallengeApi.getChallengeLeaderboard(challengeId);\n    \n    // For now, we'll skip rank change notifications as they require storing previous ranks\n    // This could be implemented with a separate collection to track rank history\n  } catch (error) {\n    console.error('Error checking rank changes:', error);\n  }\n}\n\n/**\n * Manual function to test notifications\n * This can be called from the browser console for testing\n */\nexport async function testChallengeNotifications(challengeId: string, userId: string): Promise<void> {\n  try {\n    \n    // Test completion notification\n    await challengeNotifications.notifyCompletion(\n      challengeId,\n      userId,\n      'Test Challenge',\n      'hours'\n    );\n    \n    // Test milestone notification\n    await challengeNotifications.notifyMilestone(\n      challengeId,\n      userId,\n      'Test Challenge',\n      25,\n      100\n    );\n    \n  } catch (error) {\n    console.error('Error sending test notifications:', error);\n  }\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/debug.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/errorHandler.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 86,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 86,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3494, 3497], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3494, 3497], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 107,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 107,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3912, 3915], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3912, 3915], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Centralized error handling utility for Firebase API operations\n * Provides standardized error responses and user-friendly messages\n */\n\nimport { FirebaseError } from 'firebase/app';\nimport { debug, isDevelopment } from './debug';\n\n/**\n * Standard error response interface\n */\nexport interface ApiError {\n  code: string;\n  message: string;\n  userMessage: string;\n  originalError?: unknown;\n}\n\n/**\n * Error severity levels for logging\n */\nexport enum ErrorSeverity {\n  INFO = 'info',\n  WARNING = 'warning',\n  ERROR = 'error',\n  CRITICAL = 'critical',\n}\n\n/**\n * Firebase error code to user-friendly message mapping\n */\nconst FIREBASE_ERROR_MESSAGES: Record<string, string> = {\n  // Auth errors\n  'auth/email-already-in-use': 'This email is already registered. Please sign in or use a different email.',\n  'auth/invalid-email': 'Please enter a valid email address.',\n  'auth/operation-not-allowed': 'This operation is not allowed. Please contact support.',\n  'auth/weak-password': 'Password is too weak. Please use at least 6 characters.',\n  'auth/user-disabled': 'This account has been disabled. Please contact support.',\n  'auth/user-not-found': 'No account found with this email. Please check your email or sign up.',\n  'auth/wrong-password': 'Incorrect password. Please try again.',\n  'auth/invalid-credential': 'Invalid email or password. Please try again.',\n  'auth/too-many-requests': 'Too many failed attempts. Please try again later.',\n  'auth/network-request-failed': 'Network error. Please check your connection and try again.',\n\n  // Firestore errors\n  'permission-denied': 'You don\\'t have permission to perform this action.',\n  'not-found': 'The requested resource was not found.',\n  'already-exists': 'This resource already exists.',\n  'resource-exhausted': 'Too many requests. Please try again later.',\n  'failed-precondition': 'Operation cannot be completed. Please refresh and try again.',\n  'aborted': 'Operation was cancelled. Please try again.',\n  'out-of-range': 'Invalid value provided.',\n  'unimplemented': 'This feature is not yet available.',\n  'internal': 'An internal error occurred. Please try again later.',\n  'unavailable': 'Service is temporarily unavailable. Please try again later.',\n  'data-loss': 'Data error occurred. Please contact support.',\n  'unauthenticated': 'Please sign in to continue.',\n  'deadline-exceeded': 'Request timed out. Please try again.',\n  'cancelled': 'Operation was cancelled.',\n\n  // Storage errors\n  'storage/unauthorized': 'You don\\'t have permission to access this file.',\n  'storage/canceled': 'Upload was cancelled.',\n  'storage/unknown': 'An error occurred while uploading. Please try again.',\n  'storage/object-not-found': 'File not found.',\n  'storage/bucket-not-found': 'Storage bucket not configured. Please contact support.',\n  'storage/quota-exceeded': 'Storage quota exceeded. Please contact support.',\n  'storage/unauthenticated': 'Please sign in to upload files.',\n  'storage/retry-limit-exceeded': 'Upload failed after multiple attempts. Please try again later.',\n  'storage/invalid-checksum': 'File validation failed. Please try uploading again.',\n};\n\n/**\n * Extract error code from various error types\n */\nfunction getErrorCode(error: unknown): string {\n  if (!error) return 'unknown';\n\n  // Firebase error\n  if (typeof error === 'object' && 'code' in error) {\n    return (error as FirebaseError).code || 'unknown';\n  }\n\n  // Generic Error\n  if (error instanceof Error && 'code' in error) {\n    return (error as any).code || 'unknown';\n  }\n\n  return 'unknown';\n}\n\n/**\n * Extract error message from various error types\n */\nfunction getErrorMessage(error: unknown): string {\n  if (!error) return 'An unknown error occurred';\n\n  if (error instanceof Error) {\n    return error.message;\n  }\n\n  if (typeof error === 'string') {\n    return error;\n  }\n\n  if (typeof error === 'object' && 'message' in error) {\n    return String((error as any).message);\n  }\n\n  return 'An unknown error occurred';\n}\n\n/**\n * Get user-friendly message for error code\n */\nfunction getUserFriendlyMessage(code: string, defaultMessage?: string): string {\n  const message = FIREBASE_ERROR_MESSAGES[code];\n  if (message) return message;\n\n  // Try to extract the error type from code (e.g., 'auth/user-not-found' -> 'user-not-found')\n  const parts = code.split('/');\n  if (parts.length > 1) {\n    const subCode = parts.slice(1).join('/');\n    const subMessage = FIREBASE_ERROR_MESSAGES[subCode];\n    if (subMessage) return subMessage;\n  }\n\n  return defaultMessage || 'An error occurred. Please try again.';\n}\n\n/**\n * Create standardized API error object\n */\nexport function createApiError(\n  error: unknown,\n  context: string,\n  defaultMessage?: string\n): ApiError {\n  const code = getErrorCode(error);\n  const message = getErrorMessage(error);\n  const userMessage = getUserFriendlyMessage(code, defaultMessage);\n\n  return {\n    code,\n    message: `${context}: ${message}`,\n    userMessage,\n    originalError: error,\n  };\n}\n\n/**\n * Log error with appropriate severity\n */\nexport function logError(\n  apiError: ApiError,\n  severity: ErrorSeverity = ErrorSeverity.ERROR,\n  additionalContext?: Record<string, unknown>\n): void {\n  // Only log errors in development or for critical errors\n  if (isDevelopment || severity === ErrorSeverity.CRITICAL) {\n    const logMethod = severity === ErrorSeverity.ERROR || severity === ErrorSeverity.CRITICAL\n      ? debug.error\n      : severity === ErrorSeverity.WARNING\n      ? debug.warn\n      : debug.log;\n\n    // Log as a single string to avoid object logging which triggers intercept-console-error\n    const errorMessage = `[API Error] ${JSON.stringify({\n      code: apiError.code,\n      message: apiError.message,\n      userMessage: apiError.userMessage,\n      severity,\n      ...additionalContext,\n    })}`;\n\n    logMethod(errorMessage);\n\n    // Log original error for debugging\n    if (apiError.originalError && severity === ErrorSeverity.CRITICAL) {\n      const originalErrorMsg = apiError.originalError instanceof Error\n        ? apiError.originalError.message\n        : String(apiError.originalError);\n      debug.error(`[Original Error] ${originalErrorMsg}`);\n    }\n  }\n}\n\n/**\n * Handle error with logging and return standardized error\n */\nexport function handleError(\n  error: unknown,\n  context: string,\n  options: {\n    defaultMessage?: string;\n    severity?: ErrorSeverity;\n    logContext?: Record<string, unknown>;\n    silent?: boolean; // Don't log to console\n  } = {}\n): ApiError {\n  const apiError = createApiError(error, context, options.defaultMessage);\n\n  if (!options.silent) {\n    logError(apiError, options.severity || ErrorSeverity.ERROR, options.logContext);\n  }\n\n  return apiError;\n}\n\n/**\n * Check if error is a permission denied error\n */\nexport function isPermissionError(error: unknown): boolean {\n  const code = getErrorCode(error);\n  return code === 'permission-denied' || code === 'auth/unauthorized';\n}\n\n/**\n * Check if error is a not found error\n */\nexport function isNotFoundError(error: unknown): boolean {\n  const code = getErrorCode(error);\n  return code === 'not-found' || code === 'storage/object-not-found';\n}\n\n/**\n * Check if error is an authentication error\n */\nexport function isAuthError(error: unknown): boolean {\n  const code = getErrorCode(error);\n  return code === 'unauthenticated' || code.startsWith('auth/');\n}\n\n/**\n * Check if error is a network error\n */\nexport function isNetworkError(error: unknown): boolean {\n  const code = getErrorCode(error);\n  const message = getErrorMessage(error).toLowerCase();\n  return (\n    code === 'unavailable' ||\n    code === 'deadline-exceeded' ||\n    code === 'auth/network-request-failed' ||\n    message.includes('network') ||\n    message.includes('connection')\n  );\n}\n\n/**\n * Wrapper for async operations with standardized error handling\n */\nexport async function withErrorHandling<T>(\n  operation: () => Promise<T>,\n  context: string,\n  options: {\n    defaultMessage?: string;\n    severity?: ErrorSeverity;\n    logContext?: Record<string, unknown>;\n    silent?: boolean;\n    onError?: (error: ApiError) => void;\n  } = {}\n): Promise<T> {\n  try {\n    return await operation();\n  } catch (error) {\n    const apiError = handleError(error, context, options);\n\n    if (options.onError) {\n      options.onError(apiError);\n    }\n\n    throw new Error(apiError.userMessage);\n  }\n}\n\n/**\n * Wrapper for operations that should return null on specific errors\n */\nexport async function withNullOnError<T>(\n  operation: () => Promise<T>,\n  context: string,\n  options: {\n    nullOnPermissionDenied?: boolean;\n    nullOnNotFound?: boolean;\n    silent?: boolean;\n  } = {}\n): Promise<T | null> {\n  try {\n    return await operation();\n  } catch (error) {\n    const shouldReturnNull =\n      (options.nullOnPermissionDenied && isPermissionError(error)) ||\n      (options.nullOnNotFound && isNotFoundError(error));\n\n    if (shouldReturnNull) {\n      return null;\n    }\n\n    const apiError = handleError(error, context);\n    throw new Error(apiError.userMessage);\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/firebase.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/firestoreCache.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/formatters.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/imageUpload.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 129,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 129,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3721, 3724], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3721, 3724], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'sizeMB' is assigned a value but never used.",
        "line": 141,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 141,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 144,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 144,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4223, 4226], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4223, 4226], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'snapshot' is assigned a value but never used.",
        "line": 166,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 166,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 179,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 179,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5324, 5327], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5324, 5327], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { storage } from './firebase';\nimport {\n  ref,\n  uploadBytes,\n  getDownloadURL,\n  deleteObject,\n} from 'firebase/storage';\nimport { auth } from './firebase';\nimport { checkRateLimit } from './rateLimit';\nimport { debug } from './debug';\nimport { TIMEOUTS } from '@/config/constants';\nimport { TIMEOUT_ERRORS } from '@/config/errorMessages';\n\nexport interface ImageUploadResult {\n  url: string;\n  path: string;\n}\n\n/**\n * Check if a file is actually HEIC/HEIF by reading its magic bytes\n */\nasync function isActuallyHeic(file: File): Promise<boolean> {\n  try {\n    // Read the first 12 bytes of the file\n    const arrayBuffer = await file.slice(0, 12).arrayBuffer();\n    const bytes = new Uint8Array(arrayBuffer);\n\n    // Check for HEIC/HEIF file signatures\n    // HEIC files start with: ftyp followed by heic, heix, hevc, hevx, heim, heis, hevm, or hevs\n    // Bytes 4-11 should contain \"ftypheic\", \"ftypheix\", \"ftyphevc\", etc.\n    const signature = String.fromCharCode(...bytes.slice(4, 12));\n\n    return (\n      signature.startsWith('ftyphei') ||\n      signature.startsWith('ftyphev') ||\n      signature.startsWith('ftypmif1')\n    ); // mif1 is also used for HEIF\n  } catch (error) {\n    debug.error('Error checking file signature:', error);\n    return false;\n  }\n}\n\n/**\n * Convert HEIC/HEIF images to JPEG\n */\nasync function convertHeicToJpeg(file: File): Promise<File> {\n  // Check if it's a HEIC/HEIF file by extension or type\n  const hasHeicExtension =\n    file.name.toLowerCase().endsWith('.heic') ||\n    file.name.toLowerCase().endsWith('.heif');\n  const hasHeicType = file.type === 'image/heic' || file.type === 'image/heif';\n\n  // Also check the actual file content (magic bytes)\n  const isActualHeic = await isActuallyHeic(file);\n\n  const isHeic = hasHeicExtension || hasHeicType || isActualHeic;\n\n  if (!isHeic) {\n    return file;\n  }\n\n  try {\n    const heic2any = (await import('heic2any')).default;\n\n    const convertedBlob = await heic2any({\n      blob: file,\n      toType: 'image/jpeg',\n      quality: 0.9,\n    });\n\n    // heic2any can return Blob or Blob[]\n    const blob: Blob | undefined = Array.isArray(convertedBlob)\n      ? convertedBlob[0]\n      : convertedBlob;\n\n    if (!blob) {\n      throw new Error('Failed to convert HEIC image: No blob data');\n    }\n\n    // Create a new File from the converted blob\n    const convertedFile = new File(\n      [blob as Blob],\n      file.name.replace(/\\.heic$/i, '.jpg').replace(/\\.heif$/i, '.jpg'),\n      { type: 'image/jpeg' }\n    );\n\n    return convertedFile;\n  } catch (error) {\n    debug.error('Failed to convert HEIC:', error);\n    throw new Error(\n      'Failed to convert HEIC image. Please use JPG or PNG format.'\n    );\n  }\n}\n\n/**\n * Create a timeout promise that rejects after a specified duration\n * @param ms - Timeout duration in milliseconds\n * @param errorMessage - Error message to throw\n */\nfunction createTimeout(ms: number, errorMessage: string): Promise<never> {\n  return new Promise((_, reject) => {\n    setTimeout(() => reject(new Error(errorMessage)), ms);\n  });\n}\n\n/**\n * Upload an image to Firebase Storage with timeout protection\n * @param file - The image file to upload\n * @param folder - The storage folder (e.g., 'session-images')\n * @returns The download URL and storage path\n */\nexport async function uploadImage(\n  file: File,\n  folder: string = 'session-images'\n): Promise<ImageUploadResult> {\n  if (!auth.currentUser) {\n    throw new Error('User must be authenticated to upload images');\n  }\n\n  // Rate limit file uploads\n  checkRateLimit(auth.currentUser.uid, 'FILE_UPLOAD');\n\n  // Convert HEIC to JPEG if needed\n  let processedFile = file;\n  try {\n    processedFile = await convertHeicToJpeg(file);\n  } catch (error: any) {\n    throw error; // Re-throw conversion errors\n  }\n\n  // Validate file type after conversion\n  if (!processedFile.type.startsWith('image/')) {\n    throw new Error('File must be an image (JPG, PNG, GIF, WebP)');\n  }\n\n  // Compress if file is larger than 5MB\n  const maxSize = 5 * 1024 * 1024; // 5MB\n  if (processedFile.size > maxSize) {\n    const sizeMB = (processedFile.size / 1024 / 1024).toFixed(1);\n    try {\n      processedFile = await compressToSize(processedFile, 5);\n    } catch (error: any) {\n      debug.error('Compression failed:', error);\n      throw new Error('Failed to compress image. Please try a smaller file.');\n    }\n  }\n\n  // Generate unique filename\n  const timestamp = Date.now();\n  const randomString = Math.random().toString(36).substring(7);\n  const extension = processedFile.name.split('.').pop();\n  const filename = `${timestamp}_${randomString}.${extension}`;\n\n  // Create storage reference\n  const storageRef = ref(\n    storage,\n    `${folder}/${auth.currentUser.uid}/${filename}`\n  );\n\n  try {\n    // Upload with timeout protection (30 seconds)\n    const uploadPromise = (async () => {\n      // Upload the processed file (not the original)\n      const snapshot = await uploadBytes(storageRef, processedFile);\n      // Get download URL\n      const url = await getDownloadURL(storageRef);\n      return { url, path: storageRef.fullPath };\n    })();\n\n    // Race between upload and timeout\n    const result = await Promise.race([\n      uploadPromise,\n      createTimeout(TIMEOUTS.IMAGE_UPLOAD, TIMEOUT_ERRORS.IMAGE_UPLOAD),\n    ]);\n\n    return result;\n  } catch (error: any) {\n    debug.error('Error uploading image:', error);\n\n    // Check if this is a timeout error\n    if (error.message === TIMEOUT_ERRORS.IMAGE_UPLOAD) {\n      throw error; // Re-throw timeout errors with user-friendly message\n    }\n\n    if (error.code === 'storage/unauthorized') {\n      throw new Error('Permission denied. Please make sure you are logged in.');\n    }\n    throw new Error(error.message || 'Failed to upload image');\n  }\n}\n\n/**\n * Upload multiple images (max 3)\n * @param files - Array of image files\n * @param folder - The storage folder\n * @returns Array of download URLs and storage paths\n */\nexport async function uploadImages(\n  files: File[],\n  folder: string = 'session-images'\n): Promise<ImageUploadResult[]> {\n  if (files.length > 3) {\n    throw new Error('Maximum 3 images allowed');\n  }\n\n  const uploadPromises = files.map(file => uploadImage(file, folder));\n  return Promise.all(uploadPromises);\n}\n\n/**\n * Delete an image from Firebase Storage\n * @param path - The storage path of the image\n */\nexport async function deleteImage(path: string): Promise<void> {\n  if (!auth.currentUser) {\n    throw new Error('User must be authenticated to delete images');\n  }\n\n  try {\n    const storageRef = ref(storage, path);\n    await deleteObject(storageRef);\n  } catch (error) {\n    debug.error('Error deleting image:', error);\n    throw new Error('Failed to delete image');\n  }\n}\n\n/**\n * Delete multiple images\n * @param paths - Array of storage paths\n */\nexport async function deleteImages(paths: string[]): Promise<void> {\n  const deletePromises = paths.map(path => deleteImage(path));\n  await Promise.all(deletePromises);\n}\n\n/**\n * Compress and resize image before upload using Canvas API\n * @param file - The image file\n * @param maxWidth - Maximum width in pixels\n * @param maxHeight - Maximum height in pixels\n * @param quality - Image quality (0-1)\n * @returns Compressed image file\n */\nexport async function compressImage(\n  file: File,\n  maxWidth: number = 1920,\n  maxHeight: number = 1920,\n  quality: number = 0.8\n): Promise<File> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.onload = e => {\n      const img = new Image();\n\n      img.onload = () => {\n        try {\n          // Calculate new dimensions maintaining aspect ratio\n          let width = img.width;\n          let height = img.height;\n\n          if (width > maxWidth || height > maxHeight) {\n            const aspectRatio = width / height;\n\n            if (width > height) {\n              width = maxWidth;\n              height = width / aspectRatio;\n            } else {\n              height = maxHeight;\n              width = height * aspectRatio;\n            }\n          }\n\n          // Create canvas and draw resized image\n          const canvas = document.createElement('canvas');\n          canvas.width = width;\n          canvas.height = height;\n\n          const ctx = canvas.getContext('2d');\n          if (!ctx) {\n            throw new Error('Failed to get canvas context');\n          }\n\n          // Use better image smoothing\n          ctx.imageSmoothingEnabled = true;\n          ctx.imageSmoothingQuality = 'high';\n          ctx.drawImage(img, 0, 0, width, height);\n\n          // Convert to blob\n          canvas.toBlob(\n            blob => {\n              if (!blob) {\n                reject(new Error('Failed to compress image'));\n                return;\n              }\n\n              // Create new file from blob\n              const compressedFile = new File(\n                [blob],\n                file.name.replace(/\\.[^.]+$/, '.jpg'),\n                { type: 'image/jpeg' }\n              );\n\n              resolve(compressedFile);\n            },\n            'image/jpeg',\n            quality\n          );\n        } catch (error) {\n          reject(error);\n        }\n      };\n\n      img.onerror = () => {\n        reject(new Error('Failed to load image'));\n      };\n\n      img.src = e.target?.result as string;\n    };\n\n    reader.onerror = () => {\n      reject(new Error('Failed to read file'));\n    };\n\n    reader.readAsDataURL(file);\n  });\n}\n\n/**\n * Progressively compress an image until it's under the target size\n * @param file - The image file\n * @param maxSizeMB - Maximum size in megabytes\n * @returns Compressed image file\n */\nasync function compressToSize(\n  file: File,\n  maxSizeMB: number = 5\n): Promise<File> {\n  const maxSizeBytes = maxSizeMB * 1024 * 1024;\n\n  // If file is already under the limit, return it\n  if (file.size <= maxSizeBytes) {\n    return file;\n  }\n\n  // Start with aggressive compression settings\n  let compressedFile = file;\n\n  // Try progressively more aggressive compression\n  const attempts = [\n    { quality: 0.8, maxDimension: 1920 },\n    { quality: 0.7, maxDimension: 1600 },\n    { quality: 0.6, maxDimension: 1400 },\n    { quality: 0.5, maxDimension: 1200 },\n  ];\n\n  for (const attempt of attempts) {\n    compressedFile = await compressImage(\n      file,\n      attempt.maxDimension,\n      attempt.maxDimension,\n      attempt.quality\n    );\n\n    if (compressedFile.size <= maxSizeBytes) {\n      return compressedFile;\n    }\n  }\n\n  // If still too large after all attempts, return the smallest version\n  debug.warn(\n    `Could not compress to under ${maxSizeMB}MB, using smallest version (${(compressedFile.size / 1024 / 1024).toFixed(2)}MB)`\n  );\n  return compressedFile;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/onboarding/sampleProjects.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/projectStats.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/queryClient.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 39,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 39,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1337, 1340], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1337, 1340], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 52,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 52,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1804, 1807], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1804, 1807], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 58,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 58,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2063, 2066], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2063, 2066], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 64,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 64,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2423, 2426], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2423, 2426], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { QueryClient } from '@tanstack/react-query';\n\n// Create a query client with optimized cache settings\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      // Cache data for 5 minutes by default\n      staleTime: 5 * 60 * 1000,\n      // Keep unused data in cache for 10 minutes\n      gcTime: 10 * 60 * 1000,\n      // Retry failed requests 1 time\n      retry: 1,\n      // Refetch on window focus for fresh data\n      refetchOnWindowFocus: true,\n      // Don't refetch on mount if data is fresh\n      refetchOnMount: false,\n      // Don't refetch on reconnect if data is fresh\n      refetchOnReconnect: false,\n    },\n    mutations: {\n      // Retry failed mutations once\n      retry: 1,\n    },\n  },\n});\n\n// Cache keys for different data types\nexport const CACHE_KEYS = {\n  // User data\n  USER_STATS: (userId: string) => ['user', 'stats', userId],\n  USER_PROFILE: (userId: string) => ['user', 'profile', userId],\n  USER_SESSIONS: (userId: string, limit?: number) => ['user', 'sessions', userId, limit],\n  USER_FOLLOWERS: (userId: string) => ['user', 'followers', userId],\n  USER_FOLLOWING: (userId: string) => ['user', 'following', userId],\n  \n  // Session data\n  SESSION: (sessionId: string) => ['session', sessionId],\n  SESSIONS: (userId: string) => ['sessions', userId],\n  SESSIONS_FEED: (filters?: any) => ['sessions', 'feed', filters],\n  ACTIVE_SESSION: (userId: string) => ['active-session', userId],\n  \n  // Project data\n  PROJECTS: (userId: string) => ['projects', userId],\n  PROJECT: (projectId: string) => ['project', projectId],\n  ACTIVITY_STATS: (activityId: string) => ['activity', 'stats', activityId],\n  \n  // Task data\n  TASKS: (userId: string) => ['tasks', userId],\n  TASK: (taskId: string) => ['task', taskId],\n  \n  // Group data\n  GROUPS: (filters?: any) => ['groups', filters],\n  GROUP: (groupId: string) => ['group', groupId],\n  GROUP_MEMBERS: (groupId: string) => ['group', 'members', groupId],\n  USER_GROUPS: (userId: string) => ['user', 'groups', userId],\n  \n  // Challenge data\n  CHALLENGES: (filters?: any) => ['challenges', filters],\n  CHALLENGE: (challengeId: string) => ['challenge', challengeId],\n  USER_CHALLENGES: (userId: string) => ['user', 'challenges', userId],\n  CHALLENGE_PROGRESS: (challengeId: string, userId: string) => ['challenge', 'progress', challengeId, userId],\n  \n  // Feed data\n  FEED_SESSIONS: (limit?: number, cursor?: string, filters?: any) => \n    ['feed', 'sessions', limit, cursor, filters],\n  \n  // Comments\n  COMMENTS: (sessionId: string) => ['comments', sessionId],\n  \n  // Suggested content\n  SUGGESTED_USERS: () => ['suggested', 'users'],\n  SUGGESTED_GROUPS: () => ['suggested', 'groups'],\n  \n  // Streak data\n  STREAK: (userId: string) => ['streak', userId],\n  \n  // Analytics data (longer cache time)\n  ANALYTICS_CHART: (userId: string, period: string) => ['analytics', 'chart', userId, period],\n  ANALYTICS_CATEGORIES: (userId: string, period: string) => ['analytics', 'categories', userId, period],\n\n  // Notifications\n  NOTIFICATIONS: (userId: string) => ['notifications', userId],\n};\n\n// Cache time configurations for different data types\nexport const CACHE_TIMES = {\n  // Very short cache (30 seconds) - for real-time data\n  REAL_TIME: 30 * 1000,\n  \n  // Short cache (1 minute) - for frequently changing data\n  SHORT: 1 * 60 * 1000,\n  \n  // Medium cache (5 minutes) - default for most data\n  MEDIUM: 5 * 60 * 1000,\n  \n  // Long cache (15 minutes) - for relatively static data\n  LONG: 15 * 60 * 1000,\n  \n  // Very long cache (1 hour) - for analytics and statistics\n  VERY_LONG: 60 * 60 * 1000,\n  \n  // Infinite cache - for data that rarely changes\n  INFINITE: Infinity,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/rateLimit.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/react-query/auth.queries.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used.",
        "line": 48,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 48,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 131,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 131,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3808, 3811], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3808, 3811], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * React Query Auth Hooks\n *\n * This module provides React Query hooks for authentication state management.\n * This is the ONLY place where React Query is used for authentication functionality.\n *\n * CRITICAL PATTERNS:\n * - Firebase onAuthStateChanged listener updates React Query cache\n * - Auth state cached with infinite staleTime (managed by Firebase listener)\n * - All mutations (login, signup, logout) update cache optimistically\n * - Handles OAuth redirect flows and session persistence\n */\n\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useRouter } from 'next/navigation';\nimport { firebaseAuthApi } from '@/lib/api/auth';\nimport type {\n  AuthUser,\n  LoginCredentials,\n  SignupCredentials,\n} from '@/types';\n\n/**\n * Cache Keys for Auth\n * Hierarchical structure for efficient cache invalidation\n */\nexport const AUTH_KEYS = {\n  all: () => ['auth'] as const,\n  session: () => [...AUTH_KEYS.all(), 'session'] as const,\n  user: (userId: string) => [...AUTH_KEYS.all(), 'user', userId] as const,\n} as const;\n\n/**\n * Hook to get current auth state from React Query cache\n *\n * This hook reads from the cache that's updated by Firebase onAuthStateChanged.\n * It does NOT make a direct Firebase call on every render.\n *\n * The cache is updated by AuthInitializer component's Firebase listener.\n */\nexport function useAuth() {\n  return useQuery({\n    queryKey: AUTH_KEYS.session(),\n    queryFn: async () => {\n      // This is only called on initial mount or when cache is invalidated\n      try {\n        return await firebaseAuthApi.getCurrentUser();\n      } catch (error) {\n        // User is not authenticated\n        return null;\n      }\n    },\n    staleTime: Infinity, // Never auto-refetch - managed by Firebase listener\n    retry: false, // Don't retry auth checks\n    refetchOnWindowFocus: false, // Firebase listener handles this\n    refetchOnMount: false, // Firebase listener handles this\n    refetchOnReconnect: false, // Firebase listener handles this\n  });\n}\n\n/**\n * Login mutation\n * Logs in with email/password and updates auth cache\n */\nexport function useLogin() {\n  const queryClient = useQueryClient();\n  const router = useRouter();\n\n  return useMutation({\n    mutationFn: async (credentials: LoginCredentials) => {\n      return await firebaseAuthApi.login(credentials);\n    },\n    onSuccess: (data) => {\n      // Update auth cache with logged-in user\n      queryClient.setQueryData(AUTH_KEYS.session(), data.user);\n\n      // Navigate to home\n      router.push('/');\n    },\n    onError: (error) => {\n      // Error is already formatted by firebaseAuthApi\n      console.error('[useLogin] Login failed:', error);\n    },\n  });\n}\n\n/**\n * Signup mutation\n * Creates new account and updates auth cache\n */\nexport function useSignup() {\n  const queryClient = useQueryClient();\n  const router = useRouter();\n\n  return useMutation({\n    mutationFn: async (credentials: SignupCredentials) => {\n      return await firebaseAuthApi.signup(credentials);\n    },\n    onSuccess: (data) => {\n      // Update auth cache with new user\n      queryClient.setQueryData(AUTH_KEYS.session(), data.user);\n\n      // Navigate to home\n      router.push('/');\n    },\n    onError: (error) => {\n      console.error('[useSignup] Signup failed:', error);\n    },\n  });\n}\n\n/**\n * Google Sign-In mutation\n * Handles Google OAuth popup flow\n */\nexport function useGoogleSignIn() {\n  const queryClient = useQueryClient();\n  const router = useRouter();\n\n  return useMutation({\n    mutationFn: async () => {\n      return await firebaseAuthApi.signInWithGoogle();\n    },\n    onSuccess: (data) => {\n      // Update auth cache with Google user\n      queryClient.setQueryData(AUTH_KEYS.session(), data.user);\n\n      // Navigate to home\n      router.push('/');\n    },\n    onError: (error: any) => {\n      // Special case: redirect in progress (mobile OAuth)\n      if (error?.message === 'REDIRECT_IN_PROGRESS') {\n        // Don't show error - page will redirect\n        return;\n      }\n      console.error('[useGoogleSignIn] Google sign-in failed:', error);\n    },\n  });\n}\n\n/**\n * Logout mutation\n * Signs out and clears all user-specific caches\n */\nexport function useLogout() {\n  const queryClient = useQueryClient();\n  const router = useRouter();\n\n  return useMutation({\n    mutationFn: async () => {\n      await firebaseAuthApi.logout();\n    },\n    onMutate: async () => {\n      // Optimistically clear auth state\n      queryClient.setQueryData(AUTH_KEYS.session(), null);\n    },\n    onSuccess: () => {\n      // Clear ALL caches (user-specific data should not persist)\n      queryClient.clear();\n\n      // Ensure auth cache is null\n      queryClient.setQueryData(AUTH_KEYS.session(), null);\n\n      // Navigate to landing page\n      router.push('/');\n    },\n    onError: (error) => {\n      console.error('[useLogout] Logout failed:', error);\n\n      // Still navigate and clear cache even on error\n      queryClient.clear();\n      queryClient.setQueryData(AUTH_KEYS.session(), null);\n      router.push('/');\n    },\n  });\n}\n\n/**\n * Update profile mutation\n * Updates user profile and refreshes auth cache\n */\nexport function useUpdateProfile() {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (updates: Partial<AuthUser>) => {\n      // This would call firebaseUserApi.updateProfile\n      // For now, just return the updated user\n      const currentUser = queryClient.getQueryData<AuthUser>(AUTH_KEYS.session());\n      if (!currentUser) {\n        throw new Error('Not authenticated');\n      }\n      return { ...currentUser, ...updates };\n    },\n    onSuccess: (updatedUser) => {\n      // Update auth cache\n      queryClient.setQueryData(AUTH_KEYS.session(), updatedUser);\n    },\n  });\n}\n\n/**\n * Delete account mutation\n * Deletes user account and clears all caches\n */\nexport function useDeleteAccount() {\n  const queryClient = useQueryClient();\n  const router = useRouter();\n\n  return useMutation({\n    mutationFn: async () => {\n      // This would call firebaseUserApi.deleteAccount\n      // For now, just logout\n      await firebaseAuthApi.logout();\n    },\n    onSuccess: () => {\n      // Clear all caches\n      queryClient.clear();\n      queryClient.setQueryData(AUTH_KEYS.session(), null);\n\n      // Navigate to landing\n      router.push('/');\n    },\n  });\n}\n\n/**\n * Check username availability\n * Used during signup to validate username\n */\nexport function useCheckUsernameAvailability() {\n  return useMutation({\n    mutationFn: async (username: string) => {\n      return await firebaseAuthApi.checkUsernameAvailability(username);\n    },\n  });\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/react-query/helpers.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 30,
        "column": 74,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 30,
        "endColumn": 77,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [931, 934], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [931, 934], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 30,
        "column": 84,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 30,
        "endColumn": 87,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [941, 944], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [941, 944], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 38,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 38,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1188, 1191], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1188, 1191], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 45,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 45,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1359, 1362], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1359, 1362], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 157,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 157,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4223, 4226], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4223, 4226], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 164,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 164,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4429, 4432], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4429, 4432], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 164,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 164,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4442, 4445], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4442, 4445], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * React Query Helper Utilities\n *\n * Reusable utilities for implementing the standardized caching pattern.\n */\n\nimport { QueryClient } from '@tanstack/react-query';\nimport type { CacheKeyFactory } from './types';\n\n/**\n * Create a standard cache key factory for a feature\n *\n * This helper enforces the hierarchical cache key pattern.\n *\n * @example\n * export const GROUPS_KEYS = createCacheKeyFactory('groups', {\n *   lists: () => [],\n *   list: (filters?: string) => [{ filters }],\n *   details: () => [],\n *   detail: (id: string) => [id],\n * });\n *\n * // Results in:\n * // GROUPS_KEYS.all() => ['groups']\n * // GROUPS_KEYS.lists() => ['groups', 'list']\n * // GROUPS_KEYS.list('active') => ['groups', 'list', { filters: 'active' }]\n * // GROUPS_KEYS.details() => ['groups', 'detail']\n * // GROUPS_KEYS.detail('123') => ['groups', 'detail', '123']\n */\nexport function createCacheKeyFactory<T extends Record<string, (...args: any[]) => any[]>>(\n  featureName: string,\n  keys: T\n): CacheKeyFactory & T & { all: () => readonly [string] } {\n  const all = () => [featureName] as const;\n\n  const factory = Object.entries(keys).reduce(\n    (acc, [key, fn]) => {\n      acc[key] = (...args: any[]) => {\n        const base = all();\n        const suffix = fn(...args);\n        return [...base, ...suffix] as const;\n      };\n      return acc;\n    },\n    { all } as any\n  );\n\n  return factory;\n}\n\n/**\n * Create an invalidation helper for a feature\n *\n * Returns a function that invalidates all queries for a feature.\n *\n * @example\n * export function useInvalidateGroups() {\n *   const queryClient = useQueryClient();\n *   return createInvalidator(queryClient, GROUPS_KEYS.all());\n * }\n *\n * // Usage:\n * const invalidate = useInvalidateGroups();\n * invalidate(); // Invalidates all group queries\n */\nexport function createInvalidator(queryClient: QueryClient, queryKey: readonly unknown[]) {\n  return () => {\n    queryClient.invalidateQueries({ queryKey });\n  };\n}\n\n/**\n * Create a prefetch helper for a feature\n *\n * Returns a function that prefetches data for better UX.\n *\n * @example\n * export function usePrefetchGroup() {\n *   const queryClient = useQueryClient();\n *\n *   return (groupId: string) => {\n *     prefetchQuery(\n *       queryClient,\n *       GROUPS_KEYS.detail(groupId),\n *       () => groupService.getGroupDetails(groupId),\n *       { staleTime: 15 * 60 * 1000 }\n *     );\n *   };\n * }\n *\n * // Usage in component:\n * const prefetchGroup = usePrefetchGroup();\n *\n * <Link\n *   href={`/groups/${group.id}`}\n *   onMouseEnter={() => prefetchGroup(group.id)}\n * >\n */\nexport function prefetchQuery<TData>(\n  queryClient: QueryClient,\n  queryKey: readonly unknown[],\n  queryFn: () => Promise<TData>,\n  options?: { staleTime?: number }\n) {\n  return queryClient.prefetchQuery({\n    queryKey,\n    queryFn,\n    staleTime: options?.staleTime,\n  });\n}\n\n/**\n * Create an optimistic update helper\n *\n * Simplifies the boilerplate for optimistic updates with automatic rollback.\n *\n * @example\n * export function useJoinGroup() {\n *   const queryClient = useQueryClient();\n *\n *   return useMutation({\n *     mutationFn: ({ groupId, userId }) => groupService.joinGroup(groupId, userId),\n *     ...createOptimisticUpdate(\n *       queryClient,\n *       ({ groupId }) => GROUPS_KEYS.detail(groupId),\n *       (old: Group, { userId }) => ({\n *         ...old,\n *         memberIds: [...old.memberIds, userId],\n *       })\n *     ),\n *   });\n * }\n */\nexport function createOptimisticUpdate<TData, TVariables>(\n  queryClient: QueryClient,\n  getQueryKey: (variables: TVariables) => readonly unknown[],\n  updater: (oldData: TData, variables: TVariables) => TData\n) {\n  return {\n    onMutate: async (variables: TVariables) => {\n      const queryKey = getQueryKey(variables);\n\n      // Cancel outgoing queries\n      await queryClient.cancelQueries({ queryKey });\n\n      // Snapshot previous value\n      const previousData = queryClient.getQueryData<TData>(queryKey);\n\n      // Optimistically update\n      if (previousData) {\n        queryClient.setQueryData<TData>(queryKey, updater(previousData, variables));\n      }\n\n      return { previousData, queryKey };\n    },\n\n    onError: (_error: Error, _variables: TVariables, context: any) => {\n      // Rollback on error\n      if (context?.previousData && context?.queryKey) {\n        queryClient.setQueryData(context.queryKey, context.previousData);\n      }\n    },\n\n    onSettled: (_data: any, _error: any, variables: TVariables) => {\n      // Invalidate to refetch\n      const queryKey = getQueryKey(variables);\n      queryClient.invalidateQueries({ queryKey });\n    },\n  };\n}\n\n/**\n * Batch invalidate multiple cache keys\n *\n * Useful when a mutation affects multiple features.\n *\n * @example\n * onSuccess: (_, variables) => {\n *   batchInvalidate(queryClient, [\n *     GROUPS_KEYS.detail(variables.groupId),\n *     GROUPS_KEYS.userGroups(variables.userId),\n *     FEED_KEYS.all(),\n *   ]);\n * }\n */\nexport function batchInvalidate(queryClient: QueryClient, queryKeys: readonly unknown[][]) {\n  queryKeys.forEach((queryKey) => {\n    queryClient.invalidateQueries({ queryKey });\n  });\n}\n\n/**\n * Check if a query is currently cached and fresh\n *\n * Useful for conditional logic based on cache state.\n *\n * @example\n * const hasCachedGroup = isCached(queryClient, GROUPS_KEYS.detail(groupId));\n * if (!hasCachedGroup) {\n *   // Prefetch or show loading state\n * }\n */\nexport function isCached(queryClient: QueryClient, queryKey: readonly unknown[]): boolean {\n  const state = queryClient.getQueryState(queryKey);\n  return !!state && state.status === 'success' && !state.isInvalidated;\n}\n\n/**\n * Get cached data without triggering a fetch\n *\n * Useful for reading cached data in event handlers or effects.\n *\n * @example\n * const handleClick = () => {\n *   const cachedGroup = getCachedData(queryClient, GROUPS_KEYS.detail(groupId));\n *   if (cachedGroup) {\n *     // Use cached data\n *   }\n * }\n */\nexport function getCachedData<TData>(\n  queryClient: QueryClient,\n  queryKey: readonly unknown[]\n): TData | undefined {\n  return queryClient.getQueryData<TData>(queryKey);\n}\n\n/**\n * Set cached data manually\n *\n * Useful for updating cache from external sources (like WebSocket updates).\n *\n * @example\n * // In a WebSocket listener:\n * socket.on('group-updated', (group) => {\n *   setCachedData(queryClient, GROUPS_KEYS.detail(group.id), group);\n * });\n */\nexport function setCachedData<TData>(\n  queryClient: QueryClient,\n  queryKey: readonly unknown[],\n  data: TData | ((old: TData | undefined) => TData)\n) {\n  queryClient.setQueryData<TData>(queryKey, data);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/react-query/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/react-query/types.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 66,
        "column": 56,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 66,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1891, 1894], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1891, 1894], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 96,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 96,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2735, 2738], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2735, 2738], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 105,
        "column": 56,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 105,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3006, 3009], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3006, 3009], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Standardized React Query Types\n *\n * These types ensure consistency across all feature hooks.\n * Use these instead of importing directly from @tanstack/react-query in feature hooks.\n */\n\nimport type {\n  UseQueryOptions as TanStackUseQueryOptions,\n  UseMutationOptions as TanStackUseMutationOptions,\n  QueryKey,\n} from '@tanstack/react-query';\n\n/**\n * Standard query options for feature hooks\n *\n * @example\n * export function useGroupDetails(\n *   groupId: string,\n *   options?: QueryOptions<Group | null>\n * ) {\n *   return useQuery({\n *     queryKey: GROUPS_KEYS.detail(groupId),\n *     queryFn: () => groupService.getGroupDetails(groupId),\n *     ...options,\n *   });\n * }\n */\nexport type QueryOptions<\n  TData = unknown,\n  TError = Error,\n  TQueryKey extends QueryKey = QueryKey\n> = Partial<TanStackUseQueryOptions<TData, TError, TData, TQueryKey>>;\n\n/**\n * Standard mutation options for feature hooks\n *\n * @example\n * export function useJoinGroup(\n *   options?: MutationOptions<void, { groupId: string; userId: string }>\n * ) {\n *   return useMutation({\n *     mutationFn: ({ groupId, userId }) => groupService.joinGroup(groupId, userId),\n *     ...options,\n *   });\n * }\n */\nexport type MutationOptions<TData = unknown, TVariables = void, TError = Error> = Partial<\n  TanStackUseMutationOptions<TData, TError, TVariables>\n>;\n\n/**\n * Cache key factory pattern\n *\n * Use this to create hierarchical cache keys for efficient invalidation.\n *\n * @example\n * export const GROUPS_KEYS: CacheKeyFactory = {\n *   all: () => ['groups'] as const,\n *   lists: () => [...GROUPS_KEYS.all(), 'list'] as const,\n *   list: (filters?: string) => [...GROUPS_KEYS.lists(), { filters }] as const,\n *   details: () => [...GROUPS_KEYS.all(), 'detail'] as const,\n *   detail: (id: string) => [...GROUPS_KEYS.details(), id] as const,\n * };\n */\nexport type CacheKeyFactory = Record<string, (...args: any[]) => readonly unknown[]>;\n\n/**\n * Standard cache times for different data types\n *\n * Use these constants for consistent caching across features.\n */\nexport const STANDARD_CACHE_TIMES = {\n  /** 30 seconds - Real-time data that changes frequently */\n  REAL_TIME: 30 * 1000,\n\n  /** 1 minute - Frequently changing data (feed, search results) */\n  SHORT: 1 * 60 * 1000,\n\n  /** 5 minutes - Moderately changing data (sessions, comments) */\n  MEDIUM: 5 * 60 * 1000,\n\n  /** 15 minutes - Relatively static data (user profiles, groups) */\n  LONG: 15 * 60 * 1000,\n\n  /** 1 hour - Rarely changing data (stats, analytics) */\n  VERY_LONG: 60 * 60 * 1000,\n\n  /** Infinite - Data that never changes */\n  INFINITE: Infinity,\n} as const;\n\n/**\n * Helper type for service methods that feature hooks wrap\n */\nexport type ServiceMethod<TReturn, TParams extends any[] = []> = (...args: TParams) => Promise<TReturn>;\n\n/**\n * Extract parameters from a service method\n *\n * @example\n * type GroupServiceParams = ServiceParams<typeof groupService.getGroupDetails>;\n * // string\n */\nexport type ServiceParams<T> = T extends ServiceMethod<any, infer P> ? P : never;\n\n/**\n * Extract return type from a service method\n *\n * @example\n * type GroupReturn = ServiceReturn<typeof groupService.getGroupDetails>;\n * // Group | null\n */\nexport type ServiceReturn<T> = T extends ServiceMethod<infer R> ? R : never;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/sentry-config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/useSessionCompletion.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 13,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 13,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [515, 518], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [515, 518], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/userUtils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/utils.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 48,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 48,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1515, 1518], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1515, 1518], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 66,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 66,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2033, 2036], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2033, 2036], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 84,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 84,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2551, 2554], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2551, 2554], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Parse a date and time string in the user's local timezone\n * @param dateString - Date in YYYY-MM-DD format\n * @param timeString - Time in HH:MM format (24-hour)\n * @returns Date object in local timezone\n *\n * NOTE: DO NOT use `new Date(\"YYYY-MM-DDTHH:MM\")` as it interprets the time as UTC!\n * This function correctly parses the date components to create a Date in local time.\n */\nexport function parseLocalDateTime(\n  dateString: string,\n  timeString: string\n): Date {\n  const dateParts = dateString.split('-').map(Number);\n  const timeParts = timeString.split(':').map(Number);\n\n  const year = dateParts[0] ?? 1970;\n  const month = dateParts[1] ?? 1;\n  const day = dateParts[2] ?? 1;\n  const hours = timeParts[0] ?? 0;\n  const minutes = timeParts[1] ?? 0;\n\n  // month is 0-indexed in JavaScript Date constructor\n  return new Date(year, month - 1, day, hours, minutes, 0, 0);\n}\n\n/**\n * Safely convert value to number with fallback\n * Protects against NaN and Infinity that can cause display/calculation issues\n *\n * @param value - Value to convert to number\n * @param fallback - Fallback value if conversion fails (default: 0)\n * @returns Converted number or fallback\n *\n * @example\n * safeNumber('123') // 123\n * safeNumber('abc') // 0\n * safeNumber(null, 10) // 10\n * safeNumber(Infinity, 0) // 0\n */\nexport const safeNumber = (value: any, fallback: number = 0): number => {\n  const num = Number(value);\n  return isNaN(num) || !isFinite(num) ? fallback : num;\n};\n\n/**\n * Safely parse integer with fallback\n * Protects against NaN from invalid string parsing\n *\n * @param value - Value to parse as integer\n * @param fallback - Fallback value if parsing fails (default: 0)\n * @returns Parsed integer or fallback\n *\n * @example\n * safeParseInt('123') // 123\n * safeParseInt('12.9') // 12\n * safeParseInt('abc') // 0\n */\nexport const safeParseInt = (value: any, fallback: number = 0): number => {\n  const num = parseInt(value, 10);\n  return isNaN(num) ? fallback : num;\n};\n\n/**\n * Safely parse float with fallback\n * Protects against NaN from invalid string parsing\n *\n * @param value - Value to parse as float\n * @param fallback - Fallback value if parsing fails (default: 0)\n * @returns Parsed float or fallback\n *\n * @example\n * safeParseFloat('123.45') // 123.45\n * safeParseFloat('abc') // 0\n * safeParseFloat(null, 1.5) // 1.5\n */\nexport const safeParseFloat = (value: any, fallback: number = 0): number => {\n  const num = parseFloat(value);\n  return isNaN(num) ? fallback : num;\n};\n\n/**\n * Check if an array is null, undefined, or empty\n * Consolidates duplicate empty array checks throughout the codebase\n *\n * @param arr - Array to check (can be null or undefined)\n * @returns True if array is null, undefined, or has length 0\n *\n * @example\n * isEmpty([]) // true\n * isEmpty(null) // true\n * isEmpty(undefined) // true\n * isEmpty([1, 2, 3]) // false\n */\nexport function isEmpty<T>(arr: T[] | null | undefined): boolean {\n  return !arr || arr.length === 0;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/providers/QueryProvider.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/styles/staticPages.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/types/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 463,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 463,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11124, 11127], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11124, 11127], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Core data types for Ambira\n\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  username: string;\n  bio?: string;\n  tagline?: string; // Short headline/status (60 chars max)\n  pronouns?: string; // e.g., \"she/her\", \"he/him\", \"they/them\"\n  location?: string;\n  profilePicture?: string;\n  website?: string; // Personal website or portfolio\n  socialLinks?: {\n    twitter?: string;\n    github?: string;\n    linkedin?: string;\n  };\n  createdAt: Date;\n  updatedAt: Date;\n  // New friendship counts\n  inboundFriendshipCount?: number;\n  outboundFriendshipCount?: number;\n  mutualFriendshipCount?: number;\n  // Follower counts (optional, may not be populated)\n  followersCount?: number;\n  followingCount?: number;\n}\n\n// Represents a user document inside a social graph subcollection\nexport interface SocialGraphUser {\n  id: string;\n  type: 'inbound' | 'outbound' | 'mutual';\n  user: User;\n  createdAt: Date;\n}\n\n// Activity (renamed from Project)\nexport interface Activity {\n  id: string;\n  userId: string;\n  name: string;\n  description: string;\n  icon: string;\n  color: string;\n  weeklyTarget?: number; // hours\n  totalTarget?: number; // hours\n  status: 'active' | 'completed' | 'archived';\n  isDefault?: boolean; // True for default activities\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Backwards compatibility alias\nexport type Project = Activity;\n\nexport interface ActivityStats {\n  totalHours: number;\n  weeklyHours: number;\n  sessionCount: number;\n  currentStreak: number;\n  weeklyProgressPercentage: number;\n  totalProgressPercentage: number;\n  averageSessionDuration: number;\n  lastSessionDate?: Date;\n}\n\n// Backwards compatibility alias\nexport type ProjectStats = ActivityStats;\n\n// Post types (deprecated - sessions are now posts)\nexport interface Post {\n  id: string;\n  userId: string;\n  sessionId?: string;\n  content: string;\n  visibility: 'everyone' | 'followers' | 'private';\n  supportCount: number;\n  commentCount: number;\n  isSupported?: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface PostWithDetails extends Post {\n  user: User;\n  session?: Session;\n}\n\nexport interface CreatePostData {\n  content: string;\n  sessionId?: string;\n  visibility: 'everyone' | 'followers' | 'private';\n}\n\nexport interface UpdatePostData {\n  content?: string;\n  visibility?: 'everyone' | 'followers' | 'private';\n}\n\nexport interface PostSupport {\n  id: string;\n  postId: string;\n  userId: string;\n  createdAt: Date;\n}\n\n// Default activities available to all users\nexport const DEFAULT_ACTIVITIES = [\n  {\n    id: 'work',\n    name: 'Work',\n    icon: 'flat-color-icons:briefcase',\n    color: '#007AFF',\n  },\n  {\n    id: 'study',\n    name: 'Study',\n    icon: 'flat-color-icons:reading',\n    color: '#34C759',\n  },\n  {\n    id: 'side-project',\n    name: 'Side Project',\n    icon: 'flat-color-icons:electronics',\n    color: '#FF9500',\n  },\n  {\n    id: 'reading',\n    name: 'Reading',\n    icon: 'flat-color-icons:book',\n    color: '#FF2D55',\n  },\n  {\n    id: 'writing',\n    name: 'Writing',\n    icon: 'flat-color-icons:document',\n    color: '#AF52DE',\n  },\n  {\n    id: 'creative',\n    name: 'Creative',\n    icon: 'flat-color-icons:gallery',\n    color: '#FF6482',\n  },\n  {\n    id: 'exercise',\n    name: 'Exercise',\n    icon: 'flat-color-icons:sports-mode',\n    color: '#32ADE6',\n  },\n  {\n    id: 'learning',\n    name: 'Learning',\n    icon: 'flat-color-icons:graduation-cap',\n    color: '#FFD60A',\n  },\n] as const;\n\nexport interface Session {\n  id: string;\n  userId: string;\n  activityId: string; // Changed from projectId\n  projectId?: string; // Kept for backwards compatibility\n  title: string;\n  description?: string;\n  duration: number; // seconds\n  startTime: Date;\n  tags?: string[]; // Deprecated but kept for backwards compatibility\n  visibility: 'everyone' | 'followers' | 'private';\n  showStartTime?: boolean;\n  howFelt?: number; // 1-5 rating\n  privateNotes?: string;\n  isArchived: boolean;\n  images?: string[]; // Array of image URLs (max 3)\n  allowComments?: boolean; // Whether comments are allowed (default: true)\n  // Social engagement fields (sessions are posts)\n  supportCount: number; // Computed from supportedBy array length\n  supportedBy?: string[]; // Array of user IDs who supported this session\n  commentCount: number;\n  isSupported?: boolean; // Whether current user has supported this session (computed)\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Sessions with populated related data for display\nexport interface SessionWithDetails extends Session {\n  user: User;\n  activity: Activity;\n  project?: Activity; // Backwards compatibility alias\n}\n\n// Session support (like/kudos)\nexport interface SessionSupport {\n  id: string;\n  sessionId: string;\n  userId: string;\n  createdAt: Date;\n}\n\n// Feed response for sessions\nexport interface FeedResponse {\n  sessions: SessionWithDetails[];\n  hasMore: boolean;\n  nextCursor?: string;\n}\n\nexport interface FeedFilters {\n  type?:\n    | 'following'\n    | 'trending'\n    | 'recent'\n    | 'user'\n    | 'group'\n    | 'all'\n    | 'group-members-unfollowed';\n  activityId?: string; // Changed from projectId\n  projectId?: string; // Backwards compatibility\n  userId?: string;\n  groupId?: string;\n}\n\nexport interface Group {\n  id: string;\n  name: string;\n  description: string;\n  icon?: string;\n  color?: string;\n  imageUrl?: string;\n  bannerUrl?: string;\n  location?: string;\n  category: 'work' | 'study' | 'side-project' | 'learning' | 'other';\n  type: 'just-for-fun' | 'professional' | 'competitive' | 'other';\n  privacySetting: 'public' | 'approval-required';\n  memberCount: number;\n  adminUserIds: string[];\n  memberIds: string[];\n  createdByUserId: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface GroupMembership {\n  id: string;\n  groupId: string;\n  userId: string;\n  role: 'admin' | 'member';\n  joinedAt: Date;\n  status: 'active' | 'pending' | 'left' | 'removed';\n}\n\n// GroupPost extends Session since sessions are the primary content type\nexport interface GroupPost extends Session {\n  groupId: string;\n  groupVisibility: 'group-only' | 'public';\n}\n\nexport interface CreateGroupData {\n  name: string;\n  description: string;\n  icon?: string;\n  color?: string;\n  category: 'work' | 'study' | 'side-project' | 'learning' | 'other';\n  type: 'just-for-fun' | 'professional' | 'competitive' | 'other';\n  privacySetting: 'public' | 'approval-required';\n  location?: string;\n  imageUrl?: string;\n  bannerUrl?: string;\n}\n\nexport interface UpdateGroupData {\n  name?: string;\n  description?: string;\n  icon?: string;\n  color?: string;\n  category?: 'work' | 'study' | 'side-project' | 'learning' | 'other';\n  type?: 'just-for-fun' | 'professional' | 'competitive' | 'other';\n  privacySetting?: 'public' | 'approval-required';\n  location?: string;\n  imageUrl?: string;\n  bannerUrl?: string;\n}\n\nexport interface GroupFilters {\n  category?: 'work' | 'study' | 'side-project' | 'learning' | 'other';\n  type?: 'just-for-fun' | 'professional' | 'competitive' | 'other';\n  privacySetting?: 'public' | 'approval-required';\n  location?: string;\n  search?: string;\n}\n\nexport interface GroupStats {\n  totalMembers: number;\n  totalPosts: number;\n  totalSessions: number;\n  totalHours: number;\n  weeklyHours: number;\n  monthlyHours: number;\n  activeMembers: number;\n  topProjects: Array<{\n    projectId: string;\n    projectName: string;\n    hours: number;\n    memberCount: number;\n  }>;\n}\n\nexport interface GroupLeaderboardEntry {\n  userId: string;\n  user: User;\n  totalHours: number;\n  weeklyHours: number;\n  monthlyHours: number;\n  sessionCount: number;\n  rank: number;\n}\n\nexport interface GroupLeaderboard {\n  period: 'weekly' | 'monthly' | 'yearly' | 'all-time';\n  entries: GroupLeaderboardEntry[];\n  lastUpdated: Date;\n}\n\nexport interface Challenge {\n  id: string;\n  groupId?: string;\n  name: string;\n  description: string;\n  type: 'most-activity' | 'fastest-effort' | 'longest-session' | 'group-goal';\n  goalValue?: number;\n  startDate: Date;\n  endDate: Date;\n  participantCount: number;\n  createdByUserId: string;\n  createdAt: Date;\n  updatedAt: Date;\n  // Additional fields for challenge management\n  rules?: string;\n  projectIds?: string[]; // Which projects count toward this challenge\n  isActive: boolean;\n  rewards?: string[];\n  category?: string; // Category for grouping challenges (e.g., 'fitness', 'study', 'work')\n  // User-specific fields (populated when fetching for a specific user)\n  isParticipating?: boolean; // Whether the current user is participating\n  userProgress?: number; // Current user's progress in this challenge\n}\n\nexport interface ChallengeParticipant {\n  id: string;\n  challengeId: string;\n  userId: string;\n  joinedAt: Date;\n  progress: number; // Current progress value (hours, tasks, etc.)\n  rank?: number;\n  isCompleted: boolean;\n  completedAt?: Date;\n}\n\nexport interface ChallengeProgress {\n  challengeId: string;\n  userId: string;\n  currentValue: number;\n  targetValue?: number;\n  percentage: number;\n  rank: number;\n  isCompleted: boolean;\n  lastUpdated: Date;\n}\n\nexport interface ChallengeLeaderboard {\n  challengeId: string;\n  entries: ChallengeLeaderboardEntry[];\n  lastUpdated: Date;\n}\n\nexport interface ChallengeLeaderboardEntry {\n  userId: string;\n  user: User;\n  progress: number;\n  rank: number;\n  isCompleted: boolean;\n  completedAt?: Date;\n}\n\nexport interface CreateChallengeData {\n  groupId?: string;\n  name: string;\n  description: string;\n  type: 'most-activity' | 'fastest-effort' | 'longest-session' | 'group-goal';\n  goalValue?: number;\n  startDate: Date;\n  endDate: Date;\n  rules?: string;\n  projectIds?: string[];\n  rewards?: string[];\n}\n\nexport interface UpdateChallengeData {\n  name?: string;\n  description?: string;\n  goalValue?: number;\n  startDate?: Date;\n  endDate?: Date;\n  rules?: string;\n  projectIds?: string[];\n  rewards?: string[];\n  isActive?: boolean;\n}\n\nexport interface ChallengeFilters {\n  type?: 'most-activity' | 'fastest-effort' | 'longest-session' | 'group-goal';\n  status?: 'active' | 'upcoming' | 'completed';\n  groupId?: string;\n  isParticipating?: boolean;\n}\n\nexport interface ChallengeStats {\n  totalParticipants: number;\n  completedParticipants: number;\n  averageProgress: number;\n  topPerformers: ChallengeLeaderboardEntry[];\n  timeRemaining: number; // seconds\n  daysRemaining: number;\n}\n\n// Streak tracking\nexport interface StreakData {\n  userId: string;\n  currentStreak: number;\n  longestStreak: number;\n  lastActivityDate: Date;\n  totalStreakDays: number;\n  streakHistory: StreakDay[];\n  isPublic: boolean;\n}\n\nexport interface StreakDay {\n  date: string; // YYYY-MM-DD format\n  hasActivity: boolean;\n  sessionCount: number;\n  totalMinutes: number;\n}\n\nexport interface StreakStats {\n  currentStreak: number;\n  longestStreak: number;\n  totalStreakDays: number;\n  lastActivityDate: Date | null;\n  streakAtRisk: boolean; // True if no activity today\n  nextMilestone: number; // Next streak milestone (7, 30, 100, etc.)\n}\n\n// Achievement system\nexport interface Achievement {\n  id: string;\n  userId: string;\n  type: AchievementType;\n  name: string;\n  description: string;\n  icon: string;\n  earnedAt: Date;\n  sessionId?: string;\n  metadata?: Record<string, any>; // Additional data like milestone value\n  isShared?: boolean; // Whether user shared to feed\n}\n\nexport type AchievementType =\n  | 'streak-7'\n  | 'streak-30'\n  | 'streak-100'\n  | 'streak-365'\n  | 'hours-10'\n  | 'hours-50'\n  | 'hours-100'\n  | 'hours-500'\n  | 'hours-1000'\n  | 'challenge-complete'\n  | 'challenge-winner'\n  | 'personal-record-session'\n  | 'personal-record-day'\n  | 'early-bird' // Session before 6 AM\n  | 'night-owl' // Session after 10 PM\n  | 'weekend-warrior'\n  | 'consistency-king'; // 30 days in a row\n\nexport interface AchievementDefinition {\n  type: AchievementType;\n  name: string;\n  description: string;\n  icon: string;\n  checkCondition: (userData: UserAchievementData) => boolean;\n  getValue?: (userData: UserAchievementData) => number;\n}\n\nexport interface UserAchievementData {\n  userId: string;\n  totalHours: number;\n  currentStreak: number;\n  longestStreak: number;\n  totalSessions: number;\n  longestSession: number; // in minutes\n  mostHoursInDay: number;\n  challengesCompleted: number;\n  challengesWon: number;\n  recentSession?: Session;\n}\n\nexport interface AchievementProgress {\n  type: AchievementType;\n  name: string;\n  description: string;\n  icon: string;\n  currentValue: number;\n  targetValue: number;\n  percentage: number;\n  isUnlocked: boolean;\n  unlockedAt?: Date;\n}\n\nexport interface Comment {\n  id: string;\n  sessionId: string; // Comments are attached to sessions\n  userId: string;\n  parentId?: string; // For nested replies\n  content: string;\n  likeCount: number;\n  replyCount: number;\n  isLiked?: boolean; // Whether current user has liked this comment\n  isEdited: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n  // Populated fields\n  user?: User;\n}\n\nexport interface CommentWithDetails extends Comment {\n  user: User;\n  replies?: CommentWithDetails[];\n}\n\nexport interface CreateCommentData {\n  sessionId: string;\n  content: string;\n  parentId?: string;\n}\n\nexport interface UpdateCommentData {\n  content: string;\n}\n\nexport interface CommentLike {\n  id: string;\n  commentId: string;\n  userId: string;\n  createdAt: Date;\n}\n\nexport interface CommentsResponse {\n  comments: CommentWithDetails[];\n  hasMore: boolean;\n  nextCursor?: string;\n}\n\nexport interface Notification {\n  id: string;\n  userId: string;\n  type:\n    | 'follow'\n    | 'support'\n    | 'comment'\n    | 'mention'\n    | 'reply'\n    | 'achievement'\n    | 'streak'\n    | 'group'\n    | 'challenge';\n  title: string;\n  message: string;\n  linkUrl?: string;\n  isRead: boolean;\n  createdAt: Date;\n  // Additional metadata based on type\n  actorId?: string; // User who triggered the notification\n  actorName?: string; // Name of user who triggered the notification\n  actorUsername?: string; // Username of user who triggered the notification\n  actorProfilePicture?: string; // Profile picture of user who triggered the notification\n  sessionId?: string; // Session related to the notification\n  commentId?: string;\n  groupId?: string;\n  challengeId?: string;\n}\n\nexport interface NotificationPreferences {\n  email: {\n    follows: boolean;\n    supports: boolean;\n    comments: boolean;\n    mentions: boolean;\n    replies: boolean;\n    achievements: boolean;\n    streaks: boolean;\n    groupPosts: boolean;\n    challenges: boolean;\n  };\n  inApp: {\n    follows: boolean;\n    supports: boolean;\n    comments: boolean;\n    mentions: boolean;\n    replies: boolean;\n    achievements: boolean;\n    streaks: boolean;\n    groupPosts: boolean;\n    challenges: boolean;\n  };\n}\n\nexport interface Follow {\n  id: string;\n  followerId: string;\n  followingId: string;\n  createdAt: Date;\n}\n\nexport interface UserProfile {\n  id: string;\n  username: string;\n  name: string;\n  bio?: string;\n  tagline?: string;\n  pronouns?: string;\n  location?: string;\n  profilePicture?: string;\n  website?: string;\n  socialLinks?: {\n    twitter?: string;\n    github?: string;\n    linkedin?: string;\n  };\n  followersCount: number;\n  followingCount: number;\n  totalHours: number;\n  isFollowing?: boolean;\n  isPrivate?: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface UserStats {\n  totalHours: number;\n  weeklyHours: number;\n  monthlyHours: number;\n  currentStreak: number;\n  longestStreak: number;\n  sessionsThisWeek: number;\n  sessionsThisMonth: number;\n  averageSessionDuration: number;\n  mostProductiveHour: number;\n  favoriteProject?: {\n    id: string;\n    name: string;\n    hours: number;\n  };\n}\n\nexport interface ActivityData {\n  date: string;\n  hours: number;\n  sessions: number;\n}\n\nexport interface WeeklyActivity {\n  week: string;\n  hours: number;\n  sessions: number;\n}\n\nexport interface ProjectBreakdown {\n  projectId: string;\n  projectName: string;\n  hours: number;\n  percentage: number;\n  color: string;\n}\n\nexport interface PrivacySettings {\n  profileVisibility: 'everyone' | 'followers' | 'private';\n  activityVisibility: 'everyone' | 'followers' | 'private';\n  projectVisibility: 'everyone' | 'followers' | 'private';\n  blockedUsers: string[];\n}\n\nexport interface UserSearchResult {\n  id: string;\n  username: string;\n  name: string;\n  bio?: string;\n  tagline?: string;\n  pronouns?: string;\n  profilePicture?: string;\n  followersCount: number;\n  isFollowing?: boolean;\n}\n\nexport interface SuggestedUser {\n  id: string;\n  username: string;\n  name: string;\n  bio?: string;\n  tagline?: string;\n  pronouns?: string;\n  profilePicture?: string;\n  followersCount: number;\n  reason: string; // Why this user was suggested\n  isFollowing?: boolean;\n}\n\nexport type ProfileTab = 'overview' | 'achievements' | 'following' | 'posts';\n\n// Authentication types\nexport interface AuthUser {\n  id: string;\n  email: string;\n  name: string;\n  username: string;\n  bio?: string;\n  tagline?: string;\n  pronouns?: string;\n  location?: string;\n  profilePicture?: string;\n  website?: string;\n  socialLinks?: {\n    twitter?: string;\n    github?: string;\n    linkedin?: string;\n  };\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\nexport interface SignupCredentials {\n  email: string;\n  password: string;\n  name: string;\n  username: string;\n}\n\nexport interface AuthResponse {\n  user: AuthUser;\n  token: string;\n}\n\nexport interface AuthContextType {\n  user: AuthUser | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (credentials: LoginCredentials) => Promise<void>;\n  signup: (credentials: SignupCredentials) => Promise<void>;\n  signInWithGoogle: () => Promise<void>;\n  logout: () => void;\n}\n\n// Project-related types\nexport interface CreateActivityData {\n  name: string;\n  description: string;\n  icon: string;\n  color: string;\n  weeklyTarget?: number;\n  totalTarget?: number;\n}\n\nexport interface UpdateActivityData {\n  name?: string;\n  description?: string;\n  icon?: string;\n  color?: string;\n  weeklyTarget?: number;\n  totalTarget?: number;\n  status?: 'active' | 'completed' | 'archived';\n}\n\nexport interface ActivityWithStats extends Activity {\n  stats: ActivityStats;\n}\n\nexport interface ActivitiesContextType {\n  activities: Activity[];\n  isLoading: boolean;\n  error: string | null;\n  createActivity: (data: CreateActivityData) => Promise<Activity>;\n  updateActivity: (id: string, data: UpdateActivityData) => Promise<Activity>;\n  deleteActivity: (id: string) => Promise<void>;\n  archiveActivity: (id: string) => Promise<Activity>;\n  restoreActivity: (id: string) => Promise<Activity>;\n  getActivityStats: (id: string) => Promise<ActivityStats>;\n  // Backwards compatibility methods\n  projects?: Activity[];\n  createProject?: (data: CreateActivityData) => Promise<Activity>;\n  updateProject?: (id: string, data: UpdateActivityData) => Promise<Activity>;\n  deleteProject?: (id: string) => Promise<void>;\n  archiveProject?: (id: string) => Promise<Activity>;\n  restoreProject?: (id: string) => Promise<Activity>;\n  getProjectStats?: (id: string) => Promise<ActivityStats>;\n}\n\n// Backwards compatibility aliases\nexport type CreateProjectData = CreateActivityData;\nexport type UpdateProjectData = UpdateActivityData;\nexport type ProjectWithStats = ActivityWithStats;\nexport type ProjectContextType = ActivitiesContextType;\n\n// Timer-related types\nexport interface ActiveTimer {\n  id: string;\n  userId: string;\n  activityId: string; // Changed from projectId\n  projectId?: string; // Backwards compatibility\n  startTime: Date;\n  pausedDuration: number; // seconds\n  isPaused: boolean; // Whether the timer is paused\n  lastUpdated: Date;\n}\n\nexport interface TimerState {\n  isRunning: boolean;\n  isPaused: boolean;\n  startTime: Date | null;\n  pausedDuration: number;\n  currentProject: Project | null;\n  activeTimerId: string | null;\n  isConnected: boolean;\n  lastAutoSave: Date | null;\n}\n\nexport interface TimerContextType {\n  timerState: TimerState;\n  startTimer: (projectId: string) => Promise<void>;\n  pauseTimer: () => Promise<void>;\n  resumeTimer: () => Promise<void>;\n  finishTimer: (\n    title: string,\n    description?: string,\n    tags?: string[],\n    howFelt?: number,\n    privateNotes?: string,\n    options?: {\n      visibility?: 'everyone' | 'followers' | 'private';\n      showStartTime?: boolean;\n      publishToFeeds?: boolean;\n      customDuration?: number;\n      images?: string[];\n    }\n  ) => Promise<Session>;\n  resetTimer: () => Promise<void>;\n  loadActiveTimer: () => Promise<void>;\n  getElapsedTime: () => number;\n  getFormattedTime: (seconds: number) => string;\n}\n\nexport interface CreateSessionData {\n  activityId: string; // Changed from projectId\n  projectId?: string; // Backwards compatibility\n  title: string;\n  description?: string;\n  duration: number;\n  startTime: Date;\n  tags?: string[]; // Deprecated but kept for backwards compatibility\n  visibility?: 'everyone' | 'followers' | 'private';\n  showStartTime?: boolean;\n  publishToFeeds?: boolean; // Whether to publish to home/group feeds\n  howFelt?: number;\n  privateNotes?: string;\n  images?: string[]; // Array of image URLs (max 3)\n  allowComments?: boolean; // Whether comments are allowed (default: true)\n}\n\n// Session management interfaces\nexport interface SessionFormData {\n  activityId: string; // Changed from projectId\n  projectId?: string; // Backwards compatibility\n  title: string;\n  description?: string;\n  duration: number;\n  startTime: Date;\n  tags?: string[]; // Deprecated but kept for backwards compatibility\n  visibility: 'everyone' | 'followers' | 'private';\n  showStartTime?: boolean;\n  howFelt?: number;\n  privateNotes?: string;\n  images?: string[]; // Array of image URLs (max 3)\n  allowComments?: boolean; // Whether comments are allowed (default: true)\n}\n\nexport interface SessionFilters {\n  userId?: string;\n  projectId?: string;\n  activityId?: string;\n  dateFrom?: Date;\n  dateTo?: Date;\n  tags?: string[];\n  visibility?: string;\n  search?: string;\n}\n\nexport interface SessionSort {\n  field: 'startTime' | 'duration' | 'title';\n  direction: 'asc' | 'desc';\n}\n\nexport interface SessionListResponse {\n  sessions: Session[];\n  totalCount: number;\n  hasMore: boolean;\n}\n\nexport interface SessionFormProps {\n  initialData?: Partial<SessionFormData>;\n  onSubmit: (data: SessionFormData) => Promise<void>;\n  onCancel: () => void;\n  isLoading?: boolean;\n  mode: 'timer' | 'manual';\n}\n\nexport interface SessionHistoryProps {\n  sessions: Session[];\n  projects: Project[];\n  filters: SessionFilters;\n  sort: SessionSort;\n  onFiltersChange: (filters: SessionFilters) => void;\n  onSortChange: (sort: SessionSort) => void;\n  onSessionEdit: (session: Session) => void;\n  onSessionDelete: (sessionId: string) => void;\n  onSessionArchive: (sessionId: string) => void;\n  isLoading?: boolean;\n}\n\n// Analytics types\nexport interface AnalyticsPeriod {\n  label: string;\n  value: '7d' | '1m' | '3m' | '6m' | '1y' | 'all';\n  days: number;\n}\n\nexport interface TrendData {\n  current: number;\n  previous: number;\n  change: number;\n  changePercent: number;\n  isPositive: boolean;\n}\n\nexport interface PersonalAnalytics {\n  period: AnalyticsPeriod;\n  totalHours: TrendData;\n  totalSessions: TrendData;\n  averageSessionDuration: number;\n  currentStreak: number;\n  longestStreak: number;\n  mostProductiveDay: string; // 'Monday', 'Tuesday', etc.\n  mostProductiveHour: number; // 0-23\n  activityByDay: Array<{ day: string; hours: number; sessions: number }>;\n  activityByHour: Array<{ hour: number; sessions: number }>;\n  projectBreakdown: ProjectBreakdown[];\n}\n\nexport interface ProjectAnalytics {\n  projectId: string;\n  projectName: string;\n  period: AnalyticsPeriod;\n  totalHours: number;\n  weeklyAverage: number;\n  sessionCount: number;\n  cumulativeHours: Array<{ date: string; hours: number }>;\n  sessionFrequency: Array<{ date: string; count: number }>;\n  goalProgress?: {\n    current: number;\n    target: number;\n    percentage: number;\n    estimatedCompletion?: Date;\n  };\n}\n\nexport interface ComparativeAnalytics {\n  projects: Array<{\n    projectId: string;\n    projectName: string;\n    hours: number;\n    sessions: number;\n  }>;\n  weekOverWeek: Array<{\n    week: string;\n    hours: number;\n    change: number;\n  }>;\n  personalRecords: {\n    longestSession: { duration: number; date: Date; projectName: string };\n    mostProductiveDay: { hours: number; date: Date; sessions: number };\n    bestWeek: { hours: number; weekStart: Date; sessions: number };\n  };\n}\n\nexport interface ExportOptions {\n  type: 'sessions' | 'projects' | 'all';\n  dateFrom: Date;\n  dateTo: Date;\n  format: 'csv' | 'json';\n  includePrivate: boolean;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/types/jest-dom.d.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  }
]
