[
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/.eslintrc.react-query-rules.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/.prettierrc.mjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/coverage/lcov-report/block-navigation.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/coverage/lcov-report/prettify.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ae' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 11414,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 11416,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'af' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 11438,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 11440,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ag' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 11471,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 11473,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ae' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 2,
        "column": 14757,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 14759,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/coverage/lcov-report/sorter.js",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 36,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 23,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/e2e/fixtures/test-base.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/e2e/smoke/auth.spec.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/e2e/smoke/feed.spec.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/e2e/smoke/timer.spec.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/e2e/utils/accessibility.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/eslint.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/fix-unused-vars.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-require-imports",
        "severity": 1,
        "message": "A `require()` style import is forbidden.",
        "line": 1,
        "column": 12,
        "nodeType": "CallExpression",
        "messageId": "noRequireImports",
        "endLine": 1,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-require-imports",
        "severity": 1,
        "message": "A `require()` style import is forbidden.",
        "line": 2,
        "column": 14,
        "nodeType": "CallExpression",
        "messageId": "noRequireImports",
        "endLine": 2,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const fs = require('fs');\nconst path = require('path');\n\nconst fixes = [\n  // AnalyticsWidget\n  {\n    file: 'src/components/AnalyticsWidget.tsx',\n    replacements: [\n      {\n        search: \"import { ActivitySquare, TrendingUp } from 'lucide-react';\",\n        replace: \"import { ActivitySquare } from 'lucide-react';\",\n      },\n      {\n        search: \"import { StatsCard } from './StatsCard';\",\n        replace: '',\n      },\n    ],\n  },\n  // AuthInitializer\n  {\n    file: 'src/components/AuthInitializer.tsx',\n    replacements: [\n      {\n        search: 'import { AuthUser } from \\'@/types\\';',\n        replace: '',\n      },\n    ],\n  },\n  // BottomNavigation\n  {\n    file: 'src/components/BottomNavigation.tsx',\n    replacements: [\n      {\n        search: \"import { Home, Search, Trophy, User, Bell, BarChart3 } from 'lucide-react';\",\n        replace: \"import { Home, Search, Trophy, Bell, BarChart3 } from 'lucide-react';\",\n      },\n      {\n        search: /const isOnTimerPage = .*?;\\s*/s,\n        replace: '',\n      },\n    ],\n  },\n  // ChallengeDetail\n  {\n    file: 'src/components/ChallengeDetail.tsx',\n    replacements: [\n      {\n        search: /onDelete\\?: \\(challengeId: string\\) => void;/,\n        replace: '_onDelete?: (challengeId: string) => void;',\n      },\n    ],\n  },\n  // ChallengeLeaderboard\n  {\n    file: 'src/components/ChallengeLeaderboard.tsx',\n    replacements: [\n      {\n        search: 'ChallengeLeaderboardEntry, ',\n        replace: '',\n      },\n      {\n        search: 'User, ',\n        replace: '',\n      },\n      {\n        search: /(participants\\.map\\(\\(participant, )index(\\) => \\{)/,\n        replace: '$1_index$2',\n      },\n    ],\n  },\n  // CommentInput\n  {\n    file: 'src/components/CommentInput.tsx',\n    replacements: [\n      {\n        search: 'interface MentionSuggestion {',\n        replace: '/* interface MentionSuggestion {',\n      },\n      {\n        search: /}\\n\\ninterface CommentInputProps/,\n        replace: '} */\\n\\ninterface CommentInputProps',\n      },\n      {\n        search: /sessionId: string;/,\n        replace: '_sessionId: string;',\n      },\n      {\n        search: /parentId\\?: string;/,\n        replace: '_parentId?: string;',\n      },\n      {\n        search: /const handleCancel = .*?;\\s*/s,\n        replace: '',\n      },\n    ],\n  },\n  // CommentItem\n  {\n    file: 'src/components/CommentItem.tsx',\n    replacements: [\n      {\n        search: /sessionId: string;/,\n        replace: '_sessionId: string;',\n      },\n    ],\n  },\n  // CommentList\n  {\n    file: 'src/components/CommentList.tsx',\n    replacements: [\n      {\n        search: \"import { CommentWithDetails } from '@/types';\",\n        replace: '',\n      },\n      {\n        search: /initialCommentCount: number;/,\n        replace: '_initialCommentCount: number;',\n      },\n    ],\n  },\n  // CommentsModal\n  {\n    file: 'src/components/CommentsModal.tsx',\n    replacements: [\n      {\n        search: /const formatTimeAgo = .*?;\\s*/s,\n        replace: '',\n      },\n    ],\n  },\n  // ComparativeAnalytics\n  {\n    file: 'src/components/ComparativeAnalytics.tsx',\n    replacements: [\n      {\n        search: /userId: string;/,\n        replace: '_userId: string;',\n      },\n      {\n        search: /const \\[selectedProjects, setSelectedProjects\\] = .*?;\\s*/s,\n        replace: '',\n      },\n      {\n        search: /(chartData\\.map\\(\\(point, )index(\\) => \\()/,\n        replace: '$1_index$2',\n      },\n    ],\n  },\n  // CreateChallengeModal\n  {\n    file: 'src/components/CreateChallengeModal.tsx',\n    replacements: [\n      {\n        search: 'Badge, ',\n        replace: '',\n      },\n      {\n        search: '  Calendar,\\n',\n        replace: '',\n      },\n      {\n        search: '  Users,\\n',\n        replace: '',\n      },\n      {\n        search: /const SelectedIcon = .*?;\\s*/s,\n        replace: '',\n      },\n    ],\n  },\n  // DailyGoals\n  {\n    file: 'src/components/DailyGoals.tsx',\n    replacements: [\n      {\n        search: /const \\{ .*, activitiesLoading \\} = .*?;\\s*/s,\n        replace: match => match.replace(', activitiesLoading', ''),\n      },\n    ],\n  },\n];\n\nfixes.forEach(({ file, replacements }) => {\n  const filePath = path.join(__dirname, file);\n\n  if (!fs.existsSync(filePath)) {\n    console.log(`Skipping ${file} - file not found`);\n    return;\n  }\n\n  let content = fs.readFileSync(filePath, 'utf8');\n  let changed = false;\n\n  replacements.forEach(({ search, replace }) => {\n    if (typeof search === 'string') {\n      if (content.includes(search)) {\n        content = content.replace(search, replace);\n        changed = true;\n      }\n    } else {\n      // RegExp\n      if (search.test(content)) {\n        content = content.replace(search, replace);\n        changed = true;\n      }\n    }\n  });\n\n  if (changed) {\n    fs.writeFileSync(filePath, content);\n    console.log(`Fixed ${file}`);\n  } else {\n    console.log(`No changes needed for ${file}`);\n  }\n});\n\nconsole.log('Done!');\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/jest.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/jest.setup.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/next.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/playwright.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/postcss.config.mjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/public/sw.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/scripts/dev/cls-profiler.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/scripts/dev/create-feature.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/scripts/fix-eslint-warnings.cjs",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-require-imports",
        "severity": 1,
        "message": "A `require()` style import is forbidden.",
        "line": 11,
        "column": 12,
        "nodeType": "CallExpression",
        "messageId": "noRequireImports",
        "endLine": 11,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-require-imports",
        "severity": 1,
        "message": "A `require()` style import is forbidden.",
        "line": 12,
        "column": 14,
        "nodeType": "CallExpression",
        "messageId": "noRequireImports",
        "endLine": 12,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "#!/usr/bin/env node\n\n/**\n * Script to automatically fix common ESLint warnings in src/components/\n *\n * Fixes:\n * 1. Unused variables/parameters -> prefix with underscore\n * 2. any types -> proper TypeScript types\n */\n\nconst fs = require('fs');\nconst path = require('path');\n\nconst fixes = {\n  // File-specific fixes for unused variables\n  'CreateChallengeModal.tsx': [\n    { from: /import { Badge }/g, to: 'import { Badge as _Badge }' },\n    { from: /const SelectedIcon =/g, to: 'const _SelectedIcon =' },\n    { from: /\\(e: any\\) =>/g, to: '(e: React.ChangeEvent<HTMLSelectElement>) =>' },\n  ],\n  'CreateGroupModal.tsx': [\n    { from: /\\(e: any\\) =>/g, to: '(e: React.ChangeEvent<HTMLSelectElement>) =>' },\n  ],\n  'CreateProjectModal.tsx': [\n    { from: /\\(e: any\\) =>/g, to: '(e: React.ChangeEvent<HTMLSelectElement>) =>' },\n  ],\n  'DailyGoals.tsx': [\n    { from: /const \\[activities, activitiesLoading\\]/g, to: 'const [activities, _activitiesLoading]' },\n    { from: /\\(error: any\\)/g, to: '(error: unknown)' },\n  ],\n  'DataExport.tsx': [\n    { from: /\\({ userId }\\)/g, to: '({ userId: _userId })' },\n    { from: /} catch \\(error\\) {/g, to: '} catch (_error) {' },\n    { from: /\\(item: any\\)/g, to: '(item: Record<string, unknown>)' },\n  ],\n  'DataPrefetcher.tsx': [\n    { from: /import { useEffect }/g, to: 'import { useEffect as _useEffect }' },\n  ],\n  'EditProfileModal.tsx': [\n    { from: /} catch \\(error\\) {/g, to: '} catch (_error) {' },\n  ],\n  'EditSessionModal.tsx': [\n    { from: /XCircle,/g, to: '_XCircle,' },\n    { from: /\\(e: any\\) =>/g, to: '(e: React.ChangeEvent<HTMLSelectElement>) =>' },\n  ],\n  'FABMenu.tsx': [\n    { from: /const session =/g, to: 'const _session =' },\n    { from: /const post =/g, to: 'const _post =' },\n    { from: /\\(e: any\\) =>/g, to: '(e: React.MouseEvent) =>' },\n  ],\n  'Feed.tsx': [\n    { from: /initialLimit,/g, to: 'initialLimit: _initialLimit,' },\n    { from: /} catch \\(err\\) {/g, to: '} catch (_err) {' },\n    { from: /\\(err: any\\)/g, to: '(err: unknown)' },\n    { from: /\\(updates\\) =>/g, to: '(_updates: unknown) =>' },\n  ],\n  'FeedCarousel.tsx': [\n    { from: /const handleSwipe =/g, to: 'const _handleSwipe =' },\n  ],\n  'FeedLayout.tsx': [\n    { from: /const suggestedUsers =/g, to: 'const _suggestedUsers =' },\n    { from: /const handleFeedTypeChange =/g, to: 'const _handleFeedTypeChange =' },\n  ],\n  'GroupAnalytics.tsx': [\n    { from: /import { .*, useCallback }/g, to: (match) => match.replace('useCallback', '_useCallback') },\n    { from: /BarChart3,/g, to: '_BarChart3,' },\n    { from: /Users,/g, to: '_Users,' },\n    { from: /Clock,/g, to: '_Clock,' },\n    { from: /Calendar,/g, to: '_Calendar,' },\n    { from: /Legend,/g, to: '_Legend,' },\n    { from: /const \\[analytics, isLoading\\]/g, to: 'const [analytics, _isLoading]' },\n  ],\n  'GroupChallenges.tsx': [\n    { from: /import { .*, useCallback }/g, to: (match) => match.replace('useCallback', '_useCallback') },\n    { from: /Target,/g, to: '_Target,' },\n    { from: /Calendar,/g, to: '_Calendar,' },\n    { from: /Users,/g, to: '_Users,' },\n    { from: /TrendingUp,/g, to: '_TrendingUp,' },\n    { from: /\\(e: any\\) =>/g, to: '(e: React.ChangeEvent<HTMLSelectElement>) =>' },\n  ],\n  'GroupHeader.tsx': [\n    { from: /import Image /g, to: 'import Image as _Image ' },\n    { from: /import { Button }/g, to: 'import { Button as _Button }' },\n    { from: /import { Badge }/g, to: 'import { Badge as _Badge }' },\n    { from: /Calendar,/g, to: '_Calendar,' },\n    { from: /MoreHorizontal,/g, to: '_MoreHorizontal,' },\n    { from: /Target,/g, to: '_Target,' },\n    { from: /ArrowLeft,/g, to: '_ArrowLeft,' },\n  ],\n  'GroupInviteLanding.tsx': [\n    { from: /import { .*, useCallback }/g, to: (match) => match.replace('useCallback', '_useCallback') },\n    { from: /\\(error: any\\)/g, to: '(error: unknown)' },\n  ],\n  'GroupInviteModal.tsx': [\n    { from: /} catch \\(err\\) {/g, to: '} catch (_err) {' },\n  ],\n  'GroupSettings.tsx': [\n    { from: /import { Select }/g, to: 'import { Select as _Select }' },\n    { from: /import { Switch }/g, to: 'import { Switch as _Switch }' },\n    { from: /Settings,/g, to: '_Settings,' },\n    { from: /Users,/g, to: '_Users,' },\n    { from: /Upload,/g, to: '_Upload,' },\n    { from: /X,/g, to: '_X,' },\n  ],\n  'GroupTabs.tsx': [\n    { from: /import { Button }/g, to: 'import { Button as _Button }' },\n    { from: /ChevronDown,/g, to: '_ChevronDown,' },\n    { from: /groupId,/g, to: 'groupId: _groupId,' },\n    { from: /isAdmin,/g, to: 'isAdmin: _isAdmin,' },\n    { from: /const \\[isMobileMenuOpen, setIsMobileMenuOpen\\]/g, to: 'const [_isMobileMenuOpen, _setIsMobileMenuOpen]' },\n  ],\n  'IconRenderer.tsx': [\n    { from: /icons: any/g, to: 'icons: Record<string, React.ComponentType<{ className?: string; size?: number }>>'},\n  ],\n  'ImageUpload.tsx': [\n    { from: /showTypeHint,/g, to: 'showTypeHint: _showTypeHint,' },\n  ],\n  'LandingPage.tsx': [\n    { from: /const { user, isAuthenticated, authIsLoading }/g, to: 'const { user: _user, isAuthenticated: _isAuthenticated, authIsLoading: _authIsLoading }' },\n    { from: /\\(e: any\\) =>/g, to: '(e: React.FormEvent) =>' },\n    { from: /} catch \\(error: any\\) {/g, to: '} catch (_error: unknown) {' },\n    { from: /const \\[carouselIndex, setCarouselIndex\\]/g, to: 'const [_carouselIndex, _setCarouselIndex]' },\n    { from: /const benefits =/g, to: 'const _benefits =' },\n  ],\n  'LeftSidebar.tsx': [\n    { from: /import { WeekStreakCalendar }/g, to: 'import { WeekStreakCalendar as _WeekStreakCalendar }' },\n    { from: /import { ChevronRight }/g, to: 'import { ChevronRight as _ChevronRight }' },\n    { from: /import Link /g, to: 'import Link as _Link ' },\n    { from: /import Image /g, to: 'import Image as _Image ' },\n    { from: /const { profile, stats, isLoading }/g, to: 'const { profile: _profile, stats: _stats, isLoading: _isLoading }' },\n  ],\n  'LikesModal.tsx': [\n    { from: /totalLikes,/g, to: 'totalLikes: _totalLikes,' },\n    { from: /} catch \\(error\\) {/g, to: '} catch (_error) {' },\n  ],\n  'ManualEntry.tsx': [\n    { from: /const token =/g, to: 'const _token =' },\n    { from: /\\(e: any\\) =>/g, to: '(e: React.ChangeEvent<HTMLSelectElement>) =>' },\n  ],\n  'ManualSessionRecorder.tsx': [\n    { from: /import { SessionFormData }/g, to: 'import { SessionFormData as _SessionFormData }' },\n    { from: /ArrowLeft,/g, to: '_ArrowLeft,' },\n    { from: /Check,/g, to: '_Check,' },\n    { from: /import Link /g, to: 'import Link as _Link ' },\n    { from: /compressImage,/g, to: '_compressImage,' },\n    { from: /setPrivateNotes\\]/g, to: '_setPrivateNotes]' },\n    { from: /const \\[endTime, setEndTime\\]/g, to: 'const [_endTime, _setEndTime]' },\n  ],\n  'NotificationSettings.tsx': [\n    { from: /import { Heart }/g, to: 'import { Heart as _Heart }' },\n  ],\n  'NotificationsPanel.tsx': [\n    { from: /X,/g, to: '_X,' },\n  ],\n  'PWAInstaller.tsx': [\n    { from: /registration,/g, to: 'registration: _registration,' },\n  ],\n  'Post.tsx': [\n    { from: /import { StreakDisplay }/g, to: 'import { StreakDisplay as _StreakDisplay }' },\n  ],\n  'PostInteractions.tsx': [\n    { from: /variant,/g, to: 'variant: _variant,' },\n  ],\n  'PostStats.tsx': [\n    { from: /supportCount,/g, to: 'supportCount: _supportCount,' },\n    { from: /\\(e: any\\)/g, to: '(e: React.MouseEvent)' },\n  ],\n  'ProfileHeader.tsx': [\n    { from: /import { useAuth }/g, to: 'import { useAuth as _useAuth }' },\n  ],\n  'ProfileStats.tsx': [\n    { from: /import { Badge }/g, to: 'import { Badge as _Badge }' },\n  ],\n  'ProfileTabs.tsx': [\n    { from: /isOwnProfile,/g, to: 'isOwnProfile: _isOwnProfile,' },\n  ],\n  'ProjectAnalytics.tsx': [\n    { from: /import { .*, firebaseApi }/g, to: (match) => match.replace('firebaseApi', '_firebaseApi') },\n    { from: /ProjectStats,/g, to: '_ProjectStats,' },\n  ],\n  'ProjectList.tsx': [\n    { from: /import { .*, useCallback }/g, to: (match) => match.replace('useCallback', '_useCallback') },\n  ],\n  'ProjectProgressView.tsx': [\n    { from: /\\(task: any\\)/g, to: '(task: { id: string; title: string; completed: boolean })' },\n  ],\n  'ProtectedRoute.tsx': [\n    { from: /import { useState }/g, to: 'import { useState as _useState }' },\n  ],\n  'RightSidebar.tsx': [\n    { from: /import { .*, useCallback }/g, to: (match) => match.replace('useCallback', '_useCallback') },\n    { from: /const showPostModal =/g, to: 'const _showPostModal =' },\n  ],\n  'SaveSession.tsx': [\n    { from: /} catch \\(error\\) {/g, to: '} catch (_error) {' },\n  ],\n  'SearchUsers.tsx': [\n    { from: /\\(e: any\\)/g, to: '(e: React.ChangeEvent<HTMLInputElement>)' },\n  ],\n  'SessionCard.tsx': [\n    { from: /import { .*, useCallback }/g, to: (match) => match.replace('useCallback', '_useCallback') },\n  ],\n  'SessionHistory.tsx': [\n    { from: /supportedBy,/g, to: 'supportedBy: _supportedBy,' },\n  ],\n  'SessionStats.tsx': [\n    { from: /const \\[showAllTasks, setShowAllTasks\\]/g, to: 'const [_showAllTasks, _setShowAllTasks]' },\n  ],\n  'SessionTimer.tsx': [\n    { from: /import { TimerControls }/g, to: 'import { TimerControls as _TimerControls }' },\n  ],\n  'SessionTimerEnhanced.tsx': [\n    { from: /import { FinishSessionModal }/g, to: 'import { FinishSessionModal as _FinishSessionModal }' },\n  ],\n  'SidebarActivityGraph.tsx': [\n    { from: /LineChart,/g, to: '_LineChart,' },\n    { from: /\\(e: any\\)/g, to: '(e: React.MouseEvent)' },\n  ],\n  'SignupForm.tsx': [\n    { from: /import { .*, useCallback }/g, to: (match) => match.replace('useCallback', '_useCallback') },\n  ],\n  'SuggestedGroupsModal.tsx': [\n    { from: /const TOTAL_GROUPS_TO_FETCH =/g, to: 'const _TOTAL_GROUPS_TO_FETCH =' },\n    { from: /\\(error: any\\)/g, to: '(error: unknown)' },\n  ],\n  'TopComments.tsx': [\n    { from: /import { CommentWithDetails }/g, to: 'import { CommentWithDetails as _CommentWithDetails }' },\n  ],\n  'FinishSessionModal.tsx': [\n    { from: /\\(e: any\\) =>/g, to: '(e: React.ChangeEvent<HTMLSelectElement>) =>' },\n  ],\n  'WeekStreakCalendar.tsx': [\n    { from: /const DIMENSIONS =/g, to: 'const _DIMENSIONS =' },\n  ],\n  'timer/SaveSessionModal.tsx': [\n    { from: /onCancel,/g, to: 'onCancel: _onCancel,' },\n  ],\n};\n\nfunction processFile(filePath) {\n  const fileName = path.basename(filePath);\n  const fileContent = fs.readFileSync(filePath, 'utf8');\n\n  let modifiedContent = fileContent;\n  let hasChanges = false;\n\n  if (fixes[fileName]) {\n    for (const fix of fixes[fileName]) {\n      const newContent = modifiedContent.replace(fix.from, fix.to);\n      if (newContent !== modifiedContent) {\n        hasChanges = true;\n        modifiedContent = newContent;\n      }\n    }\n  }\n\n  if (hasChanges) {\n    fs.writeFileSync(filePath, modifiedContent, 'utf8');\n    console.log(`✓ Fixed ${fileName}`);\n    return 1;\n  }\n\n  return 0;\n}\n\nfunction walkDir(dir) {\n  let fixedCount = 0;\n  const files = fs.readdirSync(dir);\n\n  for (const file of files) {\n    const filePath = path.join(dir, file);\n    const stat = fs.statSync(filePath);\n\n    if (stat.isDirectory()) {\n      fixedCount += walkDir(filePath);\n    } else if (file.endsWith('.tsx')) {\n      fixedCount += processFile(filePath);\n    }\n  }\n\n  return fixedCount;\n}\n\nconst componentsDir = path.join(__dirname, '..', 'src', 'components');\nconst fixedCount = walkDir(componentsDir);\n\nconsole.log(`\\n✓ Fixed ${fixedCount} files`);\nconsole.log('\\nRun \"npm run lint\" to verify the fixes.');\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/scripts/ops/deleteUser.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/scripts/ops/migrate-profile-visibility.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/sentry.edge.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/sentry.server.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/contract/api/challenges.contract.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/contract/api/notifications.contract.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/fixtures/mocks.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/helpers/firebaseMock.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/integration/auth/google-signin.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/integration/firebase/feed-images.test.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "jsx-a11y/alt-text",
        "severity": 1,
        "message": "img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",
        "line": 62,
        "column": 12,
        "nodeType": "JSXOpeningElement",
        "endLine": 62,
        "endColumn": 30,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/integration/firebase/image-storage.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/integration/firebase/session-images-firestore.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/integration/image-upload/upload-flow-simple.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/integration/image-upload/upload-flow.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/ActivityCard.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/ActivityList.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/CommentLikes.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/ImageGallery.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/PostStats.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/ProtectedRoute.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/SessionCard-images.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/accessibility/focus-states.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/accessibility/icon-buttons.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/accessibility/keyboard-navigation.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/analytics/analytics-accessibility.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/auth/LoginForm-simple.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/auth/LoginForm.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/auth/SignupForm-simple.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/auth/SignupForm.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/session/SessionTimerEnhanced-complete-cancel.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/session/SessionTimerEnhanced-display.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/__tests__/unit/components/session/SessionTimerEnhanced-image-upload.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/about/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/activities/[id]/edit/page.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'isLoading' and 'router'. Either include them or remove the dependency array.",
        "line": 315,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 315,
        "endColumn": 28,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [activityId, isLoading, projects, router]",
            "fix": {
              "range": [11944, 11966],
              "text": "[activityId, isLoading, projects, router]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/activities/[id]/page.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadProjectData'. Either include it or remove the dependency array.",
        "line": 64,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 64,
        "endColumn": 27,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadProjectData, projectId, projects]",
            "fix": {
              "range": [2322, 2343],
              "text": "[loadProjectData, projectId, projects]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'processChartData'. Either include it or remove the dependency array.",
        "line": 69,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 69,
        "endColumn": 28,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [processChartData, sessions, timePeriod]",
            "fix": {
              "range": [2456, 2478],
              "text": "[processChartData, sessions, timePeriod]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/activities/__tests__/page.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/activities/new/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/activities/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/admin/migrate-users/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/analytics/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/auth/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/challenges/[id]/page.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadChallengeData'. Either include it or remove the dependency array.",
        "line": 34,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 34,
        "endColumn": 25,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [challengeId, loadChallengeData, user]",
            "fix": {
              "range": [1439, 1458],
              "text": "[challengeId, loadChallengeData, user]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/challenges/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/contact/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/cookies/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/discover/people/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/features/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/feed/page-content.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/feed/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/global-error.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/groups/[id]/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/groups/[id]/settings/page.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadGroup'. Either include it or remove the dependency array.",
        "line": 48,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 48,
        "endColumn": 21,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [groupId, loadGroup, user]",
            "fix": {
              "range": [1511, 1526],
              "text": "[groupId, loadGroup, user]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/groups/loading.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/groups/new/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/groups/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/help/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/invite/group/[groupId]/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/layout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/loading.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/login/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/not-found.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/notifications/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/post/[id]/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/privacy/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/profile/[username]/page-content.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/profile/[username]/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/profile/loading.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/profile/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/record-manual/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/search/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/sessions/[id]/edit/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/sessions/[id]/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/sessions/[id]/share/page.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadSession'. Either include it or remove the dependency array.",
        "line": 45,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 45,
        "endColumn": 23,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadSession, sessionId, user]",
            "fix": {
              "range": [1574, 1591],
              "text": "[loadSession, sessionId, user]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 393,
        "column": 17,
        "nodeType": "JSXOpeningElement",
        "endLine": 399,
        "endColumn": 19,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 533,
        "column": 17,
        "nodeType": "JSXOpeningElement",
        "endLine": 542,
        "endColumn": 19,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 563,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 572,
        "endColumn": 23,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 595,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 604,
        "endColumn": 23,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 854,
        "column": 17,
        "nodeType": "JSXOpeningElement",
        "endLine": 860,
        "endColumn": 19,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/settings/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/settings/privacy/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/signup/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/terms/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/timer/loading.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/timer/page-content.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/timer/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/app/you/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/AchievementCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/AchievementUnlock.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ActiveTimerBar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ActivityCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ActivityChart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ActivityList.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/AnalyticsWidget.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/AuthDebugger.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/AuthInitializer.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/BottomNavigation.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/BrowseGroups.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ChallengeCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ChallengeDetail.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ChallengeLeaderboard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ChallengeProgress.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ColorSelector.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/CommentInput.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/CommentItem.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/CommentList.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/CommentsModal.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'refetch'. Either include it or remove the dependency array.",
        "line": 86,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 86,
        "endColumn": 14,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [isOpen, refetch]",
            "fix": { "range": [2322, 2330], "text": "[isOpen, refetch]" }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ComparativeAnalytics.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ConfirmDialog.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/CreateChallengeModal.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/CreateGroupModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 71,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 71,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2030, 2033], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2030, 2033], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport { CreateGroupData } from '@/types';\nimport { Globe, Lock } from 'lucide-react';\n\ninterface CreateGroupModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (data: CreateGroupData) => Promise<void>;\n  isLoading?: boolean;\n  isFullPage?: boolean; // New prop to control full-page vs modal rendering\n}\n\n// Preset icons (same as CreateProjectModal)\nconst availableIcons = [\n  '💻', '⚛️', '💪', '📚', '🎨', '🏃', '🎵', '🔬', '📝', '🚀'\n];\n\n// Preset colors (same as CreateProjectModal)\nconst availableColors = [\n  { name: 'orange', class: 'bg-orange-500', hex: '#f97316' },\n  { name: 'blue', class: 'bg-blue-500', hex: '#3b82f6' },\n  { name: 'green', class: 'bg-green-500', hex: '#22c55e' },\n  { name: 'purple', class: 'bg-purple-500', hex: '#a855f7' },\n  { name: 'red', class: 'bg-red-500', hex: '#ef4444' },\n  { name: 'yellow', class: 'bg-yellow-500', hex: '#eab308' },\n  { name: 'pink', class: 'bg-pink-500', hex: '#ec4899' },\n  { name: 'indigo', class: 'bg-indigo-500', hex: '#6366f1' },\n];\n\nexport default function CreateGroupModal({\n  isOpen,\n  onClose,\n  onSubmit,\n  isLoading = false,\n  isFullPage = false\n}: CreateGroupModalProps) {\n  const [formData, setFormData] = useState<CreateGroupData>({\n    name: '',\n    description: '',\n    icon: '💻',\n    color: 'orange',\n    category: 'other',\n    type: 'just-for-fun',\n    privacySetting: 'public',\n    location: '',\n    imageUrl: '',\n    bannerUrl: ''\n  });\n\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  // Handle ESC key to close modal\n  React.useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape' && isOpen && !isLoading) {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [isOpen, isLoading, onClose]);\n\n  const handleInputChange = (field: keyof CreateGroupData, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.name.trim()) {\n      newErrors.name = 'Group name is required';\n    } else if (formData.name.length < 3) {\n      newErrors.name = 'Group name must be at least 3 characters';\n    } else if (formData.name.length > 50) {\n      newErrors.name = 'Group name must be less than 50 characters';\n    }\n\n    if (!formData.description.trim()) {\n      newErrors.description = 'Group description is required';\n    } else if (formData.description.length < 10) {\n      newErrors.description = 'Description must be at least 10 characters';\n    } else if (formData.description.length > 500) {\n      newErrors.description = 'Description must be less than 500 characters';\n    }\n\n    if (formData.location && formData.location.length > 100) {\n      newErrors.location = 'Location must be less than 100 characters';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    try {\n      await onSubmit(formData);\n      // Reset form on success\n      setFormData({\n        name: '',\n        description: '',\n        icon: '💻',\n        color: 'orange',\n        category: 'other',\n        type: 'just-for-fun',\n        privacySetting: 'public',\n        location: '',\n        imageUrl: '',\n        bannerUrl: ''\n      });\n      setErrors({});\n    } catch (error) {\n      console.error('Error creating group:', error);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  // Shared form content\n  const formContent = (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Group Preview */}\n            <div className=\"flex flex-col items-center pb-6 border-b border-gray-200\">\n              <div className={`w-24 h-24 ${availableColors.find(c => c.name === formData.color)?.class || 'bg-orange-500'} rounded-xl flex items-center justify-center text-white text-4xl mb-3 shadow-md`}>\n                {formData.icon}\n              </div>\n              <h3 className=\"text-xl font-bold text-gray-900\">\n                {formData.name || 'Group Name'}\n              </h3>\n              <p className=\"text-sm text-gray-500 mt-1 text-center max-w-md\">\n                {formData.description || 'Group description'}\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* Name */}\n              <div>\n                <label htmlFor=\"name\" className=\"block text-sm font-semibold text-gray-900 mb-2\">\n                  Group Name *\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => handleInputChange('name', e.target.value)}\n                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] transition-colors ${\n                    errors.name ? 'border-red-500' : 'border-gray-300'\n                  }`}\n                  placeholder=\"Enter group name\"\n                  maxLength={50}\n                  aria-required=\"true\"\n                  aria-invalid={!!errors.name}\n                  aria-describedby={errors.name ? 'name-error' : undefined}\n                  autoFocus\n                />\n                {errors.name && (\n                  <p id=\"name-error\" className=\"mt-1 text-sm text-red-600\" role=\"alert\">{errors.name}</p>\n                )}\n              </div>\n\n              {/* Description */}\n              <div>\n                <label htmlFor=\"description\" className=\"block text-sm font-semibold text-gray-900 mb-2\">\n                  Description *\n                </label>\n                <textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => handleInputChange('description', e.target.value)}\n                  className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] resize-none transition-colors ${\n                    errors.description ? 'border-red-500' : 'border-gray-300'\n                  }`}\n                  placeholder=\"Describe what this group is about\"\n                  rows={3}\n                  maxLength={500}\n                />\n                {errors.description && (\n                  <p className=\"mt-1 text-sm text-red-600\">{errors.description}</p>\n                )}\n                <p className=\"mt-1 text-xs text-gray-500\">\n                  {formData.description.length}/500 characters\n                </p>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n              {/* Icon Picker */}\n              <div>\n                <label id=\"icon-picker-label\" className=\"block text-sm font-semibold text-gray-900 mb-3\">\n                  Icon\n                </label>\n                <div className=\"grid grid-cols-5 gap-3\" role=\"radiogroup\" aria-labelledby=\"icon-picker-label\">\n                  {availableIcons.map((icon) => (\n                    <button\n                      key={icon}\n                      type=\"button\"\n                      role=\"radio\"\n                      aria-checked={formData.icon === icon}\n                      onClick={() => handleInputChange('icon', icon)}\n                      className={`w-14 h-14 rounded-lg border-2 flex items-center justify-center text-2xl transition-all ${\n                        formData.icon === icon\n                          ? 'border-[#007AFF] bg-blue-50 shadow-md'\n                          : 'border-gray-200 hover:border-gray-300 hover:shadow-sm'\n                      }`}\n                      aria-label={`Select ${icon} icon`}\n                    >\n                      {icon}\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Color Picker */}\n              <div>\n                <label id=\"color-picker-label\" className=\"block text-sm font-semibold text-gray-900 mb-3\">\n                  Color\n                </label>\n                <div className=\"grid grid-cols-4 gap-3\" role=\"radiogroup\" aria-labelledby=\"color-picker-label\">\n                  {availableColors.map((color) => (\n                    <button\n                      key={color.name}\n                      type=\"button\"\n                      role=\"radio\"\n                      aria-checked={formData.color === color.name}\n                      onClick={() => handleInputChange('color', color.name)}\n                      className={`w-14 h-14 rounded-lg border-2 transition-all ${\n                        formData.color === color.name\n                          ? 'border-gray-800 scale-110 shadow-lg'\n                          : 'border-gray-200 hover:border-gray-300 hover:scale-105'\n                      }`}\n                      style={{ backgroundColor: color.hex }}\n                      aria-label={`Select ${color.name} color`}\n                    >\n                      {formData.color === color.name && (\n                        <svg className=\"w-6 h-6 text-white drop-shadow-md\" fill=\"currentColor\" viewBox=\"0 0 20 20\" aria-hidden=\"true\">\n                          <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                        </svg>\n                      )}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            {/* Privacy Setting */}\n            <div className=\"pt-6 border-t border-gray-200\">\n              <label id=\"privacy-label\" className=\"block text-sm font-semibold text-gray-900 mb-3\">\n                Privacy Setting *\n              </label>\n              <div className=\"space-y-3\" role=\"radiogroup\" aria-labelledby=\"privacy-label\">\n                <label className={`flex items-start gap-3 p-4 border-2 rounded-lg cursor-pointer transition-all ${\n                  formData.privacySetting === 'public'\n                    ? 'border-[#007AFF] bg-blue-50'\n                    : 'border-gray-200 hover:border-gray-300'\n                }`}>\n                  <input\n                    type=\"radio\"\n                    name=\"privacySetting\"\n                    value=\"public\"\n                    checked={formData.privacySetting === 'public'}\n                    onChange={(e) => handleInputChange('privacySetting', e.target.value)}\n                    className=\"mt-1\"\n                  />\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <Globe className=\"w-5 h-5 text-green-600\" />\n                      <span className=\"font-semibold text-gray-900\">Public</span>\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">Anyone can join instantly</p>\n                  </div>\n                </label>\n                <label className={`flex items-start gap-3 p-4 border-2 rounded-lg cursor-pointer transition-all ${\n                  formData.privacySetting === 'approval-required'\n                    ? 'border-[#007AFF] bg-blue-50'\n                    : 'border-gray-200 hover:border-gray-300'\n                }`}>\n                  <input\n                    type=\"radio\"\n                    name=\"privacySetting\"\n                    value=\"approval-required\"\n                    checked={formData.privacySetting === 'approval-required'}\n                    onChange={(e) => handleInputChange('privacySetting', e.target.value)}\n                    className=\"mt-1\"\n                  />\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <Lock className=\"w-5 h-5 text-orange-600\" />\n                      <span className=\"font-semibold text-gray-900\">Approval Required</span>\n                    </div>\n                    <p className=\"text-sm text-gray-600 mt-1\">Admins must approve new members</p>\n                  </div>\n                </label>\n              </div>\n            </div>\n\n      {/* Actions */}\n      <div className=\"flex gap-4 pt-6 border-t border-gray-200\">\n        <button\n          type=\"button\"\n          onClick={onClose}\n          className=\"flex-1 px-6 py-3 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors font-medium\"\n          disabled={isLoading}\n        >\n          Cancel\n        </button>\n        <button\n          type=\"submit\"\n          disabled={isLoading}\n          className=\"flex-1 px-6 py-3 bg-[#007AFF] text-white rounded-lg hover:bg-[#0056D6] transition-colors disabled:opacity-50 disabled:cursor-not-allowed font-medium shadow-md\"\n        >\n          {isLoading ? 'Creating...' : 'Create Group'}\n        </button>\n      </div>\n    </form>\n  );\n\n  // Full-page view (rendered inline within the page)\n  if (isFullPage) {\n    return (\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n          <div className=\"p-4 sm:p-8\">\n            <h2 className=\"text-xl sm:text-2xl font-bold text-gray-900 mb-6 sm:mb-8\">Create New Group</h2>\n            {formContent}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Modal view (popup style)\n  return (\n    <div\n      className=\"fixed inset-0 bg-gray-500 bg-opacity-30 flex items-center justify-center z-40 p-4\"\n      onClick={(e) => {\n        if (e.target === e.currentTarget) {\n          onClose();\n        }\n      }}\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-labelledby=\"create-group-title\"\n    >\n      <div className=\"bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto shadow-xl\">\n        <div className=\"p-4 sm:p-8\">\n          {/* Header */}\n          <div className=\"flex justify-between items-center mb-6 sm:mb-8\">\n            <h2 id=\"create-group-title\" className=\"text-xl sm:text-2xl font-bold text-gray-900\">Create New Group</h2>\n            <button\n              onClick={onClose}\n              className=\"text-gray-400 hover:text-gray-600 transition-colors p-2 rounded-lg hover:bg-gray-100\"\n              aria-label=\"Close dialog\"\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n          </div>\n          {formContent}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/CreateProjectModal.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/DailyGoals.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/DataExport.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 82,
        "column": 55,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 82,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2841, 2844], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2841, 2844], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport { Download, Calendar, FileText, Database } from 'lucide-react';\n\ninterface DataExportProps {\n  userId: string;\n}\n\nexport const DataExport: React.FC<DataExportProps> = ({ userId: _userId }) => {\n  const [exportType, setExportType] = useState<'sessions' | 'projects' | 'tasks' | 'all'>('all');\n  const [dateFrom, setDateFrom] = useState<string>('');\n  const [dateTo, setDateTo] = useState<string>('');\n  const [format, setFormat] = useState<'csv' | 'json'>('csv');\n  const [includePrivate, setIncludePrivate] = useState(false);\n  const [isExporting, setIsExporting] = useState(false);\n  const [exportStatus, setExportStatus] = useState<string>('');\n\n  const handleExport = async () => {\n    setIsExporting(true);\n    setExportStatus('Preparing your export...');\n\n    try {\n      // Simulate export process\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // In real implementation, call API:\n      // await firebaseApi.analytics.exportData({\n      //   type: exportType,\n      //   dateFrom: new Date(dateFrom),\n      //   dateTo: new Date(dateTo),\n      //   format,\n      //   includePrivate\n      // });\n\n      setExportStatus('Export complete! Check your email for the download link.');\n    } catch (_error) {\n      setExportStatus('Export failed. Please try again.');\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const getDefaultDates = () => {\n    const today = new Date();\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(today.getDate() - 30);\n    \n    return {\n      from: thirtyDaysAgo.toISOString().split('T')[0],\n      to: today.toISOString().split('T')[0]\n    };\n  };\n\n  const defaults = getDefaultDates();\n\n  return (\n    <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n      <div className=\"flex items-center gap-3 mb-6\">\n        <Download className=\"w-6 h-6 text-blue-600\" />\n        <div>\n          <h2 className=\"text-xl font-bold text-gray-900\">Export Data</h2>\n          <p className=\"text-sm text-gray-600\">Download your productivity data</p>\n        </div>\n      </div>\n\n      <div className=\"space-y-6\">\n        {/* Export type */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n            What to export\n          </label>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n            {[\n              { value: 'all', label: 'Everything', icon: Database },\n              { value: 'sessions', label: 'Sessions', icon: Calendar },\n              { value: 'projects', label: 'Projects', icon: FileText },\n              { value: 'tasks', label: 'Tasks', icon: FileText }\n            ].map(({ value, label, icon: Icon }) => (\n              <button\n                key={value}\n                onClick={() => setExportType(value as any)}\n                className={`flex flex-col items-center gap-2 p-4 rounded-lg border-2 transition-all ${\n                  exportType === value\n                    ? 'border-blue-500 bg-blue-50'\n                    : 'border-gray-200 hover:border-gray-300'\n                }`}\n              >\n                <Icon className={`w-6 h-6 ${exportType === value ? 'text-blue-600' : 'text-gray-400'}`} />\n                <span className={`text-sm font-medium ${exportType === value ? 'text-blue-600' : 'text-gray-700'}`}>\n                  {label}\n                </span>\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Date range */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              From Date\n            </label>\n            <input\n              type=\"date\"\n              value={dateFrom || defaults.from}\n              onChange={(e) => setDateFrom(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              To Date\n            </label>\n            <input\n              type=\"date\"\n              value={dateTo || defaults.to}\n              onChange={(e) => setDateTo(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n        </div>\n\n        {/* Format */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n            Format\n          </label>\n          <div className=\"flex gap-3\">\n            <button\n              onClick={() => setFormat('csv')}\n              className={`flex-1 px-4 py-3 rounded-lg border-2 transition-all ${\n                format === 'csv'\n                  ? 'border-blue-500 bg-blue-50 text-blue-600'\n                  : 'border-gray-200 text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              <span className=\"font-medium\">CSV</span>\n              <p className=\"text-xs mt-1\">Excel compatible</p>\n            </button>\n            <button\n              onClick={() => setFormat('json')}\n              className={`flex-1 px-4 py-3 rounded-lg border-2 transition-all ${\n                format === 'json'\n                  ? 'border-blue-500 bg-blue-50 text-blue-600'\n                  : 'border-gray-200 text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              <span className=\"font-medium\">JSON</span>\n              <p className=\"text-xs mt-1\">Developer friendly</p>\n            </button>\n          </div>\n        </div>\n\n        {/* Options */}\n        <div>\n          <label className=\"flex items-center gap-2 cursor-pointer\">\n            <input\n              type=\"checkbox\"\n              checked={includePrivate}\n              onChange={(e) => setIncludePrivate(e.target.checked)}\n              className=\"rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n            />\n            <span className=\"text-sm text-gray-700\">Include private sessions and notes</span>\n          </label>\n        </div>\n\n        {/* Export button */}\n        <button\n          onClick={handleExport}\n          disabled={isExporting}\n          className=\"w-full flex items-center justify-center gap-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors font-medium\"\n        >\n          <Download className=\"w-5 h-5\" />\n          {isExporting ? 'Exporting...' : 'Export Data'}\n        </button>\n\n        {/* Status message */}\n        {exportStatus && (\n          <div className={`p-4 rounded-lg ${\n            exportStatus.includes('failed') \n              ? 'bg-red-50 text-red-700' \n              : 'bg-green-50 text-green-700'\n          }`}>\n            <p className=\"text-sm\">{exportStatus}</p>\n          </div>\n        )}\n\n        {/* Info */}\n        <div className=\"p-4 bg-gray-50 rounded-lg\">\n          <p className=\"text-sm text-gray-600\">\n            <strong>Note:</strong> For security reasons, we'll email you a download link instead of \n            downloading directly. The link will expire after 24 hours.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/DataPrefetcher.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/DayOverview.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/EditProfileModal.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/EditSessionModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 494,
        "column": 60,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 494,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17327, 17330], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17327, 17330], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'imagePreviewUrls'. Either include it or remove the dependency array.",
        "line": 252,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 252,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [imagePreviewUrls]",
            "fix": { "range": [7770, 7772], "text": "[imagePreviewUrls]" }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport Image from 'next/image';\nimport { Session } from '@/types';\nimport { X, _XCircle, Image as ImageIcon } from 'lucide-react';\nimport { uploadImages } from '@/lib/imageUpload';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useActivities } from '@/hooks/useActivitiesQuery';\nimport { parseLocalDateTime, cn } from '@/lib/utils';\n\ninterface EditSessionModalProps {\n  session: Session;\n  onClose: () => void;\n  onSave: (\n    sessionId: string,\n    data: {\n      title: string;\n      description?: string;\n      projectId?: string;\n      tags?: string[];\n      visibility?: 'everyone' | 'followers' | 'private';\n      images?: string[];\n      startTime?: Date;\n      duration?: number;\n    }\n  ) => Promise<void>;\n  isPage?: boolean;\n}\n\nexport const EditSessionModal: React.FC<EditSessionModalProps> = ({\n  session,\n  onClose,\n  onSave,\n  isPage = false,\n}) => {\n  const { user } = useAuth();\n  const { data: projects = [] } = useActivities(user?.id);\n\n  const [title, setTitle] = useState(session.title || '');\n  const [description, setDescription] = useState(session.description || '');\n  const [selectedProjectId, setSelectedProjectId] = useState(\n    session.projectId || ''\n  );\n  const [visibility, setVisibility] = useState<\n    'everyone' | 'followers' | 'private'\n  >(session.visibility || 'everyone');\n  const [existingImages, setExistingImages] = useState<string[]>(\n    session.images || []\n  );\n  const [selectedImages, setSelectedImages] = useState<File[]>([]);\n  const [imagePreviewUrls, setImagePreviewUrls] = useState<string[]>([]);\n  const [isUploading, setIsUploading] = useState(false);\n  const [isSaving, setIsSaving] = useState(false);\n\n  // Date/time state\n  const [sessionDate, setSessionDate] = useState(() => {\n    const date = new Date(session.startTime);\n    return date.toISOString().split('T')[0];\n  });\n  const [startTime, setStartTime] = useState(() => {\n    const date = new Date(session.startTime);\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    return `${hours}:${minutes}`;\n  });\n  const [durationHours, setDurationHours] = useState(() => {\n    return String(Math.floor(session.duration / 3600));\n  });\n  const [durationMinutes, setDurationMinutes] = useState(() => {\n    return String(Math.floor((session.duration % 3600) / 60));\n  });\n\n  // Update state when session prop changes (important for modal reuse)\n  useEffect(() => {\n    setTitle(session.title || '');\n    setDescription(session.description || '');\n    setSelectedProjectId(session.projectId || '');\n    setVisibility(session.visibility || 'everyone');\n    setExistingImages(session.images || []);\n    setSelectedImages([]);\n    setImagePreviewUrls([]);\n\n    // Update date/time fields\n    const date = new Date(session.startTime);\n    setSessionDate(date.toISOString().split('T')[0]);\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    setStartTime(`${hours}:${minutes}`);\n    setDurationHours(String(Math.floor(session.duration / 3600)));\n    setDurationMinutes(String(Math.floor((session.duration % 3600) / 60)));\n  }, [\n    session.id,\n    session.title,\n    session.description,\n    session.projectId,\n    session.visibility,\n    session.images,\n    session.startTime,\n    session.duration,\n  ]);\n\n  // Handle ESC key to close modal\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        onClose();\n      }\n    };\n\n    document.addEventListener('keydown', handleEscape);\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [onClose]);\n\n  const handleImageSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n\n    const totalImages =\n      existingImages.length + selectedImages.length + files.length;\n\n    if (totalImages > 3) {\n      alert('Maximum 3 images allowed');\n      return;\n    }\n\n    const maxSize = 5 * 1024 * 1024; // 5MB\n    const validFiles: File[] = [];\n    const previewUrls: string[] = [];\n\n    for (const file of files) {\n      // Check if it's HEIC - we'll handle conversion during upload\n      const isHeic =\n        file.type === 'image/heic' ||\n        file.type === 'image/heif' ||\n        file.name.toLowerCase().endsWith('.heic') ||\n        file.name.toLowerCase().endsWith('.heif');\n\n      if (file.size > maxSize) {\n        const sizeMB = (file.size / 1024 / 1024).toFixed(1);\n        alert(\n          `Image \"${file.name}\" is too large (${sizeMB}MB). Maximum size is 5MB.`\n        );\n        continue;\n      }\n\n      // Allow HEIC files as well as regular images\n      if (!file.type.startsWith('image/') && !isHeic) {\n        alert(`\"${file.name}\" is not an image file.`);\n        continue;\n      }\n\n      const previewUrl = URL.createObjectURL(file);\n      validFiles.push(file);\n      previewUrls.push(previewUrl);\n    }\n\n    if (validFiles.length > 0) {\n      setSelectedImages(prev => [...prev, ...validFiles]);\n      setImagePreviewUrls(prev => [...prev, ...previewUrls]);\n    }\n  };\n\n  const handleRemoveExistingImage = (index: number) => {\n    setExistingImages(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const handleRemoveNewImage = (index: number) => {\n    setSelectedImages(prev => prev.filter((_, i) => i !== index));\n    setImagePreviewUrls(prev => {\n      const newUrls = prev.filter((_, i) => i !== index);\n      const urlToRevoke = prev[index];\n      if (urlToRevoke) {\n        URL.revokeObjectURL(urlToRevoke);\n      }\n      return newUrls;\n    });\n  };\n\n  const handleSave = async () => {\n    if (!title.trim()) {\n      alert('Please enter a title');\n      return;\n    }\n\n    // Validate duration\n    const hours = parseInt(durationHours) || 0;\n    const minutes = parseInt(durationMinutes) || 0;\n    const totalDuration = hours * 3600 + minutes * 60;\n\n    if (totalDuration <= 0) {\n      alert('Duration must be greater than 0');\n      return;\n    }\n\n    setIsSaving(true);\n    try {\n      // Upload new images if any\n      let newImageUrls: string[] = [];\n      if (selectedImages.length > 0) {\n        setIsUploading(true);\n        try {\n          const uploadResults = await uploadImages(selectedImages);\n          newImageUrls = uploadResults.map(result => result.url);\n        } catch (error) {\n          console.error('Failed to upload images:', error);\n          alert('Failed to upload images. Please try again.');\n          setIsSaving(false);\n          setIsUploading(false);\n          return;\n        } finally {\n          setIsUploading(false);\n        }\n      }\n\n      // Combine existing and new images\n      const allImages = [...existingImages, ...newImageUrls];\n\n      // Parse the new start time\n      const newStartTime = parseLocalDateTime(\n        sessionDate || '',\n        startTime || ''\n      );\n\n      await onSave(session.id, {\n        title,\n        description: description || undefined,\n        projectId: selectedProjectId || undefined,\n        visibility,\n        images: allImages.length > 0 ? allImages : undefined,\n        startTime: newStartTime,\n        duration: totalDuration,\n      });\n\n      onClose();\n    } catch (error) {\n      console.error('Failed to save session:', error);\n      alert('Failed to save session. Please try again.');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  // Clean up preview URLs on unmount\n  useEffect(() => {\n    return () => {\n      imagePreviewUrls.forEach(url => URL.revokeObjectURL(url));\n    };\n    // Intentionally only run on unmount, not when imagePreviewUrls changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const totalImages = existingImages.length + selectedImages.length;\n\n  const formContent = (\n    <>\n      {/* Header */}\n      {!isPage && (\n        <div className=\"sticky top-0 bg-white border-b border-gray-200 px-6 py-4 flex items-center justify-between\">\n          <h2 className=\"text-xl font-bold text-gray-900\">Edit Session</h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n            aria-label=\"Close modal\"\n          >\n            <X className=\"w-6 h-6\" aria-hidden=\"true\" />\n          </button>\n        </div>\n      )}\n      {isPage && (\n        <div className=\"px-4 md:px-0 py-4\">\n          <h2 className=\"text-2xl font-bold text-gray-900\">Edit Session</h2>\n        </div>\n      )}\n\n      {/* Content */}\n      <div className={cn('px-4 md:px-0 space-y-6')}>\n        {/* Title */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Session Title *\n          </label>\n          <input\n            type=\"text\"\n            value={title}\n            onChange={e => setTitle(e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF]\"\n            placeholder=\"Enter session title\"\n          />\n        </div>\n\n        {/* Description */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Description\n          </label>\n          <textarea\n            value={description}\n            onChange={e => setDescription(e.target.value)}\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF]\"\n            rows={3}\n            placeholder=\"How did the session go? What did you accomplish?\"\n          />\n        </div>\n\n        {/* Date and Time Section */}\n        <div>\n          <h3 className=\"text-sm font-semibold text-gray-900 mb-3\">\n            Session Timing\n          </h3>\n\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4\">\n            {/* Date */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Date *\n              </label>\n              <input\n                type=\"date\"\n                value={sessionDate}\n                onChange={e => setSessionDate(e.target.value)}\n                max={new Date().toISOString().split('T')[0]}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#007AFF]\"\n                required\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">Date of your session</p>\n            </div>\n\n            {/* Start Time */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Start Time\n              </label>\n              <input\n                type=\"time\"\n                value={startTime}\n                onChange={e => setStartTime(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#007AFF]\"\n              />\n              <p className=\"text-xs text-gray-500 mt-1\">When you started</p>\n            </div>\n          </div>\n\n          {/* Duration */}\n          <div className=\"mt-3 sm:mt-4\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Duration *\n            </label>\n            <div className=\"flex gap-2 sm:gap-3\">\n              <div className=\"flex-1\">\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"23\"\n                  value={durationHours}\n                  onChange={e => setDurationHours(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#007AFF]\"\n                  placeholder=\"0\"\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">Hours</p>\n              </div>\n              <div className=\"flex-1\">\n                <input\n                  type=\"number\"\n                  min=\"0\"\n                  max=\"59\"\n                  value={durationMinutes}\n                  onChange={e => setDurationMinutes(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#007AFF]\"\n                  placeholder=\"0\"\n                />\n                <p className=\"text-xs text-gray-500 mt-1\">Minutes</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Images */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Images (Optional, max 3)\n            {/* Debug info */}\n            <span className=\"ml-2 text-xs text-gray-400\">\n              ({existingImages.length} existing, {selectedImages.length} new)\n            </span>\n          </label>\n          <div className=\"space-y-3\">\n            {/* Existing & New Image Previews */}\n            {(existingImages.length > 0 || imagePreviewUrls.length > 0) && (\n              <div className=\"grid grid-cols-3 gap-2\">\n                {/* Existing images */}\n                {existingImages.map((url, index) => (\n                  <div\n                    key={`existing-${index}`}\n                    className=\"relative aspect-square rounded-lg overflow-hidden bg-gray-100\"\n                  >\n                    <Image\n                      src={url}\n                      alt={`Image ${index + 1}`}\n                      width={300}\n                      height={300}\n                      quality={90}\n                      className=\"w-full h-full object-cover\"\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => handleRemoveExistingImage(index)}\n                      className=\"absolute top-2 right-2 w-6 h-6 flex items-center justify-center bg-red-500 text-white rounded-full hover:bg-red-600 transition-colors shadow-md\"\n                      aria-label=\"Remove image\"\n                    >\n                      <X className=\"w-4 h-4 flex-shrink-0\" aria-hidden=\"true\" />\n                    </button>\n                  </div>\n                ))}\n                {/* New images */}\n                {imagePreviewUrls.map((url, index) => (\n                  <div\n                    key={`new-${index}`}\n                    className=\"relative aspect-square rounded-lg overflow-hidden bg-gray-100\"\n                  >\n                    <Image\n                      src={url}\n                      alt={`Preview ${index + 1}`}\n                      width={300}\n                      height={300}\n                      quality={90}\n                      className=\"w-full h-full object-cover\"\n                      unoptimized\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => handleRemoveNewImage(index)}\n                      className=\"absolute top-2 right-2 w-6 h-6 flex items-center justify-center bg-red-500 text-white rounded-full hover:bg-red-600 transition-colors shadow-md\"\n                      aria-label=\"Remove image\"\n                    >\n                      <X className=\"w-4 h-4 flex-shrink-0\" aria-hidden=\"true\" />\n                    </button>\n                  </div>\n                ))}\n              </div>\n            )}\n\n            {/* Upload Button */}\n            {totalImages < 3 && (\n              <label className=\"flex flex-col items-center justify-center gap-2 px-4 py-8 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-[#007AFF] hover:bg-gray-50 transition-colors min-h-[120px]\">\n                <ImageIcon className=\"w-8 h-8 text-gray-400\" />\n                <span className=\"text-sm font-medium text-gray-600\">\n                  {totalImages === 0\n                    ? 'Add images'\n                    : `Add ${3 - totalImages} more`}\n                </span>\n                <span className=\"text-xs text-gray-400\">\n                  JPG, PNG, HEIC (max 5MB each)\n                </span>\n                <input\n                  type=\"file\"\n                  accept=\"image/*,.heic,.heif\"\n                  multiple\n                  onChange={handleImageSelect}\n                  className=\"hidden\"\n                />\n              </label>\n            )}\n          </div>\n        </div>\n\n        {/* Project Selection */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Project\n          </label>\n          <select\n            value={selectedProjectId}\n            onChange={e => setSelectedProjectId(e.target.value)}\n            className=\"w-full pl-3 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] bg-white text-sm appearance-none\"\n          >\n            <option value=\"\">Unassigned</option>\n            {projects?.map(project => (\n              <option key={project.id} value={project.id}>\n                {project.name}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        {/* Visibility */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Visibility\n          </label>\n          <select\n            value={visibility}\n            onChange={e => setVisibility(e.target.value as any)}\n            className=\"w-full pl-3 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] bg-white appearance-none\"\n          >\n            <option value=\"everyone\">Everyone</option>\n            <option value=\"followers\">Followers</option>\n            <option value=\"private\">Only You</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <div\n        className={cn(\n          'flex gap-3',\n          isPage\n            ? 'px-4 md:px-0 py-6'\n            : 'sticky bottom-0 bg-white border-t border-gray-200 px-6 py-4'\n        )}\n      >\n        <button\n          onClick={onClose}\n          disabled={isSaving || isUploading}\n          className=\"flex-1 px-4 py-2 text-gray-700 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors disabled:opacity-50\"\n        >\n          Cancel\n        </button>\n        <button\n          onClick={handleSave}\n          disabled={!title.trim() || isSaving || isUploading}\n          className=\"flex-1 px-4 py-2 bg-[#007AFF] text-white rounded-lg hover:bg-[#0056D6] transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n        >\n          {isUploading\n            ? 'Uploading Images...'\n            : isSaving\n              ? 'Saving...'\n              : 'Save Changes'}\n        </button>\n      </div>\n    </>\n  );\n\n  if (isPage) {\n    return <>{formContent}</>;\n  }\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 z-[9999] flex items-center justify-center p-4\">\n      <div className=\"bg-white rounded-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        {formContent}\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ErrorBoundary.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/FABMenu.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/Feed.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'err' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 263,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 263,
        "endColumn": 17
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'allSessions.length'. Either include it or remove the dependency array.",
        "line": 305,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 305,
        "endColumn": 29,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [allSessions.length, top10SessionIdsString]",
            "fix": {
              "range": [10241, 10264],
              "text": "[allSessions.length, top10SessionIdsString]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { SessionWithDetails, FeedFilters } from '@/types';\nimport { firebaseApi } from '@/lib/api';\nimport SessionCard from './SessionCard';\nimport { useFeedInfinite, FeedResult } from '@/features/feed/hooks';\nimport { useSupportSession, useDeleteSession } from '@/features/sessions/hooks';\nimport { useAuth } from '@/hooks/useAuth';\nimport ConfirmDialog from './ConfirmDialog';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { AlertTriangle, Users, Search, ChevronUp } from 'lucide-react';\n\n// Session Card Skeleton Component\nconst SessionCardSkeleton: React.FC = () => (\n  <div className=\"bg-white border-b md:border md:border-gray-200 md:rounded-lg p-4 animate-pulse\">\n    {/* Header - User Info */}\n    <div className=\"flex items-center space-x-3 mb-4\">\n      <div className=\"w-10 h-10 bg-gray-200 rounded-full flex-shrink-0\"></div>\n      <div className=\"flex-1 space-y-2\">\n        <div className=\"h-4 bg-gray-200 rounded w-32\"></div>\n        <div className=\"h-3 bg-gray-200 rounded w-24\"></div>\n      </div>\n    </div>\n\n    {/* Session Title */}\n    <div className=\"mb-3\">\n      <div className=\"h-5 bg-gray-200 rounded w-3/4 mb-2\"></div>\n    </div>\n\n    {/* Description */}\n    <div className=\"space-y-2 mb-4\">\n      <div className=\"h-4 bg-gray-200 rounded w-full\"></div>\n      <div className=\"h-4 bg-gray-200 rounded w-5/6\"></div>\n    </div>\n\n    {/* Stats Bar */}\n    <div className=\"flex items-center gap-4 py-3 mb-3 border-t border-b border-gray-100\">\n      <div className=\"h-4 bg-gray-200 rounded w-20\"></div>\n      <div className=\"h-4 bg-gray-200 rounded w-24\"></div>\n      <div className=\"h-4 bg-gray-200 rounded w-16\"></div>\n    </div>\n\n    {/* Action Buttons */}\n    <div className=\"flex items-center justify-between\">\n      <div className=\"flex gap-4\">\n        <div className=\"h-8 bg-gray-200 rounded w-16\"></div>\n        <div className=\"h-8 bg-gray-200 rounded w-20\"></div>\n      </div>\n      <div className=\"h-8 bg-gray-200 rounded w-12\"></div>\n    </div>\n  </div>\n);\n\ninterface FeedProps {\n  filters?: FeedFilters;\n  className?: string;\n  initialLimit?: number;\n  showEndMessage?: boolean;\n  showGroupInfo?: boolean;\n}\n\nexport const Feed: React.FC<FeedProps> = ({\n  filters = {},\n  className = '',\n  initialLimit: _initialLimit = 10,\n  showEndMessage = true,\n  showGroupInfo = false,\n}) => {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [hasNewSessions, setHasNewSessions] = useState(false);\n  const [newSessionsCount, setNewSessionsCount] = useState(0);\n  const [deleteConfirmSession, setDeleteConfirmSession] = useState<\n    string | null\n  >(null);\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  // Ref for infinite scroll trigger element\n  const loadMoreTriggerRef = React.useRef<HTMLDivElement>(null);\n\n  // Use new infinite scroll hook\n  const {\n    data,\n    isLoading,\n    error,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    refetch,\n  } = useFeedInfinite(user?.id || '', filters);\n\n  // Flatten pages into allSessions\n  // Note: Casting to SessionWithDetails[] for compatibility during architecture migration\n  // The data structure comes from useFeedInfinite which returns InfiniteData<FeedResult>\n  // where each page is a FeedResult with sessions: Session[] property\n  const allSessions = useMemo(() => {\n    if (!data?.pages) return [];\n    // TypeScript can't infer the page type from useInfiniteQuery, so we cast\n    return (data.pages as FeedResult[]).flatMap(page => {\n      return page.sessions || [];\n    }) as unknown as SessionWithDetails[];\n  }, [data]);\n\n  const hasMore = hasNextPage || false;\n  const isLoadingMore = isFetchingNextPage;\n\n  // New mutations using feature hooks\n  const supportMutation = useSupportSession(user?.id);\n  const deleteSessionMutation = useDeleteSession();\n\n  // Refresh sessions and invalidate cache\n  const refreshSessions = useCallback(() => {\n    setHasNewSessions(false);\n    setNewSessionsCount(0);\n    // Invalidate all feed caches to force refetch\n    queryClient.invalidateQueries({ queryKey: ['feed'] });\n    refetch();\n  }, [refetch, queryClient]);\n\n  // Auto-refresh feed when coming from session creation\n  useEffect(() => {\n    const shouldRefresh = searchParams?.get('refresh');\n    if (shouldRefresh === 'true') {\n      // Clear the URL parameter\n      router.replace('/', { scroll: false });\n      // Trigger immediate refresh\n      refreshSessions();\n    }\n  }, [searchParams, router, refreshSessions]);\n\n  // Load more sessions - now uses React Query infinite scroll\n  const loadMore = useCallback(() => {\n    if (!isLoadingMore && hasMore) {\n      fetchNextPage();\n    }\n  }, [isLoadingMore, hasMore, fetchNextPage]);\n\n  // Check for new sessions periodically - only when page is visible\n  useEffect(() => {\n    if (allSessions.length === 0) return;\n\n    // Track if page is currently visible\n    let isPageVisible = !document.hidden;\n\n    const checkForNewSessions = async () => {\n      // Skip check if page is not visible\n      if (!isPageVisible) return;\n\n      try {\n        // Use queryClient to check cache first, then fetch if stale\n        const cachedData = queryClient.getQueryData([\n          'feed',\n          'sessions',\n          5,\n          undefined,\n          filters,\n        ]);\n\n        let response;\n        if (cachedData) {\n          response = cachedData as { sessions: Array<{ id: string }> };\n        } else {\n          response = await firebaseApi.post.getFeedSessions(\n            5,\n            undefined,\n            filters\n          );\n        }\n\n        const newSessionIds = response.sessions.map(s => s.id);\n        const currentSessionIds = allSessions.slice(0, 5).map(s => s.id);\n\n        const newCount = newSessionIds.filter(\n          id => !currentSessionIds.includes(id)\n        ).length;\n        if (newCount > 0) {\n          setHasNewSessions(true);\n          setNewSessionsCount(newCount);\n        }\n      } catch {\n        // Silently fail\n      }\n    };\n\n    // Update visibility state when page visibility changes\n    const handleVisibilityChange = () => {\n      isPageVisible = !document.hidden;\n      // Check immediately when page becomes visible\n      if (isPageVisible) {\n        checkForNewSessions();\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n\n    // Check every 2 minutes when visible (reduced frequency saves resources)\n    const interval = setInterval(checkForNewSessions, 120000);\n\n    return () => {\n      clearInterval(interval);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [allSessions, filters, queryClient]);\n\n  // Handle support with optimistic updates via React Query\n  const handleSupport = useCallback(\n    async (sessionId: string) => {\n      supportMutation.mutate({ sessionId, action: 'support' });\n    },\n    [supportMutation]\n  );\n\n  // Handle remove support with optimistic updates via React Query\n  const handleRemoveSupport = useCallback(\n    async (sessionId: string) => {\n      supportMutation.mutate({ sessionId, action: 'unsupport' });\n    },\n    [supportMutation]\n  );\n\n  // Handle share\n  const handleShare = useCallback(async (sessionId: string) => {\n    try {\n      const sessionUrl = `${window.location.origin}/sessions/${sessionId}`;\n\n      if (navigator.share) {\n        // Use native share API on mobile\n        await navigator.share({\n          title: 'Check out this session on Ambira',\n          text: 'Look at this productive session!',\n          url: sessionUrl,\n        });\n      } else {\n        // Fallback to clipboard\n        await navigator.clipboard.writeText(sessionUrl);\n        // Could show success toast here\n      }\n    } catch (err: unknown) {\n      // Silently ignore if user cancels the share dialog\n      if (err.name === 'AbortError') {\n        return;\n      }\n      // Could show error toast here\n    }\n  }, []);\n\n  // Handle delete\n  const handleDelete = useCallback(async (sessionId: string) => {\n    setDeleteConfirmSession(sessionId);\n  }, []);\n\n  const confirmDelete = useCallback(async () => {\n    if (!deleteConfirmSession) return;\n\n    try {\n      setIsDeleting(true);\n      await deleteSessionMutation.mutateAsync(deleteConfirmSession);\n      setDeleteConfirmSession(null);\n    } catch (err: unknown) {\n      // Could show error toast here\n    } finally {\n      setIsDeleting(false);\n    }\n  }, [deleteConfirmSession, deleteSessionMutation]);\n\n  // Memoize top 10 session IDs string to create stable dependency\n  // This prevents useEffect from re-running when sessions array changes but top 10 IDs remain same\n  const top10SessionIdsString = useMemo(() => {\n    const MAX_LISTENERS = 10;\n    return allSessions\n      .slice(0, MAX_LISTENERS)\n      .map(session => session.id)\n      .join(',');\n  }, [allSessions]);\n\n  // Real-time updates for support counts (throttled to reduce reads)\n  // Only listen to the first 10 sessions to reduce overhead\n  // Note: React Query handles optimistic updates through mutations\n  // This listener is kept for reference but real-time updates happen via queryClient updates\n  useEffect(() => {\n    if (allSessions.length === 0 || !top10SessionIdsString) return;\n\n    // Parse session IDs from memoized string\n    const sessionIds = top10SessionIdsString.split(',').filter(Boolean);\n    if (sessionIds.length === 0) return;\n\n    // Register listener but don't update state directly\n    // React Query mutations handle support count updates via cache invalidation\n    const unsubscribe = firebaseApi.post.listenToSessionUpdates(\n      sessionIds,\n      _updates => {\n        // Updates are handled by React Query's optimistic updates in supportMutation\n        // This listener can be used for real-time notifications in the future\n      }\n    );\n\n    return unsubscribe;\n    // allSessions.length is intentionally not included to avoid excessive re-subscriptions\n    // The effect only re-runs when the top 10 session IDs change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [top10SessionIdsString]); // Only re-run when top 10 IDs change\n\n  // Infinite scroll using IntersectionObserver\n  useEffect(() => {\n    const trigger = loadMoreTriggerRef.current;\n    if (!trigger) return;\n\n    const observer = new IntersectionObserver(\n      entries => {\n        const entry = entries[0];\n        if (!entry) return;\n\n        if (entry.isIntersecting && hasMore && !isLoadingMore) {\n          loadMore();\n        }\n      },\n      {\n        root: null, // viewport\n        rootMargin: '200px', // Trigger 200px before reaching the element\n        threshold: 0,\n      }\n    );\n\n    observer.observe(trigger);\n\n    return () => {\n      if (trigger) {\n        observer.unobserve(trigger);\n      }\n    };\n  }, [loadMore, hasMore, isLoadingMore]);\n\n  if (isLoading) {\n    return (\n      <div className={`space-y-4 ${className}`}>\n        {[...Array(3)].map((_, i) => (\n          <SessionCardSkeleton key={i} />\n        ))}\n      </div>\n    );\n  }\n\n  if (error) {\n    const errorMessage = String(error);\n    const isPermissionError =\n      errorMessage.includes('permission') ||\n      errorMessage.includes('insufficient');\n\n    return (\n      <div\n        className={`text-center py-8 px-4 ${className}`}\n        role=\"alert\"\n        aria-live=\"polite\"\n      >\n        <div className=\"text-red-600 mb-4\">\n          <AlertTriangle\n            className=\"w-12 h-12 mx-auto mb-2\"\n            aria-hidden=\"true\"\n          />\n          <p className=\"font-medium text-sm sm:text-base\">\n            Failed to load sessions\n          </p>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            {isPermissionError\n              ? 'There was a permissions issue loading the feed. This may be due to security rules that need updating.'\n              : errorMessage}\n          </p>\n          {isPermissionError && (\n            <p className=\"text-xs text-gray-500 mt-2\">\n              If you're the app administrator, try deploying the latest\n              Firestore security rules.\n            </p>\n          )}\n        </div>\n        <button\n          onClick={refreshSessions}\n          className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200\"\n        >\n          Try Again\n        </button>\n      </div>\n    );\n  }\n\n  if (allSessions.length === 0) {\n    // Determine empty state content based on feed type\n    const feedType = filters?.type || 'all';\n\n    let emptyStateContent = {\n      title: 'Your feed is empty',\n      message:\n        'Follow people to see their productive sessions in your feed and get inspired by their work!',\n      buttonText: 'Find People to Follow',\n      buttonAction: () => router.push('/discover/people'),\n    };\n\n    if (feedType === 'group-members-unfollowed') {\n      emptyStateContent = {\n        title: 'No sessions yet',\n        message:\n          \"When group members you don't follow post sessions, they'll appear here!\",\n        buttonText: 'Discover Groups',\n        buttonAction: () => router.push('/groups'),\n      };\n    } else if (feedType === 'user') {\n      emptyStateContent = {\n        title: 'No sessions yet',\n        message:\n          'Start tracking your productive sessions to build your profile!',\n        buttonText: 'Start a Session',\n        buttonAction: () => router.push('/timer'),\n      };\n    } else if (feedType === 'following') {\n      emptyStateContent = {\n        title: 'Your feed is empty',\n        message:\n          'Follow people to see their productive sessions in your feed and get inspired by their work!',\n        buttonText: 'Find People to Follow',\n        buttonAction: () => router.push('/discover/people'),\n      };\n    }\n\n    return (\n      <div className={`text-center py-12 px-4 ${className}`}>\n        <div className=\"max-w-md mx-auto\">\n          <div className=\"text-gray-500 mb-8\">\n            <Users className=\"w-20 h-20 mx-auto mb-4 text-gray-400\" />\n            <h3 className=\"font-bold text-xl text-gray-900 mb-2\">\n              {emptyStateContent.title}\n            </h3>\n            <p className=\"text-base text-gray-600 leading-relaxed\">\n              {emptyStateContent.message}\n            </p>\n          </div>\n\n          {/* Action Button */}\n          <button\n            onClick={emptyStateContent.buttonAction}\n            className=\"inline-flex items-center justify-center gap-2 px-6 py-3 bg-[#007AFF] text-white rounded-lg hover:bg-[#0051D5] transition-colors duration-200 font-semibold text-base shadow-md hover:shadow-lg\"\n          >\n            <Search className=\"w-5 h-5\" />\n            {emptyStateContent.buttonText}\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={className}>\n      {/* New sessions indicator */}\n      {hasNewSessions && (\n        <div className=\"mb-4 sticky top-0 z-10\">\n          <button\n            onClick={refreshSessions}\n            className=\"w-full py-3 px-3 sm:px-4 bg-gradient-to-r from-[#007AFF] to-[#0051D5] text-white rounded-lg shadow-lg hover:shadow-xl transition-colors duration-200 flex items-center justify-center gap-2 font-medium text-sm sm:text-base\"\n            aria-label={`${newSessionsCount} new sessions available, click to refresh`}\n          >\n            <ChevronUp className=\"w-5 h-5 flex-shrink-0\" aria-hidden=\"true\" />\n            <span className=\"truncate\">\n              {newSessionsCount} new{' '}\n              {newSessionsCount === 1 ? 'session' : 'sessions'} - Click to\n              refresh\n            </span>\n          </button>\n        </div>\n      )}\n\n      {/* Sessions */}\n      <div className=\"space-y-0 md:space-y-0\">\n        {allSessions.map((session, index) => {\n          const isOwnSession = user && session.userId === user.id;\n          // First 2 sessions are above the fold on most screens\n          const isAboveFold = index < 2;\n          return (\n            <SessionCard\n              key={session.id}\n              session={session}\n              onSupport={handleSupport}\n              onRemoveSupport={handleRemoveSupport}\n              onShare={handleShare}\n              onEdit={\n                isOwnSession\n                  ? sessionId => router.push(`/sessions/${sessionId}/edit`)\n                  : undefined\n              }\n              onDelete={isOwnSession ? handleDelete : undefined}\n              showGroupInfo={showGroupInfo}\n              isAboveFold={isAboveFold}\n              priority={isAboveFold}\n            />\n          );\n        })}\n      </div>\n\n      {/* Infinite scroll trigger element */}\n      {hasMore && !isLoadingMore && (\n        <div ref={loadMoreTriggerRef} className=\"h-4\" aria-hidden=\"true\" />\n      )}\n\n      {/* Load more indicator */}\n      {isLoadingMore && (\n        <div className=\"text-center py-4\" role=\"status\" aria-live=\"polite\">\n          <div className=\"inline-flex items-center space-x-2 text-gray-600\">\n            <div\n              className=\"w-4 h-4 border-2 border-gray-300 border-t-blue-600 rounded-full animate-spin\"\n              aria-hidden=\"true\"\n            ></div>\n            <span className=\"text-sm\">Loading more sessions...</span>\n          </div>\n        </div>\n      )}\n\n      {/* Delete Confirmation Dialog */}\n      <ConfirmDialog\n        isOpen={deleteConfirmSession !== null}\n        onClose={() => setDeleteConfirmSession(null)}\n        onConfirm={confirmDelete}\n        title=\"Delete Session\"\n        message=\"Are you sure you want to delete this session? This action cannot be undone and all associated data will be permanently removed.\"\n        confirmText=\"Delete Session\"\n        cancelText=\"Cancel\"\n        variant=\"danger\"\n        isLoading={isDeleting}\n      />\n\n      {/* End of feed */}\n      {showEndMessage && !hasMore && allSessions.length > 0 && (\n        <div className=\"text-center py-4 text-gray-500 text-sm\">\n          You've reached the end of the feed\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Feed;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/FeedCarousel.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/FeedFilterDropdown.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/FeedLayout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/FeedPost.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/Footer.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/GroupAnalytics.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/GroupAvatar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/GroupCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/GroupChallenges.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/GroupHeader.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/GroupInviteLanding.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'checkMembershipAndRedirect'. Either include it or remove the dependency array.",
        "line": 50,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 50,
        "endColumn": 32,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [user, authLoading, group, checkMembershipAndRedirect]",
            "fix": {
              "range": [1518, 1544],
              "text": "[user, authLoading, group, checkMembershipAndRedirect]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/GroupInviteModal.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/GroupListItem.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/GroupSettings.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/GroupTabs.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/HeaderComponent.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/HeatmapCalendar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/IconRenderer.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 25,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 25,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [982, 985], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [982, 985], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport * as Icons from 'lucide-react';\nimport { Icon } from '@iconify/react';\n\ninterface IconRendererProps {\n  iconName: string;\n  className?: string;\n  size?: number;\n  style?: React.CSSProperties;\n}\n\n/**\n * Dynamically renders an icon based on the icon name string\n * Supports both Iconify icons (e.g., \"flat-color-icons:briefcase\") and legacy Lucide icons (e.g., \"Briefcase\")\n * Falls back to Briefcase icon if the icon name is not found\n */\nexport const IconRenderer: React.FC<IconRendererProps> = ({ iconName, className = '', size = 24, style }) => {\n  // Check if it's an Iconify icon (contains a colon, e.g., \"flat-color-icons:briefcase\")\n  if (iconName && iconName.includes(':')) {\n    return <Icon icon={iconName} width={size} height={size} className={className} style={style} />;\n  }\n\n  // Legacy Lucide icon support (e.g., \"Briefcase\")\n  // If iconName is empty or invalid, fall back to Briefcase\n  const IconComponent = (iconName && (Icons as any)[iconName]) || Icons.Briefcase;\n  return <IconComponent className={className} size={size} style={style} />;\n};\n\nexport default IconRenderer;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/IconSelector.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ImageGallery.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ImageLightbox.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ImageUpload.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'showTypeHint' is assigned a value but never used. Allowed unused args must match /^_/u.",
        "line": 104,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 104,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useRef } from 'react';\nimport Image from 'next/image';\nimport { ImageIcon, X, AlertCircle, Loader2 } from 'lucide-react';\n\ninterface DeleteConfirmProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onDelete: () => void;\n}\n\nconst DeleteConfirm: React.FC<DeleteConfirmProps> = ({\n  isOpen,\n  onClose,\n  onDelete,\n}) => {\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div\n        className=\"fixed inset-0 bg-black/60 z-50 md:hidden flex items-center justify-center p-4\"\n        onClick={onClose}\n      >\n        {/* Modal */}\n        <div\n          className=\"bg-white rounded-lg p-5 w-full max-w-sm shadow-xl\"\n          onClick={e => e.stopPropagation()}\n        >\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n            Delete Image?\n          </h3>\n          <p className=\"text-sm text-gray-600 mb-6\">\n            This image will be removed from your session.\n          </p>\n\n          <div className=\"flex gap-3\">\n            <button\n              onClick={onClose}\n              className=\"flex-1 px-4 py-2.5 bg-gray-200 text-gray-800 rounded-lg font-medium hover:bg-gray-300 active:bg-gray-300 transition-colors\"\n            >\n              Cancel\n            </button>\n            <button\n              onClick={() => {\n                onDelete();\n                onClose();\n              }}\n              className=\"flex-1 px-4 py-2.5 bg-red-600 text-white rounded-lg font-medium hover:bg-red-700 active:bg-red-700 transition-colors\"\n            >\n              Delete\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\ninterface ImageUploadProps {\n  /** Maximum number of images allowed */\n  maxImages?: number;\n  /** Maximum file size in MB */\n  maxSizeMB?: number;\n  /** Accepted file types (e.g., ['image/jpeg', 'image/png']) */\n  acceptedTypes?: string[];\n  /** Show accepted types hint */\n  showTypeHint?: boolean;\n  /** Current images (for controlled component) */\n  images?: File[];\n  /** Preview URLs (for controlled component) */\n  previewUrls?: string[];\n  /** Callback when images change */\n  onImagesChange?: (images: File[], previewUrls: string[]) => void;\n  /** Upload mode: 'instant' uploads immediately, 'deferred' waits for form submission */\n  uploadMode?: 'instant' | 'deferred';\n  /** Upload function for instant mode */\n  onUpload?: (files: File[]) => Promise<string[]>;\n  /** Label text */\n  label?: string;\n  /** Show upload progress */\n  showProgress?: boolean;\n  /** Custom placeholder text */\n  placeholder?: string;\n  /** Disabled state */\n  disabled?: boolean;\n  /** Show as single image picker (for profile pictures) */\n  singleImage?: boolean;\n}\n\nexport const ImageUpload: React.FC<ImageUploadProps> = ({\n  maxImages = 3,\n  maxSizeMB = 5,\n  acceptedTypes = [\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n    'image/heic',\n    'image/heif',\n  ],\n  showTypeHint = true,\n  images = [],\n  previewUrls = [],\n  onImagesChange,\n  uploadMode = 'deferred',\n  onUpload,\n  label,\n  showProgress = true,\n  placeholder,\n  disabled = false,\n  singleImage = false,\n}) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [error, setError] = useState<string>('');\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState<number>(0);\n  const [actionSheetIndex, setActionSheetIndex] = useState<number | null>(null);\n\n  const maxSize = maxSizeMB * 1024 * 1024;\n  const effectiveMaxImages = singleImage ? 1 : maxImages;\n\n  const formatFileTypes = () => {\n    const types = acceptedTypes.map(type => {\n      const ext = type.split('/')[1]?.toUpperCase();\n      if (ext === 'JPEG') return 'JPG';\n      return ext;\n    });\n    return types.join(', ');\n  };\n\n  const validateFile = (file: File): { valid: boolean; error?: string } => {\n    // Check file size\n    if (file.size > maxSize) {\n      const sizeMB = (file.size / 1024 / 1024).toFixed(1);\n      return {\n        valid: false,\n        error: `\"${file.name}\" is too large (${sizeMB}MB). Maximum size is ${maxSizeMB}MB.`,\n      };\n    }\n\n    // Check file type\n    const isHeic =\n      file.type === 'image/heic' ||\n      file.type === 'image/heif' ||\n      file.name.toLowerCase().endsWith('.heic') ||\n      file.name.toLowerCase().endsWith('.heif');\n\n    if (\n      !acceptedTypes.includes(file.type) &&\n      !isHeic &&\n      !file.type.startsWith('image/')\n    ) {\n      return {\n        valid: false,\n        error: `\"${file.name}\" is not a supported file type. Please use ${formatFileTypes()}.`,\n      };\n    }\n\n    return { valid: true };\n  };\n\n  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    setError('');\n\n    if (files.length + images.length > effectiveMaxImages) {\n      setError(\n        `Maximum ${effectiveMaxImages} ${effectiveMaxImages === 1 ? 'image' : 'images'} allowed`\n      );\n      return;\n    }\n\n    const validFiles: File[] = [];\n    const newPreviewUrls: string[] = [];\n\n    // Validate each file\n    for (const file of files) {\n      const validation = validateFile(file);\n      if (!validation.valid) {\n        setError(validation.error || 'Invalid file');\n        continue;\n      }\n\n      validFiles.push(file);\n\n      // Create preview URL\n      const previewUrl = URL.createObjectURL(file);\n      newPreviewUrls.push(previewUrl);\n    }\n\n    if (validFiles.length === 0) {\n      return;\n    }\n\n    // Handle instant upload mode\n    if (uploadMode === 'instant' && onUpload) {\n      try {\n        setIsUploading(true);\n        setUploadProgress(0);\n\n        // Simulate progress (you can replace with actual upload progress)\n        const progressInterval = setInterval(() => {\n          setUploadProgress(prev => Math.min(prev + 10, 90));\n        }, 200);\n\n        const uploadedUrls = await onUpload(validFiles);\n\n        clearInterval(progressInterval);\n        setUploadProgress(100);\n\n        // Call onChange with uploaded URLs (you might want to handle this differently)\n        onImagesChange?.(\n          [...images, ...validFiles],\n          [...previewUrls, ...uploadedUrls]\n        );\n\n        setTimeout(() => {\n          setIsUploading(false);\n          setUploadProgress(0);\n        }, 500);\n      } catch (err: unknown) {\n        setError((err as Error).message || 'Failed to upload images');\n        setIsUploading(false);\n        setUploadProgress(0);\n        // Clean up preview URLs on error\n        newPreviewUrls.forEach(url => URL.revokeObjectURL(url));\n      }\n    } else {\n      // Deferred mode - just store files and previews\n      onImagesChange?.(\n        [...images, ...validFiles],\n        [...previewUrls, ...newPreviewUrls]\n      );\n    }\n\n    // Reset file input\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n  };\n\n  const handleRemoveImage = (index: number) => {\n    const newImages = images.filter((_, i) => i !== index);\n    const newPreviewUrls = previewUrls.filter((_, i) => {\n      if (i === index) {\n        // Revoke object URL to free memory\n        const url = previewUrls[i];\n        if (url) {\n          URL.revokeObjectURL(url);\n        }\n        return false;\n      }\n      return true;\n    });\n\n    onImagesChange?.(newImages, newPreviewUrls);\n    setError('');\n  };\n\n  const getPlaceholderText = () => {\n    if (placeholder) return placeholder;\n    if (singleImage) return 'Upload profile picture';\n    if (previewUrls.length === 0) return 'Add images';\n    return `Add ${effectiveMaxImages - previewUrls.length} more`;\n  };\n\n  return (\n    <div className=\"space-y-3\">\n      {label && (\n        <label className=\"block text-sm font-medium text-gray-700\">\n          {label}\n        </label>\n      )}\n\n      {/* Error Message */}\n      {error && (\n        <div className=\"flex items-center gap-2 p-3 bg-red-50 border border-red-200 rounded-lg text-sm text-red-700\">\n          <AlertCircle className=\"w-4 h-4 flex-shrink-0\" />\n          <span>{error}</span>\n        </div>\n      )}\n\n      {/* Image Previews */}\n      {previewUrls.length > 0 && (\n        <div\n          className={`grid gap-2 ${singleImage ? 'grid-cols-1' : 'grid-cols-3'}`}\n        >\n          {previewUrls.map((url, index) => (\n            <div\n              key={index}\n              className={`relative rounded-lg overflow-hidden bg-gray-100 ${\n                singleImage ? 'aspect-square max-w-[200px]' : 'aspect-square'\n              }`}\n            >\n              <Image\n                src={url}\n                alt={`Preview ${index + 1}`}\n                width={300}\n                height={300}\n                quality={90}\n                className=\"w-full h-full object-cover\"\n                unoptimized\n                onClick={() => !disabled && setActionSheetIndex(index)}\n              />\n              {!disabled && (\n                <>\n                  {/* Desktop X button */}\n                  <button\n                    type=\"button\"\n                    onClick={() => handleRemoveImage(index)}\n                    className=\"hidden md:block absolute top-1 right-1 p-0.5 text-white hover:text-red-500 transition-colors\"\n                    aria-label=\"Remove image\"\n                    style={{\n                      filter: 'drop-shadow(0 1px 2px rgb(0 0 0 / 0.9))',\n                    }}\n                  >\n                    <X className=\"w-5 h-5\" strokeWidth={3} />\n                  </button>\n\n                  {/* Mobile tap indicator */}\n                  <div className=\"md:hidden absolute inset-0 flex items-center justify-center pointer-events-none\">\n                    <div className=\"opacity-0 hover:opacity-100 transition-opacity\">\n                      <div className=\"bg-black/20 rounded-full p-2\">\n                        <X className=\"w-6 h-6 text-white\" strokeWidth={2} />\n                      </div>\n                    </div>\n                  </div>\n                </>\n              )}\n              {/* File size indicator */}\n              {images[index] && (\n                <div className=\"absolute bottom-1 left-1 px-2 py-0.5 bg-black/60 text-white text-xs rounded\">\n                  {(images[index].size / 1024 / 1024).toFixed(1)}MB\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Delete confirmation modal */}\n      <DeleteConfirm\n        isOpen={actionSheetIndex !== null}\n        onClose={() => setActionSheetIndex(null)}\n        onDelete={() => {\n          if (actionSheetIndex !== null) {\n            handleRemoveImage(actionSheetIndex);\n            setActionSheetIndex(null);\n          }\n        }}\n      />\n\n      {/* Upload Progress */}\n      {isUploading && showProgress && (\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between text-sm text-gray-600\">\n            <span>Uploading...</span>\n            <span>{uploadProgress}%</span>\n          </div>\n          <div className=\"h-2 bg-gray-200 rounded-full overflow-hidden\">\n            <div\n              className=\"h-full bg-blue-500 transition-all duration-300 ease-out\"\n              style={{ width: `${uploadProgress}%` }}\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Upload Button */}\n      {previewUrls.length < effectiveMaxImages && !disabled && (\n        <label\n          className={`flex flex-col items-center justify-center gap-2 px-8 py-8 border-[3px] border-dashed rounded-lg cursor-pointer transition-colors max-w-[240px] ${\n            isUploading\n              ? 'border-blue-300 bg-blue-50 cursor-not-allowed'\n              : 'border-[#007AFF] hover:border-[#0051D5] hover:bg-gray-50'\n          }`}\n        >\n          {isUploading ? (\n            <>\n              <Loader2 className=\"w-8 h-8 text-blue-500 animate-spin\" />\n              <span className=\"text-sm font-medium text-blue-600\">\n                Uploading...\n              </span>\n            </>\n          ) : (\n            <>\n              <ImageIcon className=\"w-8 h-8 text-[#007AFF]\" />\n              <span className=\"text-sm font-medium text-[#007AFF]\">\n                {getPlaceholderText()}\n              </span>\n            </>\n          )}\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            accept={acceptedTypes.join(',') + ',.heic,.heif'}\n            multiple={!singleImage}\n            onChange={handleFileSelect}\n            className=\"hidden\"\n            disabled={disabled || isUploading}\n          />\n        </label>\n      )}\n\n      {/* Helper text for max images */}\n      {!singleImage &&\n        previewUrls.length > 0 &&\n        previewUrls.length < effectiveMaxImages && (\n          <p className=\"text-xs text-gray-500 text-center\">\n            {previewUrls.length} of {effectiveMaxImages} images selected\n          </p>\n        )}\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/LandingPage.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'user' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 17,
        "column": 44,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 48
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isAuthenticated' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 17,
        "column": 50,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 65
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'authIsLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 17,
        "column": 78,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 91
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'handleLoginWithEmail' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 58,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 58,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { useAuth } from '@/hooks/useAuth';\nimport { SignupCredentials } from '@/types';\nimport { firebaseUserApi } from '@/lib/api';\nimport Header from './HeaderComponent';\nimport PWAInstallPrompt from './PWAInstallPrompt';\nimport { GoogleAuthButton } from './landing/GoogleAuthButton';\nimport { LoginForm } from './landing/LoginForm';\nimport { SignupForm } from './landing/SignupForm';\nimport { LandingFooter } from './landing/LandingFooter';\n\nexport const LandingPage: React.FC = () => {\n  const { login, signup, signInWithGoogle, user, isAuthenticated, isLoading: authIsLoading } = useAuth();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [showSignup, setShowSignup] = useState(false);\n  const [showLogin, setShowLogin] = useState(false);\n  const [loginData, setLoginData] = useState({\n    email: '',\n    password: '',\n  });\n  const [signupData, setSignupData] = useState<SignupCredentials>({\n    email: '',\n    password: '',\n    name: '',\n    username: '',\n  });\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [signupErrors, setSignupErrors] = useState<Partial<SignupCredentials & { confirmPassword: string }>>({});\n  const [loginErrors, setLoginErrors] = useState<{email?: string; password?: string}>({});\n  const [usernameCheckLoading, setUsernameCheckLoading] = useState(false);\n  const [usernameAvailable, setUsernameAvailable] = useState<boolean | null>(null);\n\n  const handleGoogleSignIn = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      await signInWithGoogle();\n      // Navigation is handled by AuthContext after successful authentication\n      // No need to manually navigate here - AuthContext will update isAuthenticated\n      // and the page component will automatically show the authenticated view\n    } catch (err: unknown) {\n      console.error('Google sign-in error:', err);\n      // Don't show error or clear loading if redirect is in progress\n      // (user is being redirected to Google)\n      if (err?.message !== 'REDIRECT_IN_PROGRESS') {\n        setError(err?.message || 'Failed to sign in with Google. Please try again.');\n        setIsLoading(false);\n      }\n      // If REDIRECT_IN_PROGRESS, keep loading state - browser will redirect\n    }\n  };\n\n  const handleLoginWithEmail = () => {\n    setShowLogin(true);\n    setError(null);\n  };\n\n  const handleSignupWithEmail = () => {\n    setShowSignup(true);\n    setError(null);\n  };\n\n  const handleLoginChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setLoginData(prev => ({ ...prev, [name]: value }));\n    \n    // Clear field-specific error when user starts typing\n    if (loginErrors[name as keyof typeof loginErrors]) {\n      setLoginErrors(prev => ({ ...prev, [name]: undefined }));\n    }\n    \n    // Clear submit error\n    if (error) {\n      setError('');\n    }\n  };\n\n  const validateLoginForm = (): boolean => {\n    const newErrors: {email?: string; password?: string} = {};\n\n    if (!loginData.email) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(loginData.email)) {\n      newErrors.email = 'Email is invalid';\n    }\n\n    if (!loginData.password) {\n      newErrors.password = 'Password is required';\n    }\n\n    setLoginErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleLoginSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateLoginForm()) {\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n      await login(loginData);\n      // Navigation is handled by AuthContext after successful authentication\n      // No need to manually navigate here - AuthContext will update isAuthenticated\n      // and the page component will automatically show the authenticated view\n    } catch (err: unknown) {\n      console.error('Login error:', err);\n\n      // Handle specific Firebase errors with user-friendly messages\n      if (err.message?.includes('auth/user-not-found')) {\n        setError('No account found with this email address. Please sign up or check your email.');\n      } else if (err.message?.includes('auth/wrong-password')) {\n        setError('Incorrect password. Please try again.');\n      } else if (err.message?.includes('auth/invalid-email')) {\n        setError('Please enter a valid email address.');\n      } else if (err.message?.includes('auth/too-many-requests')) {\n        setError('Too many failed attempts. Please try again later.');\n      } else {\n        setError('Failed to sign in. Please check your credentials and try again.');\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSignupChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    if (name === 'confirmPassword') {\n      setConfirmPassword(value);\n    } else {\n      setSignupData(prev => ({ ...prev, [name]: value }));\n    }\n\n    // Clear field-specific error when user starts typing\n    if (signupErrors[name as keyof (SignupCredentials & { confirmPassword: string })]) {\n      setSignupErrors(prev => ({ ...prev, [name]: undefined }));\n    }\n\n    // Clear submit error\n    if (error) {\n      setError('');\n    }\n\n    // Reset username availability when username changes\n    if (name === 'username') {\n      setUsernameAvailable(null);\n    }\n  };\n\n  // Debounced username availability check\n  useEffect(() => {\n    const checkUsername = async () => {\n      const username = signupData.username.trim();\n\n      // Only check if username meets minimum requirements\n      if (username.length < 3) {\n        setUsernameAvailable(null);\n        return;\n      }\n\n      // Validate username format\n      if (!/^[a-zA-Z0-9_]+$/.test(username)) {\n        setUsernameAvailable(null);\n        return;\n      }\n\n      setUsernameCheckLoading(true);\n      try {\n        const available = await firebaseUserApi.checkUsernameAvailability(username);\n        setUsernameAvailable(available);\n      } catch (_error: unknown) {\n        // Set to null to indicate check couldn't be completed\n        // Registration will still proceed with server-side validation\n        setUsernameAvailable(null);\n      } finally {\n        setUsernameCheckLoading(false);\n      }\n    };\n\n    // Debounce: wait 1000ms after user stops typing\n    const timeoutId = setTimeout(checkUsername, 1000);\n    return () => clearTimeout(timeoutId);\n  }, [signupData.username]);\n\n  const validateSignupForm = (): boolean => {\n    const newErrors: Partial<SignupCredentials & { confirmPassword: string }> = {};\n\n    if (!signupData.name.trim()) {\n      newErrors.name = 'Name is required';\n    } else if (signupData.name.trim().length < 2) {\n      newErrors.name = 'Name must be at least 2 characters';\n    }\n\n    if (!signupData.username.trim()) {\n      newErrors.username = 'Username is required';\n    } else if (signupData.username.trim().length < 3) {\n      newErrors.username = 'Username must be at least 3 characters';\n    } else if (!/^[a-zA-Z0-9_]+$/.test(signupData.username.trim())) {\n      newErrors.username = 'Username can only contain letters, numbers, and underscores';\n    } else if (usernameAvailable === false) {\n      newErrors.username = 'Username is already taken';\n    } else if (usernameCheckLoading) {\n      newErrors.username = 'Checking username availability...';\n    }\n\n    if (!signupData.email) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(signupData.email)) {\n      newErrors.email = 'Email is invalid';\n    }\n\n    if (!signupData.password) {\n      newErrors.password = 'Password is required';\n    } else if (signupData.password.length < 6) {\n      newErrors.password = 'Password must be at least 6 characters';\n    }\n\n    if (!confirmPassword) {\n      newErrors.confirmPassword = 'Please confirm your password';\n    } else if (signupData.password !== confirmPassword) {\n      newErrors.confirmPassword = 'Passwords do not match';\n    }\n\n    setSignupErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSignupSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateSignupForm()) {\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      setError(null);\n      await signup(signupData);\n      // Navigation is handled by AuthContext after successful authentication\n      // No need to manually navigate here - AuthContext will update isAuthenticated\n      // and the page component will automatically show the authenticated view\n    } catch (err: unknown) {\n      console.error('Signup error:', err);\n\n      // Handle specific Firebase errors with user-friendly messages\n      if (err.message?.includes('auth/email-already-in-use')) {\n        setError('This email address is already registered. Please try logging in instead or use a different email.');\n      } else if (err.message?.includes('auth/weak-password')) {\n        setError('Password is too weak. Please choose a stronger password with at least 6 characters.');\n      } else if (err.message?.includes('auth/invalid-email')) {\n        setError('Please enter a valid email address.');\n      } else {\n        setError('Failed to create account. Please try again.');\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const [_carouselIndex, _setCarouselIndex] = useState(0);\n\n  \n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Hide header on mobile */}\n      <div className=\"hidden md:block\">\n        <Header />\n      </div>\n\n      {/* Hero Section - Full screen on mobile, with header space on desktop */}\n      <main className=\"min-h-screen md:h-[calc(100vh-56px)] flex flex-col md:items-center md:justify-center px-4 md:px-8 py-8 md:pt-0\">\n        {/* Mobile View - Compact version similar to desktop */}\n        {!showLogin && !showSignup && (\n          <div className=\"md:hidden w-full max-w-md mx-auto flex flex-col justify-center min-h-[calc(100vh-4rem)]\">\n            {/* Logo and Welcome */}\n            <div className=\"text-center mb-6\">\n              <div className=\"w-32 h-32 flex items-center justify-center mx-auto mb-4\">\n                <Image\n                  src=\"/logo.svg\"\n                  alt=\"Ambira Logo\"\n                  width={128}\n                  height={128}\n                  priority={true}\n                />\n              </div>\n              <h1 className=\"text-2xl font-bold text-gray-900 mb-1\">Welcome to Ambira</h1>\n              <p className=\"text-base text-gray-600\">\n                Study, work, and build with your friends.\n              </p>\n            </div>\n\n            {/* Already a Member Header */}\n            <div className=\"text-center mb-4\">\n              <p className=\"text-lg text-gray-600\">\n                Already a Member?{' '}\n                <button\n                  onClick={() => setShowLogin(true)}\n                  className=\"text-[#007AFF] font-semibold hover:text-[#0056D6] transition-colors\"\n                >\n                  Log In\n                </button>\n              </p>\n            </div>\n\n            {/* CTA Buttons */}\n            <div className=\"space-y-3\">\n              {/* Google Sign Up Button */}\n              <GoogleAuthButton\n                onClick={handleGoogleSignIn}\n                disabled={isLoading}\n                buttonText=\"Sign Up With Google\"\n                className=\"px-4 py-3\"\n              />\n\n              {/* Email Sign Up Button */}\n              <button\n                onClick={handleSignupWithEmail}\n                disabled={isLoading}\n                className=\"w-full flex items-center justify-center px-4 py-3 bg-[#007AFF] text-white font-semibold rounded-lg hover:bg-[#0056D6] transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {isLoading ? (\n                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"></div>\n                ) : (\n                  'Sign Up With Email'\n                )}\n              </button>\n            </div>\n\n            {/* Legal Text */}\n            <p className=\"text-sm text-gray-600 text-center mt-6\">\n              By continuing, you are agreeing to our{' '}\n              <Link href=\"/terms\" className=\"text-[#007AFF]\">Terms of Service</Link>\n              {' '}and{' '}\n              <Link href=\"/privacy\" className=\"text-[#007AFF]\">Privacy Policy</Link>.\n            </p>\n          </div>\n        )}\n\n        {/* Mobile Auth Forms */}\n        {(showLogin || showSignup) && (\n          <div className=\"md:hidden flex-1 flex flex-col py-6 px-2 overflow-y-auto\">\n            {/* Close Button and Title */}\n            <div className=\"mb-4 relative\">\n              <button\n                onClick={() => {\n                  setShowLogin(false);\n                  setShowSignup(false);\n                }}\n                className=\"absolute right-0 top-0 text-gray-600 p-2\"\n                aria-label=\"Close form\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                </svg>\n              </button>\n              <h1 className=\"text-2xl font-bold text-gray-900 pt-2\">\n                {showLogin ? 'Log In to Ambira' : 'Create Your Account'}\n              </h1>\n            </div>\n\n            {/* Forms content */}\n            <div className=\"flex-1\">\n              {showLogin ? (\n                <LoginForm\n                  onSubmit={handleLoginSubmit}\n                  onGoogleSignIn={handleGoogleSignIn}\n                  onChange={handleLoginChange}\n                  loginData={loginData}\n                  loginErrors={loginErrors}\n                  error={error}\n                  isLoading={isLoading}\n                  isMobile={true}\n                />\n              ) : (\n                <SignupForm\n                  onSubmit={handleSignupSubmit}\n                  onGoogleSignIn={handleGoogleSignIn}\n                  onChange={handleSignupChange}\n                  signupData={signupData}\n                  confirmPassword={confirmPassword}\n                  signupErrors={signupErrors}\n                  error={error}\n                  isLoading={isLoading}\n                  usernameCheckLoading={usernameCheckLoading}\n                  usernameAvailable={usernameAvailable}\n                  isMobile={true}\n                />\n              )}\n            </div>\n\n            {/* Legal Text */}\n            <p className=\"text-sm text-gray-600 text-center mt-6\">\n              By continuing, you are agreeing to our{' '}\n              <Link href=\"/terms\" className=\"text-[#007AFF]\">Terms of Service</Link>\n              {' '}and{' '}\n              <Link href=\"/privacy\" className=\"text-[#007AFF]\">Privacy Policy</Link>.\n            </p>\n          </div>\n        )}\n\n        {/* Desktop View */}\n        <div className=\"hidden md:block max-w-md w-full\">\n          {/* Logo and Welcome - Hide when login form is active */}\n          {!showLogin && !showSignup && (\n            <>\n              <div className=\"text-center mb-8\">\n                <div className=\"w-48 h-48 flex items-center justify-center mx-auto mb-6\">\n                  <Image\n                    src=\"/logo.svg\"\n                    alt=\"Ambira Logo\"\n                    width={192}\n                    height={192}\n                    priority={true}\n                  />\n                </div>\n                <h1 className=\"text-4xl font-bold text-gray-900 mb-2\">Welcome to Ambira</h1>\n                <p className=\"text-lg text-gray-600\">\n                  Study, work, and build with your friends.\n                </p>\n              </div>\n\n              {/* Already a Member Header */}\n              <div className=\"text-center mb-6\">\n                <p className=\"text-2xl text-gray-600\">\n                  Already a Member?{' '}\n                  <button\n                    onClick={() => setShowLogin(true)}\n                    className=\"text-[#007AFF] font-semibold hover:text-[#0056D6] transition-colors\"\n                  >\n                    Log In\n                  </button>\n                </p>\n              </div>\n            </>\n          )}\n\n          {/* Login Form Header - Show when login form is active */}\n          {showLogin && (\n            <div className=\"text-center mb-8\">\n              <div className=\"w-48 h-48 flex items-center justify-center mx-auto mb-6\">\n                <Image\n                  src=\"/logo.svg\"\n                  alt=\"Ambira Logo\"\n                  width={192}\n                  height={192}\n                  priority={true}\n                />\n              </div>\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Welcome Back</h1>\n              <p className=\"text-lg text-gray-600\">\n                Sign in to your account\n              </p>\n            </div>\n          )}\n\n          {/* Signup Form Header - Show when signup form is active */}\n          {showSignup && (\n            <div className=\"text-center mb-8\">\n              <div className=\"w-48 h-48 flex items-center justify-center mx-auto mb-6\">\n                <Image\n                  src=\"/logo.svg\"\n                  alt=\"Ambira Logo\"\n                  width={192}\n                  height={192}\n                  priority={true}\n                />\n              </div>\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Create Your Account</h1>\n              <p className=\"text-lg text-gray-600\">\n                Join Ambira and start tracking your productivity\n              </p>\n            </div>\n          )}\n\n          {/* Auth Card */}\n          <div className=\"p-8 mb-6\">\n            {!showSignup && !showLogin ? (\n              <>\n                {/* Sign-in Options - Only show when not in login or signup mode */}\n                <div className=\"space-y-4\">\n                  {/* Google Sign Up Button */}\n                  <GoogleAuthButton\n                    onClick={handleGoogleSignIn}\n                    disabled={isLoading}\n                    buttonText=\"Sign Up With Google\"\n                    className=\"px-6 py-4 text-lg w-6 h-6 mr-3\"\n                  />\n\n                  {/* Email Sign Up Button */}\n                  <button\n                    onClick={handleSignupWithEmail}\n                    disabled={isLoading}\n                    className=\"w-full flex items-center justify-center px-6 py-4 bg-[#007AFF] text-white font-semibold text-lg rounded-lg hover:bg-[#0056D6] transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {isLoading ? (\n                      <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-white\"></div>\n                    ) : (\n                      'Sign Up With Email'\n                    )}\n                  </button>\n                </div>\n              </>\n            ) : showLogin ? (\n              <>\n                {/* Email Login Form - Show only when in login mode */}\n                <div className=\"flex items-center justify-between mb-6\">\n                  <button\n                    onClick={() => setShowLogin(false)}\n                    className=\"text-gray-400 hover:text-gray-600\"\n                    type=\"button\"\n                    aria-label=\"Go back to login options\"\n                  >\n                    <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n                    </svg>\n                  </button>\n                </div>\n                <LoginForm\n                  onSubmit={handleLoginSubmit}\n                  onGoogleSignIn={handleGoogleSignIn}\n                  onChange={handleLoginChange}\n                  loginData={loginData}\n                  loginErrors={loginErrors}\n                  error={error}\n                  isLoading={isLoading}\n                  isMobile={false}\n                />\n              </>\n            ) : (\n              <>\n                <div className=\"flex items-center justify-between mb-6\">\n                  <button\n                    onClick={() => setShowSignup(false)}\n                    className=\"text-gray-400 hover:text-gray-600\"\n                    type=\"button\"\n                    aria-label=\"Go back to signup options\"\n                  >\n                    <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n                    </svg>\n                  </button>\n                </div>\n\n                {/* Signup Form */}\n                <SignupForm\n                  onSubmit={handleSignupSubmit}\n                  onGoogleSignIn={handleGoogleSignIn}\n                  onChange={handleSignupChange}\n                  signupData={signupData}\n                  confirmPassword={confirmPassword}\n                  signupErrors={signupErrors}\n                  error={error}\n                  isLoading={isLoading}\n                  usernameCheckLoading={usernameCheckLoading}\n                  usernameAvailable={usernameAvailable}\n                  isMobile={false}\n                />\n              </>\n            )}\n          </div>\n\n          {/* Legal Text */}\n          <p className=\"text-sm text-gray-900 text-center\">\n            By continuing, you are agreeing to our{' '}\n            <Link href=\"/terms\" className=\"text-[#007AFF] hover:underline\">Terms of Service</Link>\n            {' '}and{' '}\n            <Link href=\"/privacy\" className=\"text-[#007AFF] hover:underline\">Privacy Policy</Link>\n            .\n          </p>\n        </div>\n      </main>\n\n      {/* Footer */}\n      <LandingFooter className={(showLogin || showSignup) ? 'hidden md:block' : ''} />\n\n      {/* PWA Install Prompt - Always show on mobile when in login/signup mode */}\n      <PWAInstallPrompt alwaysShowOnMobile={showLogin || showSignup} />\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/Layout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/LeftSidebar.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ChevronRight' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Link' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 8,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Image' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 9,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'profile' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 15,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'stats' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 16,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 17,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useAuth } from '@/hooks/useAuth';\nimport { useState, useEffect } from 'react';\nimport { firebaseApi } from '@/lib/api';\nimport { UserProfile, UserStats } from '@/types';\nimport { ChevronRight } from 'lucide-react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport DailyGoals from './DailyGoals';\nimport { StreakCard } from './StreakCard';\n\nfunction LeftSidebar() {\n  const { user } = useAuth();\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [stats, setStats] = useState<UserStats | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const loadUserData = async () => {\n      if (user?.username) {\n        try {\n          setIsLoading(true);\n          const [profileData, statsData] = await Promise.all([\n            firebaseApi.user.getUserProfile(user.username),\n            firebaseApi.user.getUserStats(user.id)\n          ]);\n          setProfile(profileData);\n          setStats(statsData);\n        } catch (error) {\n          console.error('Failed to load user data:', error);\n          // Set default values if user data doesn't exist yet\n          setProfile({\n            id: user.id,\n            username: user.username,\n            name: user.name,\n            bio: '',\n            location: '',\n            profilePicture: undefined,\n            followersCount: 0,\n            followingCount: 0,\n            totalHours: 0,\n            isFollowing: false,\n            isPrivate: false,\n            createdAt: new Date(),\n            updatedAt: new Date()\n          });\n          setStats({\n            totalHours: 0,\n            weeklyHours: 0,\n            monthlyHours: 0,\n            sessionsThisWeek: 0,\n            sessionsThisMonth: 0,\n            currentStreak: 0,\n            longestStreak: 0,\n            averageSessionDuration: 0,\n            mostProductiveHour: 14\n          });\n        } finally {\n          setIsLoading(false);\n        }\n      }\n    };\n\n    loadUserData();\n  }, [user]);\n  return (\n    <aside className=\"hidden lg:block w-[340px] flex-shrink-0\" aria-label=\"User sidebar\">\n      <div className=\"space-y-4 h-full overflow-y-auto scrollbar-hide pt-12 pb-6\">\n        {/* Streak Card */}\n        {user && <StreakCard userId={user.id} variant=\"compact\" showProgress={false} />}\n\n        {/* Daily Goals */}\n        <DailyGoals />\n      </div>\n    </aside>\n  );\n}\n\nexport default LeftSidebar;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/LikesModal.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/LoginForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ManualEntry.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 120,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 120,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3595, 3598], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3595, 3598], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { SessionFormData, Project } from '@/types';\nimport { parseLocalDateTime } from '@/lib/utils';\nimport { ERROR_MESSAGES } from '@/config/errorMessages';\n\ninterface ManualEntryProps {\n  onSave: (data: SessionFormData) => Promise<void>;\n  onCancel: () => void;\n  isLoading?: boolean;\n}\n\nconst TAGS = [\n  'Study',\n  'Work',\n  'Side Project',\n  'Reading',\n  'Learning',\n  'Exercise',\n  'Creative',\n  'Other',\n];\n\nconst PRIVACY_OPTIONS = [\n  { value: 'everyone', label: 'Everyone', description: 'Visible to all users' },\n  {\n    value: 'followers',\n    label: 'Followers',\n    description: 'Visible to your followers',\n  },\n  { value: 'private', label: 'Only You', description: 'Private to you only' },\n];\n\nexport const ManualEntry: React.FC<ManualEntryProps> = ({\n  onSave,\n  onCancel,\n  isLoading = false,\n}) => {\n  const [formData, setFormData] = useState<SessionFormData>({\n    activityId: '',\n    projectId: '',\n    title: '',\n    description: '',\n    duration: 0,\n    startTime: new Date(),\n    tags: [],\n    visibility: 'everyone',\n    howFelt: 3,\n    privateNotes: '',\n  });\n\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  // Time inputs\n  const [durationHours, setDurationHours] = useState(0);\n  const [durationMinutes, setDurationMinutes] = useState(0);\n  const [durationSeconds, setDurationSeconds] = useState(0);\n  const [startDate, setStartDate] = useState(\n    new Date().toISOString().split('T')[0]\n  );\n  const [startTime, setStartTime] = useState('12:00');\n\n  // TODO: Implement Firebase API calls\n  // Helper function to get auth token\n  const getAuthToken = (): string => {\n    // For now, return empty string since we're not using Firebase sessions yet\n    return '';\n  };\n\n  // Load projects on mount\n  useEffect(() => {\n    const loadProjects = async () => {\n      try {\n        const _token = getAuthToken();\n        // TODO: Load projects from Firebase\n        const projectList: Project[] = []; // await mockProjectApiLocal.getProjects(token);\n        setProjects(projectList);\n      } catch (error) {\n        console.error('Failed to load projects:', error);\n      }\n    };\n\n    loadProjects();\n  }, []);\n\n  // Update duration when time inputs change\n  useEffect(() => {\n    const totalSeconds =\n      durationHours * 3600 + durationMinutes * 60 + durationSeconds;\n    setFormData(prev => ({ ...prev, duration: totalSeconds }));\n  }, [durationHours, durationMinutes, durationSeconds]);\n\n  // Update start time when date/time inputs change\n  useEffect(() => {\n    // Parse date and time in local timezone to avoid UTC interpretation issues\n    const dateTime = parseLocalDateTime(startDate || '', startTime || '00:00');\n    setFormData(prev => ({ ...prev, startTime: dateTime }));\n  }, [startDate, startTime]);\n\n  // Generate smart title based on time of day and project\n  useEffect(() => {\n    if (!formData.title && formData.projectId) {\n      const project = projects.find(p => p.id === formData.projectId);\n      const hour = new Date().getHours();\n\n      let timeOfDay = '';\n      if (hour < 12) timeOfDay = 'Morning';\n      else if (hour < 17) timeOfDay = 'Afternoon';\n      else timeOfDay = 'Evening';\n\n      const smartTitle = project\n        ? `${timeOfDay} ${project.name} Session`\n        : `${timeOfDay} Work Session`;\n      setFormData(prev => ({ ...prev, title: smartTitle }));\n    }\n  }, [formData.projectId, formData.title, projects]);\n\n  const handleInputChange = (field: keyof SessionFormData, value: any) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const handleTagToggle = (tag: string) => {\n    const tags = formData.tags || [];\n    const isSelected = tags.includes(tag);\n    const newTags = isSelected ? tags.filter(t => t !== tag) : [...tags, tag];\n\n    setFormData(prev => ({ ...prev, tags: newTags }));\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.projectId) {\n      newErrors.projectId = 'Please select a project';\n    }\n\n    if (!formData.title.trim()) {\n      newErrors.title = 'Please enter a session title';\n    }\n\n    if (formData.duration <= 0) {\n      newErrors.duration = 'Duration must be greater than 0';\n    }\n\n    if (!startDate) {\n      newErrors.startDate = 'Please select a date';\n    }\n\n    if (!startTime) {\n      newErrors.startTime = 'Please select a time';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm()) {\n      return;\n    }\n\n    try {\n      await onSave(formData);\n    } catch (error) {\n      console.error('Failed to save session:', error);\n      setErrors({ submit: ERROR_MESSAGES.SESSION_SAVE_FAILED });\n    }\n  };\n\n  const formatDuration = (seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n\n    if (hours > 0) {\n      return `${hours}h ${minutes}m ${secs}s`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${secs}s`;\n    } else {\n      return `${secs}s`;\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white rounded-lg w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <div className=\"p-6\">\n          <h2 className=\"text-2xl font-bold mb-6\">Add Manual Session</h2>\n\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Project Selection */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Project *\n              </label>\n              <select\n                value={formData.projectId}\n                onChange={e => handleInputChange('projectId', e.target.value)}\n                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                  errors.projectId ? 'border-red-500' : 'border-gray-300'\n                }`}\n                disabled={isLoading}\n              >\n                <option value=\"\">Select a project...</option>\n                {projects.map(project => (\n                  <option key={project.id} value={project.id}>\n                    {project.name}\n                  </option>\n                ))}\n              </select>\n              {errors.projectId && (\n                <p className=\"text-red-500 text-sm mt-1\">{errors.projectId}</p>\n              )}\n            </div>\n\n            {/* Session Title */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Session Title *\n              </label>\n              <input\n                type=\"text\"\n                value={formData.title}\n                onChange={e => handleInputChange('title', e.target.value)}\n                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                  errors.title ? 'border-red-500' : 'border-gray-300'\n                }`}\n                placeholder=\"What did you work on?\"\n                disabled={isLoading}\n              />\n              {errors.title && (\n                <p className=\"text-red-500 text-sm mt-1\">{errors.title}</p>\n              )}\n            </div>\n\n            {/* Date and Time */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Date *\n                </label>\n                <input\n                  type=\"date\"\n                  value={startDate}\n                  onChange={e => setStartDate(e.target.value)}\n                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                    errors.startDate ? 'border-red-500' : 'border-gray-300'\n                  }`}\n                  disabled={isLoading}\n                />\n                {errors.startDate && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {errors.startDate}\n                  </p>\n                )}\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Time *\n                </label>\n                <select\n                  value={startTime}\n                  onChange={e => setStartTime(e.target.value)}\n                  className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                    errors.startTime ? 'border-red-500' : 'border-gray-300'\n                  }`}\n                  disabled={isLoading}\n                >\n                  {Array.from({ length: 48 }, (_, i) => {\n                    const hour = Math.floor(i / 2);\n                    const minute = (i % 2) * 30;\n                    const timeString = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\n                    return (\n                      <option key={i} value={timeString}>\n                        {timeString}\n                      </option>\n                    );\n                  })}\n                </select>\n                {errors.startTime && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {errors.startTime}\n                  </p>\n                )}\n              </div>\n            </div>\n\n            {/* Duration Input */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Duration *\n              </label>\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <label className=\"block text-xs text-gray-500 mb-1\">\n                    Hours\n                  </label>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"24\"\n                    value={durationHours}\n                    onChange={e =>\n                      setDurationHours(parseInt(e.target.value) || 0)\n                    }\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    disabled={isLoading}\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-xs text-gray-500 mb-1\">\n                    Minutes\n                  </label>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"59\"\n                    value={durationMinutes}\n                    onChange={e =>\n                      setDurationMinutes(parseInt(e.target.value) || 0)\n                    }\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    disabled={isLoading}\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-xs text-gray-500 mb-1\">\n                    Seconds\n                  </label>\n                  <input\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"59\"\n                    value={durationSeconds}\n                    onChange={e =>\n                      setDurationSeconds(parseInt(e.target.value) || 0)\n                    }\n                    className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    disabled={isLoading}\n                  />\n                </div>\n              </div>\n              {formData.duration > 0 && (\n                <p className=\"text-sm text-gray-600 mt-2\">\n                  Total: {formatDuration(formData.duration)}\n                </p>\n              )}\n              {errors.duration && (\n                <p className=\"text-red-500 text-sm mt-1\">{errors.duration}</p>\n              )}\n            </div>\n\n            {/* Description */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Description\n              </label>\n              <textarea\n                value={formData.description || ''}\n                onChange={e => handleInputChange('description', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                rows={3}\n                placeholder=\"What did you accomplish?\"\n                disabled={isLoading}\n              />\n            </div>\n\n            {/* Tags */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Tags\n              </label>\n              <div className=\"flex flex-wrap gap-2\">\n                {TAGS.map(tag => (\n                  <button\n                    key={tag}\n                    type=\"button\"\n                    onClick={() => handleTagToggle(tag)}\n                    className={`px-3 py-1 rounded-full text-sm transition-colors ${\n                      (formData.tags || []).includes(tag)\n                        ? 'bg-blue-600 text-white'\n                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n                    }`}\n                    disabled={isLoading}\n                  >\n                    {tag}\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Privacy Settings */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Privacy\n              </label>\n              <select\n                value={formData.visibility}\n                onChange={e =>\n                  handleInputChange(\n                    'visibility',\n                    e.target.value as 'everyone' | 'followers' | 'private'\n                  )\n                }\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                disabled={isLoading}\n              >\n                {PRIVACY_OPTIONS.map(option => (\n                  <option key={option.value} value={option.value}>\n                    {option.label} - {option.description}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            {/* How did it feel? */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                How did it feel? (Private)\n              </label>\n              <div className=\"flex space-x-2\">\n                {[1, 2, 3, 4, 5].map(rating => (\n                  <button\n                    key={rating}\n                    type=\"button\"\n                    onClick={() => handleInputChange('howFelt', rating)}\n                    className={`w-10 h-10 rounded-full border-2 transition-colors ${\n                      formData.howFelt === rating\n                        ? 'border-blue-500 bg-blue-500 text-white'\n                        : 'border-gray-300 text-gray-600 hover:border-gray-400'\n                    }`}\n                    disabled={isLoading}\n                  >\n                    {rating}\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Private Notes */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Private Notes\n              </label>\n              <textarea\n                value={formData.privateNotes || ''}\n                onChange={e =>\n                  handleInputChange('privateNotes', e.target.value)\n                }\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                rows={2}\n                placeholder=\"Any private notes about this session...\"\n                disabled={isLoading}\n              />\n            </div>\n\n            {/* Error Messages */}\n            {errors.submit && (\n              <div className=\"text-red-500 text-sm\">{errors.submit}</div>\n            )}\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end space-x-3 pt-4 border-t\">\n              <button\n                type=\"button\"\n                onClick={onCancel}\n                className=\"px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors\"\n                disabled={isLoading}\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                disabled={isLoading}\n                className=\"px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-300 transition-colors\"\n              >\n                {isLoading ? 'Saving...' : 'Save Session'}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ManualSessionRecorder.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SessionFormData' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Link' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 11,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'compressImage' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 13,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 37
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'title'. Either include it or remove the dependency array.",
        "line": 143,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 143,
        "endColumn": 27,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [projectId, projects, title]",
            "fix": {
              "range": [4618, 4639],
              "text": "[projectId, projects, title]"
            }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { useQueryClient } from '@tanstack/react-query';\nimport { SessionFormData, Project, CreateSessionData } from '@/types';\nimport { firebaseApi } from '@/lib/api';\nimport { useAuth } from '@/hooks/useAuth';\nimport { toast } from 'sonner';\nimport { Image as ImageIcon, X } from 'lucide-react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { uploadImages, compressImage } from '@/lib/imageUpload';\nimport { parseLocalDateTime } from '@/lib/utils';\nimport Header from '@/components/HeaderComponent';\nimport { debug } from '@/lib/debug';\n\ninterface DeleteConfirmProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onDelete: () => void;\n}\n\nconst DeleteConfirm: React.FC<DeleteConfirmProps> = ({\n  isOpen,\n  onClose,\n  onDelete,\n}) => {\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div\n        className=\"fixed inset-0 bg-black/60 z-50 md:hidden flex items-center justify-center p-4\"\n        onClick={onClose}\n      >\n        {/* Modal */}\n        <div\n          className=\"bg-white rounded-lg p-5 w-full max-w-sm shadow-xl\"\n          onClick={e => e.stopPropagation()}\n        >\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n            Delete Image?\n          </h3>\n          <p className=\"text-sm text-gray-600 mb-6\">\n            This image will be removed from your session.\n          </p>\n\n          <div className=\"flex gap-3\">\n            <button\n              onClick={onClose}\n              className=\"flex-1 px-4 py-2.5 bg-gray-200 text-gray-800 rounded-lg font-medium hover:bg-gray-300 active:bg-gray-300 transition-colors\"\n            >\n              Cancel\n            </button>\n            <button\n              onClick={() => {\n                onDelete();\n                onClose();\n              }}\n              className=\"flex-1 px-4 py-2.5 bg-red-600 text-white rounded-lg font-medium hover:bg-red-700 active:bg-red-700 transition-colors\"\n            >\n              Delete\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default function ManualSessionRecorder() {\n  const router = useRouter();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  // Form state\n  const [projectId, setProjectId] = useState('');\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [visibility, setVisibility] = useState<\n    'everyone' | 'followers' | 'private'\n  >('everyone');\n  const [privateNotes, _setPrivateNotes] = useState('');\n\n  // Manual time inputs\n  const [sessionDate, setSessionDate] = useState(\n    new Date().toISOString().split('T')[0]\n  );\n  const [startTime, setStartTime] = useState(() => {\n    const now = new Date();\n    const hours = String(now.getHours()).padStart(2, '0');\n    const minutes = String(now.getMinutes()).padStart(2, '0');\n    return `${hours}:${minutes}`;\n  });\n  const [_endTime, _setEndTime] = useState('10:00');\n  const [manualDurationHours, setManualDurationHours] = useState('1');\n  const [manualDurationMinutes, setManualDurationMinutes] = useState('0');\n\n  // Image upload state\n  const [selectedImages, setSelectedImages] = useState<File[]>([]);\n  const [imagePreviewUrls, setImagePreviewUrls] = useState<string[]>([]);\n  const [isUploadingImages, setIsUploadingImages] = useState(false);\n  const [actionSheetIndex, setActionSheetIndex] = useState<number | null>(null);\n\n  // Load projects on mount\n  useEffect(() => {\n    const loadProjects = async () => {\n      if (!user) return;\n\n      try {\n        const projectList = await firebaseApi.project.getProjects();\n        setProjects(projectList);\n      } catch (error) {\n        debug.error('ManualSessionRecorder - Failed to load projects:', error);\n      }\n    };\n\n    loadProjects();\n  }, [user]);\n\n  // Auto-generate title based on time of day and project\n  useEffect(() => {\n    if (!title && projectId) {\n      const project = projects.find(p => p.id === projectId);\n      const hour = new Date().getHours();\n\n      let timeOfDay = '';\n      if (hour < 12) timeOfDay = 'Morning';\n      else if (hour < 17) timeOfDay = 'Afternoon';\n      else timeOfDay = 'Evening';\n\n      const smartTitle = project\n        ? `${timeOfDay} ${project.name} Session`\n        : `${timeOfDay} Work Session`;\n      setTitle(smartTitle);\n    }\n  }, [projectId, projects]);\n\n  const handleImageSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n\n    if (files.length + selectedImages.length > 3) {\n      alert('Maximum 3 images allowed');\n      return;\n    }\n\n    const validFiles: File[] = [];\n    const previewUrls: string[] = [];\n\n    for (const file of files) {\n      try {\n        // Convert HEIC to JPEG first\n        let processedFile = file;\n\n        // Check if it's HEIC and convert\n        const isHeic =\n          file.name.toLowerCase().endsWith('.heic') ||\n          file.name.toLowerCase().endsWith('.heif') ||\n          file.type === 'image/heic' ||\n          file.type === 'image/heif';\n\n        if (isHeic) {\n          try {\n            // Dynamically import heic2any - handle both default and named exports\n            const heic2anyModule = await import('heic2any');\n            const heic2any = heic2anyModule.default || heic2anyModule;\n\n            const convertedBlob = await heic2any({\n              blob: file,\n              toType: 'image/jpeg',\n              quality: 0.9,\n            });\n            const blob = Array.isArray(convertedBlob)\n              ? convertedBlob[0]\n              : convertedBlob;\n\n            if (!blob) {\n              throw new Error('Failed to convert HEIC file');\n            }\n\n            processedFile = new File(\n              [blob],\n              file.name.replace(/\\.heic$/i, '.jpg').replace(/\\.heif$/i, '.jpg'),\n              { type: 'image/jpeg' }\n            );\n          } catch (error) {\n            debug.error(\n              'ManualSessionRecorder - Error converting HEIC:',\n              error\n            );\n            // More helpful error message\n            alert(\n              `HEIC conversion is currently unavailable. Please convert ${file.name} to JPG or PNG before uploading, or try refreshing the page.`\n            );\n            continue;\n          }\n        }\n\n        if (!processedFile.type.startsWith('image/')) {\n          alert(`${file.name} is not an image file`);\n          continue;\n        }\n\n        if (processedFile.size > 10 * 1024 * 1024) {\n          alert(`${file.name} is too large. Maximum size is 10MB`);\n          continue;\n        }\n\n        validFiles.push(processedFile);\n        const previewUrl = URL.createObjectURL(processedFile);\n        previewUrls.push(previewUrl);\n      } catch (error) {\n        debug.error('ManualSessionRecorder - Error processing image:', error);\n        alert(`Failed to process ${file.name}`);\n      }\n    }\n\n    if (validFiles.length > 0) {\n      setSelectedImages(prev => [...prev, ...validFiles]);\n      setImagePreviewUrls(prev => [...prev, ...previewUrls]);\n    }\n  };\n\n  const handleRemoveImage = (index: number) => {\n    const imageUrl = imagePreviewUrls[index];\n    if (imageUrl) {\n      URL.revokeObjectURL(imageUrl);\n    }\n    setSelectedImages(prev => prev.filter((_, i) => i !== index));\n    setImagePreviewUrls(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const calculateDuration = (): number => {\n    // Use manual duration input\n    const hours = parseInt(manualDurationHours) || 0;\n    const minutes = parseInt(manualDurationMinutes) || 0;\n    return hours * 3600 + minutes * 60;\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!projectId) {\n      newErrors.projectId = 'Please select a project';\n    }\n\n    if (!title.trim()) {\n      newErrors.title = 'Please enter a session title';\n    }\n\n    const duration = calculateDuration();\n    if (duration <= 0) {\n      newErrors.duration = 'Duration must be greater than 0';\n    }\n\n    if (!sessionDate) {\n      newErrors.sessionDate = 'Please select a date';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!validateForm() || !user) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      const duration = calculateDuration();\n\n      // Parse the session date and start time in local timezone\n      // NOTE: Using parseLocalDateTime to avoid UTC interpretation issues\n      if (!sessionDate || !startTime) {\n        setErrors({ sessionDate: 'Date and time are required' });\n        setIsLoading(false);\n        return;\n      }\n      const sessionDateTime = parseLocalDateTime(sessionDate, startTime);\n\n      // Upload images first if any\n      let imageUrls: string[] = [];\n      if (selectedImages.length > 0) {\n        setIsUploadingImages(true);\n        try {\n          const uploadResults = await uploadImages(selectedImages);\n          imageUrls = uploadResults.map(result => result.url);\n        } catch (error) {\n          debug.error(\n            'ManualSessionRecorder - Failed to upload images:',\n            error\n          );\n          setErrors({ submit: 'Failed to upload images. Please try again.' });\n          setIsUploadingImages(false);\n          setIsLoading(false);\n          return;\n        }\n        setIsUploadingImages(false);\n      }\n\n      const formData: CreateSessionData = {\n        activityId: '',\n        projectId,\n        title,\n        description,\n        duration,\n        startTime: sessionDateTime,\n        tags: [],\n        visibility,\n        privateNotes,\n        images: imageUrls,\n      };\n\n      // Create session with post\n      await firebaseApi.session.createSessionWithPost(\n        formData,\n        description,\n        visibility\n      );\n\n      // Invalidate caches to refresh UI immediately\n      if (user) {\n        queryClient.invalidateQueries({\n          queryKey: ['user', 'sessions', user.id],\n        });\n        queryClient.invalidateQueries({ queryKey: ['user', 'stats', user.id] });\n        queryClient.invalidateQueries({ queryKey: ['streak', user.id] });\n        queryClient.invalidateQueries({ queryKey: ['feed'] });\n        queryClient.invalidateQueries({ queryKey: ['sessions', 'feed'] });\n      }\n\n      // Show success message\n      toast.success('Session created successfully!');\n\n      // Redirect to home feed\n      router.push('/');\n    } catch (error) {\n      debug.error(\n        'ManualSessionRecorder - Failed to create manual session:',\n        error\n      );\n      toast.error('Failed to create session. Please try again.');\n      setErrors({ submit: 'Failed to create session. Please try again.' });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Main Header - hidden on mobile */}\n      <div className=\"hidden md:block\">\n        <Header />\n      </div>\n\n      {/* Header with Cancel and Save Session title */}\n      <div className=\"max-w-2xl mx-auto px-4 sm:px-6 pt-4\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <button\n            onClick={() => router.back()}\n            className=\"text-[#007AFF] hover:text-[#0051D5] font-semibold text-base\"\n            disabled={isLoading}\n          >\n            Cancel\n          </button>\n          <h3 className=\"text-base font-semibold text-gray-900\">\n            Log Manual Session\n          </h3>\n          <div className=\"w-16\"></div> {/* Spacer for centering */}\n        </div>\n      </div>\n\n      {/* Form */}\n      <div className=\"max-w-2xl mx-auto px-4 sm:px-6\">\n        <form onSubmit={handleSubmit} className=\"space-y-3 sm:space-y-4\">\n          {/* Session Title */}\n          <input\n            type=\"text\"\n            value={title}\n            onChange={e => setTitle(e.target.value)}\n            className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] text-base ${\n              errors.title ? 'border-red-500' : 'border-gray-300'\n            }`}\n            placeholder=\"Afternoon Work Session\"\n            disabled={isLoading}\n          />\n          {errors.title && (\n            <p className=\"text-red-500 text-sm -mt-2\">{errors.title}</p>\n          )}\n\n          {/* Description */}\n          <textarea\n            value={description}\n            onChange={e => setDescription(e.target.value)}\n            rows={3}\n            className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] text-base\"\n            placeholder=\"How'd it go? Share more about your session.\"\n            disabled={isLoading}\n          />\n\n          {/* Project Selection */}\n          <select\n            value={projectId}\n            onChange={e => setProjectId(e.target.value)}\n            className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] bg-white text-base ${\n              errors.projectId ? 'border-red-500' : 'border-gray-300'\n            }`}\n            disabled={isLoading}\n          >\n            <option value=\"\">Select an activity</option>\n            {projects.map(project => (\n              <option key={project.id} value={project.id}>\n                {project.name}\n              </option>\n            ))}\n          </select>\n          {errors.projectId && (\n            <p className=\"text-red-500 text-sm -mt-2\">{errors.projectId}</p>\n          )}\n\n          {/* Image Upload */}\n          <div className=\"max-w-md\">\n            <div className=\"space-y-3\">\n              {/* Image Previews */}\n              {imagePreviewUrls.length > 0 && (\n                <div className=\"grid grid-cols-3 gap-2\">\n                  {imagePreviewUrls.map((url, index) => (\n                    <div\n                      key={index}\n                      className=\"relative aspect-square rounded-lg overflow-hidden bg-gray-100\"\n                    >\n                      <Image\n                        src={url}\n                        alt={`Preview ${index + 1}`}\n                        width={300}\n                        height={300}\n                        quality={90}\n                        className=\"w-full h-full object-cover\"\n                        unoptimized\n                        onClick={() => setActionSheetIndex(index)}\n                      />\n                      {/* Desktop X button */}\n                      <button\n                        type=\"button\"\n                        onClick={() => handleRemoveImage(index)}\n                        className=\"hidden md:block absolute top-1 right-1 p-0.5 text-white hover:text-red-500 transition-colors\"\n                        aria-label=\"Remove image\"\n                        style={{\n                          filter: 'drop-shadow(0 1px 2px rgb(0 0 0 / 0.9))',\n                        }}\n                      >\n                        <X\n                          className=\"w-5 h-5\"\n                          strokeWidth={3}\n                          aria-hidden=\"true\"\n                        />\n                      </button>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              {/* Delete confirmation modal */}\n              <DeleteConfirm\n                isOpen={actionSheetIndex !== null}\n                onClose={() => setActionSheetIndex(null)}\n                onDelete={() => {\n                  if (actionSheetIndex !== null) {\n                    handleRemoveImage(actionSheetIndex);\n                    setActionSheetIndex(null);\n                  }\n                }}\n              />\n\n              {/* Upload Button */}\n              {selectedImages.length < 3 && (\n                <label className=\"flex flex-col items-center justify-center gap-2 px-8 py-8 border-[3px] border-dashed border-[#007AFF] rounded-lg cursor-pointer hover:border-[#0051D5] hover:bg-gray-50 transition-colors max-w-[240px]\">\n                  <ImageIcon className=\"w-8 h-8 text-[#007AFF]\" />\n                  <span className=\"text-sm font-medium text-[#007AFF]\">\n                    {imagePreviewUrls.length === 0\n                      ? 'Add images'\n                      : `Add ${3 - imagePreviewUrls.length} more`}\n                  </span>\n                  <input\n                    type=\"file\"\n                    accept=\"image/*,.heic,.heif\"\n                    multiple\n                    onChange={handleImageSelect}\n                    className=\"hidden\"\n                  />\n                </label>\n              )}\n            </div>\n          </div>\n\n          {/* Date and Time Section */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n              Date & Time\n            </label>\n\n            <div className=\"space-y-3\">\n              {/* Date */}\n              <div>\n                <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                  Date\n                </label>\n                <input\n                  type=\"date\"\n                  value={sessionDate}\n                  onChange={e => setSessionDate(e.target.value)}\n                  max={new Date().toISOString().split('T')[0]}\n                  className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] text-sm ${\n                    errors.sessionDate ? 'border-red-500' : 'border-gray-300'\n                  }`}\n                  disabled={isLoading}\n                  required\n                />\n                {errors.sessionDate && (\n                  <p className=\"text-red-500 text-sm mt-1\">\n                    {errors.sessionDate}\n                  </p>\n                )}\n              </div>\n\n              {/* Start Time */}\n              <div>\n                <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                  Start Time\n                </label>\n                <input\n                  type=\"time\"\n                  value={startTime}\n                  onChange={e => setStartTime(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] text-sm\"\n                  disabled={isLoading}\n                />\n              </div>\n\n              {/* Duration */}\n              <div>\n                <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                  Duration\n                </label>\n                <div className=\"flex gap-3\">\n                  <div className=\"flex-1\">\n                    <input\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"23\"\n                      value={manualDurationHours}\n                      onChange={e => setManualDurationHours(e.target.value)}\n                      className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] text-sm ${\n                        errors.duration ? 'border-red-500' : 'border-gray-300'\n                      }`}\n                      placeholder=\"Hours\"\n                      disabled={isLoading}\n                    />\n                  </div>\n                  <div className=\"flex-1\">\n                    <input\n                      type=\"number\"\n                      min=\"0\"\n                      max=\"59\"\n                      value={manualDurationMinutes}\n                      onChange={e => setManualDurationMinutes(e.target.value)}\n                      className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] text-sm ${\n                        errors.duration ? 'border-red-500' : 'border-gray-300'\n                      }`}\n                      placeholder=\"Minutes\"\n                      disabled={isLoading}\n                    />\n                  </div>\n                </div>\n                {errors.duration && (\n                  <p className=\"text-red-500 text-sm mt-1\">{errors.duration}</p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* Visibility */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Visibility\n            </label>\n            <select\n              value={visibility}\n              onChange={e =>\n                setVisibility(\n                  e.target.value as 'everyone' | 'followers' | 'private'\n                )\n              }\n              className=\"w-full pl-3 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] appearance-none bg-white min-h-[44px]\"\n              style={{\n                backgroundImage:\n                  \"url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='%23666' d='M6 9L1 4h10z'/%3E%3C/svg%3E\\\")\",\n                backgroundRepeat: 'no-repeat',\n                backgroundPosition: 'right 0.75rem center',\n              }}\n              disabled={isLoading}\n            >\n              <option value=\"everyone\">Everyone</option>\n              <option value=\"followers\">Followers</option>\n              <option value=\"private\">Only You</option>\n            </select>\n          </div>\n\n          {/* Error Message */}\n          {errors.submit && (\n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n              <p className=\"text-red-600 text-sm\">{errors.submit}</p>\n            </div>\n          )}\n\n          {/* Save Button */}\n          <button\n            type=\"submit\"\n            className=\"w-full px-4 py-3 bg-[#007AFF] text-white rounded-lg hover:bg-[#0051D5] transition-colors disabled:opacity-50 disabled:cursor-not-allowed font-semibold text-base mt-4\"\n            disabled={isLoading || isUploadingImages}\n          >\n            {isUploadingImages\n              ? 'Uploading...'\n              : isLoading\n                ? 'Creating...'\n                : 'Create Session'}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/MobileHeader.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/NotificationIcon.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/NotificationSettings.tsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: ')' expected.",
        "line": 69,
        "column": 3
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { NotificationPreferences } from '@/types';\nimport { Button } from '@/components/ui/button';\nimport { Switch } from '@/components/ui/switch';\nimport {\n  SettingsSection,\n  SettingsHeader,\n  SettingsCard,\n  SettingsCardHeader,\n  SettingsCardContent,\n  SettingsRow,\n  SettingsRowGroup\n} from '@/components/ui/settings-section';\nimport { Bell, Mail, BellRing, Heart, MessageCircle, UserPlus, Trophy, Flame, Users } from 'lucide-react';\nimport { debug } from '@/lib/debug';\n\ninterface NotificationSettingsProps {\n  onClose?: () => void;\n  isModal?: boolean;\n}\n\nconst defaultPreferences: NotificationPreferences = {\n  email: {\n    follows: true,\n    supports: true,\n    comments: true,\n    mentions: true,\n    replies: true,\n    achievements: true,\n    streaks: true,\n    groupPosts: false,\n    challenges: true,\n  },\n  inApp: {\n    follows: true,\n    supports: true,\n    comments: true,\n    mentions: true,\n    replies: true,\n    achievements: true,\n    streaks: true,\n    groupPosts: true,\n    challenges: true,\n  }\n};\n\nexport const NotificationSettings: React.FC<NotificationSettingsProps> = ({ \n  onClose, \n  isModal = false \n}) => {\n  const [preferences, setPreferences] = useState<NotificationPreferences>(defaultPreferences);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n\n  const loadPreferences = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      // TODO: Implement notification preferences API in firebaseUserApi\n      // Need to create getNotificationPreferences() and updateNotificationPreferences() methods\n      // For now, use defaults\n      setPreferences(defaultPreferences);\n    } catch (error) {\n      debug.error('NotificationSettings - Failed to load notification preferences:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleToggle = (\n    category: 'email' | 'inApp',\n    key: keyof NotificationPreferences['email']\n  ) => {\n    setPreferences(prev => ({\n      ...prev,\n      [category]: {\n        ...prev[category],\n        [key]: !prev[category][key]\n      }\n    }));\n  };\n\n  const handleSave = async () => {\n    try {\n      setIsSaving(true);\n      // TODO: Implement notification preferences save API in firebaseUserApi\n      // Need updateNotificationPreferences() method to persist to Firestore\n      alert('Notification preferences saved successfully!');\n    } catch (error) {\n      debug.error('NotificationSettings - Failed to save notification preferences:', error);\n      alert('Failed to save notification preferences');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const NotificationToggle = ({\n    label,\n    description,\n    emailEnabled,\n    inAppEnabled,\n    settingKey\n  }: {\n    label: string;\n    description: string;\n    emailEnabled: boolean;\n    inAppEnabled: boolean;\n    settingKey: keyof NotificationPreferences['email'];\n  }) => (\n    <SettingsRow label={label} description={description}>\n      <div className=\"flex gap-4 items-center\">\n        <div className=\"flex items-center gap-2\">\n          <Mail className=\"w-4 h-4 text-gray-400\" />\n          <Switch\n            checked={emailEnabled}\n            onCheckedChange={() => handleToggle('email', settingKey)}\n          />\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Bell className=\"w-4 h-4 text-gray-400\" />\n          <Switch\n            checked={inAppEnabled}\n            onCheckedChange={() => handleToggle('inApp', settingKey)}\n          />\n        </div>\n      </div>\n    </SettingsRow>\n  );\n\n  if (isLoading) {\n    return (\n      <SettingsSection>\n        {[1, 2].map((i) => (\n          <SettingsCard key={i} className=\"animate-pulse\">\n            <SettingsCardHeader title=\"\" description=\"\" />\n            <SettingsCardContent>\n              <div className=\"space-y-3\">\n                <div className=\"h-10 bg-gray-200 rounded\" />\n                <div className=\"h-10 bg-gray-200 rounded\" />\n                <div className=\"h-10 bg-gray-200 rounded\" />\n              </div>\n            </SettingsCardContent>\n          </SettingsCard>\n        ))}\n      </SettingsSection>\n    );\n  }\n\n  return (\n    <SettingsSection>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <SettingsHeader\n          icon={BellRing}\n          title=\"Email Notifications\"\n          description=\"Choose how you want to be notified about activity\"\n        />\n        {isModal && onClose && (\n          <Button variant=\"ghost\" onClick={onClose}>\n            Close\n          </Button>\n        )}\n      </div>\n\n      {/* Legend */}\n      <SettingsCard>\n        <SettingsCardContent>\n          <div className=\"flex items-center justify-end gap-6 text-sm text-gray-600\">\n            <div className=\"flex items-center gap-2\">\n              <Mail className=\"w-4 h-4\" />\n              <span>Email</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Bell className=\"w-4 h-4\" />\n              <span>In-App</span>\n            </div>\n          </div>\n        </SettingsCardContent>\n      </SettingsCard>\n\n      {/* Social Notifications */}\n      <SettingsCard>\n        <SettingsCardHeader\n          icon={UserPlus}\n          title=\"Social Notifications\"\n          description=\"Get notified when people interact with you\"\n        />\n        <SettingsCardContent>\n          <SettingsRowGroup>\n            <NotificationToggle\n              label=\"New Followers\"\n              description=\"Someone starts following you\"\n              emailEnabled={preferences.email.follows}\n              inAppEnabled={preferences.inApp.follows}\n              settingKey=\"follows\"\n            />\n            <NotificationToggle\n              label=\"Post Support\"\n              description=\"Someone gives support to your post\"\n              emailEnabled={preferences.email.supports}\n              inAppEnabled={preferences.inApp.supports}\n              settingKey=\"supports\"\n            />\n            <NotificationToggle\n              label=\"Comments\"\n              description=\"Someone comments on your post\"\n              emailEnabled={preferences.email.comments}\n              inAppEnabled={preferences.inApp.comments}\n              settingKey=\"comments\"\n            />\n            <NotificationToggle\n              label=\"Mentions\"\n              description=\"Someone mentions you in a comment\"\n              emailEnabled={preferences.email.mentions}\n              inAppEnabled={preferences.inApp.mentions}\n              settingKey=\"mentions\"\n            />\n            <NotificationToggle\n              label=\"Replies\"\n              description=\"Someone replies to your comment\"\n              emailEnabled={preferences.email.replies}\n              inAppEnabled={preferences.inApp.replies}\n              settingKey=\"replies\"\n            />\n          </SettingsRowGroup>\n        </SettingsCardContent>\n      </SettingsCard>\n\n      {/* Activity Notifications */}\n      <SettingsCard>\n        <SettingsCardHeader\n          icon={Trophy}\n          title=\"Activity Notifications\"\n          description=\"Get notified about your productivity milestones\"\n        />\n        <SettingsCardContent>\n          <SettingsRowGroup>\n            <NotificationToggle\n              label=\"Achievements\"\n              description=\"You unlock a new achievement\"\n              emailEnabled={preferences.email.achievements}\n              inAppEnabled={preferences.inApp.achievements}\n              settingKey=\"achievements\"\n            />\n            <NotificationToggle\n              label=\"Streak Reminders\"\n              description=\"Daily reminder to maintain your streak\"\n              emailEnabled={preferences.email.streaks}\n              inAppEnabled={preferences.inApp.streaks}\n              settingKey=\"streaks\"\n            />\n          </SettingsRowGroup>\n        </SettingsCardContent>\n      </SettingsCard>\n\n      {/* Group Notifications */}\n      <SettingsCard>\n        <SettingsCardHeader\n          icon={Users}\n          title=\"Group & Challenge Notifications\"\n          description=\"Get notified about group activities and challenges\"\n        />\n        <SettingsCardContent>\n          <SettingsRowGroup>\n            <NotificationToggle\n              label=\"Group Posts\"\n              description=\"New posts in your groups\"\n              emailEnabled={preferences.email.groupPosts}\n              inAppEnabled={preferences.inApp.groupPosts}\n              settingKey=\"groupPosts\"\n            />\n            <NotificationToggle\n              label=\"Challenges\"\n              description=\"Challenge invitations and updates\"\n              emailEnabled={preferences.email.challenges}\n              inAppEnabled={preferences.inApp.challenges}\n              settingKey=\"challenges\"\n            />\n          </SettingsRowGroup>\n        </SettingsCardContent>\n      </SettingsCard>\n\n      {/* Save Button */}\n      <div className=\"flex justify-end pt-2\">\n        <Button\n          onClick={handleSave}\n          disabled={isSaving}\n          className=\"min-w-[120px] bg-[#007AFF] hover:bg-[#0051D5]\"\n        >\n          {isSaving ? (\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n              Saving...\n            </div>\n          ) : (\n            'Save Preferences'\n          )}\n        </Button>\n      </div>\n    </SettingsSection>\n  );\n};\n\nexport default NotificationSettings;\n\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/NotificationsPanel.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 60,
        "column": 37,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 60,
        "endColumn": 46
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport {\n  useNotifications,\n  useUnreadCount,\n  useMarkNotificationRead,\n  useMarkAllNotificationsRead,\n  useDeleteNotification,\n  useClearAllNotifications,\n} from '@/hooks/useNotifications';\nimport { useRouter } from 'next/navigation';\nimport { formatDistanceToNow } from 'date-fns';\nimport {\n  Bell,\n  Heart,\n  MessageCircle,\n  UserPlus,\n  Users,\n  Trophy,\n  Reply,\n  AtSign,\n  Check,\n  _X,\n  Trash2,\n} from 'lucide-react';\nimport { Notification } from '@/types';\n\ninterface NotificationsPanelProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst getNotificationIcon = (type: Notification['type']) => {\n  const iconClass = \"w-5 h-5 text-gray-600\";\n\n  switch (type) {\n    case 'follow':\n      return <UserPlus className={iconClass} />;\n    case 'support':\n      return <Heart className={iconClass} />;\n    case 'comment':\n      return <MessageCircle className={iconClass} />;\n    case 'reply':\n      return <Reply className={iconClass} />;\n    case 'mention':\n      return <AtSign className={iconClass} />;\n    case 'group':\n      return <Users className={iconClass} />;\n    case 'challenge':\n      return <Trophy className={iconClass} />;\n    default:\n      return <Bell className={iconClass} />;\n  }\n};\n\n\nexport default function NotificationsPanel({ isOpen, onClose }: NotificationsPanelProps) {\n  // Enable real-time updates for notifications panel\n  const { data: notifications = [], isLoading } = useNotifications({ realtime: true });\n  const unreadCount = useUnreadCount();\n  const markAsReadMutation = useMarkNotificationRead();\n  const markAllAsReadMutation = useMarkAllNotificationsRead();\n  const deleteNotificationMutation = useDeleteNotification();\n  const clearAllNotificationsMutation = useClearAllNotifications();\n  const router = useRouter();\n  const [deletingIds, setDeletingIds] = useState<Set<string>>(new Set());\n  const [hoveredId, setHoveredId] = useState<string | null>(null);\n\n  const handleNotificationClick = (notification: Notification) => {\n    // Close panel and navigate immediately for better UX\n    onClose();\n\n    // Navigate to the link\n    if (notification.linkUrl) {\n      router.push(notification.linkUrl);\n    }\n\n    // Mark as read in the background (don't await) - using React Query mutation\n    if (!notification.isRead) {\n      markAsReadMutation.mutate(notification.id);\n    }\n  };\n\n  const handleDelete = async (e: React.MouseEvent, notificationId: string) => {\n    e.stopPropagation();\n\n    // Get the current mouse position\n    const mouseY = e.clientY;\n\n    setDeletingIds((prev) => new Set(prev).add(notificationId));\n\n    // Use React Query mutation with optimistic updates\n    await deleteNotificationMutation.mutateAsync(notificationId);\n\n    setDeletingIds((prev) => {\n      const next = new Set(prev);\n      next.delete(notificationId);\n      return next;\n    });\n\n    // After deletion, check which notification is now under the mouse cursor\n    const elementAtPoint = document.elementFromPoint(e.client_X, mouseY);\n    const notificationElement = elementAtPoint?.closest('[data-notification-id]');\n    if (notificationElement) {\n      const newNotificationId = notificationElement.getAttribute('data-notification-id');\n      if (newNotificationId) {\n        setHoveredId(newNotificationId);\n      }\n    }\n  };\n\n  const handleMarkAllRead = async () => {\n    await markAllAsReadMutation.mutateAsync();\n  };\n\n  const handleClearAll = async () => {\n    await clearAllNotificationsMutation.mutateAsync();\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div\n        className=\"fixed inset-0 z-40\"\n        onClick={onClose}\n      />\n\n      {/* Dropdown Panel */}\n      <div className=\"absolute top-12 right-0 w-[400px] max-h-[500px] bg-white z-50 shadow-2xl rounded-lg border border-gray-200 flex flex-col\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between px-4 py-3 border-b border-gray-200\">\n          <div className=\"flex items-center gap-2\">\n            <h3 className=\"text-base font-semibold text-gray-900\">Notifications</h3>\n            {unreadCount > 0 && (\n              <span className=\"bg-[#007AFF] text-white text-xs font-semibold px-2 py-0.5 rounded-full\">\n                {unreadCount}\n              </span>\n            )}\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {unreadCount > 0 && (\n              <button\n                onClick={handleMarkAllRead}\n                className=\"text-xs text-[#007AFF] hover:text-[#0051D5] font-medium flex items-center gap-1\"\n              >\n                <Check className=\"w-3 h-3\" />\n                Mark all read\n              </button>\n            )}\n            {notifications.length > 0 && (\n              <button\n                onClick={handleClearAll}\n                className=\"text-xs text-gray-600 hover:text-gray-900 font-medium flex items-center gap-1\"\n              >\n                <Trash2 className=\"w-3 h-3\" />\n                Clear all\n              </button>\n            )}\n          </div>\n        </div>\n\n        {/* Notifications list */}\n        <div className=\"flex-1 overflow-y-auto\">\n          {notifications.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center py-12 text-center px-4\">\n              <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mb-3\">\n                <Bell className=\"w-6 h-6 text-gray-400\" />\n              </div>\n              <p className=\"text-sm text-gray-500\">No notifications yet</p>\n            </div>\n          ) : (\n            <div className=\"divide-y divide-gray-100\">\n              {notifications.map((notification) => (\n                <div\n                  key={notification.id}\n                  data-notification-id={notification.id}\n                  onClick={() => handleNotificationClick(notification)}\n                  onMouseEnter={() => setHoveredId(notification.id)}\n                  onMouseLeave={() => setHoveredId(null)}\n                  className={`px-4 py-3 hover:bg-gray-50 cursor-pointer transition-colors relative ${\n                    !notification.isRead ? 'bg-gray-100' : ''\n                  } ${deletingIds.has(notification.id) ? 'opacity-50' : ''}`}\n                >\n                  <div className=\"flex items-start gap-3\">\n                    {/* Icon */}\n                    <div className=\"flex-shrink-0 w-10 h-10 rounded-full bg-gray-200 flex items-center justify-center\">\n                      {getNotificationIcon(notification.type)}\n                    </div>\n\n                    {/* Content */}\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-semibold text-gray-900\">\n                        {notification.title}\n                      </p>\n                      <p className=\"text-sm text-gray-700 mt-0.5\">\n                        {notification.message}\n                      </p>\n                      <p className=\"text-xs text-gray-500 mt-1\">\n                        {formatDistanceToNow(notification.createdAt, { addSuffix: true })}\n                      </p>\n                    </div>\n\n                    {/* Delete button (shown on hover) or Unread indicator */}\n                    <div className=\"flex-shrink-0\">\n                      {hoveredId === notification.id ? (\n                        <button\n                          onClick={(e) => handleDelete(e, notification.id)}\n                          className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n                          disabled={deletingIds.has(notification.id)}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </button>\n                      ) : (\n                        !notification.isRead && (\n                          <div className=\"w-2 h-2 bg-[#007AFF] rounded-full mt-2\" />\n                        )\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/PWAInstallPrompt.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/PWAInstaller.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'registration' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 11,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 13,
        "column": 19,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 24
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useEffect } from 'react';\n\nexport default function PWAInstaller() {\n  useEffect(() => {\n    if ('serviceWorker' in navigator) {\n      window.addEventListener('load', () => {\n        navigator.serviceWorker\n          .register('/sw.js')\n          .then((registration) => {\n          })\n          .catch((error) => {\n          });\n      });\n    }\n  }, []);\n\n  return null;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/PersonalAnalyticsDashboard.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'StreakDisplay' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 15,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 23
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadSessions'. Either include it or remove the dependency array.",
        "line": 44,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 44,
        "endColumn": 41,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [selectedPeriod, userId, projectId, loadSessions]",
            "fix": {
              "range": [1267, 1302],
              "text": "[selectedPeriod, userId, projectId, loadSessions]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 49,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 49,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1400, 1403], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1400, 1403], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Clock,\n  Target,\n  CheckSquare,\n  Flame,\n  Calendar,\n  TrendingUp,\n} from 'lucide-react';\nimport { StatsCard } from './StatsCard';\nimport { ActivityChart } from './ActivityChart';\nimport { HeatmapCalendar } from './HeatmapCalendar';\nimport { StreakDisplay } from './StreakDisplay';\nimport { AnalyticsPeriod, Session } from '@/types';\nimport { firebaseSessionApi } from '@/lib/api';\n\ninterface PersonalAnalyticsDashboardProps {\n  userId: string;\n  projectId?: string;\n}\n\nconst PERIODS: AnalyticsPeriod[] = [\n  { label: '7 Days', value: '7d', days: 7 },\n  { label: '1 Month', value: '1m', days: 30 },\n  { label: '3 Months', value: '3m', days: 90 },\n  { label: '6 Months', value: '6m', days: 180 },\n  { label: '1 Year', value: '1y', days: 365 },\n  { label: 'All Time', value: 'all', days: 9999 },\n];\n\nexport const PersonalAnalyticsDashboard: React.FC<\n  PersonalAnalyticsDashboardProps\n> = ({ userId, projectId }) => {\n  const [selectedPeriod, setSelectedPeriod] = useState<AnalyticsPeriod>(\n    PERIODS[1]!\n  ); // Default to 1 month\n  const [isLoading, setIsLoading] = useState(true);\n  const [sessions, setSessions] = useState<Session[]>([]);\n\n  useEffect(() => {\n    loadSessions();\n  }, [selectedPeriod, userId, projectId]);\n\n  const loadSessions = async () => {\n    try {\n      setIsLoading(true);\n      const filters: any = {};\n      if (projectId) {\n        filters.projectId = projectId;\n      }\n\n      const response = await firebaseSessionApi.getSessions(1, 500, filters);\n\n      // Filter by selected period\n      const cutoffDate = new Date();\n      if (selectedPeriod?.value !== 'all') {\n        cutoffDate.setDate(cutoffDate.getDate() - (selectedPeriod?.days || 0));\n      } else {\n        cutoffDate.setFullYear(2000); // Get all sessions\n      }\n\n      const filteredSessions = response.sessions.filter(\n        session =>\n          new Date(session.createdAt) >= cutoffDate && session.userId === userId\n      );\n\n      setSessions(filteredSessions);\n    } catch (error) {\n      console.error('Failed to load sessions:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const calculateAnalytics = () => {\n    // Calculate total hours\n    const totalSeconds = sessions.reduce(\n      (sum, s) => sum + (s.duration || 0),\n      0\n    );\n    const totalHours = totalSeconds / 3600;\n\n    // Calculate sessions\n    const totalSessions = sessions.length;\n\n    // Calculate tasks (tasks tracking not implemented at session level)\n    const totalTasks = 0;\n\n    // Calculate average session duration in minutes\n    const averageSessionDuration =\n      totalSessions > 0 ? totalSeconds / totalSessions / 60 : 0;\n\n    // Calculate streak\n    const sortedSessions = [...sessions].sort(\n      (a, b) =>\n        new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    );\n\n    let currentStreak = 0;\n    let longestStreak = 0;\n    let tempStreak = 0;\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const sessionsByDate = new Map<string, boolean>();\n    sortedSessions.forEach(s => {\n      const date = new Date(s.createdAt);\n      date.setHours(0, 0, 0, 0);\n      const dateStr = date.toISOString().split('T')[0] || '';\n      sessionsByDate.set(dateStr, true);\n    });\n\n    // Calculate current streak\n    const checkDate = new Date(today);\n    while (true) {\n      const dateStr = checkDate.toISOString().split('T')[0] || '';\n      if (sessionsByDate.has(dateStr)) {\n        currentStreak++;\n        checkDate.setDate(checkDate.getDate() - 1);\n      } else {\n        break;\n      }\n    }\n\n    // Calculate longest streak\n    const allDates = Array.from(sessionsByDate.keys()).sort().reverse();\n    tempStreak = 0;\n    let lastDate: Date | null = null;\n\n    allDates.forEach(dateStr => {\n      const date = new Date(dateStr);\n      if (!lastDate) {\n        tempStreak = 1;\n      } else {\n        const diffDays = Math.round(\n          (lastDate.getTime() - date.getTime()) / (1000 * 60 * 60 * 24)\n        );\n        if (diffDays === 1) {\n          tempStreak++;\n        } else {\n          longestStreak = Math.max(longestStreak, tempStreak);\n          tempStreak = 1;\n        }\n      }\n      lastDate = date;\n    });\n    longestStreak = Math.max(longestStreak, tempStreak);\n\n    // Calculate activity by day of week\n    const activityByDay = [\n      { day: 'Sun', hours: 0, sessions: 0 },\n      { day: 'Mon', hours: 0, sessions: 0 },\n      { day: 'Tue', hours: 0, sessions: 0 },\n      { day: 'Wed', hours: 0, sessions: 0 },\n      { day: 'Thu', hours: 0, sessions: 0 },\n      { day: 'Fri', hours: 0, sessions: 0 },\n      { day: 'Sat', hours: 0, sessions: 0 },\n    ];\n\n    sessions.forEach(s => {\n      const dayOfWeek = new Date(s.createdAt).getDay();\n      if (activityByDay[dayOfWeek]) {\n        activityByDay[dayOfWeek].hours += (s.duration || 0) / 3600;\n        activityByDay[dayOfWeek].sessions += 1;\n      }\n    });\n\n    // Calculate activity by hour\n    const activityByHour = Array.from({ length: 24 }, (_, i) => ({\n      hour: i,\n      sessions: 0,\n    }));\n\n    sessions.forEach(s => {\n      const hour = new Date(s.createdAt).getHours();\n      if (activityByHour[hour]) {\n        activityByHour[hour].sessions += 1;\n      }\n    });\n\n    // Most productive day\n    const maxDayActivity = Math.max(...activityByDay.map(d => d.hours));\n    const mostProductiveDay =\n      activityByDay.find(d => d.hours === maxDayActivity)?.day || 'N/A';\n\n    // Most productive hour\n    const maxHourActivity = Math.max(...activityByHour.map(h => h.sessions));\n    const mostProductiveHour =\n      activityByHour.find(h => h.sessions === maxHourActivity)?.hour || 0;\n\n    // Generate heatmap data\n    const heatmapData: Array<{ date: string; value: number }> = [];\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 90);\n\n    for (let i = 0; i < 90; i++) {\n      const date = new Date(startDate);\n      date.setDate(date.getDate() + i);\n      const dateStr = date.toISOString().split('T')[0] || '';\n\n      const daySessions = sessions.filter(s => {\n        const sessionDate =\n          new Date(s.createdAt).toISOString().split('T')[0] || '';\n        return sessionDate === dateStr;\n      });\n\n      const dayHours =\n        daySessions.reduce((sum, s) => sum + (s.duration || 0), 0) / 3600;\n      heatmapData.push({ date: dateStr, value: dayHours });\n    }\n\n    // Calculate comparison with previous period (mock for now)\n    const previousHours = totalHours * 0.8;\n    const previousSessions = Math.floor(totalSessions * 0.85);\n    const previousTasks = Math.floor(totalTasks * 0.9);\n\n    const hoursChange = totalHours - previousHours;\n    const hoursChangePercent =\n      previousHours > 0 ? (hoursChange / previousHours) * 100 : 0;\n\n    const sessionsChange = totalSessions - previousSessions;\n    const sessionsChangePercent =\n      previousSessions > 0 ? (sessionsChange / previousSessions) * 100 : 0;\n\n    const tasksChange = totalTasks - previousTasks;\n    const tasksChangePercent =\n      previousTasks > 0 ? (tasksChange / previousTasks) * 100 : 0;\n\n    return {\n      totalHours: {\n        current: totalHours,\n        previous: previousHours,\n        change: hoursChange,\n        changePercent: hoursChangePercent,\n        isPositive: hoursChange >= 0,\n      },\n      totalSessions: {\n        current: totalSessions,\n        previous: previousSessions,\n        change: sessionsChange,\n        changePercent: sessionsChangePercent,\n        isPositive: sessionsChange >= 0,\n      },\n      totalTasks: {\n        current: totalTasks,\n        previous: previousTasks,\n        change: tasksChange,\n        changePercent: tasksChangePercent,\n        isPositive: tasksChange >= 0,\n      },\n      averageSessionDuration,\n      currentStreak,\n      longestStreak,\n      mostProductiveDay,\n      mostProductiveHour,\n      activityByDay,\n      activityByHour,\n      heatmapData,\n    };\n  };\n\n  const mockData = calculateAnalytics();\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {[...Array(4)].map((_, i) => (\n            <div\n              key={i}\n              className=\"h-32 bg-gray-100 rounded-lg animate-pulse\"\n            ></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with period selector */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">\n            {projectId ? 'Project Analytics' : 'Personal Analytics'}\n          </h2>\n          <p className=\"text-gray-600\">\n            {projectId\n              ? 'Track your project progress and activity'\n              : 'Track your productivity and progress'}\n          </p>\n        </div>\n\n        <div className=\"flex gap-2\">\n          {PERIODS.map(period => (\n            <button\n              key={period.value}\n              onClick={() => setSelectedPeriod(period)}\n              className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n                selectedPeriod.value === period.value\n                  ? 'bg-blue-600 text-white'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              }`}\n            >\n              {period.label}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Key metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <StatsCard\n          title=\"Total Hours\"\n          value={mockData.totalHours.current}\n          icon={Clock}\n          trend={{\n            value: mockData.totalHours.changePercent,\n            isPositive: mockData.totalHours.isPositive,\n          }}\n          subtitle={`${mockData.totalHours.change.toFixed(1)}h more than last period`}\n          color=\"blue\"\n        />\n\n        <StatsCard\n          title=\"Sessions\"\n          value={mockData.totalSessions.current}\n          icon={Target}\n          trend={{\n            value: mockData.totalSessions.changePercent,\n            isPositive: mockData.totalSessions.isPositive,\n          }}\n          subtitle={`Avg ${mockData.averageSessionDuration.toFixed(0)} min per session`}\n          color=\"green\"\n        />\n\n        <StatsCard\n          title=\"Tasks Completed\"\n          value={mockData.totalTasks.current}\n          icon={CheckSquare}\n          trend={{\n            value: mockData.totalTasks.changePercent,\n            isPositive: mockData.totalTasks.isPositive,\n          }}\n          color=\"purple\"\n        />\n\n        <StatsCard\n          title=\"Current Streak\"\n          value={`${mockData.currentStreak} days`}\n          icon={Flame}\n          subtitle={`Best: ${mockData.longestStreak} days`}\n          color=\"orange\"\n        />\n      </div>\n\n      {/* Activity heatmap */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n          Activity Overview\n        </h3>\n        <HeatmapCalendar data={mockData.heatmapData} months={3} />\n      </div>\n\n      {/* Charts row */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Activity by day */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Activity by Day\n          </h3>\n          <ActivityChart\n            data={mockData.activityByDay.map(d => ({\n              label: d.day,\n              value: d.hours,\n              secondaryValue: d.sessions,\n            }))}\n            type=\"bar\"\n            height={200}\n            valueFormatter={v => `${v}h`}\n          />\n          <div className=\"flex items-center justify-center gap-6 mt-4 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 bg-blue-500 rounded\"></div>\n              <span className=\"text-gray-600\">Hours</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 bg-green-500 rounded\"></div>\n              <span className=\"text-gray-600\">Sessions</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Activity by hour */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Activity by Hour\n          </h3>\n          <ActivityChart\n            data={mockData.activityByHour\n              .filter(d => d.sessions > 0)\n              .map(d => ({\n                label: `${d.hour}:00`,\n                value: d.sessions,\n              }))}\n            type=\"line\"\n            height={200}\n            valueFormatter={v => `${v} sessions`}\n          />\n        </div>\n      </div>\n\n      {/* Insights */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div className=\"bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg p-6 border border-blue-200\">\n          <div className=\"flex items-center gap-3 mb-2\">\n            <Calendar className=\"w-6 h-6 text-blue-600\" />\n            <h3 className=\"font-semibold text-gray-900\">Most Productive Day</h3>\n          </div>\n          <p className=\"text-2xl font-bold text-blue-600\">\n            {mockData.mostProductiveDay}\n          </p>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            You tend to be most productive on {mockData.mostProductiveDay}s\n          </p>\n        </div>\n\n        <div className=\"bg-gradient-to-br from-purple-50 to-purple-100 rounded-lg p-6 border border-purple-200\">\n          <div className=\"flex items-center gap-3 mb-2\">\n            <TrendingUp className=\"w-6 h-6 text-purple-600\" />\n            <h3 className=\"font-semibold text-gray-900\">Peak Hours</h3>\n          </div>\n          <p className=\"text-2xl font-bold text-purple-600\">\n            {mockData.mostProductiveHour}:00 - {mockData.mostProductiveHour + 1}\n            :00\n          </p>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            Your most productive time of day\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/Post.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'variant' is assigned a value but never used. Allowed unused args must match /^_/u.",
        "line": 22,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 10
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React from 'react';\nimport { SessionWithDetails } from '@/types';\nimport PostCard from './PostCard';\n\ninterface PostProps {\n  post: SessionWithDetails;\n  onSupport: (postId: string) => Promise<void>;\n  onRemoveSupport: (postId: string) => Promise<void>;\n  onShare: (postId: string) => Promise<void>;\n  className?: string;\n  variant?: 'full' | 'compact';\n}\n\nexport const Post: React.FC<PostProps> = ({\n  post,\n  onSupport,\n  onRemoveSupport,\n  onShare,\n  className = '',\n  variant = 'full'\n}) => {\n  // For now, we'll use PostCard for both variants\n  // In the future, we could create a more detailed full view\n  return (\n    <PostCard\n      post={post}\n      onSupport={onSupport}\n      onRemoveSupport={onRemoveSupport}\n      onShare={onShare}\n      className={className}\n    />\n  );\n};\n\nexport default Post;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/PostCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/PostCreationModal.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/PostInteractions.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'supportCount' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 19,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 19,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\n\ninterface PostInteractionsProps {\n  postId: string;\n  supportCount: number;\n  commentCount: number;\n  isSupported: boolean;\n  onSupport: (postId: string) => Promise<void>;\n  onRemoveSupport: (postId: string) => Promise<void>;\n  onShare: (postId: string) => Promise<void>;\n  onCommentClick?: () => void;\n  className?: string;\n}\n\nexport const PostInteractions: React.FC<PostInteractionsProps> = ({\n  postId,\n  supportCount,\n  commentCount,\n  isSupported,\n  onSupport,\n  onRemoveSupport,\n  onShare,\n  onCommentClick,\n  className = ''\n}) => {\n  const [isSupporting, setIsSupporting] = useState(false);\n  const [isSharing, setIsSharing] = useState(false);\n\n  const handleSupport = async () => {\n    if (isSupporting) return;\n    \n    setIsSupporting(true);\n    try {\n      if (isSupported) {\n        await onRemoveSupport(postId);\n      } else {\n        await onSupport(postId);\n      }\n    } catch (error) {\n      console.error('Failed to update support:', error);\n    } finally {\n      setIsSupporting(false);\n    }\n  };\n\n  const handleShare = async () => {\n    if (isSharing) return;\n    \n    setIsSharing(true);\n    try {\n      await onShare(postId);\n    } catch (error) {\n      console.error('Failed to share post:', error);\n    } finally {\n      setIsSharing(false);\n    }\n  };\n\n  return (\n    <div className={`flex items-center justify-between py-3 px-4 border-t border-gray-200 bg-gray-50/50 ${className}`}>\n      {/* Left side - Support and Comments */}\n      <div className=\"flex items-center gap-1\">\n        {/* Support Button */}\n        <button\n          onClick={handleSupport}\n          disabled={isSupporting}\n          className={`flex items-center gap-1.5 px-3 py-2 rounded-lg font-medium transition-all ${\n            isSupported\n              ? 'text-orange-600 bg-orange-50 hover:bg-orange-100'\n              : 'text-gray-600 hover:bg-gray-100 hover:text-orange-600'\n          } ${isSupporting ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}`}\n        >\n          <svg\n            className=\"w-5 h-5\"\n            fill={isSupported ? 'currentColor' : 'none'}\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n            strokeWidth={isSupported ? 0 : 2}\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              d=\"M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z\"\n            />\n          </svg>\n          <span className=\"text-sm\">\n            {isSupported ? 'Supported' : 'Give Support'}\n          </span>\n        </button>\n\n        {/* Comments */}\n        <button\n          onClick={onCommentClick}\n          className=\"flex items-center gap-1.5 px-3 py-2 rounded-lg font-medium text-gray-600 hover:bg-gray-100 hover:text-blue-600 transition-all\"\n        >\n          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" strokeWidth={2}>\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\"\n            />\n          </svg>\n          <span className=\"text-sm\">\n            {commentCount === 1 ? 'Comment' : 'Comments'} {commentCount > 0 && `(${commentCount})`}\n          </span>\n        </button>\n      </div>\n\n      {/* Right side - Share */}\n      <button\n        onClick={handleShare}\n        disabled={isSharing}\n        className={`flex items-center gap-1.5 px-3 py-2 rounded-lg font-medium text-gray-600 hover:bg-gray-100 hover:text-green-600 transition-all ${\n          isSharing ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'\n        }`}\n      >\n        <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" strokeWidth={2}>\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            d=\"M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z\"\n          />\n        </svg>\n        <span className=\"text-sm\">Share</span>\n      </button>\n    </div>\n  );\n};\n\nexport default PostInteractions;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/PostStats.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 30,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 30,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [695, 698], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [695, 698], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport { Session, Project } from '@/types';\n\ninterface PostStatsProps {\n  session: Session;\n  project: Project;\n  className?: string;\n}\n\nexport const PostStats: React.FC<PostStatsProps> = ({ \n  session, \n  project, \n  className = '' \n}) => {\n  const [showAllTasks, setShowAllTasks] = useState(false);\n  \n  const formatDuration = (seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    }\n    return `${minutes}m`;\n  };\n\n  // Task tracking not implemented at session level\n  const completedTasks: any[] = [];\n  const totalTasks = 0;\n\n  return (\n    <div className={`bg-gradient-to-br from-gray-50 to-gray-100 rounded-xl border border-gray-200 overflow-hidden ${className}`}>\n      {/* Session Title with Project Badge */}\n      <div className=\"px-4 py-3 bg-white border-b border-gray-200\">\n        <div className=\"flex items-center gap-3\">\n          <div \n            className=\"w-10 h-10 rounded-lg flex items-center justify-center text-white text-lg font-semibold shadow-sm flex-shrink-0\"\n            style={{ backgroundColor: project.color }}\n          >\n            {project.icon}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"font-bold text-gray-900 text-base leading-tight truncate\">\n              {session.title}\n            </h3>\n            <p className=\"text-sm text-gray-600 truncate\">\n              {project.name}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Stats Grid - Strava Style */}\n      <div className=\"px-4 py-4\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          {/* Duration */}\n          <div>\n            <div className=\"text-xs text-gray-500 uppercase tracking-wide font-medium mb-1\">\n              Duration\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {formatDuration(session.duration)}\n            </div>\n          </div>\n\n          {/* Tasks Completed */}\n          <div>\n            <div className=\"text-xs text-gray-500 uppercase tracking-wide font-medium mb-1\">\n              Tasks\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {completedTasks.length}\n              {totalTasks > 0 && (\n                <span className=\"text-base font-normal text-gray-500 ml-1\">\n                  / {totalTasks}\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Completed Tasks Expandable List */}\n      {completedTasks.length > 0 && (\n        <div className=\"border-t border-gray-200\">\n          <button\n            onClick={() => setShowAllTasks(!showAllTasks)}\n            className=\"w-full px-4 py-3 text-left hover:bg-gray-50 transition-colors flex items-center justify-between group\"\n          >\n            <span className=\"text-sm font-medium text-gray-700\">\n              {completedTasks.length} {completedTasks.length === 1 ? 'task' : 'tasks'} completed\n            </span>\n            <svg\n              className={`w-5 h-5 text-gray-400 transition-transform ${showAllTasks ? 'rotate-180' : ''}`}\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n            </svg>\n          </button>\n\n          {showAllTasks && (\n            <div className=\"px-4 pb-3 space-y-2\">\n              {completedTasks.map((task, index) => (\n                <div key={index} className=\"flex items-start gap-2\">\n                  <div className=\"flex-shrink-0 mt-0.5\">\n                    <svg className=\"w-4 h-4 text-green-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                      <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                    </svg>\n                  </div>\n                  <span className=\"text-sm text-gray-700 flex-1\">{task.name}</span>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Tags */}\n      {session.tags && session.tags.length > 0 && (\n        <div className=\"px-4 pb-4\">\n          <div className=\"flex flex-wrap gap-2\">\n            {session.tags.map((tag, index) => (\n              <span\n                key={index}\n                className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-700 border border-orange-200\"\n              >\n                #{tag}\n              </span>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PostStats;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/PrefetchLink.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/PrivacySettings.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'useAuth' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'loadBlockedUsers' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 68,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 68,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'getVisibilityIcon' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 112,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 112,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'getVisibilityDescription' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 125,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 125,
        "endColumn": 33
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport Image from 'next/image';\nimport { PrivacySettings as PrivacySettingsType, UserProfile } from '@/types';\nimport { firebaseUserApi } from '@/lib/api';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/button';\nimport {\n  SettingsSection,\n  SettingsHeader,\n  SettingsCard,\n  SettingsCardHeader,\n  SettingsCardContent,\n  SettingsField\n} from '@/components/ui/settings-section';\nimport {\n  Shield,\n  Globe,\n  Users,\n  Lock,\n  Eye,\n  UserX,\n  Check,\n  Activity,\n  FolderKanban\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface PrivacySettingsProps {\n  onClose?: () => void;\n  isModal?: boolean;\n}\n\nexport const PrivacySettings: React.FC<PrivacySettingsProps> = ({ \n  onClose, \n  isModal = false \n}) => {\n  const [settings, setSettings] = useState<PrivacySettingsType>({\n    profileVisibility: 'everyone',\n    activityVisibility: 'everyone',\n    projectVisibility: 'everyone',\n    blockedUsers: [],\n  });\n  const [blockedUsers, setBlockedUsers] = useState<UserProfile[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isSaving, setIsSaving] = useState(false);\n\n  useEffect(() => {\n    loadSettings();\n  }, []);\n\n  const loadSettings = async () => {\n    try {\n      setIsLoading(true);\n      // TODO: Implement privacy settings fetching when Firebase getPrivacySettings() is available\n      // Currently uses firebaseUserApi.getPrivacySettings() - verify implementation status\n        const settings = await firebaseUserApi.getPrivacySettings();\n        setSettings(settings);\n    } catch (error) {\n      console.error('Failed to load privacy settings:', error);\n      toast.error('Failed to load privacy settings');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadBlockedUsers = async (): Promise<UserProfile[]> => {\n    try {\n      // This would be a new API endpoint to get blocked users\n      // For now, return empty array\n      return [];\n    } catch (error) {\n      console.error('Failed to load blocked users:', error);\n      return [];\n    }\n  };\n\n  const handleSettingChange = (key: keyof PrivacySettingsType, value: string) => {\n    setSettings(prev => ({ ...prev, [key]: value }));\n  };\n\n  const handleSave = async () => {\n    try {\n      setIsSaving(true);\n      await firebaseUserApi.updatePrivacySettings(settings);\n      toast.success('Privacy settings updated successfully');\n    } catch (error) {\n      console.error('Failed to save privacy settings:', error);\n      toast.error('Failed to save privacy settings');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleUnblockUser = async (userId: string) => {\n    try {\n      // TODO: Implement unblock user API endpoint in firebaseUserApi\n      // Need to add unblockUser() method to handle Firebase user blocking/unblocking\n      setBlockedUsers(prev => prev.filter(user => user.id !== userId));\n      setSettings(prev => ({\n        ...prev,\n        blockedUsers: prev.blockedUsers.filter(id => id !== userId)\n      }));\n      toast.success('User unblocked successfully');\n    } catch (error) {\n      console.error('Failed to unblock user:', error);\n      toast.error('Failed to unblock user');\n    }\n  };\n\n  const getVisibilityIcon = (visibility: string) => {\n    switch (visibility) {\n      case 'everyone':\n        return <Globe className=\"w-4 h-4\" />;\n      case 'followers':\n        return <Users className=\"w-4 h-4\" />;\n      case 'private':\n        return <Lock className=\"w-4 h-4\" />;\n      default:\n        return <Eye className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getVisibilityDescription = (visibility: string, type: string) => {\n    const descriptions = {\n      profileVisibility: {\n        everyone: 'Anyone can view your profile and basic information',\n        followers: 'Only people you follow back can view your profile',\n        private: 'Only you can view your profile'\n      },\n      activityVisibility: {\n        everyone: 'Your activity is visible to everyone',\n        followers: 'Your activity is only visible to your followers',\n        private: 'Your activity is private'\n      },\n      projectVisibility: {\n        everyone: 'Your projects are visible to everyone',\n        followers: 'Your projects are only visible to your followers',\n        private: 'Your projects are private'\n      }\n    };\n\n    return descriptions[type as keyof typeof descriptions]?.[visibility as keyof typeof descriptions.profileVisibility] || '';\n  };\n\n  if (isLoading) {\n    return (\n      <SettingsSection>\n        {[1, 2, 3].map((i) => (\n          <SettingsCard key={i} className=\"animate-pulse\">\n            <SettingsCardHeader title=\"\" description=\"\" />\n            <SettingsCardContent>\n              <div className=\"space-y-3\">\n                <div className=\"h-10 bg-gray-200 rounded\" />\n                <div className=\"h-4 bg-gray-200 rounded w-1/2\" />\n              </div>\n            </SettingsCardContent>\n          </SettingsCard>\n        ))}\n      </SettingsSection>\n    );\n  }\n\n  return (\n    <SettingsSection>\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <SettingsHeader\n          icon={Shield}\n          title=\"Privacy Controls\"\n          description=\"Control who can see your profile, activity, and projects\"\n        />\n        {isModal && onClose && (\n          <Button variant=\"ghost\" onClick={onClose}>\n            Close\n          </Button>\n        )}\n      </div>\n\n      {/* Profile Visibility */}\n      <SettingsCard>\n        <SettingsCardHeader\n          icon={Eye}\n          title=\"Profile Visibility\"\n          description=\"Control who can view your profile information\"\n        />\n        <SettingsCardContent>\n          <SettingsField label=\"Profile Access\">\n            <select\n              value={settings.profileVisibility}\n              onChange={(e) => handleSettingChange('profileVisibility', e.target.value)}\n              className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n            >\n              <option value=\"everyone\">Everyone - Anyone can view your profile</option>\n              <option value=\"followers\">Followers Only - Only people you follow back</option>\n              <option value=\"private\">Private - Only you can view your profile</option>\n            </select>\n          </SettingsField>\n        </SettingsCardContent>\n      </SettingsCard>\n\n      {/* Activity Visibility */}\n      <SettingsCard>\n        <SettingsCardHeader\n          icon={Activity}\n          title=\"Activity Visibility\"\n          description=\"Control who can see your productivity activity and sessions\"\n        />\n        <SettingsCardContent>\n          <SettingsField label=\"Activity Access\">\n            <select\n              value={settings.activityVisibility}\n              onChange={(e) => handleSettingChange('activityVisibility', e.target.value)}\n              className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n            >\n              <option value=\"everyone\">Everyone - Your activity is public</option>\n              <option value=\"followers\">Followers Only - Only your followers can see</option>\n              <option value=\"private\">Private - Your activity is completely private</option>\n            </select>\n          </SettingsField>\n        </SettingsCardContent>\n      </SettingsCard>\n\n      {/* Project Visibility */}\n      <SettingsCard>\n        <SettingsCardHeader\n          icon={FolderKanban}\n          title=\"Project Visibility\"\n          description=\"Control who can see your projects and their details\"\n        />\n        <SettingsCardContent>\n          <SettingsField label=\"Project Access\">\n            <select\n              value={settings.projectVisibility}\n              onChange={(e) => handleSettingChange('projectVisibility', e.target.value)}\n              className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n            >\n              <option value=\"everyone\">Everyone - Your projects are public</option>\n              <option value=\"followers\">Followers Only - Only your followers can see</option>\n              <option value=\"private\">Private - Your projects are completely private</option>\n            </select>\n          </SettingsField>\n        </SettingsCardContent>\n      </SettingsCard>\n\n      {/* Blocked Users */}\n      <SettingsCard>\n        <SettingsCardHeader\n          icon={UserX}\n          title=\"Blocked Users\"\n          description=\"Manage users you have blocked from viewing your profile\"\n        />\n        <SettingsCardContent>\n          {blockedUsers.length > 0 ? (\n            <div className=\"space-y-3\">\n              {blockedUsers.map((blockedUser) => (\n                <div key={blockedUser.id} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    {blockedUser.profilePicture ? (\n                      <Image\n                        src={blockedUser.profilePicture}\n                        alt={`${blockedUser.name}'s profile picture`}\n                        width={40}\n                        height={40}\n                        className=\"w-10 h-10 rounded-full object-cover border border-gray-200\"\n                      />\n                    ) : (\n                      <div className=\"w-10 h-10 bg-gradient-to-br from-[#FC4C02] to-[#FF8800] rounded-full flex items-center justify-center text-white text-sm font-semibold\">\n                        {blockedUser.name.charAt(0).toUpperCase()}\n                      </div>\n                    )}\n                    <div>\n                      <h4 className=\"font-medium text-gray-900\">{blockedUser.name}</h4>\n                      <p className=\"text-sm text-gray-600\">@{blockedUser.username}</p>\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleUnblockUser(blockedUser.id)}\n                    className=\"flex items-center gap-1\"\n                  >\n                    <Check className=\"w-3 h-3\" />\n                    Unblock\n                  </Button>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <UserX className=\"w-12 h-12 text-gray-400 mx-auto mb-3\" />\n              <h3 className=\"font-medium text-gray-900 mb-1\">No blocked users</h3>\n              <p className=\"text-sm text-gray-600\">\n                Users you block will appear here\n              </p>\n            </div>\n          )}\n        </SettingsCardContent>\n      </SettingsCard>\n\n      {/* Save Button */}\n      <div className=\"flex justify-end pt-2\">\n        <Button\n          onClick={handleSave}\n          disabled={isSaving}\n          className=\"min-w-[120px] bg-[#007AFF] hover:bg-[#0051D5]\"\n        >\n          {isSaving ? (\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n              Saving...\n            </div>\n          ) : (\n            'Save Settings'\n          )}\n        </Button>\n      </div>\n    </SettingsSection>\n  );\n};\n\n// Modal wrapper\ninterface PrivacySettingsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport const PrivacySettingsModal: React.FC<PrivacySettingsModalProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-background rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"p-6\">\n          <PrivacySettings onClose={onClose} isModal={true} />\n        </div>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ProfileHeader.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Badge' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 9,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Users' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 10,
        "column": 28,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 33
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport Image from 'next/image';\nimport { UserProfile } from '@/types';\nimport { firebaseUserApi } from '@/lib/api';\nimport { useAuth as _useAuth } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { MapPin, Calendar, Users, Clock, Edit3, UserPlus, Check, LogOut } from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface ProfileHeaderProps {\n  profile: UserProfile;\n  onProfileUpdate?: (updatedProfile: UserProfile) => void;\n  showEditButton?: boolean;\n  onEditClick?: () => void;\n}\n\nexport const ProfileHeader: React.FC<ProfileHeaderProps> = ({\n  profile,\n  onProfileUpdate,\n  showEditButton = false,\n  onEditClick,\n}) => {\n  const { user, logout } = useAuth();\n  const [isFollowing, setIsFollowing] = useState(profile.isFollowing || false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [followersCount, setFollowersCount] = useState(profile.followersCount);\n\n  const isOwnProfile = user?.username === profile.username;\n  const canFollow = !isOwnProfile && user;\n\n  const handleFollow = async () => {\n    if (!canFollow) return;\n\n    try {\n      setIsLoading(true);\n      \n      if (isFollowing) {\n        await firebaseUserApi.unfollowUser(profile.id);\n        setIsFollowing(false);\n        setFollowersCount(prev => Math.max(0, prev - 1));\n        toast.success(`Unfollowed ${profile.name}`);\n      } else {\n        await firebaseUserApi.followUser(profile.id);\n        setIsFollowing(true);\n        setFollowersCount(prev => prev + 1);\n        toast.success(`Following ${profile.name}`);\n      }\n\n      // Update profile data if callback provided\n      if (onProfileUpdate) {\n        const updatedProfile = {\n          ...profile,\n          isFollowing: !isFollowing,\n          followersCount: isFollowing ? followersCount - 1 : followersCount + 1,\n        };\n        onProfileUpdate(updatedProfile);\n      }\n    } catch (error) {\n      console.error('Follow/unfollow error:', error);\n      toast.error('Failed to update follow status');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const formatHours = (hours: number): string => {\n    if (hours < 1) {\n      const minutes = Math.round(hours * 60);\n      return `${minutes}m`;\n    }\n    if (hours < 100) {\n      return `${hours.toFixed(1)}h`;\n    }\n    return `${Math.round(hours)}h`;\n  };\n\n  const formatDate = (date: Date): string => {\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n    });\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-sm p-8\">\n      <div className=\"flex flex-col gap-6\">\n        {/* Top section: Avatar + Name + Actions */}\n        <div className=\"flex items-start gap-6\">\n          {/* Avatar */}\n          <div className=\"flex-shrink-0\">\n            <div className=\"relative\">\n              {profile.profilePicture ? (\n                <Image\n                  src={profile.profilePicture}\n                  alt={`${profile.name}'s profile picture`}\n                  width={140}\n                  height={140}\n                  className=\"w-[140px] h-[140px] rounded-full object-cover border-4 border-gray-100\"\n                />\n              ) : (\n                <div className=\"w-[140px] h-[140px] bg-gradient-to-br from-[#FC4C02] to-[#FF8800] rounded-full flex items-center justify-center text-white text-5xl font-bold\">\n                  {profile.name.charAt(0).toUpperCase()}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Name and actions */}\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-start justify-between\">\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900\">\n                  {profile.name}\n                </h1>\n                {profile.location && (\n                  <div className=\"flex items-center gap-1 mt-1 text-gray-600\">\n                    <MapPin className=\"w-4 h-4\" />\n                    <span className=\"text-sm\">{profile.location}</span>\n                  </div>\n                )}\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex gap-2\">\n                {isOwnProfile && showEditButton && onEditClick && (\n                  <Button\n                    onClick={onEditClick}\n                    variant=\"outline\"\n                    className=\"flex items-center gap-2\"\n                  >\n                    <Edit3 className=\"w-4 h-4\" />\n                    <span className=\"hidden md:inline\">Edit Profile</span>\n                  </Button>\n                )}\n                {canFollow && (\n                  <Button\n                    onClick={handleFollow}\n                    disabled={isLoading}\n                    variant={isFollowing ? \"outline\" : \"default\"}\n                    className={`flex items-center gap-2 min-w-[110px] ${\n                      isFollowing \n                        ? 'border-gray-300' \n                        : 'bg-[#FC4C02] hover:bg-[#E04502]'\n                    }`}\n                  >\n                    {isLoading ? (\n                      <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                    ) : isFollowing ? (\n                      <>\n                        <Check className=\"w-4 h-4\" />\n                        Following\n                      </>\n                    ) : (\n                      <>\n                        <UserPlus className=\"w-4 h-4\" />\n                        Follow\n                      </>\n                    )}\n                  </Button>\n                )}\n              </div>\n            </div>\n\n            {/* Stats row */}\n            <div className=\"flex items-center gap-6 mt-4\">\n              <div>\n                <span className=\"text-2xl font-bold text-gray-900\">{followersCount.toLocaleString()}</span>\n                <span className=\"text-sm text-gray-600 ml-1\">Followers</span>\n              </div>\n              <div>\n                <span className=\"text-2xl font-bold text-gray-900\">{profile.followingCount.toLocaleString()}</span>\n                <span className=\"text-sm text-gray-600 ml-1\">Following</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Bio */}\n        {profile.bio && (\n          <div className=\"text-gray-700 leading-relaxed\">\n            {profile.bio}\n          </div>\n        )}\n\n        {/* Additional info */}\n        <div className=\"flex items-center gap-4 text-sm text-gray-600 border-t border-gray-200 pt-4\">\n          <div className=\"flex items-center gap-1\">\n            <Calendar className=\"w-4 h-4\" />\n            <span>Joined {formatDate(profile.createdAt)}</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Clock className=\"w-4 h-4\" />\n            <span>{formatHours(profile.totalHours)} total time</span>\n          </div>\n          {isOwnProfile && (\n            <button\n              onClick={logout}\n              className=\"ml-auto flex items-center gap-1 text-red-600 hover:text-red-700\"\n            >\n              <LogOut className=\"w-4 h-4\" />\n              <span>Logout</span>\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ProfilePicture.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ProfileStats.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isOwnProfile' is assigned a value but never used. Allowed unused args must match /^_/u.",
        "line": 22,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 15
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadActivityData'. Either include it or remove the dependency array.",
        "line": 37,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 37,
        "endColumn": 30,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [userId, selectedPeriod, loadActivityData]",
            "fix": {
              "range": [978, 1002],
              "text": "[userId, selectedPeriod, loadActivityData]"
            }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'loadProjectData' and 'loadWeeklyData'. Either include them or remove the dependency array.",
        "line": 45,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 45,
        "endColumn": 25,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [activeTab, loadProjectData, loadWeeklyData, userId]",
            "fix": {
              "range": [1163, 1182],
              "text": "[activeTab, loadProjectData, loadWeeklyData, userId]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 132,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 132,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3837, 3840], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3837, 3840], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'index' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 740,
        "column": 33,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 740,
        "endColumn": 38
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { ActivityData, WeeklyActivity, ProjectBreakdown } from '@/types';\nimport { firebaseUserApi } from '@/lib/api';\nimport {\n  BarChart3,\n  PieChart,\n  TrendingUp,\n  Clock,\n  Target,\n  Activity,\n} from 'lucide-react';\n\ninterface ProfileStatsProps {\n  userId: string;\n  isOwnProfile?: boolean;\n}\n\nexport const ProfileStats: React.FC<ProfileStatsProps> = ({\n  userId,\n  isOwnProfile = false,\n}) => {\n  const [activeTab, setActiveTab] = useState<'daily' | 'weekly' | 'projects'>(\n    'daily'\n  );\n  const [activityData, setActivityData] = useState<ActivityData[]>([]);\n  const [weeklyData, setWeeklyData] = useState<WeeklyActivity[]>([]);\n  const [projectData, setProjectData] = useState<ProjectBreakdown[]>([]);\n  const [_isLoading, setIsLoading] = useState(true);\n  const [selectedPeriod, setSelectedPeriod] = useState<'30d' | '90d' | 'year'>(\n    '30d'\n  );\n\n  useEffect(() => {\n    loadActivityData();\n  }, [userId, selectedPeriod]);\n\n  useEffect(() => {\n    if (activeTab === 'weekly') {\n      loadWeeklyData();\n    } else if (activeTab === 'projects') {\n      loadProjectData();\n    }\n  }, [activeTab, userId]);\n\n  const loadActivityData = async () => {\n    try {\n      setIsLoading(true);\n      const year = new Date().getFullYear();\n      const data = await firebaseUserApi.getUserDailyActivity(userId, year);\n      setActivityData(data);\n    } catch (error) {\n      console.error('Failed to load activity data:', error);\n      setActivityData([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadWeeklyData = async () => {\n    try {\n      setIsLoading(true);\n      const data = await firebaseUserApi.getUserWeeklyActivity(userId, 12);\n      setWeeklyData(data);\n    } catch (error) {\n      console.error('Failed to load weekly data:', error);\n      setWeeklyData([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const loadProjectData = async () => {\n    try {\n      setIsLoading(true);\n      const year = new Date().getFullYear();\n      const data = await firebaseUserApi.getUserProjectBreakdown(userId, year);\n      setProjectData(data);\n    } catch (error) {\n      console.error('Failed to load project data:', error);\n      setProjectData([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const formatHours = (hours: number): string => {\n    if (hours < 1) {\n      const minutes = Math.round(hours * 60);\n      return `${minutes}m`;\n    }\n    return `${hours.toFixed(1)}h`;\n  };\n\n  const tabs = [\n    { id: 'daily', label: 'Daily Activity', icon: Activity },\n    { id: 'weekly', label: 'Weekly Trends', icon: BarChart3 },\n    { id: 'projects', label: 'Project Breakdown', icon: PieChart },\n  ];\n\n  return (\n    <div className=\"bg-card-background rounded-lg border border-border p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-xl font-semibold text-foreground flex items-center gap-2\">\n          <TrendingUp className=\"w-5 h-5\" />\n          Activity Analytics\n        </h2>\n\n        {activeTab === 'daily' && (\n          <select\n            value={selectedPeriod}\n            onChange={e =>\n              setSelectedPeriod(e.target.value as '30d' | '90d' | 'year')\n            }\n            className=\"px-3 py-1 border border-border rounded-md bg-background text-foreground\"\n          >\n            <option value=\"30d\">Last 30 days</option>\n            <option value=\"90d\">Last 90 days</option>\n            <option value=\"year\">This Year</option>\n          </select>\n        )}\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"flex space-x-1 mb-6 border-b border-border\">\n        {tabs.map(tab => {\n          const Icon = tab.icon;\n          return (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id as any)}\n              className={`\n                flex items-center gap-2 px-4 py-2 rounded-none border-b-2 transition-all\n                ${\n                  activeTab === tab.id\n                    ? 'border-primary text-primary'\n                    : 'border-transparent text-muted-foreground hover:text-foreground'\n                }\n              `}\n            >\n              <Icon className=\"w-4 h-4\" />\n              {tab.label}\n            </button>\n          );\n        })}\n      </div>\n\n      {/* Tab Content */}\n      {isLoading ? (\n        <div className=\"flex items-center justify-center py-12\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </div>\n      ) : (\n        <>\n          {activeTab === 'daily' && (\n            <DailyActivityChart\n              data={activityData}\n              selectedPeriod={selectedPeriod}\n              formatHours={formatHours}\n            />\n          )}\n\n          {activeTab === 'weekly' && (\n            <WeeklyChart data={weeklyData} formatHours={formatHours} />\n          )}\n\n          {activeTab === 'projects' && (\n            <ProjectBreakdownChart\n              data={projectData}\n              formatHours={formatHours}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\n// Daily Activity Chart Component\ninterface DailyActivityChartProps {\n  data: ActivityData[];\n  selectedPeriod: '30d' | '90d' | 'year';\n  formatHours: (hours: number) => string;\n}\n\nconst DailyActivityChart: React.FC<DailyActivityChartProps> = ({\n  data,\n  selectedPeriod,\n  formatHours,\n}) => {\n  // Filter data based on selected period\n  const getDaysCount = (period: '30d' | '90d' | 'year'): number => {\n    if (period === '30d') return 30;\n    if (period === '90d') return 90;\n    return 365;\n  };\n\n  const daysCount = getDaysCount(selectedPeriod);\n  const endDate = new Date();\n  const startDate = new Date();\n  startDate.setDate(endDate.getDate() - daysCount);\n\n  const filteredData = data\n    .filter(d => {\n      const date = new Date(d.date);\n      return date >= startDate && date <= endDate;\n    })\n    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n\n  const maxHours = Math.max(...filteredData.map(d => d.hours), 1);\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n\n  // Calculate statistics\n  const totalHours = filteredData.reduce((sum, d) => sum + d.hours, 0);\n  const averageHours =\n    filteredData.length > 0 ? totalHours / filteredData.length : 0;\n  const activeDays = filteredData.filter(d => d.hours > 0).length;\n\n  if (filteredData.length === 0) {\n    return (\n      <div className=\"text-center py-12 text-muted-foreground\">\n        No activity data available for this period\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Summary Stats */}\n      <div className=\"grid grid-cols-3 gap-4\">\n        <div className=\"bg-white rounded-lg p-4 border border-border shadow-sm\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-1\">\n            <Clock className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Total Hours</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">\n            {formatHours(totalHours)}\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg p-4 border border-border shadow-sm\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-1\">\n            <TrendingUp className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Average/Day</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">\n            {formatHours(averageHours)}\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg p-4 border border-border shadow-sm\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-1\">\n            <Target className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Active Days</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">{activeDays}</div>\n        </div>\n      </div>\n\n      {/* Line Chart */}\n      <div className=\"bg-white rounded-lg p-6 border border-border shadow-sm\">\n        <h3 className=\"text-sm font-semibold text-foreground mb-4\">\n          Daily Activity Trend\n        </h3>\n        <div className=\"relative h-64\">\n          {/* Y-axis labels */}\n          <div className=\"absolute left-0 top-0 bottom-8 flex flex-col justify-between text-xs text-muted-foreground w-12\">\n            <span>{formatHours(maxHours)}</span>\n            <span>{formatHours(maxHours * 0.75)}</span>\n            <span>{formatHours(maxHours * 0.5)}</span>\n            <span>{formatHours(maxHours * 0.25)}</span>\n            <span>0h</span>\n          </div>\n\n          {/* Chart area */}\n          <div className=\"absolute left-14 right-0 top-0 bottom-8\">\n            {/* Grid lines */}\n            <div className=\"absolute inset-0 flex flex-col justify-between\">\n              {[0, 1, 2, 3, 4].map(i => (\n                <div key={i} className=\"border-t border-border\" />\n              ))}\n            </div>\n\n            {/* Bars */}\n            <div className=\"absolute inset-0 flex items-end justify-between gap-0.5\">\n              {filteredData.map((day, index) => {\n                const height = (day.hours / maxHours) * 100;\n                const isHovered = hoveredIndex === index;\n\n                return (\n                  <div\n                    key={day.date}\n                    className=\"relative flex-1 group\"\n                    onMouseEnter={() => setHoveredIndex(index)}\n                    onMouseLeave={() => setHoveredIndex(null)}\n                  >\n                    <div\n                      className={`\n                        w-full rounded-t transition-all duration-200\n                        ${\n                          day.hours > 0\n                            ? isHovered\n                              ? 'bg-primary'\n                              : 'bg-primary/70 hover:bg-primary'\n                            : 'bg-gray-100 border border-border'\n                        }\n                      `}\n                      style={{ height: `${height}%` }}\n                    />\n\n                    {/* Tooltip */}\n                    {isHovered && (\n                      <div className=\"absolute bottom-full left-1/2 -translate-x-1/2 mb-2 px-3 py-2 bg-foreground text-background text-xs rounded-lg shadow-lg whitespace-nowrap z-10\">\n                        <div className=\"font-semibold\">\n                          {new Date(day.date).toLocaleDateString('en-US', {\n                            month: 'short',\n                            day: 'numeric',\n                          })}\n                        </div>\n                        <div>{formatHours(day.hours)}</div>\n                        <div className=\"opacity-70\">\n                          {day.sessions} session{day.sessions !== 1 ? 's' : ''}\n                        </div>\n                        <div className=\"absolute top-full left-1/2 -translate-x-1/2 border-4 border-transparent border-t-foreground\" />\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* X-axis */}\n          <div className=\"absolute left-14 right-0 bottom-0 h-6 flex justify-between text-xs text-muted-foreground\">\n            {selectedPeriod === '30d' &&\n              filteredData.length > 0 &&\n              filteredData[0] && (\n                <>\n                  <span>\n                    {new Date(filteredData[0].date).toLocaleDateString(\n                      'en-US',\n                      { month: 'short', day: 'numeric' }\n                    )}\n                  </span>\n                  <span>\n                    {new Date(\n                      filteredData[Math.floor(filteredData.length / 2)]!.date\n                    ).toLocaleDateString('en-US', {\n                      month: 'short',\n                      day: 'numeric',\n                    })}\n                  </span>\n                  <span>\n                    {new Date(\n                      filteredData[filteredData.length - 1]!.date\n                    ).toLocaleDateString('en-US', {\n                      month: 'short',\n                      day: 'numeric',\n                    })}\n                  </span>\n                </>\n              )}\n            {selectedPeriod === '90d' &&\n              filteredData.length > 0 &&\n              filteredData[0] && (\n                <>\n                  <span>\n                    {new Date(filteredData[0].date).toLocaleDateString(\n                      'en-US',\n                      { month: 'short' }\n                    )}\n                  </span>\n                  <span>\n                    {new Date(\n                      filteredData[Math.floor(filteredData.length / 2)]!.date\n                    ).toLocaleDateString('en-US', { month: 'short' })}\n                  </span>\n                  <span>\n                    {new Date(\n                      filteredData[filteredData.length - 1]!.date\n                    ).toLocaleDateString('en-US', { month: 'short' })}\n                  </span>\n                </>\n              )}\n            {selectedPeriod === 'year' && filteredData.length > 0 && (\n              <>\n                <span>Jan</span>\n                <span>Apr</span>\n                <span>Jul</span>\n                <span>Oct</span>\n                <span>Dec</span>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Weekly Chart Component\ninterface WeeklyChartProps {\n  data: WeeklyActivity[];\n  formatHours: (hours: number) => string;\n}\n\nconst WeeklyChart: React.FC<WeeklyChartProps> = ({ data, formatHours }) => {\n  const maxHours = Math.max(...data.map(d => d.hours), 1);\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n\n  // Parse week string (format: \"2025-W40\") to get a readable date range\n  const getWeekLabel = (weekStr: string): string => {\n    const parts = weekStr.split('-W');\n    if (parts.length !== 2 || !parts[0] || !parts[1]) {\n      return 'Invalid week';\n    }\n    const year = parts[0];\n    const weekNum = parts[1];\n    const weekNumber = parseInt(weekNum, 10);\n\n    // Get the first day of the week\n    const firstDay = new Date(parseInt(year, 10), 0, 1 + (weekNumber - 1) * 7);\n    const dayOfWeek = firstDay.getDay();\n    const diff = firstDay.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);\n    const monday = new Date(firstDay.setDate(diff));\n\n    return monday.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n    });\n  };\n\n  const getWeekRange = (weekStr: string): string => {\n    const parts = weekStr.split('-W');\n    if (parts.length !== 2 || !parts[0] || !parts[1]) {\n      return 'Invalid week range';\n    }\n    const year = parts[0];\n    const weekNum = parts[1];\n    const weekNumber = parseInt(weekNum, 10);\n\n    const firstDay = new Date(parseInt(year, 10), 0, 1 + (weekNumber - 1) * 7);\n    const dayOfWeek = firstDay.getDay();\n    const diff = firstDay.getDate() - dayOfWeek + (dayOfWeek === 0 ? -6 : 1);\n    const monday = new Date(firstDay.setDate(diff));\n    const sunday = new Date(monday);\n    sunday.setDate(monday.getDate() + 6);\n\n    return `${monday.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })} - ${sunday.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}`;\n  };\n\n  // Calculate statistics\n  const totalHours = data.reduce((sum, w) => sum + w.hours, 0);\n  const averageHours = data.length > 0 ? totalHours / data.length : 0;\n  const bestWeek = data.reduce(\n    (max, w) => (w.hours > max.hours ? w : max),\n    data[0] || { hours: 0, week: '', sessions: 0 }\n  );\n\n  if (data.length === 0) {\n    return (\n      <div className=\"text-center py-12 text-muted-foreground\">\n        No weekly data available\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Summary Stats */}\n      <div className=\"grid grid-cols-3 gap-4\">\n        <div className=\"bg-white rounded-lg p-4 border border-border shadow-sm\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-1\">\n            <Clock className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Total Hours</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">\n            {formatHours(totalHours)}\n          </div>\n          <div className=\"text-xs text-muted-foreground mt-1\">\n            Last {data.length} weeks\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg p-4 border border-border shadow-sm\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-1\">\n            <TrendingUp className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Avg/Week</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">\n            {formatHours(averageHours)}\n          </div>\n          <div className=\"text-xs text-muted-foreground mt-1\">\n            Weekly average\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg p-4 border border-border shadow-sm\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-1\">\n            <Target className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Best Week</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">\n            {formatHours(bestWeek.hours)}\n          </div>\n          <div className=\"text-xs text-muted-foreground mt-1\">\n            {bestWeek.week && getWeekLabel(bestWeek.week)}\n          </div>\n        </div>\n      </div>\n\n      {/* Bar Chart */}\n      <div className=\"bg-white rounded-lg p-6 border border-border shadow-sm\">\n        <h3 className=\"text-sm font-semibold text-foreground mb-4\">\n          Weekly Activity Comparison\n        </h3>\n        <div className=\"relative h-80\">\n          {/* Y-axis labels */}\n          <div className=\"absolute left-0 top-0 bottom-12 flex flex-col justify-between text-xs text-muted-foreground w-12\">\n            <span>{formatHours(maxHours)}</span>\n            <span>{formatHours(maxHours * 0.75)}</span>\n            <span>{formatHours(maxHours * 0.5)}</span>\n            <span>{formatHours(maxHours * 0.25)}</span>\n            <span>0h</span>\n          </div>\n\n          {/* Chart area */}\n          <div className=\"absolute left-14 right-0 top-0 bottom-12\">\n            {/* Grid lines */}\n            <div className=\"absolute inset-0 flex flex-col justify-between\">\n              {[0, 1, 2, 3, 4].map(i => (\n                <div key={i} className=\"border-t border-border\" />\n              ))}\n            </div>\n\n            {/* Bars */}\n            <div className=\"absolute inset-0 flex items-end justify-between gap-2\">\n              {data.map((week, index) => {\n                const height = (week.hours / maxHours) * 100;\n                const isHovered = hoveredIndex === index;\n\n                return (\n                  <div\n                    key={week.week}\n                    className=\"relative flex-1 group\"\n                    onMouseEnter={() => setHoveredIndex(index)}\n                    onMouseLeave={() => setHoveredIndex(null)}\n                  >\n                    <div\n                      className={`\n                        w-full rounded-t-lg transition-all duration-300\n                        ${\n                          week.hours > 0\n                            ? isHovered\n                              ? 'bg-primary shadow-lg'\n                              : 'bg-primary/80 hover:bg-primary hover:shadow-lg'\n                            : 'bg-gray-100 border border-border'\n                        }\n                      `}\n                      style={{ height: `${Math.max(height, 2)}%` }}\n                    />\n\n                    {/* Tooltip */}\n                    {isHovered && (\n                      <div className=\"absolute bottom-full left-1/2 -translate-x-1/2 mb-3 px-3 py-2 bg-foreground text-background text-xs rounded-lg shadow-xl whitespace-nowrap z-10\">\n                        <div className=\"font-semibold\">\n                          {getWeekRange(week.week)}\n                        </div>\n                        <div className=\"mt-1\">{formatHours(week.hours)}</div>\n                        <div className=\"opacity-70\">\n                          {week.sessions} session\n                          {week.sessions !== 1 ? 's' : ''}\n                        </div>\n                        <div className=\"absolute top-full left-1/2 -translate-x-1/2 border-4 border-transparent border-t-foreground\" />\n                      </div>\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* X-axis labels */}\n          <div className=\"absolute left-14 right-0 bottom-0 h-10 flex justify-between text-xs text-muted-foreground items-start pt-2\">\n            {data.map((week, index) => {\n              // Show every other label for better readability\n              if (data.length > 8 && index % 2 !== 0)\n                return <div key={week.week} className=\"flex-1\" />;\n\n              return (\n                <div key={week.week} className=\"flex-1 text-center\">\n                  <div>{getWeekLabel(week.week)}</div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Project Breakdown Chart Component\ninterface ProjectBreakdownChartProps {\n  data: ProjectBreakdown[];\n  formatHours: (hours: number) => string;\n}\n\nconst ProjectBreakdownChart: React.FC<ProjectBreakdownChartProps> = ({\n  data,\n  formatHours,\n}) => {\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n\n  if (data.length === 0) {\n    return (\n      <div className=\"text-center py-8 text-muted-foreground\">\n        No project data available\n      </div>\n    );\n  }\n\n  const totalHours = data.reduce((sum, p) => sum + p.hours, 0);\n  const maxHours = Math.max(...data.map(p => p.hours));\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Summary Stats */}\n      <div className=\"grid grid-cols-3 gap-4\">\n        <div className=\"bg-white rounded-lg p-4 border border-border shadow-sm\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-1\">\n            <PieChart className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Total Projects</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">\n            {data.length}\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg p-4 border border-border shadow-sm\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-1\">\n            <Clock className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Total Hours</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">\n            {formatHours(totalHours)}\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg p-4 border border-border shadow-sm\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-1\">\n            <Target className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">Top Project</span>\n          </div>\n          <div className=\"text-lg font-bold text-foreground truncate\">\n            {data[0]?.projectName}\n          </div>\n          <div className=\"text-xs text-muted-foreground\">\n            {data[0] ? formatHours(data[0].hours) : formatHours(0)}\n          </div>\n        </div>\n      </div>\n\n      {/* Horizontal Bar Chart */}\n      <div className=\"bg-white rounded-lg p-6 border border-border shadow-sm\">\n        <h3 className=\"text-sm font-semibold text-foreground mb-4\">\n          Time Distribution by Project\n        </h3>\n        <div className=\"space-y-4\">\n          {data.map((project, index) => {\n            const widthPercentage = (project.hours / maxHours) * 100;\n            const isHovered = hoveredIndex === index;\n\n            return (\n              <div\n                key={project.projectId}\n                className=\"relative\"\n                onMouseEnter={() => setHoveredIndex(index)}\n                onMouseLeave={() => setHoveredIndex(null)}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <div\n                      className=\"w-3 h-3 rounded-full\"\n                      style={{ backgroundColor: project.color }}\n                    />\n                    <span className=\"text-sm font-medium text-foreground\">\n                      {project.projectName}\n                    </span>\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    {formatHours(project.hours)} (\n                    {project.percentage.toFixed(1)}%)\n                  </div>\n                </div>\n                <div className=\"relative\">\n                  <div className=\"w-full bg-gray-100 rounded-full h-8 border border-border\">\n                    <div\n                      className={`h-8 rounded-full transition-all duration-300 flex items-center justify-end pr-3 ${\n                        isHovered ? 'shadow-lg' : 'shadow-sm'\n                      }`}\n                      style={{\n                        width: `${widthPercentage}%`,\n                        backgroundColor: project.color,\n                        minWidth: widthPercentage > 0 ? '2%' : '0%',\n                      }}\n                    >\n                      {widthPercentage > 20 && (\n                        <span className=\"text-xs font-semibold text-white\">\n                          {project.percentage.toFixed(0)}%\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Projects Table */}\n      <div className=\"bg-white rounded-lg border border-border shadow-sm overflow-hidden\">\n        <table className=\"w-full\">\n          <thead className=\"bg-gray-50 border-b border-border\">\n            <tr>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Project\n              </th>\n              <th className=\"px-6 py-3 text-right text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Hours\n              </th>\n              <th className=\"px-6 py-3 text-right text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Percentage\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y divide-border\">\n            {data.map((project, index) => (\n              <tr\n                key={project.projectId}\n                className=\"hover:bg-gray-50 transition-colors\"\n              >\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"flex items-center gap-2\">\n                    <div\n                      className=\"w-3 h-3 rounded-full flex-shrink-0\"\n                      style={{ backgroundColor: project.color }}\n                    />\n                    <span className=\"text-sm font-medium text-foreground\">\n                      {project.projectName}\n                    </span>\n                  </div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-foreground\">\n                  {formatHours(project.hours)}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm text-muted-foreground\">\n                  {project.percentage.toFixed(1)}%\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ProfileTabs.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'firebaseApi' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 6,
        "column": 30,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Session' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Project' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'showPrivateContent' is assigned a value but never used. Allowed unused args must match /^_/u.",
        "line": 44,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 44,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'userId' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 45,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 45,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isLoadingSessions' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 403,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 403,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 414,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 414,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13900, 13903], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13900, 13903], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { firebaseSessionApi, firebaseApi, firebaseUserApi, firebasePostApi } from '@/lib/api';\nimport { Session, User, Project, SessionWithDetails } from '@/types';\nimport SessionCard from './SessionCard';\nimport ConfirmDialog from './ConfirmDialog';\nimport {\n  BarChart3,\n  Trophy,\n  Users,\n  FileText,\n  Calendar,\n  TrendingUp,\n  Award,\n  Clock\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { debug } from '@/lib/debug';\n\nexport type ProfileTab = 'overview' | 'achievements' | 'followers' | 'following' | 'posts';\n\ninterface ProfileTabsProps {\n  activeTab: ProfileTab;\n  onTabChange: (tab: ProfileTab) => void;\n  stats?: {\n    totalHours: number;\n    currentStreak: number;\n    achievements: number;\n    followers: number;\n    following: number;\n    posts: number;\n  };\n  showPrivateContent?: boolean;\n  userId?: string;\n}\n\nexport const ProfileTabs: React.FC<ProfileTabsProps> = ({\n  activeTab,\n  onTabChange,\n  stats,\n  showPrivateContent = false,\n  userId,\n}) => {\n  const tabs: Array<{\n    id: ProfileTab;\n    label: string;\n    icon: React.ReactNode;\n    badge?: number;\n    disabled?: boolean;\n  }> = [\n    {\n      id: 'overview',\n      label: 'Overview',\n      icon: <BarChart3 className=\"w-4 h-4\" />,\n    },\n    {\n      id: 'achievements',\n      label: 'Achievements',\n      icon: <Trophy className=\"w-4 h-4\" />,\n    },\n    {\n      id: 'followers',\n      label: 'Followers',\n      icon: <Users className=\"w-4 h-4\" />,\n      badge: stats?.followers,\n    },\n    {\n      id: 'following',\n      label: 'Following',\n      icon: <Users className=\"w-4 h-4\" />,\n      badge: stats?.following,\n    },\n    {\n      id: 'posts',\n      label: 'Posts',\n      icon: <FileText className=\"w-4 h-4\" />,\n      badge: stats?.posts,\n    },\n  ];\n\n  return (\n    <div className=\"border-b border-border\">\n      <div className=\"flex space-x-0 overflow-x-auto scrollbar-hide\">\n        {tabs.map((tab) => (\n          <Button\n            key={tab.id}\n            variant={activeTab === tab.id ? \"default\" : \"ghost\"}\n            onClick={() => !tab.disabled && onTabChange(tab.id)}\n            disabled={tab.disabled}\n            className={cn(\n              'flex items-center gap-1.5 md:gap-2 px-3 md:px-4 py-2 rounded-none border-b-2 transition-all flex-shrink-0',\n              activeTab === tab.id\n                ? 'border-primary text-primary bg-primary/5'\n                : 'border-transparent text-muted-foreground hover:text-foreground hover:border-muted-foreground/50',\n              tab.disabled && 'opacity-50 cursor-not-allowed'\n            )}\n          >\n            {tab.icon}\n            <span className=\"hidden md:inline whitespace-nowrap text-sm md:text-base\">{tab.label}</span>\n            {tab.badge !== undefined && (\n              <Badge\n                variant={activeTab === tab.id ? \"secondary\" : \"outline\"}\n                className=\"ml-0.5 md:ml-1 text-xs px-1.5 py-0 md:inline hidden\"\n              >\n                {tab.badge}\n              </Badge>\n            )}\n          </Button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Tab content components\ninterface TabContentProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport const TabContent: React.FC<TabContentProps> = ({ children, className = \"\" }) => (\n  <div className={cn('py-6', className)}>\n    {children}\n  </div>\n);\n\n// Overview tab content\ninterface OverviewContentProps {\n  stats?: {\n    totalHours: number;\n    weeklyHours: number;\n    monthlyHours: number;\n    currentStreak: number;\n    longestStreak: number;\n    sessionsThisWeek: number;\n    sessionsThisMonth: number;\n    averageSessionDuration: number;\n    mostProductiveHour: number;\n  };\n}\n\nexport const OverviewContent: React.FC<OverviewContentProps> = ({ stats }) => {\n  if (!stats) {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-4 bg-muted rounded w-3/4 mx-auto mb-4\"></div>\n          <div className=\"h-4 bg-muted rounded w-1/2 mx-auto\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const formatHours = (hours: number | undefined): string => {\n    if (hours === undefined || hours === null || isNaN(hours)) {\n      return '0h';\n    }\n    if (hours < 1) {\n      const minutes = Math.round(hours * 60);\n      return `${minutes}m`;\n    }\n    return `${hours.toFixed(1)}h`;\n  };\n\n  const formatDuration = (minutes: number): string => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    if (hours > 0) {\n      return `${hours}h ${mins}m`;\n    }\n    return `${mins}m`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Key Stats Grid */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <div className=\"bg-card-background p-4 rounded-lg border border-border\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-2\">\n            <Clock className=\"w-4 h-4\" />\n            <span className=\"text-sm\">Total Hours</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">\n            {formatHours(stats.totalHours)}\n          </div>\n        </div>\n\n        <div className=\"bg-card-background p-4 rounded-lg border border-border\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-2\">\n            <TrendingUp className=\"w-4 h-4\" />\n            <span className=\"text-sm\">Current Streak</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">\n            {stats.currentStreak} days\n          </div>\n        </div>\n\n        <div className=\"bg-card-background p-4 rounded-lg border border-border\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-2\">\n            <Calendar className=\"w-4 h-4\" />\n            <span className=\"text-sm\">This Week</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">\n            {formatHours(stats.weeklyHours)}\n          </div>\n        </div>\n\n        <div className=\"bg-card-background p-4 rounded-lg border border-border\">\n          <div className=\"flex items-center gap-2 text-muted-foreground mb-2\">\n            <Award className=\"w-4 h-4\" />\n            <span className=\"text-sm\">Longest Streak</span>\n          </div>\n          <div className=\"text-2xl font-bold text-foreground\">\n            {stats.longestStreak} days\n          </div>\n        </div>\n      </div>\n\n      {/* Additional Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div className=\"bg-card-background p-6 rounded-lg border border-border\">\n          <h3 className=\"font-semibold text-foreground mb-4\">Activity Summary</h3>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Sessions this week:</span>\n              <span className=\"font-medium\">{stats.sessionsThisWeek}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Sessions this month:</span>\n              <span className=\"font-medium\">{stats.sessionsThisMonth}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Avg session duration:</span>\n              <span className=\"font-medium\">{formatDuration(stats.averageSessionDuration)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Most productive hour:</span>\n              <span className=\"font-medium\">{stats.mostProductiveHour}:00</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-card-background p-6 rounded-lg border border-border\">\n          <h3 className=\"font-semibold text-foreground mb-4\">Monthly Overview</h3>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Total hours:</span>\n              <span className=\"font-medium\">{formatHours(stats.monthlyHours)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Daily average:</span>\n              <span className=\"font-medium\">\n                {formatHours(stats.monthlyHours / 30)}\n              </span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Weekly average:</span>\n              <span className=\"font-medium\">{formatHours(stats.monthlyHours / 4.3)}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Placeholder components for other tabs\nexport const AchievementsContent: React.FC = () => (\n  <div className=\"text-center py-12\">\n    <Trophy className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n    <h3 className=\"text-lg font-semibold text-foreground mb-2\">Achievements</h3>\n    <p className=\"text-muted-foreground\">\n      Achievement system coming soon! Track your milestones and earn badges.\n    </p>\n  </div>\n);\n\ninterface FollowListContentProps {\n  userId: string;\n  type: 'followers' | 'following';\n}\n\nexport const FollowListContent: React.FC<FollowListContentProps> = ({ userId, type }) => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadUsers = async () => {\n      try {\n        setIsLoading(true);\n        setError(null);\n\n        if (type === 'followers') {\n          const followers = await firebaseUserApi.getFollowers(userId);\n          setUsers(followers);\n        } else {\n          const following = await firebaseUserApi.getFollowing(userId);\n          setUsers(following);\n        }\n      } catch (err: unknown) {\n        debug.error(`ProfileTabs - Failed to load ${type}:`, err);\n        setError(err.message || `Failed to load ${type}`);\n      } finally{\n        setIsLoading(false);\n      }\n    };\n\n    if (userId) {\n      loadUsers();\n    }\n  }, [userId, type]);\n\n  if (isLoading) {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-4 bg-muted rounded w-3/4 mx-auto mb-4\"></div>\n          <div className=\"h-4 bg-muted rounded w-1/2 mx-auto\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-12\">\n        <Users className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-foreground mb-2\">Error</h3>\n        <p className=\"text-muted-foreground\">{error}</p>\n      </div>\n    );\n  }\n\n  if (users.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <Users className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n          No {type === 'followers' ? 'Followers' : 'Following'}\n        </h3>\n        <p className=\"text-muted-foreground\">\n          {type === 'followers'\n            ? 'No one is following this user yet.'\n            : 'Not following anyone yet.'}\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-0 divide-y divide-border\">\n      {users.map((user) => (\n        <a\n          key={user.id}\n          href={`/profile/${user.username}`}\n          className=\"flex items-center gap-4 p-4 hover:bg-gray-50 transition-colors\"\n        >\n          <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center text-gray-600 font-semibold text-lg flex-shrink-0\">\n            {user.name.charAt(0).toUpperCase()}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"font-semibold text-foreground\">{user.name}</div>\n            <div className=\"text-sm text-muted-foreground\">@{user.username}</div>\n            {user.bio && (\n              <p className=\"mt-1 text-sm text-muted-foreground line-clamp-1\">{user.bio}</p>\n            )}\n          </div>\n          <div className=\"flex items-center gap-4 text-sm text-muted-foreground flex-shrink-0\">\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-foreground\">{user.followersCount}</div>\n              <div className=\"text-xs\">followers</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-foreground\">{user.followingCount}</div>\n              <div className=\"text-xs\">following</div>\n            </div>\n          </div>\n        </a>\n      ))}\n    </div>\n  );\n};\n\nexport const FollowingContent: React.FC<{ userId: string }> = ({ userId }) => (\n  <FollowListContent userId={userId} type=\"following\" />\n);\n\nexport const FollowersContent: React.FC<{ userId: string }> = ({ userId }) => (\n  <FollowListContent userId={userId} type=\"followers\" />\n);\n\ninterface PostsContentProps {\n  userId: string;\n  isOwnProfile?: boolean;\n}\n\nexport const PostsContent: React.FC<PostsContentProps> = ({ userId, isOwnProfile = false }) => {\n  const [sessions, setSessions] = useState<SessionWithDetails[]>([]);\n  const [isLoadingSessions, setIsLoadingSessions] = useState(false);\n  const [deleteConfirmSession, setDeleteConfirmSession] = useState<string | null>(null);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const loadSessions = async () => {\n      try {\n        setIsLoadingSessions(true);\n        const userSessions = await firebaseSessionApi.getUserSessions(userId, 50);\n        // Ensure sessions have activity field (backwards compatibility)\n        const sessionsWithActivity = userSessions.map((session: any) => ({\n          ...session,\n          activity: session.activity || session.project,\n        }));\n        setSessions(sessionsWithActivity);\n      } catch (err: unknown) {\n        debug.error('ProfileTabs - Failed to load sessions:', err);\n        setError(err.message || 'Failed to load posts');\n      } finally {\n        setIsLoadingSessions(false);\n      }\n    };\n\n    loadSessions();\n  }, [userId]);\n\n  // Handle support\n  const handleSupport = useCallback(async (sessionId: string) => {\n    try {\n      await firebasePostApi.supportSession(sessionId);\n      setSessions(prev => prev.map(s =>\n        s.id === sessionId\n          ? { ...s, supportCount: s.supportCount + 1, isSupported: true }\n          : s\n      ));\n    } catch (err: unknown) {\n      debug.error('ProfileTabs - Failed to support session:', err);\n    }\n  }, []);\n\n  const handleRemoveSupport = useCallback(async (sessionId: string) => {\n    try {\n      await firebasePostApi.removeSupportFromSession(sessionId);\n      setSessions(prev => prev.map(s =>\n        s.id === sessionId\n          ? { ...s, supportCount: Math.max(0, s.supportCount - 1), isSupported: false }\n          : s\n      ));\n    } catch (err: unknown) {\n      debug.error('ProfileTabs - Failed to remove support:', err);\n    }\n  }, []);\n\n  const handleShare = useCallback(async (sessionId: string) => {\n    try {\n      // Share functionality - copy link to clipboard\n      const shareUrl = `${window.location.origin}/sessions/${sessionId}`;\n      await navigator.clipboard.writeText(shareUrl);\n      // You could add a toast notification here\n    } catch (err: unknown) {\n      debug.error('ProfileTabs - Failed to share session:', err);\n    }\n  }, []);\n\n  // Handle delete\n  const handleDelete = useCallback(async (sessionId: string) => {\n    setDeleteConfirmSession(sessionId);\n  }, []);\n\n  const confirmDelete = useCallback(async () => {\n    if (!deleteConfirmSession) return;\n\n    try {\n      setIsDeleting(true);\n      await firebaseSessionApi.deleteSession(deleteConfirmSession);\n      setSessions(prev => prev.filter(session => session.id !== deleteConfirmSession));\n      setDeleteConfirmSession(null);\n    } catch (err: unknown) {\n      debug.error('ProfileTabs - Failed to delete session:', err);\n    } finally {\n      setIsDeleting(false);\n    }\n  }, [deleteConfirmSession]);\n\n  if (error) {\n    return (\n      <div className=\"text-center py-12\">\n        <FileText className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-foreground mb-2\">Error loading posts</h3>\n        <p className=\"text-muted-foreground\">{error}</p>\n      </div>\n    );\n  }\n\n  if (sessions.length === 0) {\n    return (\n      <div className=\"text-center py-12\">\n        <FileText className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n          {isOwnProfile ? 'No sessions yet' : 'No sessions'}\n        </h3>\n        <p className=\"text-muted-foreground\">\n          {isOwnProfile\n            ? 'Complete some sessions to see them here.'\n            : 'This user hasn\\'t shared any sessions yet.'\n          }\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {sessions.map((session) => (\n        <SessionCard\n          key={session.id}\n          session={session}\n          onSupport={handleSupport}\n          onRemoveSupport={handleRemoveSupport}\n          onShare={handleShare}\n          onDelete={isOwnProfile ? handleDelete : undefined}\n          showComments={true}\n        />\n      ))}\n\n      {/* Delete Confirmation Dialog */}\n      <ConfirmDialog\n        isOpen={deleteConfirmSession !== null}\n        onClose={() => setDeleteConfirmSession(null)}\n        onConfirm={confirmDelete}\n        title=\"Delete Session\"\n        message=\"Are you sure you want to delete this session? This action cannot be undone and all associated data will be permanently removed.\"\n        confirmText=\"Delete Session\"\n        cancelText=\"Cancel\"\n        variant=\"danger\"\n        isLoading={isDeleting}\n      />\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ProgressRing.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ProjectAnalytics.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ProjectStats' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 7,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'firebaseProjectApi' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 8,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'firebaseSessionApi' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 8,
        "column": 30,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 48
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 67,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 67,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2222, 2225], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2222, 2225], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'weekKey' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 115,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 115,
        "endColumn": 23
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadAnalyticsData'. Either include it or remove the dependency array.",
        "line": 192,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 192,
        "endColumn": 39,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadAnalyticsData, projectId, selectedPeriod, user]",
            "fix": {
              "range": [6254, 6287],
              "text": "[loadAnalyticsData, projectId, selectedPeriod, user]"
            }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Clock, Target, TrendingUp, BarChart3 } from 'lucide-react';\nimport { ActivityChart } from './ActivityChart';\nimport { ProgressRing } from './ProgressRing';\nimport { AnalyticsPeriod, ProjectStats } from '@/types';\nimport { firebaseProjectApi, firebaseSessionApi } from '@/lib/api';\nimport { useAuth } from '@/hooks/useAuth';\nimport { debug } from '@/lib/debug';\n\ninterface ProjectAnalyticsProps {\n  projectId: string;\n  projectName: string;\n}\n\nconst PERIODS: AnalyticsPeriod[] = [\n  { label: '7D', value: '7d', days: 7 },\n  { label: '1M', value: '1m', days: 30 },\n  { label: '3M', value: '3m', days: 90 },\n  { label: '6M', value: '6m', days: 180 },\n  { label: '1Y', value: '1y', days: 365 },\n  { label: 'All', value: 'all', days: 9999 },\n];\n\ninterface ProjectAnalyticsData {\n  totalHours: number;\n  weeklyAverage: number;\n  sessionCount: number;\n  averageSessionDuration: number;\n  goalProgress: {\n    current: number;\n    target: number | null;\n    percentage: number;\n    estimatedCompletion: Date | null;\n  };\n  cumulativeHours: Array<{ label: string; value: number }>;\n  sessionFrequency: Array<{ label: string; value: number }>;\n}\n\nexport const ProjectAnalytics: React.FC<ProjectAnalyticsProps> = ({\n  projectId,\n  projectName,\n}) => {\n  const { user } = useAuth();\n  const defaultPeriod: AnalyticsPeriod = PERIODS[1] ||\n    PERIODS[0] || { label: '7D', value: '7d' as const, days: 7 };\n  const [selectedPeriod, setSelectedPeriod] =\n    useState<AnalyticsPeriod>(defaultPeriod);\n  const [isLoading, setIsLoading] = useState(true);\n  const [analyticsData, setAnalyticsData] =\n    useState<ProjectAnalyticsData | null>(null);\n\n  const loadAnalyticsData = async () => {\n    if (!user) return;\n\n    try {\n      setIsLoading(true);\n\n      // Get sessions for this project within the selected period\n      const endDate = new Date();\n      const startDate = new Date();\n      startDate.setDate(endDate.getDate() - (selectedPeriod?.days || 0));\n\n      // TODO: Implement getSessionsByProject(projectId, startDate, endDate) in src/lib/api/sessions/\n      // This should filter sessions by projectId and date range for analytics\n      const sessions: any[] = [];\n\n      // Calculate cumulative hours data\n      const dailyHours: Record<string, number> = {};\n      let cumulativeTotal = 0;\n\n      sessions.forEach(session => {\n        const sessionDate = new Date(session.createdAt);\n        const dateKey = sessionDate.toISOString().split('T')[0];\n        if (dateKey) {\n          dailyHours[dateKey] =\n            (dailyHours[dateKey] || 0) + session.duration / 3600;\n        }\n      });\n\n      // Generate cumulative hours chart data\n      const cumulativeHours = [];\n      for (let i = (selectedPeriod?.days || 0) - 1; i >= 0; i--) {\n        const date = new Date();\n        date.setDate(date.getDate() - i);\n        const dateKey = date.toISOString().split('T')[0];\n        const dailyHour = dateKey ? dailyHours[dateKey] || 0 : 0;\n        cumulativeTotal += dailyHour;\n\n        cumulativeHours.push({\n          label: date.toLocaleDateString('en-US', {\n            month: 'short',\n            day: 'numeric',\n          }),\n          value: Math.round(cumulativeTotal * 10) / 10,\n        });\n      }\n\n      // Generate session frequency data (weekly)\n      const weeklyData: Record<string, number> = {};\n      sessions.forEach(session => {\n        const sessionDate = new Date(session.createdAt);\n        const weekStart = new Date(sessionDate);\n        weekStart.setDate(sessionDate.getDate() - sessionDate.getDay());\n        const weekKey = weekStart.toISOString().split('T')[0];\n        if (weekKey) {\n          weeklyData[weekKey] = (weeklyData[weekKey] || 0) + 1;\n        }\n      });\n\n      const sessionFrequency = Object.entries(weeklyData)\n        .sort(([a], [b]) => a.localeCompare(b))\n        .slice(-12) // Last 12 weeks\n        .map(([weekKey, count], index) => ({\n          label: `Week ${index + 1}`,\n          value: count,\n        }));\n\n      // Calculate stats from sessions\n      const totalHours = sessions.reduce(\n        (sum, s) => sum + s.duration / 3600,\n        0\n      );\n      const periodDays = selectedPeriod?.days || 1;\n      const weeklyHours = Math.round((totalHours / periodDays) * 7 * 10) / 10;\n\n      // Calculate goal progress (you would get target from project settings)\n      const target = null; // TODO: Add hourGoal field to Project type and fetch from project data\n      const goalProgress = {\n        current: totalHours,\n        target,\n        percentage: target ? (totalHours / target) * 100 : 0,\n        estimatedCompletion:\n          target && weeklyHours > 0\n            ? new Date(\n                Date.now() +\n                  ((target - totalHours) / weeklyHours) *\n                    7 *\n                    24 *\n                    60 *\n                    60 *\n                    1000\n              )\n            : null,\n      };\n\n      setAnalyticsData({\n        totalHours: Math.round(totalHours * 10) / 10,\n        weeklyAverage: weeklyHours,\n        sessionCount: sessions.length,\n        averageSessionDuration:\n          sessions.length > 0\n            ? Math.round(\n                (sessions.reduce((sum, s) => sum + s.duration, 0) /\n                  sessions.length /\n                  60) *\n                  10\n              ) / 10\n            : 0,\n        goalProgress,\n        cumulativeHours,\n        sessionFrequency:\n          sessionFrequency.length > 0\n            ? sessionFrequency\n            : [{ label: 'This Week', value: sessions.length }],\n      });\n    } catch (error) {\n      debug.error('ProjectAnalytics - Failed to load analytics data:', error);\n      // Fallback to basic data\n      setAnalyticsData({\n        totalHours: 0,\n        weeklyAverage: 0,\n        sessionCount: 0,\n        averageSessionDuration: 0,\n        goalProgress: {\n          current: 0,\n          target: null,\n          percentage: 0,\n          estimatedCompletion: null,\n        },\n        cumulativeHours: [{ label: 'Today', value: 0 }],\n        sessionFrequency: [{ label: 'This Week', value: 0 }],\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadAnalyticsData();\n  }, [projectId, selectedPeriod, user]);\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"h-8 bg-gray-200 rounded animate-pulse mb-4\"></div>\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          {[...Array(4)].map((_, i) => (\n            <div\n              key={i}\n              className=\"h-24 bg-gray-200 rounded animate-pulse\"\n            ></div>\n          ))}\n        </div>\n        <div className=\"h-64 bg-gray-200 rounded animate-pulse\"></div>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div className=\"h-64 bg-gray-200 rounded animate-pulse\"></div>\n          <div className=\"h-64 bg-gray-200 rounded animate-pulse\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!analyticsData) {\n    return (\n      <div className=\"text-center py-12\">\n        <p className=\"text-gray-500\">No analytics data available</p>\n      </div>\n    );\n  }\n\n  const daysUntilGoal = analyticsData.goalProgress.estimatedCompletion\n    ? Math.ceil(\n        (analyticsData.goalProgress.estimatedCompletion.getTime() -\n          Date.now()) /\n          (1000 * 60 * 60 * 24)\n      )\n    : null;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">\n            {projectName} Analytics\n          </h2>\n          <p className=\"text-gray-600\">\n            Detailed project insights and progress\n          </p>\n        </div>\n\n        <div className=\"flex gap-1\">\n          {PERIODS.map(period => (\n            <button\n              key={period.value}\n              onClick={() => setSelectedPeriod(period)}\n              className={`px-3 py-1.5 rounded-md text-sm font-medium transition-colors ${\n                selectedPeriod.value === period.value\n                  ? 'bg-gray-900 text-white'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              }`}\n            >\n              {period.label}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Key metrics row */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <Clock className=\"w-5 h-5 text-gray-600\" />\n            <span className=\"text-sm font-medium text-gray-600\">\n              Total Hours\n            </span>\n          </div>\n          <p className=\"text-3xl font-bold text-gray-900\">\n            {analyticsData.totalHours}\n          </p>\n          <p className=\"text-xs text-gray-500 mt-1\">\n            {analyticsData.weeklyAverage}h per week avg\n          </p>\n        </div>\n\n        <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <BarChart3 className=\"w-5 h-5 text-gray-600\" />\n            <span className=\"text-sm font-medium text-gray-600\">Sessions</span>\n          </div>\n          <p className=\"text-3xl font-bold text-gray-900\">\n            {analyticsData.sessionCount}\n          </p>\n          <p className=\"text-xs text-gray-500 mt-1\">\n            {analyticsData.averageSessionDuration}min avg duration\n          </p>\n        </div>\n\n        <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <Target className=\"w-5 h-5 text-gray-600\" />\n            <span className=\"text-sm font-medium text-gray-600\">\n              Goal Progress\n            </span>\n          </div>\n          <p className=\"text-3xl font-bold text-gray-900\">\n            {analyticsData.goalProgress.target\n              ? `${Math.round(analyticsData.goalProgress.percentage)}%`\n              : 'No Goal'}\n          </p>\n          <p className=\"text-xs text-gray-500 mt-1\">\n            {analyticsData.goalProgress.target\n              ? `${analyticsData.goalProgress.current}h / ${analyticsData.goalProgress.target}h`\n              : 'Set a target goal'}\n          </p>\n        </div>\n\n        <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <TrendingUp className=\"w-5 h-5 text-gray-600\" />\n            <span className=\"text-sm font-medium text-gray-600\">\n              Weekly Avg\n            </span>\n          </div>\n          <p className=\"text-3xl font-bold text-gray-900\">\n            {analyticsData.weeklyAverage}\n          </p>\n          <p className=\"text-xs text-gray-500 mt-1\">hours per week</p>\n        </div>\n      </div>\n\n      {/* Goal progress */}\n      {analyticsData.goalProgress.target && (\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex-1\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                Goal Progress\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div>\n                  <p className=\"text-sm text-gray-600 mb-1\">Current Progress</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {analyticsData.goalProgress.current}h /{' '}\n                    {analyticsData.goalProgress.target}h\n                  </p>\n                </div>\n\n                {daysUntilGoal && daysUntilGoal > 0 && (\n                  <div>\n                    <p className=\"text-sm text-gray-600 mb-1\">\n                      Estimated Completion\n                    </p>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      {daysUntilGoal} days\n                    </p>\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      {analyticsData.goalProgress.estimatedCompletion?.toLocaleDateString()}\n                    </p>\n                  </div>\n                )}\n\n                <div>\n                  <p className=\"text-sm text-gray-600 mb-1\">Hours Remaining</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {Math.max(\n                      0,\n                      analyticsData.goalProgress.target -\n                        analyticsData.goalProgress.current\n                    )}\n                    h\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"ml-6\">\n              <ProgressRing\n                progress={Math.min(analyticsData.goalProgress.percentage, 100)}\n                size={120}\n                color=\"#374151\"\n              />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Cumulative hours */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">\n              Cumulative Hours\n            </h3>\n            {analyticsData.goalProgress.target && (\n              <div className=\"text-sm text-gray-500\">\n                Goal: {analyticsData.goalProgress.target}h\n              </div>\n            )}\n          </div>\n          <ActivityChart\n            data={analyticsData.cumulativeHours}\n            type=\"line\"\n            height={240}\n            color=\"#374151\"\n            valueFormatter={v => `${v}h`}\n          />\n          {analyticsData.goalProgress.target &&\n            daysUntilGoal &&\n            daysUntilGoal > 0 && (\n              <div className=\"mt-4 p-3 bg-gray-50 rounded-lg\">\n                <p className=\"text-sm text-gray-700\">\n                  At your current pace, you'll reach your goal in{' '}\n                  <span className=\"font-semibold\">{daysUntilGoal} days</span>.\n                </p>\n              </div>\n            )}\n        </div>\n\n        {/* Session frequency */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Session Frequency\n          </h3>\n          <ActivityChart\n            data={analyticsData.sessionFrequency}\n            type=\"bar\"\n            height={240}\n            color=\"#6B7280\"\n            valueFormatter={v => `${v} sessions`}\n          />\n          <div className=\"mt-4 p-3 bg-gray-50 rounded-lg\">\n            <p className=\"text-sm text-gray-700\">\n              Average of{' '}\n              <span className=\"font-semibold\">\n                {analyticsData.sessionFrequency.length > 0\n                  ? (\n                      analyticsData.sessionFrequency.reduce(\n                        (sum, d) => sum + d.value,\n                        0\n                      ) / analyticsData.sessionFrequency.length\n                    ).toFixed(1)\n                  : '0'}{' '}\n                sessions\n              </span>{' '}\n              per week\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ProjectAnalyticsDashboard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ProjectCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ProjectList.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'useCallback' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'onCreateProject' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 23,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 18
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useCallback } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Project } from '@/types';\nimport { ProjectCard } from './ProjectCard';\nimport { useAuth } from '@/hooks/useAuth';\nimport {\n  useActivities,\n  useDeleteActivity,\n  useArchiveActivity,\n  useRestoreActivity,\n} from '@/hooks/useActivitiesQuery';\n\ninterface ProjectListProps {\n  onCreateProject?: () => void;\n  onEditProject?: (project: Project) => void;\n}\n\n// const STORAGE_KEY = 'projectViewMode';\n\nexport const ProjectList: React.FC<ProjectListProps> = ({\n  onCreateProject,\n  onEditProject,\n}) => {\n  const router = useRouter();\n  const { user } = useAuth();\n  const { data: projects = [], isLoading, error } = useActivities(user?.id);\n  const deleteProjectMutation = useDeleteActivity();\n  const archiveProjectMutation = useArchiveActivity();\n  const restoreProjectMutation = useRestoreActivity();\n  // const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');\n  const [deleteConfirm, setDeleteConfirm] = useState<Project | null>(null);\n\n  // // Load view mode from localStorage on mount\n  // useEffect(() => {\n  //   const savedViewMode = localStorage.getItem(STORAGE_KEY);\n  //   if (savedViewMode === 'grid' || savedViewMode === 'list') {\n  //     setViewMode(savedViewMode);\n  //   }\n  // }, []);\n\n  // // Save view mode to localStorage whenever it changes\n  // const handleViewModeChange = (mode: 'grid' | 'list') => {\n  //   setViewMode(mode);\n  //   localStorage.setItem(STORAGE_KEY, mode);\n  // };\n\n  // Show all projects\n  const filteredProjects = projects;\n\n  const handleDelete = async (project: Project) => {\n    try {\n      await deleteProjectMutation.mutateAsync(project.id);\n      setDeleteConfirm(null);\n    } catch (error) {\n      console.error('Failed to delete project:', error);\n    }\n  };\n\n  const handleArchive = async (project: Project) => {\n    try {\n      if (project.status === 'archived') {\n        await restoreProjectMutation.mutateAsync(project.id);\n      } else {\n        await archiveProjectMutation.mutateAsync(project.id);\n      }\n    } catch (error) {\n      console.error('Failed to archive/restore project:', error);\n    }\n  };\n\n  const handleRestore = async (project: Project) => {\n    try {\n      await restoreProjectMutation.mutateAsync(project.id);\n    } catch (error) {\n      console.error('Failed to restore project:', error);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        {/* Loading skeleton for header */}\n        <div className=\"flex justify-between items-center\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-gray-200 rounded w-32\"></div>\n          </div>\n          <div className=\"flex gap-2\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-10 bg-gray-200 rounded w-24\"></div>\n            </div>\n            <div className=\"animate-pulse\">\n              <div className=\"h-10 bg-gray-200 rounded w-24\"></div>\n            </div>\n          </div>\n        </div>\n\n        {/* Loading skeleton for filters */}\n        <div className=\"flex gap-2\">\n          {[1, 2, 3, 4].map(i => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"h-8 bg-gray-200 rounded w-20\"></div>\n            </div>\n          ))}\n        </div>\n\n        {/* Loading skeleton for project cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[1, 2, 3, 4, 5, 6].map(i => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"w-12 h-12 bg-gray-200 rounded-lg\"></div>\n                  <div className=\"w-5 h-5 bg-gray-200 rounded\"></div>\n                </div>\n                <div className=\"mb-4\">\n                  <div className=\"h-6 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-full\"></div>\n                </div>\n                <div className=\"space-y-3\">\n                  <div className=\"h-2 bg-gray-200 rounded w-full\"></div>\n                  <div className=\"h-2 bg-gray-200 rounded w-2/3\"></div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"text-red-500 text-lg mb-4\">\n          Error loading activities\n        </div>\n        <p className=\"text-gray-600 mb-4\">\n          {error instanceof Error ? error.message : String(error)}\n        </p>\n        <button\n          onClick={() => window.location.reload()}\n          className=\"bg-orange-500 text-white px-4 py-2 rounded-lg hover:bg-orange-600 transition-colors\"\n        >\n          Try Again\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        {/* Header */}\n        <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 pb-2\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-1\">\n              Activities\n            </h1>\n            <p className=\"text-gray-600 text-sm\">\n              {filteredProjects.length} activit\n              {filteredProjects.length !== 1 ? 'ies' : 'y'}\n            </p>\n          </div>\n          <div className=\"flex gap-2\">\n            <button\n              onClick={() => router.push('/activities/new')}\n              className=\"bg-[#007AFF] text-white px-5 py-2.5 rounded-lg hover:bg-[#0056D6] transition-colors flex items-center gap-2 font-medium shadow-sm hover:shadow-md\"\n            >\n              <svg\n                className=\"w-5 h-5\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\n                />\n              </svg>\n              New Activity\n            </button>\n            {/* View mode toggle removed - grid view only */}\n          </div>\n        </div>\n      </div>\n\n      {/* Projects Grid/List */}\n      {filteredProjects.length === 0 ? (\n        <div className=\"bg-white rounded-xl border border-gray-200 p-8 md:p-12\">\n          <div className=\"max-w-md mx-auto text-center\">\n            <div className=\"w-16 h-16 md:w-20 md:h-20 bg-gradient-to-br from-[#007AFF] to-[#0051D5] rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-sm\">\n              <svg\n                className=\"w-8 h-8 md:w-10 md:h-10 text-white\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\n                />\n              </svg>\n            </div>\n            <h3 className=\"text-xl md:text-2xl font-bold text-gray-900 mb-2\">\n              No activities yet\n            </h3>\n            <p className=\"text-sm md:text-base text-gray-600 mb-6\">\n              Activities help you organize your work sessions and track progress\n              over time. Create your first activity to get started!\n            </p>\n            <button\n              onClick={() => router.push('/activities/new')}\n              className=\"inline-flex items-center gap-2 bg-[#007AFF] text-white px-6 py-3 rounded-xl hover:bg-[#0056D6] transition-colors font-medium shadow-sm mb-4\"\n            >\n              <svg\n                className=\"w-5 h-5\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\n                />\n              </svg>\n              Create Your First Activity\n            </button>\n            <p className=\"text-xs text-gray-500\">\n              Tip: You can assign tasks to activities and track time spent on\n              each one\n            </p>\n          </div>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredProjects.map(project => (\n            <ProjectCard\n              key={project.id}\n              project={project}\n              onEdit={onEditProject}\n              onDelete={project => setDeleteConfirm(project)}\n              onArchive={\n                project.status === 'active' ? handleArchive : handleRestore\n              }\n            />\n          ))}\n        </div>\n      )}\n\n      {/* Delete Confirmation Modal */}\n      {deleteConfirm && (\n        <div\n          className=\"fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4 animate-in fade-in duration-200\"\n          onClick={e => {\n            if (e.target === e.currentTarget) {\n              setDeleteConfirm(null);\n            }\n          }}\n        >\n          <div className=\"bg-white rounded-xl p-6 max-w-md w-full shadow-xl animate-in zoom-in-95 duration-200\">\n            <h3 className=\"text-xl font-bold text-gray-900 mb-3\">\n              Delete Activity\n            </h3>\n            <p className=\"text-gray-600 mb-6 leading-relaxed\">\n              Are you sure you want to delete{' '}\n              <span className=\"font-semibold text-gray-900\">\n                \"{deleteConfirm.name}\"\n              </span>\n              ? This action cannot be undone.\n            </p>\n            <div className=\"flex gap-3 justify-end\">\n              <button\n                onClick={() => setDeleteConfirm(null)}\n                className=\"px-5 py-2.5 text-gray-700 font-medium border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={() => handleDelete(deleteConfirm)}\n                className=\"px-5 py-2.5 bg-red-500 text-white font-medium rounded-lg hover:bg-red-600 transition-colors shadow-sm hover:shadow-md\"\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ProjectProgressView.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadSessions'. Either include it or remove the dependency array.",
        "line": 38,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 38,
        "endColumn": 17,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadSessions, projectId]",
            "fix": { "range": [973, 984], "text": "[loadSessions, projectId]" }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'processChartData'. Either include it or remove the dependency array.",
        "line": 42,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 42,
        "endColumn": 28,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [processChartData, sessions, timePeriod]",
            "fix": {
              "range": [1037, 1059],
              "text": "[processChartData, sessions, timePeriod]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 347,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 347,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11438, 11441], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11438, 11441], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Clock, Target, Calendar, Heart, ChevronDown } from 'lucide-react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  Tooltip,\n} from 'recharts';\nimport { firebaseSessionApi } from '@/lib/api';\nimport { Session } from '@/types';\n\ninterface ProjectProgressViewProps {\n  projectId: string;\n}\n\ntype TimePeriod = 'day' | 'week' | 'month' | 'year';\n\ninterface ChartDataPoint {\n  name: string;\n  hours: number;\n}\n\nexport const ProjectProgressView: React.FC<ProjectProgressViewProps> = ({\n  projectId,\n}) => {\n  const [timePeriod, setTimePeriod] = useState<TimePeriod>('week');\n  const [showTimePeriodDropdown, setShowTimePeriodDropdown] = useState(false);\n  const [sessions, setSessions] = useState<Session[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>([]);\n\n  useEffect(() => {\n    loadSessions();\n  }, [projectId]);\n\n  useEffect(() => {\n    processChartData();\n  }, [sessions, timePeriod]);\n\n  const loadSessions = async () => {\n    try {\n      setIsLoading(true);\n      const response = await firebaseSessionApi.getSessions(1, 500, {\n        projectId,\n      });\n      setSessions(response.sessions);\n    } catch (error) {\n      console.error('Failed to load sessions:', error);\n      setSessions([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const processChartData = () => {\n    const now = new Date();\n    const data: ChartDataPoint[] = [];\n\n    if (timePeriod === 'day') {\n      // Last 24 hours by hour\n      for (let i = 23; i >= 0; i--) {\n        const hour = new Date(now);\n        hour.setHours(hour.getHours() - i);\n        const hourLabel = hour.getHours().toString().padStart(2, '0');\n\n        const hoursWorked =\n          sessions.length > 0\n            ? sessions\n                .filter(s => {\n                  const sessionDate = new Date(s.startTime);\n                  return (\n                    sessionDate.getHours() === hour.getHours() &&\n                    sessionDate.toDateString() === hour.toDateString()\n                  );\n                })\n                .reduce((sum, s) => sum + s.duration / 3600, 0)\n            : 0;\n\n        data.push({ name: hourLabel, hours: Number(hoursWorked.toFixed(2)) });\n      }\n    } else if (timePeriod === 'week') {\n      // Last 7 days\n      const dayNames = ['Sat', 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri'];\n      for (let i = 6; i >= 0; i--) {\n        const day = new Date(now);\n        day.setDate(day.getDate() - i);\n\n        const hoursWorked =\n          sessions.length > 0\n            ? sessions\n                .filter(\n                  s =>\n                    new Date(s.startTime).toDateString() === day.toDateString()\n                )\n                .reduce((sum, s) => sum + s.duration / 3600, 0)\n            : 0;\n\n        data.push({\n          name: dayNames[(7 - i) % 7] || '',\n          hours: Number(hoursWorked.toFixed(2)),\n        });\n      }\n    } else if (timePeriod === 'month') {\n      // Last 30 days grouped by week\n      for (let i = 3; i >= 0; i--) {\n        const weekStart = new Date(now);\n        weekStart.setDate(weekStart.getDate() - (i * 7 + 6));\n        const weekEnd = new Date(now);\n        weekEnd.setDate(weekEnd.getDate() - i * 7);\n\n        const hoursWorked =\n          sessions.length > 0\n            ? sessions\n                .filter(s => {\n                  const sessionDate = new Date(s.startTime);\n                  return sessionDate >= weekStart && sessionDate <= weekEnd;\n                })\n                .reduce((sum, s) => sum + s.duration / 3600, 0)\n            : 0;\n\n        data.push({\n          name: `Week ${4 - i}`,\n          hours: Number(hoursWorked.toFixed(2)),\n        });\n      }\n    } else if (timePeriod === 'year') {\n      // Last 12 months\n      const monthNames = [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec',\n      ];\n      for (let i = 11; i >= 0; i--) {\n        const month = new Date(now);\n        month.setMonth(month.getMonth() - i);\n\n        const hoursWorked =\n          sessions.length > 0\n            ? sessions\n                .filter(s => {\n                  const sessionDate = new Date(s.startTime);\n                  return (\n                    sessionDate.getMonth() === month.getMonth() &&\n                    sessionDate.getFullYear() === month.getFullYear()\n                  );\n                })\n                .reduce((sum, s) => sum + s.duration / 3600, 0)\n            : 0;\n\n        data.push({\n          name: monthNames[month.getMonth()] || '',\n          hours: Number(hoursWorked.toFixed(2)),\n        });\n      }\n    }\n\n    setChartData(data);\n  };\n\n  // Calculate stats\n  const totalHours = sessions.reduce((sum, s) => sum + s.duration / 3600, 0);\n  const totalSessions = sessions.length;\n\n  // Calculate streak\n  const sessionsByDate = new Map<string, boolean>();\n  sessions.forEach(s => {\n    const date = new Date(s.startTime);\n    date.setHours(0, 0, 0, 0);\n    const dateStr = date.toISOString().split('T')[0] ?? '';\n    if (dateStr) {\n      sessionsByDate.set(dateStr, true);\n    }\n  });\n\n  let currentStreak = 0;\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  const checkDate = new Date(today);\n\n  while (true) {\n    const dateStr: string = checkDate.toISOString().split('T')[0] ?? '';\n    if (!sessionsByDate.has(dateStr)) {\n      break;\n    }\n    currentStreak++;\n    checkDate.setDate(checkDate.getDate() - 1);\n  }\n\n  const avgPerDay =\n    totalHours > 0 && sessions.length > 0\n      ? (totalHours / 30).toFixed(1)\n      : '0.0';\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-4xl mx-auto p-6\">\n        <div className=\"animate-pulse space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            {[1, 2, 3, 4].map(i => (\n              <div key={i} className=\"h-24 bg-gray-200 rounded-xl\"></div>\n            ))}\n          </div>\n          <div className=\"h-64 bg-gray-200 rounded-xl\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-2 gap-4 mb-6\">\n        <div className=\"bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl p-4\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <div className=\"w-7 h-7 rounded-full bg-[#007AFF] flex items-center justify-center\">\n              <Clock className=\"w-4 h-4 text-white\" />\n            </div>\n            <span className=\"text-sm text-gray-600\">Total Time</span>\n          </div>\n          <div className=\"text-2xl font-bold text-gray-900\">\n            {totalHours.toFixed(1)}h\n          </div>\n        </div>\n\n        <div className=\"bg-gradient-to-br from-orange-50 to-orange-100 rounded-xl p-4\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <div className=\"w-7 h-7 rounded-full bg-[#FC4C02] flex items-center justify-center\">\n              <Target className=\"w-4 h-4 text-white\" />\n            </div>\n            <span className=\"text-sm text-gray-600\">Streak</span>\n          </div>\n          <div className=\"text-2xl font-bold text-gray-900\">\n            {currentStreak} days\n          </div>\n        </div>\n\n        <div className=\"bg-gradient-to-br from-green-50 to-green-100 rounded-xl p-4\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <div className=\"w-7 h-7 rounded-full bg-green-600 flex items-center justify-center\">\n              <Calendar className=\"w-4 h-4 text-white\" />\n            </div>\n            <span className=\"text-sm text-gray-600\">Sessions</span>\n          </div>\n          <div className=\"text-2xl font-bold text-gray-900\">\n            {totalSessions}\n          </div>\n        </div>\n\n        <div className=\"bg-gradient-to-br from-purple-50 to-purple-100 rounded-xl p-4\">\n          <div className=\"flex items-center gap-2 mb-2\">\n            <div className=\"w-7 h-7 rounded-full bg-purple-600 flex items-center justify-center\">\n              <Heart className=\"w-4 h-4 text-white\" />\n            </div>\n            <span className=\"text-sm text-gray-600\">Avg/Day</span>\n          </div>\n          <div className=\"text-2xl font-bold text-gray-900\">{avgPerDay}h</div>\n        </div>\n      </div>\n\n      {/* Chart with Time Period Dropdown */}\n      <div className=\"bg-white rounded-xl border border-gray-200 p-4 mb-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-bold\">\n            {timePeriod === 'day' && 'Today'}\n            {timePeriod === 'week' && 'This Week'}\n            {timePeriod === 'month' && 'This Month'}\n            {timePeriod === 'year' && 'This Year'}\n          </h3>\n          <div className=\"relative\">\n            <button\n              onClick={() => setShowTimePeriodDropdown(!showTimePeriodDropdown)}\n              className=\"flex items-center gap-1 px-3 py-1.5 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors\"\n            >\n              {timePeriod.charAt(0).toUpperCase() + timePeriod.slice(1)}\n              <ChevronDown className=\"w-4 h-4\" />\n            </button>\n            {showTimePeriodDropdown && (\n              <div className=\"absolute right-0 mt-2 w-32 bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-50\">\n                {(['day', 'week', 'month', 'year'] as TimePeriod[]).map(\n                  period => (\n                    <button\n                      key={period}\n                      onClick={() => {\n                        setTimePeriod(period);\n                        setShowTimePeriodDropdown(false);\n                      }}\n                      className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-100 ${\n                        timePeriod === period\n                          ? 'text-[#007AFF] font-medium'\n                          : 'text-gray-700'\n                      }`}\n                    >\n                      {period.charAt(0).toUpperCase() + period.slice(1)}\n                    </button>\n                  )\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n        <div className=\"h-48\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart\n              data={chartData}\n              margin={{ top: 10, right: 15, left: 0, bottom: 5 }}\n            >\n              <XAxis\n                dataKey=\"name\"\n                tick={{ fontSize: 12, fill: '#6b7280' }}\n                axisLine={false}\n                tickLine={false}\n              />\n              <YAxis\n                tick={{ fontSize: 12, fill: '#6b7280' }}\n                axisLine={false}\n                tickLine={false}\n                width={30}\n              />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: '#fff',\n                  border: '1px solid #e5e7eb',\n                  borderRadius: '8px',\n                  fontSize: '12px',\n                }}\n                formatter={(value: number) => [`${value}h`, 'Hours']}\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"hours\"\n                stroke=\"#007AFF\"\n                strokeWidth={2}\n                isAnimationActive={false}\n                dot={(props: any) => {\n                  const { cx, cy, index, payload } = props;\n                  const isLast = index === chartData.length - 1;\n                  return (\n                    <circle\n                      key={`dot-${index}-${payload.name}`}\n                      cx={cx}\n                      cy={cy}\n                      r={isLast ? 6 : 4}\n                      fill={isLast ? '#007AFF' : '#fff'}\n                      stroke=\"#007AFF\"\n                      strokeWidth={2}\n                    />\n                  );\n                }}\n                activeDot={{ r: 6 }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      </div>\n\n      {/* Activity Breakdown */}\n      <div className=\"bg-white rounded-xl border border-gray-200 p-4\">\n        <h3 className=\"text-lg font-bold mb-4\">Activity Breakdown</h3>\n        <div className=\"text-center py-8 text-gray-400\">\n          No activity data yet\n        </div>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ProtectedRoute.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'useState' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 21,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useRouter, usePathname } from 'next/navigation';\nimport { useAuth } from '@/hooks/useAuth';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n}\n\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {\n  const { isAuthenticated, isLoading } = useAuth();\n  const router = useRouter();\n  const pathname = usePathname();\n\n  useEffect(() => {\n    // Only redirect if auth is fully loaded and user is not authenticated\n    if (!isLoading && !isAuthenticated) {\n      // Store the intended destination for post-login redirect\n      const redirectTo = pathname !== '/' ? pathname : '/';\n      router.push(`/?redirect=${encodeURIComponent(redirectTo)}`);\n    }\n  }, [isAuthenticated, isLoading, pathname, router]);\n\n  // Show loading spinner while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-[#007AFF]\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // If not authenticated, show loading while redirect happens\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"flex flex-col items-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-[#007AFF]\"></div>\n          <p className=\"text-gray-600\">Redirecting...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // If authenticated, render the protected content\n  return <>{children}</>;\n};\n\nexport default ProtectedRoute;\nexport { ProtectedRoute };\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/RightSidebar.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'useCallback' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 38,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 49
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadSuggestedContent'. Either include it or remove the dependency array.",
        "line": 44,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 44,
        "endColumn": 12,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadSuggestedContent, user]",
            "fix": {
              "range": [1390, 1396],
              "text": "[loadSuggestedContent, user]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'index' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 184,
        "column": 51,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 184,
        "endColumn": 56
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 313,
        "column": 34,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 313,
        "endColumn": 39
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { useAuth } from '@/hooks/useAuth';\nimport { firebaseUserApi, firebaseApi } from '@/lib/api';\nimport { cachedQuery } from '@/lib/cache';\nimport GroupAvatar from '@/components/GroupAvatar';\nimport SuggestedPeopleModal from '@/components/SuggestedPeopleModal';\nimport SuggestedGroupsModal from '@/components/SuggestedGroupsModal';\n\ninterface SuggestedUser {\n  id: string;\n  name: string;\n  username: string;\n  location?: string;\n  followersCount: number;\n  profilePicture?: string;\n}\n\ninterface SuggestedGroup {\n  id: string;\n  name: string;\n  memberCount: number;\n  description: string;\n  imageUrl?: string;\n}\n\nfunction RightSidebar() {\n  const { user } = useAuth();\n  const [suggestedUsers, setSuggestedUsers] = useState<SuggestedUser[]>([]);\n  const [suggestedGroups, setSuggestedGroups] = useState<SuggestedGroup[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [followingUsers, setFollowingUsers] = useState<Set<string>>(new Set());\n  const [joiningGroups, setJoiningGroups] = useState<Set<string>>(new Set());\n  const [showPeopleModal, setShowPeopleModal] = useState(false);\n  const [showGroupsModal, setShowGroupsModal] = useState(false);\n\n  useEffect(() => {\n    if (user) {\n      loadSuggestedContent();\n    }\n  }, [user]);\n\n  const loadSuggestedContent = async () => {\n    try {\n      setIsLoading(true);\n\n      if (!user) return;\n\n      // Load the list of users we're already following\n      try {\n        const following = await firebaseUserApi.getFollowing(user.id);\n        const followingIds = new Set(following.map(u => u.id));\n        setFollowingUsers(followingIds);\n      } catch (error) {\n        console.error('Failed to load following list:', error);\n      }\n\n      // Load suggested users (top 5) with 1 hour cache\n      try {\n        // Use the getSuggestedUsers API which filters by profileVisibility and already-followed users\n        const suggestions = await cachedQuery(\n          `suggested_users_${user.id}`,\n          () => firebaseUserApi.getSuggestedUsers(5),\n          {\n            memoryTtl: 60 * 60 * 1000, // 1 hour in memory\n            localTtl: 60 * 60 * 1000, // 1 hour in localStorage\n            sessionCache: true,\n            dedupe: true,\n          }\n        );\n        setSuggestedUsers(suggestions);\n      } catch (error) {\n        console.error('Failed to load suggested users:', error);\n      }\n\n      // Load suggested groups (top 5) with 1 hour cache\n      try {\n        // Get user's current groups to exclude them from suggestions\n        const userGroups = await firebaseApi.group.getUserGroups(user.id);\n        const userGroupIds = new Set(userGroups.map(g => g.id));\n\n        // Get all groups with caching\n        const allGroups = await cachedQuery(\n          `suggested_groups_all`,\n          () => firebaseApi.group.searchGroups(''),\n          {\n            memoryTtl: 60 * 60 * 1000, // 1 hour in memory\n            localTtl: 60 * 60 * 1000, // 1 hour in localStorage\n            sessionCache: true,\n            dedupe: true,\n          }\n        );\n        const filteredGroups = allGroups.filter(\n          group => !userGroupIds.has(group.id)\n        );\n        setSuggestedGroups(filteredGroups.slice(0, 5));\n      } catch (error) {\n        console.error('Failed to load suggested groups:', error);\n      }\n    } catch (error) {\n      console.error('Failed to load suggested content:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleFollowToggle = async (userId: string) => {\n    if (!user) return;\n\n    const isFollowing = followingUsers.has(userId);\n\n    // Optimistic update\n    setFollowingUsers(prev => {\n      const next = new Set(prev);\n      if (isFollowing) {\n        next.delete(userId);\n      } else {\n        next.add(userId);\n      }\n      return next;\n    });\n\n    try {\n      if (isFollowing) {\n        await firebaseApi.user.unfollowUser(userId);\n      } else {\n        await firebaseApi.user.followUser(userId);\n        // Remove from suggestions after following\n        setSuggestedUsers(prev => prev.filter(u => u.id !== userId));\n      }\n    } catch (error) {\n      console.error('Failed to toggle follow:', error);\n      // Revert on error\n      setFollowingUsers(prev => {\n        const next = new Set(prev);\n        if (isFollowing) {\n          next.add(userId);\n        } else {\n          next.delete(userId);\n        }\n        return next;\n      });\n    }\n  };\n\n  return (\n    <aside\n      className=\"hidden xl:block w-[320px] flex-shrink-0\"\n      aria-label=\"Suggestions and groups sidebar\"\n    >\n      <div className=\"space-y-4 h-full overflow-y-auto scrollbar-hide pt-20 pb-6\">\n        {/* Suggested Friends - Redesigned */}\n        <div className=\"px-2\">\n          <div className=\"flex items-center justify-between mb-3 px-2\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">\n              Suggested for you\n            </h3>\n          </div>\n\n          {isLoading ? (\n            <div className=\"space-y-2\">\n              {[1, 2, 3, 4, 5].map(i => (\n                <div\n                  key={i}\n                  className=\"flex items-center gap-3 animate-pulse p-3 bg-white rounded-lg\"\n                >\n                  <div className=\"w-12 h-12 bg-gray-200 rounded-full\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"h-4 bg-gray-200 rounded w-24 mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-16\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : suggestedUsers.length === 0 ? (\n            <div className=\"p-6 text-center bg-white rounded-lg\">\n              <p className=\"text-sm text-gray-500\">No suggestions available</p>\n            </div>\n          ) : (\n            <div className=\"space-y-1\">\n              {suggestedUsers.map((suggestedUser, index) => (\n                <Link\n                  key={suggestedUser.id}\n                  href={`/profile/${suggestedUser.username}`}\n                  className=\"block px-3 py-3 bg-white hover:bg-gray-50 rounded-lg transition-colors duration-200\"\n                >\n                  <div className=\"flex items-center gap-3\">\n                    {suggestedUser.profilePicture ? (\n                      <Image\n                        src={suggestedUser.profilePicture}\n                        alt={`${suggestedUser.name}'s profile picture`}\n                        width={48}\n                        height={48}\n                        className=\"w-12 h-12 rounded-full object-cover flex-shrink-0\"\n                        loading=\"lazy\"\n                        sizes=\"48px\"\n                      />\n                    ) : (\n                      <div className=\"w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                        <span className=\"text-gray-600 font-semibold text-sm\">\n                          {suggestedUser.name\n                            .split(' ')\n                            .map(n => n[0])\n                            .join('')\n                            .slice(0, 2)\n                            .toUpperCase()}\n                        </span>\n                      </div>\n                    )}\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-semibold text-sm text-gray-900 hover:text-[#007AFF] truncate mb-0.5\">\n                        {suggestedUser.name}\n                      </p>\n                      <p className=\"text-xs text-gray-500 truncate\">\n                        @{suggestedUser.username}\n                      </p>\n                    </div>\n                    <button\n                      onClick={e => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        handleFollowToggle(suggestedUser.id);\n                      }}\n                      className={`text-sm font-semibold transition-colors duration-200 whitespace-nowrap flex-shrink-0 ${\n                        followingUsers.has(suggestedUser.id)\n                          ? 'text-gray-600 hover:text-gray-900'\n                          : 'text-[#007AFF] hover:text-[#0051D5]'\n                      }`}\n                      aria-label={\n                        followingUsers.has(suggestedUser.id)\n                          ? `Unfollow ${suggestedUser.name}`\n                          : `Follow ${suggestedUser.name}`\n                      }\n                      aria-pressed={followingUsers.has(suggestedUser.id)}\n                    >\n                      {followingUsers.has(suggestedUser.id)\n                        ? 'Following'\n                        : 'Follow'}\n                    </button>\n                  </div>\n                </Link>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Clubs - Redesigned */}\n        <div className=\"px-2\">\n          <div className=\"flex items-center justify-between mb-3 px-2\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">\n              Suggested Groups\n            </h3>\n          </div>\n\n          {isLoading ? (\n            <div className=\"space-y-2\">\n              {[1, 2, 3, 4, 5].map(i => (\n                <div\n                  key={i}\n                  className=\"flex items-center gap-3 animate-pulse p-3 bg-white rounded-lg\"\n                >\n                  <div className=\"w-12 h-12 bg-gray-200 rounded-lg\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"h-4 bg-gray-200 rounded w-24 mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-16\"></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : suggestedGroups.length === 0 ? (\n            <div className=\"p-6 text-center bg-white rounded-lg\">\n              <p className=\"text-sm text-gray-500\">No groups available</p>\n            </div>\n          ) : (\n            <div className=\"space-y-1\">\n              {suggestedGroups.map(group => (\n                <Link\n                  key={group.id}\n                  href={`/groups/${group.id}`}\n                  className=\"block px-3 py-3 bg-white hover:bg-gray-50 rounded-lg transition-colors duration-200\"\n                >\n                  <div className=\"flex items-center gap-3\">\n                    <GroupAvatar\n                      imageUrl={group.imageUrl}\n                      name={group.name}\n                      size=\"md\"\n                    />\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-semibold text-sm text-gray-900 hover:text-[#007AFF] truncate mb-0.5\">\n                        {group.name}\n                      </p>\n                      <div className=\"text-xs text-gray-500\">\n                        {group.memberCount || 0}{' '}\n                        {group.memberCount === 1 ? 'member' : 'members'}\n                      </div>\n                    </div>\n                    <button\n                      onClick={async e => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        if (!user || joiningGroups.has(group.id)) return;\n\n                        setJoiningGroups(prev => new Set(prev).add(group.id));\n                        try {\n                          await firebaseApi.group.joinGroup(group.id, user.id);\n                          // Remove from suggestions after joining\n                          setSuggestedGroups(prev =>\n                            prev.filter(g => g.id !== group.id)\n                          );\n                        } catch (error) {\n                          // Error joining group - silently fail for suggestions\n                        } finally {\n                          setJoiningGroups(prev => {\n                            const next = new Set(prev);\n                            next.delete(group.id);\n                            return next;\n                          });\n                        }\n                      }}\n                      className=\"text-sm font-semibold text-[#007AFF] hover:text-[#0051D5] transition-colors duration-200 whitespace-nowrap flex-shrink-0\"\n                      disabled={joiningGroups.has(group.id)}\n                    >\n                      {joiningGroups.has(group.id) ? 'Joining...' : 'Join'}\n                    </button>\n                  </div>\n                </Link>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Modals */}\n      <SuggestedPeopleModal\n        isOpen={showPeopleModal}\n        onClose={() => setShowPeopleModal(false)}\n      />\n      <SuggestedGroupsModal\n        isOpen={showGroupsModal}\n        onClose={() => setShowGroupsModal(false)}\n      />\n    </aside>\n  );\n}\n\nexport default RightSidebar;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SaveSession.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'showPostModal' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 46,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 46,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setShowPostModal' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 46,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 46,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'getAuthToken' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 50,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'handlePostSuccess' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 151,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 151,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'handlePostCancel' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 152,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 152,
        "endColumn": 25
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { Project } from '@/types';\nimport { firebaseApi } from '@/lib/api';\nimport { useAuth } from '@/hooks/useAuth';\nimport { ERROR_MESSAGES } from '@/config/errorMessages';\nimport { debug } from '@/lib/debug';\n\ninterface SaveSessionProps {\n  onSave: (data: SessionFormData) => Promise<void>;\n  onCancel: () => void;\n  initialData: Partial<SessionFormData>;\n  isLoading?: boolean;\n}\n\nconst TAGS = ['Study', 'Work', 'Side Project', 'Reading', 'Learning', 'Exercise', 'Creative', 'Other'];\n\nconst PRIVACY_OPTIONS = [\n  { value: 'everyone', label: 'Everyone', description: 'Visible to all users' },\n  { value: 'followers', label: 'Followers', description: 'Visible to your followers' },\n  { value: 'private', label: 'Only You', description: 'Private to you only' },\n];\n\nexport const SaveSession: React.FC<SaveSessionProps> = ({\n  onSave,\n  onCancel,\n  initialData,\n  isLoading = false\n}) => {\n  const { user } = useAuth();\n  const [formData, setFormData] = useState<SessionFormData>({\n    activityId: (initialData.activityId || initialData.projectId || '') as string,\n    projectId: initialData.projectId || '',\n    title: initialData.title || '',\n    description: initialData.description || '',\n    duration: initialData.duration || 0,\n    startTime: initialData.startTime || new Date(),\n    tags: initialData.tags || [],\n    visibility: initialData.visibility || 'everyone',\n    privateNotes: initialData.privateNotes || '',\n  });\n\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [showPostModal, setShowPostModal] = useState(false);\n\n  // TODO: Implement Firebase API calls\n  // Helper function to get auth token\n  const getAuthToken = (): string => {\n    // For now, return empty string since we're not using Firebase sessions yet\n    return '';\n  };\n\n  // Load projects on mount\n  useEffect(() => {\n    const loadProjects = async () => {\n      if (!user) return;\n      \n      try {\n        const projectList = await firebaseApi.project.getProjects();\n        setProjects(projectList);\n        \n        // Set initial project if provided\n        if (initialData.projectId && !formData.projectId) {\n          setFormData(prev => ({ ...prev, projectId: initialData.projectId! }));\n        }\n      } catch (_error) {\n        debug.error('SaveSession - Failed to load projects:', error);\n      }\n    };\n\n    loadProjects();\n  }, [user, initialData.projectId, formData.projectId]);\n\n\n  // Generate smart title based on time of day and project\n  useEffect(() => {\n    if (!formData.title && formData.projectId) {\n      const project = projects.find(p => p.id === formData.projectId);\n      const hour = new Date().getHours();\n      \n      let timeOfDay = '';\n      if (hour < 12) timeOfDay = 'Morning';\n      else if (hour < 17) timeOfDay = 'Afternoon';\n      else timeOfDay = 'Evening';\n      \n      const smartTitle = project ? `${timeOfDay} ${project.name} Session` : `${timeOfDay} Work Session`;\n      setFormData(prev => ({ ...prev, title: smartTitle }));\n    }\n  }, [formData.projectId, formData.title, projects]);\n\n  const handleInputChange = (field: keyof CreateSessionData, value: string | number | undefined) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    \n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  };\n\n  const handleTagToggle = (tag: string) => {\n    const currentTags = formData.tags || [];\n    const isSelected = currentTags.includes(tag);\n    const newTags = isSelected\n      ? currentTags.filter(t => t !== tag)\n      : [...currentTags, tag];\n\n    setFormData(prev => ({ ...prev, tags: newTags }));\n  };\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    if (!formData.projectId) {\n      newErrors.projectId = 'Please select a project';\n    }\n\n    if (!formData.title.trim()) {\n      newErrors.title = 'Please enter a session title';\n    }\n\n    if (formData.duration <= 0) {\n      newErrors.duration = 'Duration must be greater than 0';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    try {\n      // Save the session\n      await onSave(formData);\n      \n      // Note: Post creation is now handled by the onSave callback\n      // The parent component (SessionTimer/ManualEntry) will handle creating the post\n      // using firebaseApi.session.createSessionWithPost if visibility !== 'private'\n    } catch (_error) {\n      debug.error('SaveSession - Failed to save session:', error);\n      setErrors({ submit: ERROR_MESSAGES.SESSION_SAVE_FAILED });\n    }\n  };\n\n  const handlePostSuccess = async () => {};\n  const handlePostCancel = async () => {};\n\n  const formatDuration = (seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes}m ${secs}s`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${secs}s`;\n    } else {\n      return `${secs}s`;\n    }\n  };\n\n  return (\n    <div className=\"w-full max-w-3xl mx-auto\">\n      <div className=\"bg-white rounded-lg shadow p-6\">\n          <h2 className=\"text-2xl font-bold mb-6\">Save Session</h2>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Project Selection */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Project *\n              </label>\n              <select\n                value={formData.projectId}\n                onChange={(e) => handleInputChange('projectId', e.target.value)}\n                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                  errors.projectId ? 'border-red-500' : 'border-gray-300'\n                }`}\n                disabled={isLoading}\n              >\n                <option value=\"\">Select a project...</option>\n                {projects.map((project) => (\n                  <option key={project.id} value={project.id}>\n                    {project.name}\n                  </option>\n                ))}\n              </select>\n              {errors.projectId && (\n                <p className=\"text-red-500 text-sm mt-1\">{errors.projectId}</p>\n              )}\n            </div>\n\n            {/* Session Title */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Session Title *\n              </label>\n              <input\n                type=\"text\"\n                value={formData.title}\n                onChange={(e) => handleInputChange('title', e.target.value)}\n                className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${\n                  errors.title ? 'border-red-500' : 'border-gray-300'\n                }`}\n                placeholder=\"What did you work on?\"\n                disabled={isLoading}\n              />\n              {errors.title && (\n                <p className=\"text-red-500 text-sm mt-1\">{errors.title}</p>\n              )}\n            </div>\n\n            {/* Duration Display */}\n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"font-medium text-gray-900\">Session Duration</h3>\n                  <p className=\"text-2xl font-bold text-blue-600\">{formatDuration(formData.duration)}</p>\n                </div>\n                <div className=\"text-sm text-gray-500\">\n                  Started: {formData.startTime.toLocaleTimeString()}\n                </div>\n              </div>\n            </div>\n\n            {/* Description */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Description\n              </label>\n              <textarea\n                value={formData.description || ''}\n                onChange={(e) => handleInputChange('description', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                rows={3}\n                placeholder=\"What did you accomplish?\"\n                disabled={isLoading}\n              />\n            </div>\n\n            {/* Tags */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Tags\n              </label>\n              <div className=\"flex flex-wrap gap-2\">\n                {TAGS.map((tag) => (\n                  <button\n                    key={tag}\n                    type=\"button\"\n                    onClick={() => handleTagToggle(tag)}\n                    className={`px-3 py-1 rounded-full text-sm transition-colors ${\n                      (formData.tags || []).includes(tag)\n                        ? 'bg-blue-600 text-white'\n                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'\n                    }`}\n                    disabled={isLoading}\n                  >\n                    {tag}\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Privacy Settings */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Privacy\n              </label>\n              <select\n                value={formData.visibility}\n                onChange={(e) => handleInputChange('visibility', e.target.value as 'everyone' | 'followers' | 'private')}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                disabled={isLoading}\n              >\n                {PRIVACY_OPTIONS.map((option) => (\n                  <option key={option.value} value={option.value}>\n                    {option.label} - {option.description}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            {/* Removed howFelt per requirements */}\n\n            {/* Private Notes */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Private Notes\n              </label>\n              <textarea\n                value={formData.privateNotes || ''}\n                onChange={(e) => handleInputChange('privateNotes', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                rows={2}\n                placeholder=\"Any private notes about this session...\"\n                disabled={isLoading}\n              />\n            </div>\n\n            {/* Error Messages */}\n            {errors.submit && (\n              <div className=\"text-red-500 text-sm\">{errors.submit}</div>\n            )}\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end space-x-3 pt-4 border-t\">\n              <button\n                type=\"button\"\n                onClick={onCancel}\n                className=\"px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors\"\n                disabled={isLoading}\n              >\n                Cancel\n              </button>\n              <button\n                type=\"submit\"\n                disabled={isLoading}\n                className=\"px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:bg-gray-300 transition-colors\"\n              >\n                {isLoading ? 'Saving...' : 'Save Session'}\n              </button>\n            </div>\n          </form>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SearchUsers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.",
        "line": 36,
        "column": 27,
        "nodeType": "Identifier",
        "endLine": 36,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 273,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 273,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8486, 8489], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8486, 8489], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 273,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 273,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8496, 8499], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8496, 8499], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'debouncedSearch'. Either include it or remove the dependency array.",
        "line": 74,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 74,
        "endColumn": 13,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [debouncedSearch, query]",
            "fix": { "range": [2245, 2252], "text": "[debouncedSearch, query]" }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { UserSearchResult } from '@/types';\nimport { firebaseUserApi } from '@/lib/api';\nimport { UserCard, UserCardCompact } from './UserCard';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Search, Users, X, Loader2 } from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface SearchUsersProps {\n  onUserSelect?: (user: UserSearchResult) => void;\n  variant?: 'default' | 'compact' | 'modal';\n  placeholder?: string;\n  showResults?: boolean;\n  maxResults?: number;\n}\n\nexport const SearchUsers: React.FC<SearchUsersProps> = ({\n  onUserSelect,\n  variant = 'default',\n  placeholder = 'Search users...',\n  showResults = true,\n  maxResults = 20,\n}) => {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState<UserSearchResult[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasSearched, setHasSearched] = useState(false);\n  const [totalCount, setTotalCount] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasMore, setHasMore] = useState(false);\n\n  // Debounced search function\n  const debouncedSearch = useCallback(\n    debounce(async (searchQuery: string, page: number = 1) => {\n      if (!searchQuery.trim()) {\n        setResults([]);\n        setHasSearched(false);\n        return;\n      }\n\n      try {\n        setIsLoading(true);\n        const response = await firebaseUserApi.searchUsers(searchQuery, page, maxResults);\n        \n        if (page === 1) {\n          setResults(response.users);\n        } else {\n          setResults(prev => [...prev, ...response.users]);\n        }\n        \n        setTotalCount(response.totalCount);\n        setHasMore(response.hasMore);\n        setHasSearched(true);\n      } catch (error) {\n        console.error('Search error:', error);\n        toast.error('Failed to search users');\n        setResults([]);\n        setHasSearched(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }, 300),\n    [maxResults]\n  );\n\n  // Search effect\n  useEffect(() => {\n    setCurrentPage(1);\n    debouncedSearch(query, 1);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [query]); // Only re-run when query changes, not when debouncedSearch changes\n\n  const handleLoadMore = () => {\n    if (hasMore && !isLoading) {\n      const nextPage = currentPage + 1;\n      setCurrentPage(nextPage);\n      debouncedSearch(query, nextPage);\n    }\n  };\n\n  const handleClear = () => {\n    setQuery('');\n    setResults([]);\n    setHasSearched(false);\n    setCurrentPage(1);\n  };\n\n  const handleUserSelect = (user: UserSearchResult) => {\n    onUserSelect?.(user);\n  };\n\n  const handleFollowChange = (userId: string, isFollowing: boolean) => {\n    setResults(prev => \n      prev.map(user => \n        user.id === userId \n          ? { ...user, isFollowing, followersCount: isFollowing ? user.followersCount + 1 : Math.max(0, user.followersCount - 1) }\n          : user\n      )\n    );\n  };\n\n  const UserCardComponent = variant === 'compact' ? UserCardCompact : UserCard;\n\n  return (\n    <div className=\"w-full\">\n      {/* Search Input */}\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n        <Input\n          type=\"text\"\n          placeholder={placeholder}\n          value={query}\n          onChange={(e) => setQuery(e.target.value)}\n          onKeyDown={(e) => {\n            if (e.key === 'Enter') {\n              e.preventDefault();\n              setHasSearched(true);\n              debouncedSearch(query, 1);\n            }\n          }}\n          className=\"pl-10 pr-10\"\n        />\n        {query && (\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleClear}\n            className=\"absolute right-1 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        )}\n      </div>\n\n      {/* Loading Indicator */}\n      {isLoading && (\n        <div className=\"flex items-center justify-center py-4\">\n          <Loader2 className=\"w-5 h-5 animate-spin text-muted-foreground\" />\n          <span className=\"ml-2 text-sm text-muted-foreground\">Searching...</span>\n        </div>\n      )}\n\n      {/* Results */}\n      {showResults && hasSearched && (\n        <div className=\"mt-4\">\n          {results.length > 0 ? (\n            <div className=\"space-y-4\">\n              {/* Results Header */}\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <Users className=\"w-4 h-4\" />\n                  <span>\n                    {totalCount.toLocaleString()} result{totalCount !== 1 ? 's' : ''}\n                    {query && ` for \"${query}\"`}\n                  </span>\n                </div>\n              </div>\n\n              {/* User Cards */}\n              <div className=\"space-y-1\">\n                {results.map((user) => (\n                  <div key={user.id} onClick={() => handleUserSelect(user)}>\n                    <UserCardComponent\n                      user={user}\n                      variant=\"search\"\n                      onFollowChange={handleFollowChange}\n                    />\n                  </div>\n                ))}\n              </div>\n\n              {/* Load More Button */}\n              {hasMore && (\n                <div className=\"flex justify-center pt-4\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={handleLoadMore}\n                    disabled={isLoading}\n                    className=\"flex items-center gap-2\"\n                  >\n                    {isLoading ? (\n                      <>\n                        <Loader2 className=\"w-4 h-4 animate-spin\" />\n                        Loading...\n                      </>\n                    ) : (\n                      'Load More'\n                    )}\n                  </Button>\n                </div>\n              )}\n            </div>\n          ) : query.trim() ? (\n            <div className=\"text-center py-8\">\n              <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n              <h3 className=\"font-medium text-foreground mb-1\">No users found</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Try searching with a different name or username\n              </p>\n            </div>\n          ) : null}\n        </div>\n      )}\n\n      {/* Initial State */}\n      {!hasSearched && !isLoading && (\n        <div className=\"text-center py-8\">\n          <Search className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n          <h3 className=\"font-medium text-foreground mb-1\">Search for users</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Find people to follow and connect with\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Modal version for overlays\ninterface SearchUsersModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onUserSelect?: (user: UserSearchResult) => void;\n  title?: string;\n}\n\nexport const SearchUsersModal: React.FC<SearchUsersModalProps> = ({\n  isOpen,\n  onClose,\n  onUserSelect,\n  title = 'Search Users',\n}) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-background rounded-lg shadow-xl max-w-2xl w-full max-h-[80vh] flex flex-col\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-border\">\n          <h2 className=\"text-xl font-semibold text-foreground\">{title}</h2>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onClose}\n            className=\"h-8 w-8 p-0\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-hidden\">\n          <div className=\"p-6 h-full overflow-y-auto\">\n            <SearchUsers\n              onUserSelect={(user) => {\n                onUserSelect?.(user);\n                onClose();\n              }}\n              variant=\"compact\"\n              showResults={true}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Debounce utility function\nfunction debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SessionCard.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 71,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 71,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 95,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 95,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Image from 'next/image';\nimport { SessionWithDetails } from '@/types';\nimport SessionInteractions from './SessionInteractions';\nimport TopComments from './TopComments';\nimport { ImageGallery } from './ImageGallery';\nimport LikesModal from './LikesModal';\nimport CommentsModal from './CommentsModal';\nimport { PrefetchLink } from './PrefetchLink';\nimport { useRouter } from 'next/navigation';\nimport { useAuth } from '@/hooks/useAuth';\nimport { firebaseApi } from '@/lib/api';\nimport { MoreVertical } from 'lucide-react';\nimport Link from 'next/link';\nimport { cn, isEmpty } from '@/lib/utils';\nimport { formatSessionDate, formatDuration } from '@/lib/formatters';\nimport { getUserInitials } from '@/lib/userUtils';\n\ninterface SessionCardProps {\n  session: SessionWithDetails;\n  onSupport: (sessionId: string) => Promise<void>;\n  onRemoveSupport: (sessionId: string) => Promise<void>;\n  onShare: (sessionId: string) => Promise<void>;\n  onDelete?: (sessionId: string) => Promise<void>;\n  onEdit?: (sessionId: string) => void;\n  className?: string;\n  showComments?: boolean;\n  showGroupInfo?: boolean;\n  isAboveFold?: boolean; // Add prop to indicate if card is above the fold\n  priority?: boolean; // Add prop for image priority loading\n}\n\nexport const SessionCard: React.FC<SessionCardProps> = ({\n  session,\n  onSupport,\n  onRemoveSupport,\n  onShare,\n  onDelete,\n  onEdit,\n  className = '',\n  showGroupInfo = false,\n  isAboveFold = false,\n  priority = false,\n}) => {\n  const router = useRouter();\n  const { user } = useAuth();\n  const [showMenu, setShowMenu] = useState(false);\n  const [isFollowing, setIsFollowing] = useState(false);\n  const [isFollowLoading, setIsFollowLoading] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [localCommentCount, setLocalCommentCount] = useState(\n    session.commentCount || 0\n  );\n  const [showLikesModal, setShowLikesModal] = useState(false);\n  const [showCommentsModal, setShowCommentsModal] = useState(false);\n  const menuRef = useRef<HTMLDivElement>(null);\n  const commentSectionRef = useRef<HTMLDivElement>(null);\n\n  // Check if user is following the session author\n  useEffect(() => {\n    const checkFollowStatus = async () => {\n      if (user && session.userId !== user.id && showGroupInfo) {\n        try {\n          const isUserFollowing = await firebaseApi.user.isFollowing(\n            user.id,\n            session.userId\n          );\n          setIsFollowing(isUserFollowing);\n        } catch (error) {\n          // Error checking follow status - silently fail\n        }\n      }\n    };\n    checkFollowStatus();\n  }, [user, session.userId, showGroupInfo]);\n\n  // Handle follow/unfollow\n  const handleFollowToggle = async (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (!user || isFollowLoading) return;\n\n    setIsFollowLoading(true);\n    try {\n      if (isFollowing) {\n        await firebaseApi.user.unfollowUser(session.userId);\n        setIsFollowing(false);\n      } else {\n        await firebaseApi.user.followUser(session.userId);\n        setIsFollowing(true);\n      }\n    } catch (error) {\n      // Error toggling follow - silently fail\n    } finally {\n      setIsFollowLoading(false);\n    }\n  };\n\n  // Close menu when clicking outside or pressing escape\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        setShowMenu(false);\n      }\n    };\n\n    const handleEscapeKey = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        setShowMenu(false);\n      }\n    };\n\n    if (showMenu) {\n      document.addEventListener('mousedown', handleClickOutside);\n      document.addEventListener('keydown', handleEscapeKey);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n      document.removeEventListener('keydown', handleEscapeKey);\n    };\n  }, [showMenu]);\n\n  // Guard: Return null if user data is missing (during architecture migration)\n  if (!session.user) {\n    return null;\n  }\n\n  return (\n    <article\n      className={cn(\n        'bg-white md:rounded-lg md:border md:border-gray-200 md:shadow-sm mb-0 md:mb-4 border-b-[6px] border-gray-200 md:border-b-0 hover:shadow-md transition-shadow',\n        className\n      )}\n    >\n      {/* Session Header */}\n      <div className=\"flex items-center justify-between px-4 pt-4 pb-3\">\n        <PrefetchLink\n          href={`/profile/${session.user.username}`}\n          prefetchProfile={session.user.username}\n          prefetchUserId={session.user.id}\n          className=\"flex items-center gap-2 md:gap-3 min-w-0 flex-1\"\n        >\n          {/* User Avatar */}\n          {session.user.profilePicture ? (\n            <div className=\"w-10 h-10 min-w-[2.5rem] aspect-square rounded-full overflow-hidden flex-shrink-0 ring-2 ring-white\">\n              <Image\n                src={session.user.profilePicture}\n                alt={session.user.name}\n                width={40}\n                height={40}\n                quality={90}\n                className=\"w-full h-full object-cover\"\n                priority={isAboveFold || priority}\n                loading={isAboveFold || priority ? 'eager' : 'lazy'}\n              />\n            </div>\n          ) : (\n            <div className=\"w-10 h-10 min-w-[2.5rem] aspect-square bg-gray-100 rounded-full flex items-center justify-center flex-shrink-0 ring-2 ring-white\">\n              <span className=\"text-gray-600 font-semibold text-sm\">\n                {getUserInitials(session.user.name)}\n              </span>\n            </div>\n          )}\n\n          {/* User Info */}\n          <div className=\"min-w-0 flex-1\">\n            <div className=\"flex items-center gap-2\">\n              <span className=\"font-semibold text-gray-900 text-sm md:text-base hover:underline truncate\">\n                {session.user.name}\n              </span>\n              {/* Follow button - Mobile only when showGroupInfo is true */}\n              {showGroupInfo && user && session.userId !== user.id && (\n                <button\n                  onClick={handleFollowToggle}\n                  disabled={isFollowLoading}\n                  className={cn(\n                    'md:hidden text-xs font-semibold transition-colors duration-200 whitespace-nowrap flex-shrink-0',\n                    isFollowing\n                      ? 'text-gray-600 hover:text-gray-900'\n                      : 'text-[#007AFF] hover:text-[#0051D5]'\n                  )}\n                >\n                  {isFollowing ? 'Following' : 'Follow'}\n                </button>\n              )}\n            </div>\n            <div className=\"text-xs text-gray-500\">\n              {formatSessionDate(session.createdAt)}\n            </div>\n          </div>\n        </PrefetchLink>\n\n        {/* Options Menu */}\n        <div className=\"relative\" ref={menuRef}>\n          <button\n            onClick={() => setShowMenu(!showMenu)}\n            className=\"text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-lg p-2 transition-colors duration-200 min-h-[44px] min-w-[44px]\"\n            aria-label=\"Session options\"\n            aria-expanded={showMenu}\n            aria-haspopup=\"true\"\n          >\n            <MoreVertical className=\"w-5 h-5\" aria-hidden=\"true\" />\n          </button>\n\n          {showMenu && (\n            <div\n              className=\"absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-10\"\n              role=\"menu\"\n              aria-label=\"Session options menu\"\n            >\n              {onEdit && (\n                <button\n                  onClick={() => {\n                    onEdit(session.id);\n                    setShowMenu(false);\n                  }}\n                  className=\"w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-50 transition-colors duration-200\"\n                  role=\"menuitem\"\n                >\n                  Edit session\n                </button>\n              )}\n              {onDelete && (\n                <button\n                  onClick={() => {\n                    onDelete(session.id);\n                    setShowMenu(false);\n                  }}\n                  className=\"w-full px-4 py-2 text-left text-sm text-red-600 hover:bg-gray-50 transition-colors duration-200\"\n                  role=\"menuitem\"\n                >\n                  Delete session\n                </button>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Title and Description */}\n      <Link\n        href={`/sessions/${session.id}`}\n        className=\"px-4 pb-3 block cursor-pointer\"\n      >\n        <h3 className=\"text-lg sm:text-xl md:text-2xl font-bold text-gray-900 mb-1 leading-tight hover:text-[#007AFF] transition-colors duration-200\">\n          {session.title || 'Focus Session'}\n        </h3>\n        {session.description && (\n          <div>\n            <p\n              className={cn(\n                'text-gray-600 text-sm md:text-base whitespace-pre-wrap break-words',\n                !isExpanded &&\n                  session.description.length > 280 &&\n                  'line-clamp-3 sm:line-clamp-4'\n              )}\n            >\n              {session.description.length > 1000\n                ? session.description.slice(0, 1000)\n                : session.description}\n            </p>\n            {session.description.length > 280 && (\n              <button\n                onClick={e => {\n                  e.preventDefault();\n                  setIsExpanded(!isExpanded);\n                }}\n                className=\"text-[#007AFF] text-sm font-semibold mt-1 hover:underline transition-colors duration-200 min-h-[44px] flex items-center\"\n                aria-expanded={isExpanded}\n                aria-label={\n                  isExpanded ? 'Show less description' : 'Show more description'\n                }\n              >\n                {isExpanded ? 'Show less' : 'Show more'}\n              </button>\n            )}\n          </div>\n        )}\n      </Link>\n\n      {/* Image Gallery */}\n      {!isEmpty(session.images) && (\n        <div className=\"px-4 pb-4\">\n          <ImageGallery\n            images={session.images || []}\n            priority={isAboveFold || priority}\n          />\n        </div>\n      )}\n\n      {/* Stats - Strava style */}\n      <Link\n        href={`/sessions/${session.id}`}\n        className=\"px-4 pb-2 block cursor-pointer hover:bg-gray-50/50 transition-colors duration-200\"\n      >\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <div className=\"text-xs text-gray-500 mb-1\">Time</div>\n            <div className=\"text-base font-semibold text-gray-900\">\n              {formatDuration(session.duration)}\n            </div>\n          </div>\n          <div className=\"min-w-0\">\n            <div className=\"text-xs text-gray-500 mb-1\">Activity</div>\n            <div\n              className=\"text-base font-semibold text-gray-900 truncate\"\n              title={session.activity?.name || session.project?.name || 'N/A'}\n            >\n              {session.activity?.name || session.project?.name || 'N/A'}\n            </div>\n          </div>\n        </div>\n      </Link>\n\n      {/* Interactions */}\n      <SessionInteractions\n        sessionId={session.id}\n        supportCount={session.supportCount}\n        commentCount={localCommentCount}\n        isSupported={session.isSupported || false}\n        supportedBy={session.supportedBy}\n        onSupport={onSupport}\n        onRemoveSupport={onRemoveSupport}\n        onShare={onShare}\n        onShareImage={() => router.push(`/sessions/${session.id}/share`)}\n        isOwnPost={session.userId === user?.id}\n        onCommentClick={() => setShowCommentsModal(true)}\n        onLikesClick={() => setShowLikesModal(true)}\n        onViewAllCommentsClick={() => setShowCommentsModal(true)}\n      />\n\n      {/* Top Comments Section */}\n      <div ref={commentSectionRef}>\n        <TopComments\n          sessionId={session.id}\n          totalCommentCount={localCommentCount}\n          onCommentCountChange={setLocalCommentCount}\n        />\n      </div>\n\n      {/* Likes Modal */}\n      <LikesModal\n        isOpen={showLikesModal}\n        onClose={() => setShowLikesModal(false)}\n        userIds={session.supportedBy || []}\n        totalLikes={session.supportCount}\n      />\n\n      {/* Comments Modal */}\n      <CommentsModal\n        isOpen={showCommentsModal}\n        onClose={() => setShowCommentsModal(false)}\n        sessionId={session.id}\n        session={session}\n        totalCommentCount={localCommentCount}\n        onCommentCountChange={setLocalCommentCount}\n      />\n    </article>\n  );\n};\n\nexport default SessionCard;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SessionHistory.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'useCallback' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 3,
        "column": 38,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 49
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 256,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 256,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8412, 8415], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8412, 8415], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 256,
        "column": 79,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 256,
        "endColumn": 82,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8441, 8444], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8441, 8444], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Session, Project, SessionFilters, SessionSort } from '@/types';\nimport { firebaseProjectApi, firebaseSessionApi } from '@/lib/api';\nimport { MoreVertical } from 'lucide-react';\nimport ConfirmDialog from './ConfirmDialog';\n\nexport const SessionHistory: React.FC = () => {\n  const router = useRouter();\n  const [sessions, setSessions] = useState<Session[]>([]);\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [filters, setFilters] = useState<SessionFilters>({});\n  const [sort, setSort] = useState<SessionSort>({ field: 'startTime', direction: 'desc' });\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalCount, setTotalCount] = useState(0);\n  const [hasMore, setHasMore] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [showMenuForSession, setShowMenuForSession] = useState<string | null>(null);\n  const [deleteConfirmSession, setDeleteConfirmSession] = useState<string | null>(null);\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  // Load initial data\n  useEffect(() => {\n    const loadInitialData = async () => {\n      try {\n        setIsLoading(true);\n        // Load projects and user's sessions from Firebase\n        const [projectsData, sessionsResp] = await Promise.all([\n          firebaseProjectApi.getProjects(),\n          firebaseSessionApi.getSessions(1, 20, {})\n        ]);\n\n        setProjects(projectsData);\n        setSessions(sessionsResp.sessions);\n        setTotalCount(sessionsResp.totalCount);\n        setHasMore(sessionsResp.hasMore);\n      } catch (error) {\n        console.error('Failed to load session history:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadInitialData();\n  }, []);\n\n  // Load sessions when filters or sort change\n  useEffect(() => {\n    const loadSessions = async () => {\n      try {\n        setIsLoading(true);\n        const sessionsResp = await firebaseSessionApi.getSessions(\n          currentPage,\n          20,\n          { ...filters, search: searchQuery }\n        );\n\n        setSessions(sessionsResp.sessions);\n        setTotalCount(sessionsResp.totalCount);\n        setHasMore(sessionsResp.hasMore);\n      } catch (error) {\n        console.error('Failed to load sessions:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadSessions();\n  }, [filters, sort, currentPage, searchQuery]);\n\n  const handleFiltersChange = (newFilters: SessionFilters) => {\n    setFilters(newFilters);\n    setCurrentPage(1);\n  };\n\n  const handleSortChange = (newSort: SessionSort) => {\n    setSort(newSort);\n    setCurrentPage(1);\n  };\n\n  const handleSessionEdit = (sessionId: string) => {\n    router.push(`/sessions/${sessionId}/edit`);\n  };\n\n  const handleSessionDelete = (sessionId: string) => {\n    setDeleteConfirmSession(sessionId);\n  };\n\n  const confirmDelete = async () => {\n    if (!deleteConfirmSession) return;\n\n    try {\n      setIsDeleting(true);\n      await firebaseSessionApi.deleteSession(deleteConfirmSession);\n\n      // Reload sessions from Firebase\n      const sessionsResp = await firebaseSessionApi.getSessions(\n        currentPage,\n        20,\n        { ...filters, search: searchQuery }\n      );\n      setSessions(sessionsResp.sessions);\n      setTotalCount(sessionsResp.totalCount);\n      setHasMore(sessionsResp.hasMore);\n      setDeleteConfirmSession(null);\n    } catch (error) {\n      console.error('Failed to delete session:', error);\n    } finally {\n      setIsDeleting(false);\n    }\n  };\n\n  const formatDuration = (seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secs = seconds % 60;\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${secs}s`;\n    } else {\n      return `${secs}s`;\n    }\n  };\n\n  const formatDate = (date: Date): string => {\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const getProjectName = (projectId: string | undefined): string => {\n    if (!projectId) return 'Unknown Project';\n    const project = projects.find(p => p.id === projectId);\n    return project ? project.name : 'Unknown Project';\n  };\n\n  const getVisibilityIcon = (visibility: string) => {\n    switch (visibility) {\n      case 'everyone':\n        return '🌍';\n      case 'followers':\n        return '👥';\n      case 'private':\n        return '🔒';\n      default:\n        return '🔒';\n    }\n  };\n\n  const getFeelingEmoji = (rating?: number) => {\n    if (!rating) return '😐';\n    switch (rating) {\n      case 1: return '😞';\n      case 2: return '😕';\n      case 3: return '😐';\n      case 4: return '🙂';\n      case 5: return '😊';\n      default: return '😐';\n    }\n  };\n\n  if (isLoading && sessions.length === 0) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Filters and Search */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          {/* Search */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Search\n            </label>\n            <input\n              type=\"text\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              placeholder=\"Search sessions...\"\n            />\n          </div>\n\n          {/* Project Filter */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Project\n            </label>\n            <select\n              value={filters.projectId || ''}\n              onChange={(e) => handleFiltersChange({ ...filters, projectId: e.target.value || undefined })}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"\">All Projects</option>\n              {projects.map((project) => (\n                <option key={project.id} value={project.id}>\n                  {project.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Date Range */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              From Date\n            </label>\n            <input\n              type=\"date\"\n              value={filters.dateFrom ? filters.dateFrom.toISOString().split('T')[0] : ''}\n              onChange={(e) => handleFiltersChange({ \n                ...filters, \n                dateFrom: e.target.value ? new Date(e.target.value) : undefined \n              })}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              To Date\n            </label>\n            <input\n              type=\"date\"\n              value={filters.dateTo ? filters.dateTo.toISOString().split('T')[0] : ''}\n              onChange={(e) => handleFiltersChange({ \n                ...filters, \n                dateTo: e.target.value ? new Date(e.target.value) : undefined \n              })}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n        </div>\n\n        {/* Sort Options */}\n        <div className=\"mt-4 flex items-center space-x-4\">\n          <label className=\"text-sm font-medium text-gray-700\">Sort by:</label>\n          <select\n            value={`${sort.field}-${sort.direction}`}\n            onChange={(e) => {\n              const [field, direction] = e.target.value.split('-');\n              handleSortChange({ field: field as any, direction: direction as any });\n            }}\n            className=\"px-3 py-1 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"startTime-desc\">Date (Newest First)</option>\n            <option value=\"startTime-asc\">Date (Oldest First)</option>\n            <option value=\"duration-desc\">Duration (Longest First)</option>\n            <option value=\"duration-asc\">Duration (Shortest First)</option>\n            <option value=\"title-asc\">Title (A-Z)</option>\n            <option value=\"title-desc\">Title (Z-A)</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Session List */}\n      <div className=\"bg-white rounded-lg shadow\">\n        {sessions.length === 0 ? (\n          <div className=\"p-8 text-center text-gray-500\">\n            <p className=\"text-lg\">No sessions found</p>\n            <p className=\"text-sm mt-2\">Try adjusting your filters or start a new session</p>\n          </div>\n        ) : (\n          <div className=\"divide-y divide-gray-200\">\n            {sessions.map((session) => (\n              <div key={session.id} className=\"p-6 hover:bg-gray-50 transition-colors\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-3 mb-2\">\n                      <h3 className=\"text-lg font-medium text-gray-900\">{session.title}</h3>\n                      <span className=\"text-sm text-gray-500\">\n                        {getVisibilityIcon(session.visibility)}\n                      </span>\n                      <span className=\"text-sm text-gray-500\">\n                        {getFeelingEmoji(session.howFelt)}\n                      </span>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-4 text-sm text-gray-600 mb-3\">\n                      <span>{getProjectName(session.projectId)}</span>\n                      <span>•</span>\n                      <span>{formatDate(session.startTime)}</span>\n                      <span>•</span>\n                      <span className=\"font-medium\">{formatDuration(session.duration)}</span>\n                    </div>\n\n                    {session.description && (\n                      <p className=\"text-gray-700 text-sm mb-3\">{session.description}</p>\n                    )}\n\n                    {session.tags && session.tags.length > 0 && (\n                      <div className=\"flex flex-wrap gap-1 mb-3\">\n                        {session.tags.map((tag) => (\n                          <span\n                            key={tag}\n                            className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full\"\n                          >\n                            {tag}\n                          </span>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Options Menu */}\n                  <div className=\"relative\">\n                    <button\n                      onClick={() => setShowMenuForSession(showMenuForSession === session.id ? null : session.id)}\n                      className=\"text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full p-2 transition-colors\"\n                    >\n                      <MoreVertical className=\"w-5 h-5\" />\n                    </button>\n\n                    {showMenuForSession === session.id && (\n                      <div className=\"absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-10\">\n                        <button\n                          onClick={() => {\n                            handleSessionEdit(session.id);\n                            setShowMenuForSession(null);\n                          }}\n                          className=\"w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-50\"\n                        >\n                          Edit session\n                        </button>\n                        <button\n                          onClick={() => {\n                            handleSessionDelete(session.id);\n                            setShowMenuForSession(null);\n                          }}\n                          className=\"w-full px-4 py-2 text-left text-sm text-red-600 hover:bg-gray-50\"\n                        >\n                          Delete session\n                        </button>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Pagination */}\n      {totalCount > 20 && (\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-gray-700\">\n            Showing {sessions.length} of {totalCount} sessions\n          </div>\n          <div className=\"flex space-x-2\">\n            <button\n              onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n              disabled={currentPage === 1}\n              className=\"px-3 py-1 border border-gray-300 rounded-md text-sm hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              Previous\n            </button>\n            <span className=\"px-3 py-1 text-sm text-gray-700\">\n              Page {currentPage}\n            </span>\n            <button\n              onClick={() => setCurrentPage(currentPage + 1)}\n              disabled={!hasMore}\n              className=\"px-3 py-1 border border-gray-300 rounded-md text-sm hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              Next\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Delete Confirmation Dialog */}\n      <ConfirmDialog\n        isOpen={deleteConfirmSession !== null}\n        onClose={() => setDeleteConfirmSession(null)}\n        onConfirm={confirmDelete}\n        title=\"Delete Session\"\n        message=\"Are you sure you want to delete this session? This action cannot be undone and all associated data will be permanently removed.\"\n        confirmText=\"Delete Session\"\n        cancelText=\"Cancel\"\n        variant=\"danger\"\n        isLoading={isDeleting}\n      />\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SessionInteractions.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'supportedBy' is assigned a value but never used. Allowed unused args must match /^_/u.",
        "line": 28,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'onViewAllCommentsClick' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 36,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 25
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { ThumbsUp, MessageSquare, Share2, Image as ImageIcon, Link as LinkIcon, Copy } from 'lucide-react';\n\ninterface SessionInteractionsProps {\n  sessionId: string;\n  supportCount: number;\n  commentCount: number;\n  isSupported: boolean;\n  supportedBy?: string[];\n  onSupport: (sessionId: string) => Promise<void>;\n  onRemoveSupport: (sessionId: string) => Promise<void>;\n  onShare: (sessionId: string) => Promise<void>;\n  onShareImage?: () => void;\n  isOwnPost?: boolean;\n  onCommentClick?: () => void;\n  onLikesClick?: () => void;\n  onViewAllCommentsClick?: () => void;\n  className?: string;\n}\n\nexport const SessionInteractions: React.FC<SessionInteractionsProps> = ({\n  sessionId,\n  supportCount,\n  commentCount,\n  isSupported,\n  supportedBy = [],\n  onSupport,\n  onRemoveSupport,\n  onShare,\n  onShareImage,\n  isOwnPost = false,\n  onCommentClick,\n  onLikesClick,\n  onViewAllCommentsClick,\n  className = ''\n}) => {\n  const [isSupporting, setIsSupporting] = useState(false);\n  const [isSharing, setIsSharing] = useState(false);\n  const [showShareMenu, setShowShareMenu] = useState(false);\n  const shareMenuRef = useRef<HTMLDivElement>(null);\n\n  const handleSupport = async () => {\n    if (isSupporting) return;\n\n    setIsSupporting(true);\n    try {\n      if (isSupported) {\n        await onRemoveSupport(sessionId);\n      } else {\n        await onSupport(sessionId);\n      }\n    } catch (error) {\n      console.error('Failed to update support:', error);\n    } finally {\n      setIsSupporting(false);\n    }\n  };\n\n  const handleShare = async () => {\n    if (isSharing) return;\n\n    setIsSharing(true);\n    try {\n      await onShare(sessionId);\n    } catch (error) {\n      console.error('Failed to share session:', error);\n    } finally {\n      setIsSharing(false);\n      setShowShareMenu(false);\n    }\n  };\n\n  const handleShareImage = () => {\n    if (onShareImage) {\n      onShareImage();\n      setShowShareMenu(false);\n    }\n  };\n\n  const handleCopyLink = async () => {\n    try {\n      const sessionUrl = `${window.location.origin}/sessions/${sessionId}`;\n      await navigator.clipboard.writeText(sessionUrl);\n      setShowShareMenu(false);\n      // Optional: Show a toast notification here\n    } catch (error) {\n      console.error('Failed to copy link:', error);\n    }\n  };\n\n  // Close share menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (shareMenuRef.current && !shareMenuRef.current.contains(event.target as Node)) {\n        setShowShareMenu(false);\n      }\n    };\n\n    const handleEscapeKey = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        setShowShareMenu(false);\n      }\n    };\n\n    if (showShareMenu) {\n      document.addEventListener('mousedown', handleClickOutside);\n      document.addEventListener('keydown', handleEscapeKey);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n      document.removeEventListener('keydown', handleEscapeKey);\n    };\n  }, [showShareMenu]);\n\n  return (\n    <div className={className}>\n      {/* Desktop layout - original Strava style */}\n      <div className=\"hidden md:block\">\n        {/* Counts section - top left */}\n        <div className=\"px-4 pb-3 flex items-center justify-between text-sm text-gray-600\">\n          <div className=\"flex items-center gap-4\">\n            {supportCount > 0 && (\n              <button\n                onClick={onLikesClick}\n                className=\"hover:text-gray-900 hover:underline transition-colors font-medium\"\n                aria-label={`View ${supportCount} ${supportCount === 1 ? 'person who liked this' : 'people who liked this'}`}\n              >\n                {supportCount} {supportCount === 1 ? 'like' : 'likes'}\n              </button>\n            )}\n          </div>\n        </div>\n\n        {/* Action buttons - Strava style (bottom right on desktop) */}\n        <div className=\"px-4 py-3\">\n          <div className=\"flex items-center justify-end gap-2\">\n            {/* Like button */}\n            <button\n              onClick={handleSupport}\n              disabled={isSupporting}\n              className={`flex items-center gap-1.5 px-3 py-1.5 rounded hover:bg-gray-100 transition-colors ${\n                isSupporting ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'\n              }`}\n              aria-label={isSupported ? `Unlike session (${supportCount} ${supportCount === 1 ? 'like' : 'likes'})` : `Like session (${supportCount} ${supportCount === 1 ? 'like' : 'likes'})`}\n            >\n              <ThumbsUp\n                className={`w-5 h-5 transition-colors ${\n                  isSupported\n                    ? 'fill-gray-700 text-gray-700'\n                    : 'text-gray-600'\n                }`}\n                strokeWidth={1.5}\n                aria-hidden=\"true\"\n              />\n              <span className={`text-sm font-medium ${\n                isSupported ? 'text-gray-700' : 'text-gray-600'\n              }`} aria-hidden=\"true\">\n                {supportCount > 0 ? supportCount : ''}\n              </span>\n            </button>\n\n            {/* Comment button */}\n            <button\n              onClick={onCommentClick}\n              className=\"flex items-center gap-1.5 px-3 py-1.5 rounded hover:bg-gray-100 transition-colors\"\n              aria-label={`View and add comments (${commentCount} ${commentCount === 1 ? 'comment' : 'comments'})`}\n            >\n              <MessageSquare\n                className=\"w-5 h-5 text-gray-600\"\n                strokeWidth={1.5}\n                aria-hidden=\"true\"\n              />\n              <span className=\"text-sm font-medium text-gray-600\" aria-hidden=\"true\">\n                {commentCount > 0 ? commentCount : ''}\n              </span>\n            </button>\n\n            {/* Share button with dropdown */}\n            <div className=\"relative\" ref={shareMenuRef}>\n              <button\n                onClick={() => setShowShareMenu(!showShareMenu)}\n                disabled={isSharing}\n                className={`flex items-center gap-1.5 px-3 py-1.5 rounded hover:bg-gray-100 transition-colors ${\n                  isSharing ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'\n                }`}\n                aria-label=\"Share session\"\n                aria-expanded={showShareMenu}\n                aria-haspopup=\"true\"\n              >\n                <Share2\n                  className=\"w-5 h-5 text-gray-600\"\n                  strokeWidth={1.5}\n                  aria-hidden=\"true\"\n                />\n              </button>\n\n              {/* Share dropdown menu */}\n              {showShareMenu && (\n                <div\n                  className=\"absolute right-0 mt-2 w-52 bg-white rounded-lg shadow-2xl border-2 border-gray-300 py-2 z-50\"\n                  role=\"menu\"\n                  aria-label=\"Share options\"\n                >\n                  {isOwnPost && onShareImage && (\n                    <>\n                      <button\n                        onClick={handleShareImage}\n                        className=\"w-full px-4 py-2.5 text-left text-sm font-medium text-gray-900 hover:bg-blue-50 flex items-center gap-3\"\n                        role=\"menuitem\"\n                        aria-label=\"Share session as image\"\n                      >\n                        <ImageIcon className=\"w-5 h-5 text-[#007AFF]\" aria-hidden=\"true\" />\n                        Share as image\n                      </button>\n                      <div className=\"border-t border-gray-200 my-1\" aria-hidden=\"true\"></div>\n                    </>\n                  )}\n                  <button\n                    onClick={handleShare}\n                    className=\"w-full px-4 py-2.5 text-left text-sm font-medium text-gray-900 hover:bg-blue-50 flex items-center gap-3\"\n                    role=\"menuitem\"\n                    aria-label=\"Share session link\"\n                  >\n                    <LinkIcon className=\"w-5 h-5 text-[#007AFF]\" aria-hidden=\"true\" />\n                    Share link\n                  </button>\n                  <div className=\"border-t border-gray-200 my-1\" aria-hidden=\"true\"></div>\n                  <button\n                    onClick={handleCopyLink}\n                    className=\"w-full px-4 py-2.5 text-left text-sm font-medium text-gray-900 hover:bg-blue-50 flex items-center gap-3\"\n                    role=\"menuitem\"\n                    aria-label=\"Copy session link to clipboard\"\n                  >\n                    <Copy className=\"w-5 h-5 text-[#007AFF]\" aria-hidden=\"true\" />\n                    Copy to clipboard\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile layout - LinkedIn style */}\n      <div className=\"md:hidden\">\n        {/* Counts section */}\n        <div className=\"px-4 py-2 flex items-center justify-between text-sm text-gray-600\">\n          <button\n            onClick={onLikesClick}\n            className=\"hover:text-gray-900 transition-colors min-h-[44px] flex items-center\"\n            disabled={supportCount === 0}\n            aria-label={`View ${supportCount} ${supportCount === 1 ? 'person who liked this' : 'people who liked this'}`}\n          >\n            {supportCount} {supportCount === 1 ? 'like' : 'likes'}\n          </button>\n          <button\n            onClick={onCommentClick}\n            className=\"hover:text-gray-900 transition-colors min-h-[44px] flex items-center\"\n            aria-label={`View ${commentCount} ${commentCount === 1 ? 'comment' : 'comments'}`}\n          >\n            {commentCount} {commentCount === 1 ? 'comment' : 'comments'}\n          </button>\n        </div>\n\n        {/* Action buttons - 3 equal width columns */}\n        <div className=\"px-4 pb-3\">\n          <div className=\"grid grid-cols-3 gap-1\">\n            {/* Like button */}\n            <button\n              onClick={handleSupport}\n              disabled={isSupporting}\n              className={`flex flex-col items-center justify-center py-2 rounded hover:bg-gray-50 transition-colors min-h-[44px] ${\n                isSupporting ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'\n              }`}\n              aria-label={isSupported ? `Unlike session (${supportCount} ${supportCount === 1 ? 'like' : 'likes'})` : `Like session (${supportCount} ${supportCount === 1 ? 'like' : 'likes'})`}\n            >\n              <ThumbsUp\n                className={`w-6 h-6 transition-colors ${\n                  isSupported\n                    ? 'fill-gray-700 text-gray-700'\n                    : 'text-gray-600'\n                }`}\n                strokeWidth={1.5}\n                aria-hidden=\"true\"\n              />\n            </button>\n\n            {/* Comment button */}\n            <button\n              onClick={onCommentClick}\n              className=\"flex flex-col items-center justify-center py-2 rounded hover:bg-gray-50 transition-colors min-h-[44px]\"\n              aria-label={`View and add comments (${commentCount} ${commentCount === 1 ? 'comment' : 'comments'})`}\n            >\n              <MessageSquare\n                className=\"w-6 h-6 text-gray-600\"\n                strokeWidth={1.5}\n                aria-hidden=\"true\"\n              />\n            </button>\n\n            {/* Share button with dropdown */}\n            <div className=\"relative\">\n              <button\n                onClick={() => setShowShareMenu(!showShareMenu)}\n                disabled={isSharing}\n                className={`flex flex-col items-center justify-center py-2 rounded hover:bg-gray-50 transition-colors w-full min-h-[44px] ${\n                  isSharing ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'\n                }`}\n                aria-label=\"Share session\"\n                aria-expanded={showShareMenu}\n                aria-haspopup=\"true\"\n              >\n                <Share2\n                  className=\"w-6 h-6 text-gray-600\"\n                  strokeWidth={1.5}\n                  aria-hidden=\"true\"\n                />\n              </button>\n\n              {/* Share dropdown menu (mobile) */}\n              {showShareMenu && (\n                <div\n                  className=\"absolute right-0 bottom-full mb-2 w-56 bg-white rounded-lg shadow-2xl border-2 border-gray-300 py-2 z-50\"\n                  role=\"menu\"\n                  aria-label=\"Share options\"\n                >\n                  {isOwnPost && onShareImage && (\n                    <>\n                      <button\n                        onClick={handleShareImage}\n                        className=\"w-full px-4 py-3 text-left text-base font-medium text-gray-900 hover:bg-blue-50 flex items-center gap-3\"\n                        role=\"menuitem\"\n                        aria-label=\"Share session as image\"\n                      >\n                        <ImageIcon className=\"w-5 h-5 text-[#007AFF]\" aria-hidden=\"true\" />\n                        Share as image\n                      </button>\n                      <div className=\"border-t border-gray-200 my-1\" aria-hidden=\"true\"></div>\n                    </>\n                  )}\n                  <button\n                    onClick={handleShare}\n                    className=\"w-full px-4 py-3 text-left text-base font-medium text-gray-900 hover:bg-blue-50 flex items-center gap-3\"\n                    role=\"menuitem\"\n                    aria-label=\"Share session link\"\n                  >\n                    <LinkIcon className=\"w-5 h-5 text-[#007AFF]\" aria-hidden=\"true\" />\n                    Share link\n                  </button>\n                  <div className=\"border-t border-gray-200 my-1\" aria-hidden=\"true\"></div>\n                  <button\n                    onClick={handleCopyLink}\n                    className=\"w-full px-4 py-3 text-left text-base font-medium text-gray-900 hover:bg-blue-50 flex items-center gap-3\"\n                    role=\"menuitem\"\n                    aria-label=\"Copy session link to clipboard\"\n                  >\n                    <Copy className=\"w-5 h-5 text-[#007AFF]\" aria-hidden=\"true\" />\n                    Copy to clipboard\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SessionInteractions;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SessionPrompt.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SessionStats.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'completedTasks' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 30,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 30,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 30,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [706, 709], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [706, 709], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'totalTasks' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 31,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 31,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport { Session, Project } from '@/types';\n\ninterface SessionStatsProps {\n  session: Session;\n  project: Project;\n  className?: string;\n}\n\nexport const SessionStats: React.FC<SessionStatsProps> = ({ \n  session, \n  project, \n  className = '' \n}) => {\n  const [_showAllTasks, _setShowAllTasks] = useState(false);\n  \n  const formatDuration = (seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes}m`;\n    }\n    return `${minutes}m`;\n  };\n\n  // Task tracking not implemented at session level\n  const completedTasks: any[] = [];\n  const totalTasks = 0;\n\n  return (\n    <div className={`bg-gradient-to-br from-gray-50 to-gray-100 rounded-xl border border-gray-200 overflow-hidden ${className}`}>\n      {/* Session Title with Project Badge */}\n      <div className=\"px-4 py-3 bg-white border-b border-gray-200\">\n        <div className=\"flex items-center gap-3\">\n          <div\n            className=\"w-10 h-10 rounded-lg flex items-center justify-center text-white text-lg font-semibold shadow-sm flex-shrink-0\"\n            style={{ backgroundColor: project.color }}\n          >\n            {project.icon}\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <h3 className=\"font-bold text-gray-900 text-base leading-tight truncate\">\n              {session.title}\n            </h3>\n            <p className=\"text-sm text-gray-600 truncate\">\n              {project.name}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Stats Grid - Strava Style */}\n      <div className=\"px-4 py-4\">\n        <div className=\"grid grid-cols-1 gap-4\">\n          {/* Duration */}\n          <div>\n            <div className=\"text-xs text-gray-500 uppercase tracking-wide font-medium mb-1\">\n              Duration\n            </div>\n            <div className=\"text-2xl font-bold text-gray-900\">\n              {formatDuration(session.duration)}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Tags */}\n      {session.tags && session.tags.length > 0 && (\n        <div className=\"px-4 pb-4\">\n          <div className=\"flex flex-wrap gap-2\">\n            {session.tags.map((tag, index) => (\n              <span\n                key={index}\n                className=\"inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-orange-100 text-orange-700 border border-orange-200\"\n              >\n                #{tag}\n              </span>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SessionStats;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SessionTimer.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'token' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 36,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'session' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 169,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 169,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'post' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 169,
        "column": 34,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 169,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'session' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 176,
        "column": 23,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 176,
        "endColumn": 30
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { useTimer } from '@/features/timer/hooks';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Project, CreateSessionData } from '@/types';\nimport { TimerDisplay } from './TimerDisplay';\nimport { TimerControls as _TimerControls } from './TimerControls';\nimport { SaveSession } from './SaveSession';\nimport { firebaseApi } from '@/lib/api';\nimport { cn } from '@/lib/utils';\n\ninterface SessionTimerProps {\n  className?: string;\n}\n\nexport const SessionTimer: React.FC<SessionTimerProps> = ({ className = '' }) => {\n  const { timerState, startTimer } = useTimer();\n  const { user } = useAuth();\n\n  // TODO: Implement Firebase API calls\n  // Helper function to get auth token\n  const getAuthToken = (): string => {\n    // For now, return empty string since we're not using Firebase sessions yet\n    return '';\n  };\n  const [projects, setProjects] = useState<Project[]>([]);\n  const [selectedProjectId, setSelectedProjectId] = useState<string>('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [showFinishModal, setShowFinishModal] = useState(false);\n\n  // Load projects on mount\n  useEffect(() => {\n    const loadProjects = async () => {\n      try {\n        const token = getAuthToken();\n        // TODO: Load projects from Firebase\n        const projectList: Project[] = []; // await mockProjectApi.getProjects(token);\n        setProjects(projectList);\n\n        // If timer already has a project selected, use it\n        if (timerState.currentProject) {\n          setSelectedProjectId(timerState.currentProject.id);\n        }\n      } catch (error) {\n        console.error('Failed to load projects:', error);\n      }\n    };\n\n    if (user) {\n      loadProjects();\n    }\n  }, [user, timerState.currentProject]);\n\n\n  const handleStartTimer = async () => {\n    if (!selectedProjectId) return;\n\n    try {\n      setIsLoading(true);\n      await startTimer(selectedProjectId);\n    } catch (error) {\n      console.error('Failed to start timer:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n\n  const handleFinishModalOpen = () => {\n    setShowFinishModal(true);\n  };\n\n  const isActive = timerState.isRunning || timerState.pausedDuration > 0;\n\n  return (\n    <div className={cn('max-w-4xl mx-auto p-6', className)}>\n      <div className=\"bg-white rounded-lg shadow-lg p-8\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Focus Session</h1>\n          <p className=\"text-gray-600\">Track your work and stay productive</p>\n        </div>\n\n        {/* Timer Display */}\n        <div className=\"mb-8\">\n          <TimerDisplay className=\"mb-4\" showMilliseconds={false} />\n        </div>\n\n        {/* Project Selection */}\n        {!isActive && (\n          <div className=\"mb-6\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Select Project\n            </label>\n            <select\n              value={selectedProjectId}\n              onChange={(e) => setSelectedProjectId(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              disabled={isLoading}\n            >\n              <option value=\"\">Choose a project...</option>\n              {projects.map((project) => (\n                <option key={project.id} value={project.id}>\n                  {project.name}\n                </option>\n              ))}\n            </select>\n          </div>\n        )}\n\n        {/* Current Project Display (when timer is active) */}\n        {isActive && timerState.currentProject && (\n          <div className=\"mb-6 p-4 bg-blue-50 rounded-lg\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n                <span className=\"text-white font-bold text-sm\">\n                  {timerState.currentProject.icon || 'P'}\n                </span>\n              </div>\n              <div>\n                <h3 className=\"font-medium text-gray-900\">{timerState.currentProject.name}</h3>\n                <p className=\"text-sm text-gray-600\">{timerState.currentProject.description}</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n\n        {/* Timer Controls */}\n        <div className=\"flex justify-center\">\n          <CustomTimerControls \n            onFinish={handleFinishModalOpen}\n            onStart={handleStartTimer}\n            className=\"mb-4\"\n          />\n        </div>\n\n        {/* Connection Status */}\n        {!timerState.isConnected && (\n          <div className=\"mt-4 p-3 bg-orange-50 border border-orange-200 rounded-lg\">\n            <div className=\"flex items-center space-x-2 text-orange-800\">\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n              </svg>\n              <span className=\"text-sm font-medium\">You're offline</span>\n            </div>\n            <p className=\"text-sm text-orange-700 mt-1\">\n              Your timer will continue running. Changes will sync when you reconnect.\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Finish Session Modal */}\n      {showFinishModal && (\n        <SaveSession\n          onSave={async (data) => {\n            try {\n              // Create session data\n              const sessionData: CreateSessionData = {\n                ...data\n              };\n\n              // Create session and post if visibility allows\n              if (data.visibility !== 'private') {\n                // Show post creation modal for non-private sessions\n                // For now, we'll create the session with a basic post\n                const { session, post } = await firebaseApi.session.createSessionWithPost(\n                  sessionData,\n                  data.description || `Completed ${data.title}`,\n                  data.visibility\n                );\n              } else {\n                // Create private session only\n                const session = await firebaseApi.session.createSession(sessionData);\n              }\n\n              setShowFinishModal(false);\n              // Timer will be finished by the context\n            } catch (error) {\n              console.error('Failed to save session:', error);\n              throw error;\n            }\n          }}\n          onCancel={() => setShowFinishModal(false)}\n          initialData={{\n            projectId: timerState.currentProject?.id || '',\n            activityId: timerState.currentProject?.id || '',\n            title: '',\n            description: '',\n            duration: timerState.pausedDuration || 0,\n            startTime: timerState.startTime || new Date(),\n            tags: [],\n            visibility: 'everyone',\n            howFelt: 3,\n            privateNotes: '',\n          }}\n          isLoading={false}\n        />\n      )}\n    </div>\n  );\n};\n\n\n// Custom Timer Controls for SessionTimer\ninterface CustomTimerControlsProps {\n  onFinish: () => void;\n  onStart: () => void;\n  className?: string;\n}\n\nconst CustomTimerControls: React.FC<CustomTimerControlsProps> = ({ \n  onFinish, \n  onStart,\n  className = '' \n}) => {\n  const { timerState, pauseTimer, resumeTimer, resetTimer } = useTimer();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleStart = async () => {\n    try {\n      setIsLoading(true);\n      await onStart();\n    } catch (error) {\n      console.error('Failed to start timer:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handlePause = async () => {\n    try {\n      setIsLoading(true);\n      await pauseTimer();\n    } catch (error) {\n      console.error('Failed to pause timer:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleResume = async () => {\n    try {\n      setIsLoading(true);\n      await resumeTimer();\n    } catch (error) {\n      console.error('Failed to resume timer:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleReset = async () => {\n    if (window.confirm('Are you sure you want to reset the timer? This will discard the current session.')) {\n      try {\n        setIsLoading(true);\n        await resetTimer();\n      } catch (error) {\n        console.error('Failed to reset timer:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n  };\n\n  const isActive = timerState.isRunning || timerState.pausedDuration > 0;\n\n  return (\n    <div className={cn('flex items-center justify-center space-x-3', className)}>\n      {!isActive ? (\n        <button\n          onClick={handleStart}\n          disabled={isLoading}\n          className=\"px-6 py-3 bg-green-600 text-white font-medium rounded-lg hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors flex items-center space-x-2\"\n        >\n          <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\n          </svg>\n          <span>{isLoading ? 'Starting...' : 'Start'}</span>\n        </button>\n      ) : (\n        <>\n          {timerState.isRunning ? (\n            <button\n              onClick={handlePause}\n              disabled={isLoading}\n              className=\"px-6 py-3 bg-yellow-600 text-white font-medium rounded-lg hover:bg-yellow-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors flex items-center space-x-2\"\n            >\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zM7 8a1 1 0 012 0v4a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v4a1 1 0 102 0V8a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n              </svg>\n              <span>{isLoading ? 'Pausing...' : 'Pause'}</span>\n            </button>\n          ) : (\n            <button\n              onClick={handleResume}\n              disabled={isLoading}\n              className=\"px-6 py-3 bg-green-600 text-white font-medium rounded-lg hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors flex items-center space-x-2\"\n            >\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\n              </svg>\n              <span>{isLoading ? 'Resuming...' : 'Resume'}</span>\n            </button>\n          )}\n\n          <button\n            onClick={onFinish}\n            disabled={isLoading}\n            className=\"px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors flex items-center space-x-2\"\n          >\n            <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n            </svg>\n            <span>Finish</span>\n          </button>\n\n          <button\n            onClick={handleReset}\n            disabled={isLoading}\n            className=\"px-4 py-3 bg-red-600 text-white font-medium rounded-lg hover:bg-red-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors flex items-center space-x-2\"\n          >\n            <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z\" clipRule=\"evenodd\" />\n            </svg>\n            <span>Reset</span>\n          </button>\n        </>\n      )}\n\n      {/* Connection status indicator */}\n      {!timerState.isConnected && (\n        <div className=\"flex items-center space-x-1 text-orange-600 text-sm\">\n          <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n          </svg>\n          <span>Offline</span>\n        </div>\n      )}\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SessionTimerEnhanced.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ShareSessionImage.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/Sidebar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SidebarActivityGraph.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadSessions'. Either include it or remove the dependency array.",
        "line": 37,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 37,
        "endColumn": 12,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadSessions, user]",
            "fix": { "range": [895, 901], "text": "[loadSessions, user]" }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'processChartData'. Either include it or remove the dependency array.",
        "line": 41,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 41,
        "endColumn": 28,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [processChartData, sessions, timePeriod]",
            "fix": {
              "range": [954, 976],
              "text": "[processChartData, sessions, timePeriod]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 212,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 212,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6817, 6820], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6817, 6820], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { ChevronDown } from 'lucide-react';\nimport {\n  _LineChart,\n  Line,\n  ResponsiveContainer,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Area,\n  ComposedChart,\n} from 'recharts';\nimport { useAuth } from '@/hooks/useAuth';\nimport { firebaseSessionApi } from '@/lib/api';\nimport { Session } from '@/types';\n\ntype TimePeriod = 'week' | 'month';\n\ninterface ChartDataPoint {\n  name: string;\n  hours: number;\n  isToday?: boolean;\n}\n\nfunction SidebarActivityGraph() {\n  const { user } = useAuth();\n  const [timePeriod, setTimePeriod] = useState<TimePeriod>('week');\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [sessions, setSessions] = useState<Session[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [chartData, setChartData] = useState<ChartDataPoint[]>([]);\n\n  useEffect(() => {\n    loadSessions();\n  }, [user]);\n\n  useEffect(() => {\n    processChartData();\n  }, [sessions, timePeriod]);\n\n  const loadSessions = async () => {\n    if (!user) {\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      const response = await firebaseSessionApi.getSessions(1, 500, {});\n      setSessions(response.sessions);\n    } catch (error) {\n      console.error('Failed to load sessions:', error);\n      setSessions([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const processChartData = () => {\n    const now = new Date();\n    const data: ChartDataPoint[] = [];\n\n    if (timePeriod === 'week') {\n      // Last 7 days\n      const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n      for (let i = 6; i >= 0; i--) {\n        const day = new Date(now);\n        day.setDate(day.getDate() - i);\n        day.setHours(0, 0, 0, 0);\n\n        const hoursWorked =\n          sessions.length > 0\n            ? sessions\n                .filter(s => {\n                  const sessionDate = new Date(s.createdAt);\n                  sessionDate.setHours(0, 0, 0, 0);\n                  return sessionDate.getTime() === day.getTime();\n                })\n                .reduce((sum, s) => sum + s.duration / 3600, 0)\n            : 0;\n\n        data.push({\n          name: dayNames[day.getDay()] || '',\n          hours: Number(hoursWorked.toFixed(1)),\n          isToday: i === 0,\n        });\n      }\n    } else if (timePeriod === 'month') {\n      // Last 4 weeks\n      for (let i = 3; i >= 0; i--) {\n        const weekStart = new Date(now);\n        weekStart.setDate(weekStart.getDate() - (i * 7 + 6));\n        weekStart.setHours(0, 0, 0, 0);\n        const weekEnd = new Date(now);\n        weekEnd.setDate(weekEnd.getDate() - i * 7);\n        weekEnd.setHours(23, 59, 59, 999);\n\n        const hoursWorked =\n          sessions.length > 0\n            ? sessions\n                .filter(s => {\n                  const sessionDate = new Date(s.createdAt);\n                  return sessionDate >= weekStart && sessionDate <= weekEnd;\n                })\n                .reduce((sum, s) => sum + s.duration / 3600, 0)\n            : 0;\n\n        data.push({\n          name: `W${4 - i}`,\n          hours: Number(hoursWorked.toFixed(1)),\n          isToday: i === 0,\n        });\n      }\n    }\n\n    setChartData(data);\n  };\n\n  return (\n    <div className=\"p-6\">\n      {/* Header with dropdown */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-xl font-bold text-gray-900\">\n          {timePeriod === 'week' ? 'This Week' : 'This Month'}\n        </h3>\n        <div className=\"relative\">\n          <button\n            onClick={() => setShowDropdown(!showDropdown)}\n            className=\"flex items-center gap-1.5 px-3 py-1.5 text-sm font-medium text-gray-700 bg-white rounded-lg hover:bg-gray-100 transition-colors border border-gray-200\"\n          >\n            {timePeriod === 'week' ? 'Week' : 'Month'}\n            <ChevronDown\n              className={`w-4 h-4 transition-transform ${showDropdown ? 'rotate-180' : ''}`}\n            />\n          </button>\n          {showDropdown && (\n            <div className=\"absolute right-0 mt-2 w-28 bg-white rounded-xl shadow-lg border border-gray-200 py-1 z-50\">\n              <button\n                onClick={() => {\n                  setTimePeriod('week');\n                  setShowDropdown(false);\n                }}\n                className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 transition-colors ${\n                  timePeriod === 'week'\n                    ? 'text-[#007AFF] font-semibold bg-blue-50'\n                    : 'text-gray-700'\n                }`}\n              >\n                Week\n              </button>\n              <button\n                onClick={() => {\n                  setTimePeriod('month');\n                  setShowDropdown(false);\n                }}\n                className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 transition-colors ${\n                  timePeriod === 'month'\n                    ? 'text-[#007AFF] font-semibold bg-blue-50'\n                    : 'text-gray-700'\n                }`}\n              >\n                Month\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Chart */}\n      {isLoading ? (\n        <div className=\"h-52 bg-gradient-to-br from-gray-50 to-gray-100 rounded-xl animate-pulse\"></div>\n      ) : (\n        <div className=\"h-52\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <ComposedChart\n              data={chartData}\n              margin={{ top: 10, right: 10, left: -10, bottom: 5 }}\n            >\n              <defs>\n                <linearGradient id=\"colorHours\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"#007AFF\" stopOpacity={0.1} />\n                  <stop offset=\"95%\" stopColor=\"#007AFF\" stopOpacity={0} />\n                </linearGradient>\n              </defs>\n              <XAxis\n                dataKey=\"name\"\n                tick={{ fontSize: 12, fill: '#6b7280', fontWeight: 500 }}\n                axisLine={false}\n                tickLine={false}\n                dy={8}\n              />\n              <YAxis\n                tick={{ fontSize: 12, fill: '#9ca3af' }}\n                axisLine={false}\n                tickLine={false}\n                width={35}\n                domain={[0, 'dataMax + 0.5']}\n                tickFormatter={value => value.toFixed(1)}\n              />\n              <Tooltip\n                contentStyle={{\n                  backgroundColor: 'rgba(0, 0, 0, 0.8)',\n                  border: 'none',\n                  borderRadius: '8px',\n                  padding: '8px 12px',\n                  fontSize: '12px',\n                  color: 'white',\n                }}\n                labelStyle={{ color: 'white', marginBottom: '4px' }}\n                formatter={(value: any) => [`${value.toFixed(1)} hrs`, 'Time']}\n                cursor={{\n                  stroke: '#e5e7eb',\n                  strokeWidth: 1,\n                  strokeDasharray: '3 3',\n                }}\n              />\n              <Area\n                type=\"monotone\"\n                dataKey=\"hours\"\n                stroke=\"none\"\n                fill=\"url(#colorHours)\"\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"hours\"\n                stroke=\"#007AFF\"\n                strokeWidth={3}\n                dot={false}\n                activeDot={{\n                  r: 8,\n                  fill: '#007AFF',\n                  stroke: 'white',\n                  strokeWidth: 3,\n                }}\n              />\n            </ComposedChart>\n          </ResponsiveContainer>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default SidebarActivityGraph;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SignupForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SimpleLayout.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/StatsCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/StreakCalendar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/StreakCard.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 37,
        "column": 86,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 37,
        "endColumn": 89,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1116, 1119], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1116, 1119], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 46,
        "column": 97,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 46,
        "endColumn": 100,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1511, 1514], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1511, 1514], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useEffect, useState } from 'react';\nimport { Flame } from 'lucide-react';\nimport { firebaseApi } from '@/lib/api';\nimport { StreakStats } from '@/types';\nimport Link from 'next/link';\nimport { WeekStreakCalendar } from './WeekStreakCalendar';\n\ninterface StreakCardProps {\n  userId: string;\n  variant?: 'default' | 'compact';\n  showProgress?: boolean;\n}\n\nexport const StreakCard: React.FC<StreakCardProps> = ({\n  userId,\n  variant = 'default',\n  showProgress = true\n}) => {\n  const [streakStats, setStreakStats] = useState<StreakStats | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const loadStreak = async () => {\n      try {\n\n        const stats = await firebaseApi.streak.getStreakStats(userId);\n\n\n        // Calculate and log time-based info (for debugging)\n        if (stats.lastActivityDate) {\n          // Time since last activity calculation available but not currently used\n        }\n\n        // Fetch last 7 days of sessions for detailed logging\n        const sessionsResponse = await firebaseApi.session.getSessions(1, 100, {} as any);\n\n        // Get date 7 days ago at start of day\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        const sevenDaysAgo = new Date(today);\n        sevenDaysAgo.setDate(today.getDate() - 6); // Include today = 7 days total\n\n        // Create a map of dates to sessions\n        const dateMap = new Map<string, { totalMinutes: number; sessionCount: number; sessions: any[] }>();\n\n        // Initialize all 7 days\n        for (let i = 0; i < 7; i++) {\n          const date = new Date(sevenDaysAgo);\n          date.setDate(sevenDaysAgo.getDate() + i);\n          const dateKey = date.toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' });\n          dateMap.set(dateKey, { totalMinutes: 0, sessionCount: 0, sessions: [] });\n        }\n\n        // Filter sessions from last 7 days and group by date\n        sessionsResponse.sessions.forEach(session => {\n          const sessionDate = new Date(session.startTime);\n          if (sessionDate >= sevenDaysAgo && sessionDate <= new Date()) {\n            const dateKey = sessionDate.toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' });\n            const dayData = dateMap.get(dateKey);\n            if (dayData) {\n              dayData.totalMinutes += session.duration;\n              dayData.sessionCount += 1;\n              dayData.sessions.push(session);\n            }\n          }\n        });\n\n        // Log each day with formatted output\n        const sortedDates = Array.from(dateMap.entries()).sort((a, b) => {\n          const dateA = new Date(a[0]);\n          const dateB = new Date(b[0]);\n          return dateA.getTime() - dateB.getTime();\n        });\n\n        sortedDates.forEach(([_dateKey, data]) => {\n          // Day data processing available but not currently used in UI\n          if (data.sessions.length > 0) {\n            data.sessions.forEach(() => {\n              // Session data available for future use\n            });\n          }\n        });\n\n\n        setStreakStats(stats);\n      } catch (error) {\n        console.error('Failed to load streak:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadStreak();\n  }, [userId]);\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-white border border-gray-200 rounded-xl p-4 md:p-6 animate-pulse\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          <div className=\"w-10 h-10 bg-gray-200 rounded-full\"></div>\n          <div className=\"flex-1\">\n            <div className=\"h-5 bg-gray-200 rounded w-24 mb-2\"></div>\n            <div className=\"h-3 bg-gray-200 rounded w-16\"></div>\n          </div>\n        </div>\n        <div className=\"h-16 bg-gray-200 rounded\"></div>\n      </div>\n    );\n  }\n\n  if (!streakStats) return null;\n\n  const getFlameColor = () => {\n    // Grey flame when user has a streak but hasn't completed today's session\n    if (streakStats.streakAtRisk && streakStats.currentStreak > 0) return 'text-gray-400';\n    // Milestone-based colors for active streaks\n    if (streakStats.currentStreak >= 100) return 'text-purple-500';\n    if (streakStats.currentStreak >= 30) return 'text-blue-500';\n    if (streakStats.currentStreak >= 7) return 'text-orange-500';\n    // Default orange for new streaks\n    return 'text-orange-400';\n  };\n\n  const getGradientColor = () => {\n    if (streakStats.streakAtRisk && streakStats.currentStreak > 0) return 'from-gray-50 to-gray-100';\n    if (streakStats.currentStreak >= 100) return 'from-purple-50 to-purple-100';\n    if (streakStats.currentStreak >= 30) return 'from-blue-50 to-blue-100';\n    if (streakStats.currentStreak >= 7) return 'from-orange-50 to-orange-100';\n    return 'from-orange-50 to-orange-100';\n  };\n\n  const progressToNextMilestone = streakStats.nextMilestone\n    ? (streakStats.currentStreak / streakStats.nextMilestone) * 100\n    : 0;\n\n  if (variant === 'compact') {\n    return (\n      <Link href=\"/analytics\" className=\"block\">\n        <div className=\"p-3 hover:bg-gray-50 rounded-xl transition-all cursor-pointer\">\n          {/* Header */}\n          <h3 className=\"text-sm font-semibold text-gray-900 mb-3\">Your streak</h3>\n\n          {/* Flame icon and week calendar side by side */}\n          <div className=\"flex items-center gap-3\">\n            {/* Left side - Flame with day count */}\n            <div className=\"flex flex-col items-center flex-shrink-0\">\n              <div className={`${getFlameColor()} relative`}>\n                <Flame className=\"w-10 h-10\" fill=\"currentColor\" />\n              </div>\n              <div className=\"text-sm font-medium text-gray-900 mt-0.5\">\n                {streakStats.currentStreak}\n              </div>\n              <div className=\"text-xs text-gray-500\">\n                Day{streakStats.currentStreak !== 1 ? 's' : ''}\n              </div>\n            </div>\n\n            {/* Right side - Week calendar */}\n            <div className=\"flex-1\">\n              <WeekStreakCalendar userId={userId} />\n            </div>\n          </div>\n        </div>\n      </Link>\n    );\n  }\n\n  return (\n    <div className={`bg-gradient-to-br ${getGradientColor()} border border-gray-200 rounded-xl p-4 md:p-6`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className={`${getFlameColor()} relative`}>\n            <Flame className=\"w-10 h-10\" fill=\"currentColor\" />\n          </div>\n          <div>\n            <h3 className=\"text-lg font-bold text-gray-900\">Streak</h3>\n            <p className=\"text-sm text-gray-600\">Stay consistent</p>\n          </div>\n        </div>\n        <Link\n          href=\"/analytics\"\n          className=\"text-sm text-blue-600 hover:text-blue-700 font-medium\"\n        >\n          View Analytics →\n        </Link>\n      </div>\n\n      {/* Main Stats */}\n      <div className=\"grid grid-cols-3 gap-4 mb-4\">\n        <div className=\"text-center\">\n          <div className=\"text-2xl md:text-3xl font-bold text-gray-900\">\n            {streakStats.currentStreak}\n          </div>\n          <div className=\"text-xs text-gray-600 mt-1\">Current</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-2xl md:text-3xl font-bold text-gray-900\">\n            {streakStats.longestStreak}\n          </div>\n          <div className=\"text-xs text-gray-600 mt-1\">Best</div>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"text-2xl md:text-3xl font-bold text-gray-900\">\n            {streakStats.totalStreakDays}\n          </div>\n          <div className=\"text-xs text-gray-600 mt-1\">Total Days</div>\n        </div>\n      </div>\n\n      {/* Progress to Next Milestone */}\n      {showProgress && streakStats.nextMilestone > 0 && (\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-gray-700 font-medium\">\n              Next goal: {streakStats.nextMilestone} days\n            </span>\n            <span className=\"text-gray-600\">\n              {streakStats.nextMilestone - streakStats.currentStreak} to go\n            </span>\n          </div>\n          <div className=\"w-full bg-white/60 rounded-full h-2.5 overflow-hidden\">\n            <div\n              className={`h-full rounded-full transition-all duration-500 ${\n                streakStats.streakAtRisk && streakStats.currentStreak > 0\n                  ? 'bg-gray-400'\n                  : streakStats.currentStreak >= 100\n                  ? 'bg-purple-500'\n                  : streakStats.currentStreak >= 30\n                  ? 'bg-blue-500'\n                  : 'bg-orange-500'\n              }`}\n              style={{ width: `${Math.min(progressToNextMilestone, 100)}%` }}\n            />\n          </div>\n        </div>\n      )}\n\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/StreakDisplay.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/StreakNotification.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/StreakStats.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SuggestedGroupsModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 23,
        "column": 64,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 23,
        "endColumn": 67,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [644, 647], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [644, 647], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadGroups'. Either include it or remove the dependency array.",
        "line": 32,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 32,
        "endColumn": 20,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [isOpen, loadGroups, user]",
            "fix": { "range": [918, 932], "text": "[isOpen, loadGroups, user]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { X, Users, ChevronLeft, ChevronRight, MapPin } from 'lucide-react';\nimport Link from 'next/link';\nimport { firebaseApi } from '@/lib/api';\nimport { useAuth } from '@/hooks/useAuth';\nimport GroupAvatar from '@/components/GroupAvatar';\n\ninterface SuggestedGroupsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst GROUPS_PER_PAGE = 10;\nconst _TOTAL_GROUPS_TO_FETCH = 100;\n\nexport default function SuggestedGroupsModal({\n  isOpen,\n  onClose,\n}: SuggestedGroupsModalProps) {\n  const { user } = useAuth();\n  const [allSuggestedGroups, setAllSuggestedGroups] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [joiningGroups, setJoiningGroups] = useState<Set<string>>(new Set());\n  const [currentPage, setCurrentPage] = useState(0);\n\n  useEffect(() => {\n    if (isOpen && user) {\n      loadGroups();\n    }\n  }, [isOpen, user]);\n\n  // Handle ESC key to close modal\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape' && isOpen) {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [isOpen, onClose]);\n\n  const loadGroups = async () => {\n    if (!user) return;\n\n    try {\n      setIsLoading(true);\n      setCurrentPage(0);\n\n      // Get user's current groups to exclude them from suggestions\n      const userGroups = await firebaseApi.group.getUserGroups(user.id);\n      const userGroupIds = new Set(userGroups.map(g => g.id));\n\n      // Get all groups and filter out ones user is already in\n      const allGroups = await firebaseApi.group.searchGroups('');\n      const filteredGroups = allGroups.filter(\n        group => !userGroupIds.has(group.id)\n      );\n      setAllSuggestedGroups(filteredGroups);\n    } catch (error) {\n      console.error('Error loading groups:', error);\n      setAllSuggestedGroups([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Calculate paginated groups\n  const totalPages = Math.ceil(allSuggestedGroups.length / GROUPS_PER_PAGE);\n  const startIndex = currentPage * GROUPS_PER_PAGE;\n  const endIndex = startIndex + GROUPS_PER_PAGE;\n  const paginatedGroups = allSuggestedGroups.slice(startIndex, endIndex);\n\n  const goToNextPage = () => {\n    if (currentPage < totalPages - 1) {\n      setCurrentPage(prev => prev + 1);\n    }\n  };\n\n  const goToPreviousPage = () => {\n    if (currentPage > 0) {\n      setCurrentPage(prev => prev - 1);\n    }\n  };\n\n  const handleJoinGroup = async (groupId: string, e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (!user || joiningGroups.has(groupId)) return;\n\n    setJoiningGroups(prev => new Set(prev).add(groupId));\n    try {\n      await firebaseApi.group.joinGroup(groupId, user.id);\n      // Remove from suggestions after joining\n      setAllSuggestedGroups(prev => prev.filter(g => g.id !== groupId));\n    } catch (error) {\n      console.error('Failed to join group:', error);\n    } finally {\n      setJoiningGroups(prev => {\n        const next = new Set(prev);\n        next.delete(groupId);\n        return next;\n      });\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div\n      className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4\"\n      onClick={onClose}\n    >\n      <div\n        className=\"bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[80vh] flex flex-col\"\n        onClick={e => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n          <h2 className=\"text-xl font-bold text-gray-900\">Suggested Groups</h2>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n          >\n            <X className=\"w-5 h-5 text-gray-600\" />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-y-auto\">\n          {isLoading ? (\n            <div className=\"p-12 text-center\">\n              <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-[#007AFF]\"></div>\n              <p className=\"text-gray-600 mt-4\">Loading groups...</p>\n            </div>\n          ) : allSuggestedGroups.length === 0 ? (\n            <div className=\"p-12 text-center\">\n              <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Users className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                No groups available\n              </h3>\n              <p className=\"text-gray-600\">\n                Check back later for groups to join\n              </p>\n            </div>\n          ) : (\n            <div className=\"divide-y divide-gray-100\">\n              {paginatedGroups.map(group => {\n                const isJoining = joiningGroups.has(group.id);\n                return (\n                  <div\n                    key={group.id}\n                    className=\"p-4 hover:bg-gray-50 transition-colors\"\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      {/* Group Icon */}\n                      <Link href={`/groups/${group.id}`}>\n                        <GroupAvatar\n                          imageUrl={group.imageUrl}\n                          name={group.name}\n                          size=\"md\"\n                        />\n                      </Link>\n\n                      {/* Group Info */}\n                      <div className=\"flex-1 min-w-0\">\n                        <Link href={`/groups/${group.id}`}>\n                          <h3 className=\"font-semibold text-base text-gray-900 truncate hover:text-[#007AFF] transition-colors\">\n                            {group.name}\n                          </h3>\n                        </Link>\n                        <p className=\"text-sm text-gray-600 mt-0.5 line-clamp-2\">\n                          {group.description}\n                        </p>\n\n                        {/* Meta Info */}\n                        <div className=\"flex items-center gap-3 mt-2 text-xs text-gray-500\">\n                          <span className=\"flex items-center gap-1\">\n                            <Users className=\"w-3.5 h-3.5\" />\n                            {group.memberCount || 0}{' '}\n                            {group.memberCount === 1 ? 'member' : 'members'}\n                          </span>\n                          {group.location && (\n                            <span className=\"flex items-center gap-1\">\n                              <MapPin className=\"w-3.5 h-3.5\" />\n                              {group.location}\n                            </span>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Join Button */}\n                      <button\n                        onClick={e => handleJoinGroup(group.id, e)}\n                        disabled={isJoining}\n                        className={`text-sm font-semibold transition-colors flex-shrink-0 ${\n                          isJoining\n                            ? 'text-gray-400 cursor-not-allowed'\n                            : 'text-[#007AFF] hover:text-[#0051D5]'\n                        }`}\n                      >\n                        {isJoining ? 'Joining...' : 'Join'}\n                      </button>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n\n        {/* Pagination Controls */}\n        {!isLoading && allSuggestedGroups.length > GROUPS_PER_PAGE && (\n          <div className=\"border-t border-gray-100 px-4 py-3 flex items-center justify-between\">\n            <button\n              onClick={goToPreviousPage}\n              disabled={currentPage === 0}\n              className=\"p-2 rounded-lg hover:bg-gray-100 disabled:opacity-30 disabled:cursor-not-allowed transition-colors\"\n              aria-label=\"Previous page\"\n            >\n              <ChevronLeft className=\"w-5 h-5 text-gray-700\" />\n            </button>\n\n            <span className=\"text-sm text-gray-600 font-medium\">\n              Page {currentPage + 1} of {totalPages}\n            </span>\n\n            <button\n              onClick={goToNextPage}\n              disabled={currentPage >= totalPages - 1}\n              className=\"p-2 rounded-lg hover:bg-gray-100 disabled:opacity-30 disabled:cursor-not-allowed transition-colors\"\n              aria-label=\"Next page\"\n            >\n              <ChevronRight className=\"w-5 h-5 text-gray-700\" />\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SuggestedPeopleModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 19,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 19,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [611, 614], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [611, 614], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { X, ChevronLeft, ChevronRight } from 'lucide-react';\nimport { firebaseUserApi } from '@/lib/api';\nimport { useAuth } from '@/hooks/useAuth';\nimport { UserCardCompact } from '@/components/UserCard';\n\ninterface SuggestedPeopleModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst USERS_PER_PAGE = 10;\nconst TOTAL_USERS_TO_FETCH = 100;\n\nexport default function SuggestedPeopleModal({ isOpen, onClose }: SuggestedPeopleModalProps) {\n  const { user } = useAuth();\n  const [allSuggestedUsers, setAllSuggestedUsers] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(0);\n\n  const loadUsers = useCallback(async () => {\n    if (!user) return;\n\n    try {\n      setIsLoading(true);\n      setCurrentPage(0);\n\n      // Use the same getSuggestedUsers API as the sidebar\n      const suggestions = await firebaseUserApi.getSuggestedUsers(TOTAL_USERS_TO_FETCH);\n      setAllSuggestedUsers(suggestions);\n    } catch (error) {\n      console.error('Error loading users:', error);\n      setAllSuggestedUsers([]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (isOpen && user) {\n      loadUsers();\n    }\n  }, [isOpen, user, loadUsers]);\n\n  // Handle ESC key to close modal\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape' && isOpen) {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n    };\n  }, [isOpen, onClose]);\n\n  // Calculate paginated users\n  const totalPages = Math.ceil(allSuggestedUsers.length / USERS_PER_PAGE);\n  const startIndex = currentPage * USERS_PER_PAGE;\n  const endIndex = startIndex + USERS_PER_PAGE;\n  const paginatedUsers = allSuggestedUsers.slice(startIndex, endIndex);\n\n  const goToNextPage = () => {\n    if (currentPage < totalPages - 1) {\n      setCurrentPage(prev => prev + 1);\n    }\n  };\n\n  const goToPreviousPage = () => {\n    if (currentPage > 0) {\n      setCurrentPage(prev => prev - 1);\n    }\n  };\n\n  const handleFollowChange = (userId: string, isFollowing: boolean) => {\n    setAllSuggestedUsers(prev =>\n      prev.map(u =>\n        u.id === userId\n          ? {\n              ...u,\n              isFollowing,\n              followersCount: isFollowing\n                ? (u.followersCount || 0) + 1\n                : Math.max(0, (u.followersCount || 0) - 1)\n            }\n          : u\n      )\n    );\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div\n      className=\"fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4\"\n      onClick={onClose}\n    >\n      <div\n        className=\"bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[80vh] flex flex-col\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n          <h2 className=\"text-xl font-bold text-gray-900\">Suggested People</h2>\n          <button\n            onClick={onClose}\n            className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n            aria-label=\"Close suggested people modal\"\n          >\n            <X className=\"w-5 h-5 text-gray-600\" aria-hidden=\"true\" />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-y-auto\">\n          {isLoading ? (\n            <div className=\"p-12 text-center\">\n              <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-[#007AFF]\"></div>\n              <p className=\"text-gray-600 mt-4\">Loading suggestions...</p>\n            </div>\n          ) : allSuggestedUsers.length === 0 ? (\n            <div className=\"p-12 text-center\">\n              <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <span className=\"text-3xl\">👥</span>\n              </div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No suggestions yet</h3>\n              <p className=\"text-gray-600\">Check back later for people to connect with</p>\n            </div>\n          ) : (\n            <div className=\"divide-y divide-gray-100\">\n              {paginatedUsers.map((suggestedUser) => (\n                <div key={suggestedUser.id}>\n                  <UserCardCompact\n                    user={suggestedUser}\n                    variant=\"search\"\n                    onFollowChange={handleFollowChange}\n                  />\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {/* Pagination Controls */}\n        {!isLoading && allSuggestedUsers.length > USERS_PER_PAGE && (\n          <div className=\"border-t border-gray-100 px-4 py-3 flex items-center justify-between\">\n            <button\n              onClick={goToPreviousPage}\n              disabled={currentPage === 0}\n              className=\"flex items-center gap-2 px-4 py-2 rounded-lg hover:bg-gray-100 disabled:opacity-30 disabled:cursor-not-allowed transition-colors text-sm font-medium text-gray-700\"\n              aria-label=\"Previous page\"\n            >\n              <ChevronLeft className=\"w-4 h-4\" aria-hidden=\"true\" />\n              Previous\n            </button>\n\n            <button\n              onClick={goToNextPage}\n              disabled={currentPage >= totalPages - 1}\n              className=\"flex items-center gap-2 px-4 py-2 rounded-lg hover:bg-gray-100 disabled:opacity-30 disabled:cursor-not-allowed transition-colors text-sm font-medium text-gray-700\"\n              aria-label=\"Next page\"\n            >\n              Next\n              <ChevronRight className=\"w-4 h-4\" aria-hidden=\"true\" />\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/SuggestedUsers.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadSuggestions'. Either include it or remove the dependency array.",
        "line": 55,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 55,
        "endColumn": 13,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [limit, loadSuggestions]",
            "fix": { "range": [1629, 1636], "text": "[limit, loadSuggestions]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport Image from 'next/image';\nimport { SuggestedUser } from '@/types';\nimport { firebaseUserApi } from '@/lib/api';\nimport { UserCard } from './UserCard';\nimport { Button } from '@/components/ui/button';\nimport { RefreshCw, Users, Sparkles, TrendingUp } from 'lucide-react';\nimport { toast } from 'sonner';\n\ninterface SuggestedUsersProps {\n  limit?: number;\n  showHeader?: boolean;\n  onUserSelect?: (user: SuggestedUser) => void;\n  variant?: 'default' | 'compact';\n}\n\nconst SuggestedUsers: React.FC<SuggestedUsersProps> = ({\n  limit = 10,\n  showHeader = true,\n  onUserSelect,\n  variant = 'default',\n}) => {\n  const [suggestions, setSuggestions] = useState<SuggestedUser[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n\n  const loadSuggestions = async (isRefresh = false) => {\n      try {\n        if (isRefresh) {\n          setIsRefreshing(true);\n        } else {\n          setIsLoading(true);\n        }\n\n        const suggestions = await firebaseUserApi.getSuggestedUsers(limit);\n        setSuggestions(suggestions);\n    } catch (error) {\n      console.error('Failed to load suggestions:', error);\n      // Don't show error toast for empty database - just set empty array\n      if (error instanceof Error && error.message.includes('permissions')) {\n        setSuggestions([]);\n      } else {\n        toast.error('Failed to load user suggestions');\n      }\n    } finally {\n      setIsLoading(false);\n      setIsRefreshing(false);\n    }\n  };\n\n  useEffect(() => {\n    loadSuggestions();\n  }, [limit]);\n\n  const handleRefresh = () => {\n    loadSuggestions(true);\n  };\n\n  const handleFollowChange = (userId: string, isFollowing: boolean) => {\n    setSuggestions(prev => \n      prev.map(user => \n        user.id === userId \n          ? { ...user, isFollowing, followersCount: isFollowing ? user.followersCount + 1 : Math.max(0, user.followersCount - 1) }\n          : user\n      )\n    );\n  };\n\n  const getReasonIcon = (reason: string) => {\n    switch (reason) {\n      case 'mutual_followers':\n        return <Users className=\"w-3 h-3\" />;\n      case 'similar_interests':\n        return <Sparkles className=\"w-3 h-3\" />;\n      case 'popular_user':\n        return <TrendingUp className=\"w-3 h-3\" />;\n      case 'location_based':\n        return <Users className=\"w-3 h-3\" />;\n      case 'activity_based':\n        return <TrendingUp className=\"w-3 h-3\" />;\n      default:\n        return <Users className=\"w-3 h-3\" />;\n    }\n  };\n\n  const getReasonColor = (reason: string): string => {\n    switch (reason) {\n      case 'mutual_followers':\n        return 'text-blue-600';\n      case 'similar_interests':\n        return 'text-purple-600';\n      case 'popular_user':\n        return 'text-orange-600';\n      case 'location_based':\n        return 'text-green-600';\n      case 'activity_based':\n        return 'text-pink-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-card-background rounded-lg border border-border p-6\">\n        {showHeader && (\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"font-semibold text-foreground flex items-center gap-2\">\n              <Sparkles className=\"w-4 h-4\" />\n              Suggested Users\n            </h3>\n          </div>\n        )}\n        <div className=\"space-y-3\">\n          {Array.from({ length: 3 }).map((_, index) => (\n            <div key={index} className=\"animate-pulse\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"w-12 h-12 bg-muted rounded-full\" />\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"h-4 bg-muted rounded w-3/4\" />\n                  <div className=\"h-3 bg-muted rounded w-1/2\" />\n                </div>\n                <div className=\"w-20 h-8 bg-muted rounded\" />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (suggestions.length === 0) {\n    return (\n      <div className=\"bg-card-background rounded-lg border border-border p-6\">\n        {showHeader && (\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"font-semibold text-foreground flex items-center gap-2\">\n              <Sparkles className=\"w-4 h-4\" />\n              Suggested Users\n            </h3>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className=\"h-8 w-8 p-0\"\n            >\n              <RefreshCw className={`w-4 h-4 ${isRefreshing ? 'animate-spin' : ''}`} />\n            </Button>\n          </div>\n        )}\n        <div className=\"text-center py-8\">\n          <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-3\" />\n          <h4 className=\"font-medium text-foreground mb-1\">No suggestions available</h4>\n          <p className=\"text-sm text-muted-foreground\">\n            We couldn't find any users to suggest right now. Try again later.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card-background rounded-lg border border-border p-6\">\n      {showHeader && (\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"font-semibold text-foreground flex items-center gap-2\">\n            <Sparkles className=\"w-4 h-4\" />\n            Suggested Users\n          </h3>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleRefresh}\n            disabled={isRefreshing}\n            className=\"h-8 w-8 p-0\"\n          >\n            <RefreshCw className={`w-4 h-4 ${isRefreshing ? 'animate-spin' : ''}`} />\n          </Button>\n        </div>\n      )}\n\n      <div className=\"space-y-3\">\n        {suggestions.map((user) => (\n          <div key={user.id} onClick={() => onUserSelect?.(user)}>\n            {variant === 'compact' ? (\n              <div className=\"flex items-center justify-between p-3 hover:bg-muted/50 rounded-lg transition-colors\">\n                <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                  {/* Avatar */}\n                  {user.profilePicture ? (\n                    <Image\n                      src={user.profilePicture}\n                      alt={`${user.name}'s profile picture`}\n                      width={40}\n                      height={40}\n                      className=\"w-10 h-10 rounded-full object-cover border border-border\"\n                    />\n                  ) : (\n                    <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-sm font-semibold\">\n                      {user.name.charAt(0).toUpperCase()}\n                    </div>\n                  )}\n\n                  {/* User Info */}\n                  <div className=\"min-w-0 flex-1\">\n                    <h4 className=\"font-medium text-foreground truncate\">{user.name}</h4>\n                    <p className=\"text-sm text-muted-foreground truncate\">\n                      {user.followersCount || 0} followers\n                    </p>\n                    <div className=\"flex items-center gap-1 mt-1\">\n                      {getReasonIcon(user.reason)}\n                      <span className={`text-xs ${getReasonColor(user.reason)}`}>\n                        {user.reason.replace('_', ' ')}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Follow Button */}\n                {!user.isFollowing && (\n                  <Button\n                    size=\"sm\"\n                    className=\"flex items-center gap-1 min-w-[70px]\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      // Handle follow logic here\n                    }}\n                  >\n                    Follow\n                  </Button>\n                )}\n              </div>\n            ) : (\n              <UserCard\n                user={user}\n                variant=\"suggestion\"\n                onFollowChange={handleFollowChange}\n              />\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Compact sidebar version\nexport const SuggestedUsersSidebar: React.FC<SuggestedUsersProps> = (props) => {\n  return (\n    <SuggestedUsers\n      {...props}\n      limit={5}\n      variant=\"compact\"\n      showHeader={true}\n    />\n  );\n};\n\n// Widget version for dashboard\nexport const SuggestedUsersWidget: React.FC<SuggestedUsersProps> = (props) => {\n  return (\n    <SuggestedUsers\n      {...props}\n      limit={6}\n      variant=\"compact\"\n      showHeader={true}\n    />\n  );\n};\n\nexport default SuggestedUsers;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/TimerControls.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/TimerDisplay.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/TopComments.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'refetch'. Either include it or remove the dependency array.",
        "line": 77,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 77,
        "endColumn": 18,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [isExpanded, refetch]",
            "fix": { "range": [2065, 2077], "text": "[isExpanded, refetch]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { CommentWithDetails as _CommentWithDetails } from '@/types';\nimport { useAuth } from '@/hooks/useAuth';\nimport {\n  useSessionComments,\n  useCreateComment,\n  useDeleteComment,\n  useCommentLike,\n} from '@/features/comments/hooks';\nimport CommentItem from './CommentItem';\nimport CommentInput from './CommentInput';\nimport { ChevronLeft, ChevronRight } from 'lucide-react';\n\ninterface TopCommentsProps {\n  sessionId: string;\n  totalCommentCount: number;\n  onCommentCountChange?: (count: number) => void;\n  autoFocus?: boolean;\n  initialExpanded?: boolean;\n}\n\nconst COMMENTS_PER_PAGE = 5;\n\nexport const TopComments: React.FC<TopCommentsProps> = ({\n  sessionId,\n  totalCommentCount,\n  onCommentCountChange,\n  autoFocus = false,\n  initialExpanded = false,\n}) => {\n  const { user } = useAuth();\n  const [isExpanded, setIsExpanded] = useState(initialExpanded);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  // Fetch comments - use limit of 2 for top comments, or 100 when expanded\n  const limit = isExpanded ? 100 : 2;\n  const {\n    data: commentsResponse,\n    isLoading,\n    refetch,\n  } = useSessionComments(sessionId, limit);\n\n  const createCommentMutation = useCreateComment({\n    onSuccess: () => {\n      if (onCommentCountChange) {\n        onCommentCountChange(totalCommentCount + 1);\n      }\n    },\n  });\n\n  const deleteCommentMutation = useDeleteComment({\n    onSuccess: () => {\n      if (onCommentCountChange) {\n        onCommentCountChange(Math.max(0, totalCommentCount - 1));\n      }\n    },\n  });\n\n  const likeMutation = useCommentLike(sessionId);\n\n  const allComments = commentsResponse?.comments || [];\n  const totalPages = Math.ceil(allComments.length / COMMENTS_PER_PAGE);\n\n  // Calculate paginated comments when expanded\n  const comments = isExpanded\n    ? allComments.slice(\n        (currentPage - 1) * COMMENTS_PER_PAGE,\n        currentPage * COMMENTS_PER_PAGE\n      )\n    : allComments;\n\n  // Refetch when expanded state changes\n  useEffect(() => {\n    refetch();\n  }, [isExpanded]);\n\n  const handleCreateComment = async (content: string) => {\n    try {\n      await createCommentMutation.mutateAsync({\n        sessionId,\n        content,\n      });\n    } catch (err: unknown) {\n      console.error('Failed to create comment:', err);\n      throw err;\n    }\n  };\n\n  const handleDelete = async (commentId: string) => {\n    try {\n      await deleteCommentMutation.mutateAsync({\n        commentId,\n        sessionId,\n      });\n    } catch (err: unknown) {\n      console.error('Failed to delete comment:', err);\n      throw err;\n    }\n  };\n\n  const handleLike = (commentId: string, action: 'like' | 'unlike') => {\n    likeMutation.mutate({ commentId, action });\n  };\n\n  if (isLoading && !isExpanded) {\n    return (\n      <div className=\"border-t border-gray-100 px-4 py-3 space-y-3\">\n        {[1, 2].map(i => (\n          <div key={i} className=\"flex gap-3 animate-pulse\">\n            <div className=\"w-8 h-8 rounded-full bg-gray-200\" />\n            <div className=\"flex-1 space-y-2\">\n              <div className=\"h-3 bg-gray-200 rounded w-1/4\" />\n              <div className=\"h-3 bg-gray-200 rounded w-full\" />\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (comments.length === 0 && totalCommentCount === 0 && !autoFocus) {\n    return null;\n  }\n\n  return (\n    <div\n      className={\n        isExpanded || (comments.length > 0 && !isExpanded)\n          ? 'hidden md:block md:border-t md:border-gray-100'\n          : ''\n      }\n    >\n      <div className=\"px-4 py-2 space-y-2\">\n        {/* Comments List - Only show in collapsed view if there are comments (hidden on mobile) */}\n        {!isExpanded && comments.length > 0 && (\n          <>\n            {comments.map(comment => (\n              <CommentItem\n                key={comment.id}\n                comment={comment}\n                sessionId={sessionId}\n                onDelete={handleDelete}\n                onLike={handleLike}\n                currentUserId={user?.id}\n              />\n            ))}\n\n            {/* See all comments link */}\n            {totalCommentCount > 2 && (\n              <button\n                onClick={() => setIsExpanded(true)}\n                className=\"text-sm text-gray-500 hover:text-gray-900 font-medium py-2 transition-colors\"\n              >\n                See all {totalCommentCount}{' '}\n                {totalCommentCount === 1 ? 'comment' : 'comments'}\n              </button>\n            )}\n          </>\n        )}\n\n        {/* Expanded Comments */}\n        {isExpanded && (\n          <>\n            {comments.map(comment => (\n              <CommentItem\n                key={comment.id}\n                comment={comment}\n                sessionId={sessionId}\n                onDelete={handleDelete}\n                onLike={handleLike}\n                currentUserId={user?.id}\n              />\n            ))}\n          </>\n        )}\n\n        {/* Comment Input - Only show when expanded or autoFocus */}\n        {(isExpanded || autoFocus) && (\n          <div\n            className={`${isExpanded ? 'pt-2 border-t border-gray-100' : ''}`}\n          >\n            <CommentInput\n              sessionId={sessionId}\n              placeholder=\"Add a comment...\"\n              onSubmit={handleCreateComment}\n              autoFocus={autoFocus}\n            />\n          </div>\n        )}\n\n        {/* Pagination Controls - Only in expanded view */}\n        {isExpanded && totalPages > 1 && (\n          <div className=\"flex items-center justify-between pt-3 border-t border-gray-100\">\n            <button\n              onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n              disabled={currentPage === 1}\n              className=\"p-2 rounded-lg hover:bg-gray-100 disabled:opacity-30 disabled:cursor-not-allowed transition-colors\"\n              aria-label=\"Previous page\"\n            >\n              <ChevronLeft className=\"w-5 h-5 text-gray-700\" />\n            </button>\n\n            <span className=\"text-sm text-gray-600 font-medium\">\n              Page {currentPage} of {totalPages}\n            </span>\n\n            <button\n              onClick={() =>\n                setCurrentPage(prev => Math.min(totalPages, prev + 1))\n              }\n              disabled={currentPage === totalPages}\n              className=\"p-2 rounded-lg hover:bg-gray-100 disabled:opacity-30 disabled:cursor-not-allowed transition-colors\"\n              aria-label=\"Next page\"\n            >\n              <ChevronRight className=\"w-5 h-5 text-gray-700\" />\n            </button>\n          </div>\n        )}\n\n        {/* Collapse Button */}\n        {isExpanded && (\n          <button\n            onClick={() => {\n              setIsExpanded(false);\n              setCurrentPage(1);\n            }}\n            className=\"text-sm text-gray-600 hover:text-gray-900 font-medium py-1\"\n          >\n            Show less\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TopComments;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/TrophyCase.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/UnifiedProfileCard.tsx",
    "messages": [
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 1,
        "message": "'Image' is not defined.",
        "line": 63,
        "column": 12,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 63,
        "endColumn": 17
      },
      {
        "ruleId": "react/jsx-no-undef",
        "severity": 1,
        "message": "'Link' is not defined.",
        "line": 174,
        "column": 10,
        "nodeType": "JSXIdentifier",
        "messageId": "undefined",
        "endLine": 174,
        "endColumn": 14
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React from 'react';\n\n\nimport { Edit, MapPin, Link as LinkIcon } from 'lucide-react';\n\ninterface UnifiedProfileCardProps {\n  // User data\n  name: string;\n  username: string;\n  profilePicture?: string | null;\n  bio?: string | null;\n  tagline?: string | null;\n  pronouns?: string | null;\n  location?: string | null;\n  website?: string | null;\n  socialLinks?: {\n    twitter?: string;\n    github?: string;\n    linkedin?: string;\n  } | null;\n\n  // Stats\n  followersCount: number;\n  followingCount: number;\n\n  // Actions\n  isOwnProfile?: boolean;\n  onEditClick?: () => void;\n  editButtonHref?: string;\n\n  // Optional extras\n  showBio?: boolean;\n  showLocation?: boolean;\n  className?: string;\n}\n\nexport const UnifiedProfileCard: React.FC<UnifiedProfileCardProps> = ({\n  name,\n  username,\n  profilePicture,\n  bio,\n  tagline,\n  pronouns,\n  location,\n  website,\n  socialLinks,\n  followersCount,\n  followingCount,\n  isOwnProfile = false,\n  onEditClick,\n  editButtonHref = '/settings',\n  showBio = true,\n  showLocation = true,\n  className = '',\n}) => {\n  return (\n    <div className={`bg-white rounded-xl border border-gray-200 p-6 ${className}`}>\n      {/* Profile Picture */}\n      {profilePicture ? (\n        <div className=\"w-32 h-32 min-w-[8rem] aspect-square rounded-full mb-5 overflow-hidden ring-4 ring-white shadow-md flex-shrink-0 bg-white\">\n          <Image\n            src={profilePicture}\n            alt={`${name}'s profile picture`}\n            width={128}\n            height={128}\n            className=\"w-full h-full object-cover\"\n          />\n        </div>\n      ) : (\n        <div className=\"w-32 h-32 min-w-[8rem] aspect-square bg-gradient-to-br from-[#FC4C02] to-[#FF8800] rounded-full flex items-center justify-center mb-5 shadow-md flex-shrink-0\">\n          <span className=\"text-white font-bold text-5xl\">\n            {name.charAt(0).toUpperCase()}\n          </span>\n        </div>\n      )}\n\n      {/* Name and Pronouns */}\n      <div className=\"mb-1\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">{name}</h1>\n        {pronouns && (\n          <p className=\"text-gray-400 text-sm mt-0.5\">{pronouns}</p>\n        )}\n      </div>\n\n      {/* Username */}\n      <p className=\"text-gray-500 text-base mb-2\">@{username}</p>\n\n      {/* Tagline */}\n      {tagline && (\n        <p className=\"text-gray-600 text-sm mb-3 font-medium\">\n          {tagline}\n        </p>\n      )}\n\n      {/* Bio */}\n      {showBio && bio && (\n        <p className=\"text-gray-700 mb-3 leading-relaxed\">\n          {bio}\n        </p>\n      )}\n\n      {/* Location */}\n      {showLocation && location && (\n        <div className=\"flex items-center gap-1.5 text-gray-600 mb-3\">\n          <MapPin className=\"w-4 h-4 flex-shrink-0\" />\n          <span className=\"text-sm\">{location}</span>\n        </div>\n      )}\n\n      {/* Website */}\n      {website && (\n        <div className=\"flex items-center gap-1.5 text-gray-600 mb-3\">\n          <LinkIcon className=\"w-4 h-4 flex-shrink-0\" />\n          <a\n            href={website.startsWith('http') ? website : `https://${website}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"text-sm text-[#007AFF] hover:underline\"\n          >\n            {website.replace(/^https?:\\/\\//, '')}\n          </a>\n        </div>\n      )}\n\n      {/* Social Links */}\n      {socialLinks && (socialLinks.twitter || socialLinks.github || socialLinks.linkedin) && (\n        <div className=\"flex items-center gap-3 mb-4\">\n          {socialLinks.twitter && (\n            <a\n              href={`https://twitter.com/${socialLinks.twitter.replace('@', '')}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"text-gray-600 hover:text-[#1DA1F2] transition-colors\"\n              title=\"Twitter\"\n            >\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z\" />\n              </svg>\n            </a>\n          )}\n          {socialLinks.github && (\n            <a\n              href={`https://github.com/${socialLinks.github.replace('@', '')}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"text-gray-600 hover:text-gray-900 transition-colors\"\n              title=\"GitHub\"\n            >\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path fillRule=\"evenodd\" d=\"M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z\" clipRule=\"evenodd\" />\n              </svg>\n            </a>\n          )}\n          {socialLinks.linkedin && (\n            <a\n              href={`https://linkedin.com/in/${socialLinks.linkedin}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"text-gray-600 hover:text-[#0A66C2] transition-colors\"\n              title=\"LinkedIn\"\n            >\n              <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path d=\"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z\" />\n              </svg>\n            </a>\n          )}\n        </div>\n      )}\n\n      {/* Action Button */}\n      {isOwnProfile && (\n        <Link\n          href={editButtonHref}\n          onClick={onEditClick}\n          className=\"w-full flex items-center justify-center gap-2 py-2.5 mb-4 bg-gray-100 text-gray-700 hover:bg-gray-200 rounded-lg font-semibold transition-colors text-sm\"\n        >\n          <Edit className=\"w-4 h-4\" />\n          Edit Profile\n        </Link>\n      )}\n\n      {/* Stats */}\n      <div className=\"flex gap-8\">\n        <button className=\"text-left\">\n          <div className=\"text-xl font-bold text-gray-900\">\n            {followersCount.toLocaleString()}\n          </div>\n          <div className=\"text-sm text-gray-500\">Followers</div>\n        </button>\n        <button className=\"text-left\">\n          <div className=\"text-xl font-bold text-gray-900\">\n            {followingCount.toLocaleString()}\n          </div>\n          <div className=\"text-sm text-gray-500\">Following</div>\n        </button>\n      </div>\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/UserCard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/WeekStreakCalendar.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 45,
        "column": 73,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 45,
        "endColumn": 76,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1387, 1390], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1387, 1390], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { Check } from 'lucide-react';\nimport { firebaseApi } from '@/lib/api';\n\ninterface WeekStreakCalendarProps {\n  userId: string;\n}\n\n// Normalize a Date to a local YYYY-MM-DD string (avoids UTC off-by-one)\nconst toLocalYMD = (d: Date) => {\n  const year = d.getFullYear();\n  const month = String(d.getMonth() + 1).padStart(2, '0');\n  const day = String(d.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n};\n\nexport const WeekStreakCalendar: React.FC<WeekStreakCalendarProps> = ({\n  userId,\n}) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [activeDates, setActiveDates] = useState<Set<string>>(new Set());\n\n  // Compute this week's start and end - ending with today as the 7th node\n  const { weekStart, weekEnd } = useMemo(() => {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    // Start is 6 days before today\n    const start = new Date(today);\n    start.setDate(today.getDate() - 6);\n\n    // End is today\n    const end = new Date(today);\n    end.setHours(23, 59, 59, 999);\n\n    return { weekStart: start, weekEnd: end };\n  }, []);\n\n  useEffect(() => {\n    const loadWeeklySessions = async () => {\n      try {\n        // Fetch a generous amount and filter client-side by week range\n        const res = await firebaseApi.session.getSessions(1, 100, {} as any);\n\n        const withinWeek = res.sessions.filter(s => {\n          const dt = new Date(s.startTime);\n          return dt >= weekStart && dt <= weekEnd;\n        });\n\n        const dateSet = new Set<string>();\n        withinWeek.forEach(s => {\n          const localKey = toLocalYMD(new Date(s.startTime));\n          dateSet.add(localKey);\n        });\n\n        setActiveDates(dateSet);\n      } catch (error) {\n        console.error('❌ Failed to load sessions for week:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadWeeklySessions();\n  }, [userId, weekStart, weekEnd]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-between gap-0.5 animate-pulse\">\n        {[...Array(7)].map((_, i) => (\n          <div key={i} className=\"flex flex-col items-center flex-1\">\n            <div className=\"h-3 bg-gray-200 rounded mb-1.5 w-4\"></div>\n            <div className=\"h-8 w-8 bg-gray-200 rounded-full\"></div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  // Build the visual model for the current week using the activeDates Set\n  const getWeekDays = () => {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const days = [] as Array<{\n      dayOfWeek: string;\n      dayNumber: number;\n      hasActivity: boolean;\n      isToday: boolean;\n      localKey: string;\n      isPast: boolean;\n    }>;\n\n    const dayLabels = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];\n\n    for (let i = 0; i < 7; i++) {\n      const date = new Date(weekStart);\n      date.setDate(weekStart.getDate() + i);\n      date.setHours(12, 0, 0, 0); // noon to avoid DST edge-cases in formatting\n\n      const localKey = toLocalYMD(date);\n      const isToday = toLocalYMD(today) === localKey;\n      const hasActivity = activeDates.has(localKey);\n\n      const dayOfWeek = dayLabels[date.getDay()] || 'S';\n      const dayInfo = {\n        dayOfWeek,\n        dayNumber: date.getDate(),\n        hasActivity,\n        isToday,\n        localKey,\n        isPast: date < today && !isToday,\n      };\n\n      days.push(dayInfo);\n    }\n\n    return days;\n  };\n\n  const weekDays = getWeekDays();\n\n  return (\n    <div className=\"flex justify-between gap-0.5\">\n      {weekDays.map((day, index) => (\n        <div key={index} className=\"flex flex-col items-center flex-1\">\n          <div\n            className={`text-xs font-medium mb-1.5 ${day.isToday ? 'text-[#007AFF] font-bold' : 'text-gray-400'}`}\n          >\n            {day.dayOfWeek}\n          </div>\n          <div className=\"h-6 w-6 flex items-center justify-center\">\n            {day.hasActivity ? (\n              // Completed day - orange circle with white checkmark\n              <div\n                className={`w-6 h-6 rounded-full flex items-center justify-center bg-orange-400 ${\n                  day.isToday ? 'ring-2 ring-[#007AFF] ring-offset-1' : ''\n                }`}\n              >\n                <Check className=\"w-3.5 h-3.5 text-white stroke-[3]\" />\n              </div>\n            ) : day.isToday ? (\n              // Today (not completed) - Electric Blue ring with grey circle and white checkmark\n              <div className=\"w-6 h-6 rounded-full flex items-center justify-center bg-gray-300 ring-2 ring-[#007AFF] ring-offset-1\">\n                <Check className=\"w-3.5 h-3.5 text-white stroke-[3]\" />\n              </div>\n            ) : (\n              // Past incomplete day - light grey circle with grey checkmark\n              <div className=\"w-6 h-6 rounded-full flex items-center justify-center bg-gray-100\">\n                <Check className=\"w-3.5 h-3.5 text-gray-300 stroke-[3]\" />\n              </div>\n            )}\n          </div>\n          <div\n            className={`text-[10px] font-medium mt-0.5 ${day.isToday ? 'text-[#007AFF] font-bold' : 'text-gray-500'}`}\n          >\n            {day.dayNumber}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/activity/ActivityAnalytics.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/activity/ActivityChartTooltip.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/activity/ActivityHeader.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/activity/ActivitySessionsList.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/activity/ActivityTabs.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/activity/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/analytics/AnalyticsChart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/analytics/AnalyticsControls.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/analytics/AnalyticsStatsGrid.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/analytics/ChartEmptyState.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/analytics/ChartTooltip.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/analytics/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/AuthButtons.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/Header.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'DIMENSIONS' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 14,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 20
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState } from 'react';\nimport { usePathname } from 'next/navigation';\nimport { useAuth } from '@/hooks/useAuth';\nimport NotificationIcon from '../NotificationIcon';\nimport Logo from './Logo';\nimport SearchBar from './SearchBar';\nimport Navigation from './Navigation';\nimport TimerStatus from './TimerStatus';\nimport ProfileMenu from './ProfileMenu';\nimport MobileMenu from './MobileMenu';\nimport AuthButtons from './AuthButtons';\nimport { DIMENSIONS } from './header.constants';\n\n/**\n * Header Component\n *\n * Main application header with responsive design.\n * Orchestrates all header sub-components without managing their internal state.\n *\n * Features:\n * - Logo with home link\n * - Collapsible search bar\n * - Desktop navigation\n * - Timer status and session actions\n * - Profile menu with dropdown\n * - Mobile menu for responsive design\n * - Authentication buttons for non-authenticated users\n * - Notifications\n *\n * This refactored version follows:\n * - Single Responsibility Principle: Orchestrates child components only\n * - Open/Closed Principle: New features added via new child components\n * - Composition over inheritance\n * - Airbnb React style guidelines\n *\n * @example\n * ```tsx\n * import Header from '@/components/header/Header';\n *\n * export default function Layout({ children }) {\n *   return (\n *     <>\n *       <Header />\n *       <main>{children}</main>\n *     </>\n *   );\n * }\n * ```\n */\nexport default function Header() {\n  const pathname = usePathname();\n  const { user } = useAuth();\n\n  // Local UI state (simple toggles only)\n  const [isSearchOpen, setIsSearchOpen] = useState(false);\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  return (\n    <header className=\"sticky top-0 left-0 right-0 z-50 bg-white border-b border-gray-200 shadow-sm\">\n      <div className=\"max-w-[1400px] mx-auto px-4\">\n        <div className=\"flex items-center justify-between h-14\">\n          {/* Left side: Logo + Search + Navigation */}\n          <div className=\"flex items-center space-x-4 ml-8\">\n            <Logo />\n\n            {/* Search - Only show when authenticated */}\n            {user && (\n              <SearchBar\n                isOpen={isSearchOpen}\n                onToggle={() => setIsSearchOpen(!isSearchOpen)}\n              />\n            )}\n\n            {/* Desktop Navigation - Only show when search is closed AND user is authenticated */}\n            {!isSearchOpen && user && <Navigation pathname={pathname} />}\n          </div>\n\n          {/* Right side: Actions */}\n          <div className=\"flex items-center space-x-3\">\n            {/* Auth Buttons - Only show when NOT authenticated */}\n            {!user && <AuthButtons />}\n\n            {/* Session Actions / Timer Status - Only show when authenticated */}\n            {user && <TimerStatus pathname={pathname} />}\n\n            {/* Notifications - Only show when authenticated */}\n            {user && (\n              <NotificationIcon className=\"hidden md:flex p-2 text-gray-600 hover:text-[#007AFF] transition-colors\" />\n            )}\n\n            {/* Profile Menu - Only show when authenticated */}\n            {user && <ProfileMenu user={user} />}\n\n            {/* Mobile Menu Toggle - Only show when authenticated */}\n            {user && (\n              <MobileMenu\n                isOpen={isMobileMenuOpen}\n                onToggle={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n                pathname={pathname}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/Logo.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/MobileMenu.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/Navigation.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/ProfileMenu.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/SearchBar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/TimerStatus.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/header.constants.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/header.types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/header.utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/header/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/landing/GoogleAuthButton.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/landing/LandingFooter.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/landing/LoginForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/landing/SignupForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/landing/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/timer/ActivityPicker.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/timer/FinishSessionModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'onCancel' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 61,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 61,
        "endColumn": 11
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport { Activity } from '@/types';\nimport { ImageUpload } from '@/components/ImageUpload';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport { IconRenderer } from '@/components/IconRenderer';\nimport { Check, ChevronDown } from 'lucide-react';\n\ninterface FinishSessionModalProps {\n  sessionTitle: string;\n  setSessionTitle: (title: string) => void;\n  sessionDescription: string;\n  setSessionDescription: (description: string) => void;\n  selectedActivityId: string;\n  setSelectedActivityId: (id: string) => void;\n  allActivities: Activity[];\n  selectedActivity: Activity | null;\n  selectedImages: File[];\n  imagePreviewUrls: string[];\n  onImagesChange: (images: File[], previewUrls: string[]) => void;\n  adjustedDuration: number;\n  onDurationChange: (value: number | number[]) => void;\n  getElapsedTime: () => number;\n  getFormattedTime: (seconds: number) => string;\n  startTime: Date;\n  onStartTimeChange: (timeString: string) => void;\n  visibility: 'everyone' | 'followers' | 'private';\n  setVisibility: (visibility: 'everyone' | 'followers' | 'private') => void;\n  isUploadingImages: boolean;\n  onSave: () => void;\n  onCancel: () => void;\n  onResume: () => void;\n  onDiscard: () => void;\n}\n\nexport function FinishSessionModal({\n  sessionTitle,\n  setSessionTitle,\n  sessionDescription,\n  setSessionDescription,\n  selectedActivityId,\n  setSelectedActivityId,\n  allActivities,\n  selectedActivity,\n  selectedImages,\n  imagePreviewUrls,\n  onImagesChange,\n  adjustedDuration,\n  onDurationChange,\n  getElapsedTime,\n  getFormattedTime,\n  startTime,\n  onStartTimeChange,\n  visibility,\n  setVisibility,\n  isUploadingImages,\n  onSave,\n  onCancel,\n  onResume,\n  onDiscard,\n}: FinishSessionModalProps) {\n  const [showActivityPicker, setShowActivityPicker] = useState(false);\n  const [showCancelConfirm, setShowCancelConfirm] = useState(false);\n\n  // Helper to format Date to time input value (HH:MM)\n  const formatTimeForInput = (date: Date): string => {\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n    return `${hours}:${minutes}`;\n  };\n\n  return (\n    <>\n      <div className=\"min-h-screen bg-white\">\n        <div className=\"max-w-2xl mx-auto h-full\">\n          <div className=\"p-4 sm:p-6 w-full min-h-screen\">\n            {/* Header with Resume and Save Session title */}\n            <div className=\"flex justify-between items-center mb-6\">\n              <button\n                onClick={onResume}\n                className=\"text-[#007AFF] hover:text-[#0051D5] font-semibold text-base\"\n              >\n                Resume\n              </button>\n              <h3 className=\"text-base font-semibold text-gray-900\">\n                Save Session\n              </h3>\n              <div className=\"w-16\"></div> {/* Spacer for centering */}\n            </div>\n\n            <div className=\"space-y-3 sm:space-y-4\">\n              {/* Session Title */}\n              <input\n                type=\"text\"\n                value={sessionTitle}\n                onChange={e => setSessionTitle(e.target.value)}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] text-base\"\n                placeholder=\"Afternoon Work Session\"\n              />\n\n              {/* Description */}\n              <textarea\n                value={sessionDescription}\n                onChange={e => setSessionDescription(e.target.value)}\n                className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] text-base\"\n                rows={3}\n                placeholder=\"How'd it go? Share more about your session.\"\n              />\n\n              {/* Activity Selection */}\n              <div className=\"relative\">\n                <button\n                  onClick={() => setShowActivityPicker(!showActivityPicker)}\n                  className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] bg-white cursor-pointer text-base flex items-center gap-3 hover:border-gray-400 transition-colors min-h-[44px]\"\n                >\n                  {selectedActivity ? (\n                    <>\n                      <IconRenderer\n                        iconName={selectedActivity.icon}\n                        className=\"w-5 h-5 flex-shrink-0\"\n                        style={{ color: selectedActivity.color }}\n                      />\n                      <span className=\"flex-1 text-left\">\n                        {selectedActivity.name}\n                      </span>\n                    </>\n                  ) : (\n                    <span className=\"flex-1 text-left text-gray-500\">\n                      Select an activity\n                    </span>\n                  )}\n                  <ChevronDown className=\"w-4 h-4 text-gray-400 flex-shrink-0\" />\n                </button>\n\n                {/* Dropdown Menu */}\n                {showActivityPicker && (\n                  <>\n                    {/* Backdrop for closing */}\n                    <div\n                      className=\"fixed inset-0 z-10\"\n                      onClick={() => setShowActivityPicker(false)}\n                    />\n\n                    {/* Dropdown content */}\n                    <div className=\"absolute top-full left-0 right-0 mt-1 bg-white border border-gray-300 rounded-lg shadow-lg z-20 max-h-60 overflow-y-auto\">\n                      {allActivities.length === 0 ? (\n                        <div className=\"p-4 text-center\">\n                          <p className=\"text-sm text-gray-600 mb-3\">\n                            No activities yet\n                          </p>\n                          <Link\n                            href=\"/activities/new\"\n                            className=\"inline-flex items-center gap-2 px-4 py-2 bg-[#007AFF] text-white rounded-lg hover:bg-[#0051D5] transition-colors text-sm font-medium\"\n                          >\n                            <svg\n                              className=\"w-4 h-4\"\n                              fill=\"none\"\n                              stroke=\"currentColor\"\n                              viewBox=\"0 0 24 24\"\n                            >\n                              <path\n                                strokeLinecap=\"round\"\n                                strokeLinejoin=\"round\"\n                                strokeWidth={2}\n                                d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\n                              />\n                            </svg>\n                            Create Activity\n                          </Link>\n                        </div>\n                      ) : (\n                        <>\n                          {allActivities.map(activity => (\n                            <button\n                              key={activity.id}\n                              onClick={() => {\n                                setSelectedActivityId(activity.id);\n                                setShowActivityPicker(false);\n                              }}\n                              className={`w-full flex items-center gap-3 p-3 hover:bg-gray-50 transition-colors ${\n                                selectedActivityId === activity.id\n                                  ? 'bg-blue-50'\n                                  : ''\n                              }`}\n                            >\n                              <div\n                                className=\"w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0\"\n                                style={{\n                                  backgroundColor: `${activity.color}20`,\n                                }}\n                              >\n                                <IconRenderer\n                                  iconName={activity.icon}\n                                  className=\"w-4 h-4\"\n                                  style={{ color: activity.color }}\n                                />\n                              </div>\n                              <div className=\"flex-1 text-left min-w-0\">\n                                <div className=\"text-sm font-medium text-gray-900\">\n                                  {activity.name}\n                                </div>\n                              </div>\n                              {selectedActivityId === activity.id && (\n                                <Check className=\"w-4 h-4 text-blue-500 flex-shrink-0\" />\n                              )}\n                            </button>\n                          ))}\n                          <Link\n                            href=\"/activities/new\"\n                            className=\"w-full flex items-center gap-3 p-3 border-t border-gray-200 hover:bg-gray-50 transition-colors text-gray-900 font-medium\"\n                          >\n                            <div className=\"w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0 bg-blue-100\">\n                              <svg\n                                className=\"w-4 h-4 text-[#007AFF]\"\n                                fill=\"none\"\n                                stroke=\"currentColor\"\n                                viewBox=\"0 0 24 24\"\n                              >\n                                <path\n                                  strokeLinecap=\"round\"\n                                  strokeLinejoin=\"round\"\n                                  strokeWidth={2}\n                                  d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"\n                                />\n                              </svg>\n                            </div>\n                            <span className=\"text-sm\">\n                              Create New Activity\n                            </span>\n                          </Link>\n                        </>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n\n              {/* Image Upload */}\n              <div className=\"max-w-md\">\n                <ImageUpload\n                  maxImages={3}\n                  maxSizeMB={5}\n                  images={selectedImages}\n                  previewUrls={imagePreviewUrls}\n                  onImagesChange={onImagesChange}\n                  uploadMode=\"deferred\"\n                  showProgress={false}\n                />\n              </div>\n\n              {/* Duration Adjuster */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n                  Adjust Duration\n                </label>\n                <div className=\"space-y-3\">\n                  {/* Start Time Input */}\n                  <div>\n                    <label className=\"block text-xs font-medium text-gray-600 mb-1\">\n                      Start Time\n                    </label>\n                    <input\n                      type=\"time\"\n                      value={formatTimeForInput(startTime)}\n                      onChange={e => onStartTimeChange(e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] text-sm\"\n                    />\n                  </div>\n\n                  <div className=\"py-2 px-1\">\n                    <Slider\n                      min={0}\n                      max={getElapsedTime()}\n                      step={900}\n                      value={adjustedDuration}\n                      onChange={onDurationChange}\n                      trackStyle={{ backgroundColor: '#007AFF', height: 6 }}\n                      railStyle={{ backgroundColor: '#E5E7EB', height: 6 }}\n                      handleStyle={{\n                        backgroundColor: 'white',\n                        border: '3px solid #007AFF',\n                        width: 20,\n                        height: 20,\n                        marginTop: -7,\n                        boxShadow: '0 2px 8px rgba(0, 122, 255, 0.3)',\n                        opacity: 1,\n                      }}\n                    />\n                  </div>\n                  <div className=\"flex justify-between text-sm text-gray-600 px-1\">\n                    <span>0m</span>\n                    <span className=\"font-semibold text-base text-gray-900\">\n                      {getFormattedTime(adjustedDuration)}\n                    </span>\n                    <span>{getFormattedTime(getElapsedTime())}</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Visibility */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Visibility\n                </label>\n                <select\n                  value={visibility}\n                  onChange={e =>\n                    setVisibility(e.target.value as typeof visibility)\n                  }\n                  className=\"w-full pl-3 pr-8 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] appearance-none bg-white min-h-[44px]\"\n                  style={{\n                    backgroundImage:\n                      \"url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' viewBox='0 0 12 12'%3E%3Cpath fill='%23666' d='M6 9L1 4h10z'/%3E%3C/svg%3E\\\")\",\n                    backgroundRepeat: 'no-repeat',\n                    backgroundPosition: 'right 0.75rem center',\n                  }}\n                >\n                  <option value=\"everyone\">Everyone</option>\n                  <option value=\"followers\">Followers</option>\n                  <option value=\"private\">Only You</option>\n                </select>\n              </div>\n\n              {/* Discard Session Link */}\n              <div className=\"pt-2 pb-1 text-center\">\n                <button\n                  onClick={() => setShowCancelConfirm(true)}\n                  className=\"text-red-600 hover:text-red-700 text-base font-medium\"\n                >\n                  Discard Session\n                </button>\n              </div>\n\n              {/* Save Session Button */}\n              <button\n                onClick={onSave}\n                disabled={!sessionTitle.trim() || isUploadingImages}\n                className=\"w-full px-4 py-3 bg-[#007AFF] text-white rounded-lg hover:bg-[#0051D5] transition-colors disabled:opacity-50 disabled:cursor-not-allowed font-semibold text-base\"\n              >\n                {isUploadingImages ? 'Uploading...' : 'Save Session'}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Cancel Confirmation Modal - Portal-style overlay */}\n      {showCancelConfirm && (\n        <div className=\"fixed inset-0 bg-black/50 z-[9999] flex items-center justify-center p-4\">\n          <div className=\"bg-white rounded-2xl p-6 max-w-sm w-full shadow-2xl\">\n            <h3 className=\"text-xl font-bold text-gray-900 mb-3\">\n              Discard Session?\n            </h3>\n            <p className=\"text-gray-600 mb-6\">\n              Are you sure you want to discard this session? All progress will\n              be lost.\n            </p>\n            <div className=\"flex gap-3\">\n              <button\n                onClick={() => setShowCancelConfirm(false)}\n                className=\"flex-1 px-4 py-3 bg-gray-200 text-gray-700 rounded-xl hover:bg-gray-300 transition-colors font-medium\"\n              >\n                Keep Session\n              </button>\n              <button\n                onClick={onDiscard}\n                className=\"flex-1 px-4 py-3 bg-red-600 text-white rounded-xl hover:bg-red-700 transition-colors font-medium\"\n              >\n                Discard\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/timer/TimePickerModal.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ui/__tests__/switch.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ui/badge.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ui/button.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ui/card.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ui/input.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-empty-object-type",
        "severity": 1,
        "message": "An interface declaring no members is equivalent to its supertype.",
        "line": 4,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "noEmptyInterfaceWithSuper",
        "endLine": 4,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "replaceEmptyInterfaceWithSuper",
            "fix": {
              "range": [74, 151],
              "text": "type InputProps = React.InputHTMLAttributes<HTMLInputElement>"
            },
            "desc": "Replace empty interface with a type alias."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as React from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nInput.displayName = 'Input';\n\nexport { Input };\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ui/label.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-empty-object-type",
        "severity": 1,
        "message": "An interface declaring no members is equivalent to its supertype.",
        "line": 4,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "noEmptyInterfaceWithSuper",
        "endLine": 4,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "replaceEmptyInterfaceWithSuper",
            "fix": {
              "range": [74, 151],
              "text": "type LabelProps = React.LabelHTMLAttributes<HTMLLabelElement>"
            },
            "desc": "Replace empty interface with a type alias."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as React from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface LabelProps\n  extends React.LabelHTMLAttributes<HTMLLabelElement> {}\n\nconst Label = React.forwardRef<HTMLLabelElement, LabelProps>(\n  ({ className, ...props }, ref) => (\n    <label\n      ref={ref}\n      className={cn(\n        'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',\n        className\n      )}\n      {...props}\n    />\n  )\n);\nLabel.displayName = 'Label';\n\nexport { Label };\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ui/select.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ui/settings-section.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ui/switch.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/components/ui/textarea.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-empty-object-type",
        "severity": 1,
        "message": "An interface declaring no members is equivalent to its supertype.",
        "line": 4,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "noEmptyInterfaceWithSuper",
        "endLine": 4,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "replaceEmptyInterfaceWithSuper",
            "fix": {
              "range": [74, 160],
              "text": "type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"
            },
            "desc": "Replace empty interface with a type alias."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as React from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport { Textarea };\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/config/constants.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/config/errorMessages.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/contexts/ActivitiesContext.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 11,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 11,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [355, 358], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [355, 358], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\n/**\n * ActivitiesContext - Placeholder for backwards compatibility\n * All activity functionality has been migrated to hooks in /src/hooks/useActivitiesQuery.ts\n * Use: import { useActivities, useActivity } from '@/hooks/useActivitiesQuery';\n */\n\nimport React, { createContext } from 'react';\n\nexport const ActivitiesContext = createContext<any>(null);\n\nexport const ActivitiesProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  return (\n    <ActivitiesContext.Provider value={null}>\n      {children}\n    </ActivitiesContext.Provider>\n  );\n};\n\nexport const useActivities = () => {\n  throw new Error(\n    'useActivities has been migrated to @/hooks/useActivitiesQuery. Please update your imports.'\n  );\n};\n\nexport const useActivity = () => {\n  throw new Error(\n    'useActivity has been migrated to @/hooks/useActivitiesQuery. Please update your imports.'\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/contexts/AuthContext.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 11,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 11,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [288, 291], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [288, 291], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\n/**\n * AuthContext - Placeholder for backwards compatibility\n * All auth functionality should use hooks in /src/hooks/useAuth.ts\n * Use: import { useAuth } from '@/hooks/useAuth';\n */\n\nimport React, { createContext } from 'react';\n\nexport const AuthContext = createContext<any>(null);\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  return <AuthContext.Provider value={null}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => {\n  throw new Error(\n    'useAuth context is deprecated. Please use the hook from @/hooks/useAuth'\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/contexts/ProjectsContext.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/contexts/TimerContext.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 11,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 11,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [334, 337], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [334, 337], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\n/**\n * TimerContext - Placeholder for backwards compatibility\n * All timer functionality has been migrated to hooks in /src/features/timer/hooks/useTimer.ts\n * Use: import { useTimer } from '@/features/timer/hooks/useTimer';\n */\n\nimport React, { createContext } from 'react';\n\nexport const TimerContext = createContext<any>(null);\n\nexport const TimerProvider: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => {\n  return <TimerContext.Provider value={null}>{children}</TimerContext.Provider>;\n};\n\nexport const useTimer = () => {\n  throw new Error(\n    'useTimer has been migrated to @/features/timer/hooks/useTimer. Please update your imports.'\n  );\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/domain/entities/ActiveSession.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/domain/entities/Group.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/domain/entities/Session.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/domain/entities/User.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/domain/entities/__tests__/Group.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/challenges/hooks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/challenges/hooks/useChallengeMutations.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/challenges/hooks/useChallenges.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/challenges/services/ChallengeService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/comments/hooks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/comments/hooks/useCommentMutations.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 51,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 51,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1390, 1393], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1390, 1393], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 66,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 66,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1806, 1809], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1806, 1809], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 66,
        "column": 69,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 66,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1841, 1844], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1841, 1844], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 80,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 80,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2269, 2272], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2269, 2272], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 135,
        "column": 68,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 135,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3519, 3522], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3519, 3522], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 140,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 140,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3652, 3655], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3652, 3655], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 205,
        "column": 68,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 205,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5276, 5279], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5276, 5279], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 211,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 211,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5425, 5428], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5425, 5428], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 240,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 240,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6161, 6164], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6161, 6164], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 255,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 255,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6570, 6573], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6570, 6573], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 255,
        "column": 69,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 255,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6605, 6608], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6605, 6608], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 268,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 268,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6998, 7001], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6998, 7001], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 330,
        "column": 68,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 330,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8664, 8667], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8664, 8667], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 335,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 335,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8797, 8800], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8797, 8800], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 14,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Comment Mutation Hooks - React Query Boundary\n *\n * All write operations for comments (create, update, delete, like).\n */\n\nimport {\n  useMutation,\n  useQueryClient,\n  UseMutationOptions,\n} from '@tanstack/react-query';\nimport { CommentService, CommentLikeData } from '../services/CommentService';\nimport { COMMENT_KEYS } from './useComments';\nimport {\n  CommentWithDetails,\n  CreateCommentData,\n  UpdateCommentData,\n} from '@/types';\nimport { SESSION_KEYS } from '@/features/sessions/hooks';\n\nconst commentService = new CommentService();\n\n/**\n * Create a new comment\n *\n * @example\n * const createMutation = useCreateComment();\n * createMutation.mutate({\n *   sessionId: 'abc123',\n *   content: 'Great work!',\n *   parentId: 'comment-456' // Optional for replies\n * });\n */\nexport function useCreateComment(\n  options?: Partial<\n    UseMutationOptions<CommentWithDetails, Error, CreateCommentData>\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<CommentWithDetails, Error, CreateCommentData>({\n    mutationFn: data => commentService.createComment(data),\n\n    onSuccess: (newComment, variables) => {\n      // Invalidate comments for this session\n      queryClient.invalidateQueries({\n        queryKey: COMMENT_KEYS.session(variables.sessionId),\n      });\n\n      // Update comment count in session cache and feed\n      const updateSessionCommentCount = (session: any) => {\n        if (session?.id !== variables.sessionId) return session;\n        return {\n          ...session,\n          commentCount: (session.commentCount || 0) + 1,\n        };\n      };\n\n      // Update session detail cache\n      queryClient.setQueryData(\n        SESSION_KEYS.detail(variables.sessionId),\n        updateSessionCommentCount\n      );\n\n      // Update feed caches\n      queryClient.setQueriesData<any>({ queryKey: ['feed'] }, (old: any) => {\n        if (!old) return old;\n\n        if (Array.isArray(old)) {\n          return old.map(updateSessionCommentCount);\n        } else if (old.sessions) {\n          return {\n            ...old,\n            sessions: old.sessions.map(updateSessionCommentCount),\n          };\n        } else if (old.pages) {\n          // Handle infinite query\n          return {\n            ...old,\n            pages: old.pages.map((page: any) => ({\n              ...page,\n              sessions: page.sessions.map(updateSessionCommentCount),\n            })),\n          };\n        }\n\n        return old;\n      });\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Update a comment\n *\n * @example\n * const updateMutation = useUpdateComment();\n * updateMutation.mutate({\n *   commentId: 'comment-123',\n *   sessionId: 'session-456',\n *   data: { content: 'Updated comment text' }\n * });\n */\nexport function useUpdateComment(\n  options?: Partial<\n    UseMutationOptions<\n      void,\n      Error,\n      { commentId: string; sessionId: string; data: UpdateCommentData }\n    >\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<\n    void,\n    Error,\n    { commentId: string; sessionId: string; data: UpdateCommentData }\n  >({\n    mutationFn: ({ commentId, data }) =>\n      commentService.updateComment(commentId, data),\n\n    onMutate: async ({ commentId, sessionId, data }) => {\n      await queryClient.cancelQueries({\n        queryKey: COMMENT_KEYS.session(sessionId),\n      });\n\n      const previousComments = queryClient.getQueryData(\n        COMMENT_KEYS.session(sessionId)\n      );\n\n      // Optimistically update\n      queryClient.setQueryData(COMMENT_KEYS.list(sessionId), (old: any) => {\n        if (!old?.comments) return old;\n\n        return {\n          ...old,\n          comments: old.comments.map((comment: any) =>\n            comment.id === commentId\n              ? { ...comment, ...data, isEdited: true }\n              : comment\n          ),\n        };\n      });\n\n      return { previousComments };\n    },\n\n    onError: (error, { sessionId }, context: unknown) => {\n      if (\n        context &&\n        typeof context === 'object' &&\n        'previousComments' in context &&\n        context.previousComments\n      ) {\n        queryClient.setQueryData(\n          COMMENT_KEYS.session(sessionId),\n          context.previousComments\n        );\n      }\n    },\n\n    onSuccess: (_, { sessionId }) => {\n      queryClient.invalidateQueries({\n        queryKey: COMMENT_KEYS.session(sessionId),\n      });\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Delete a comment\n *\n * @example\n * const deleteMutation = useDeleteComment();\n * deleteMutation.mutate({\n *   commentId: 'comment-123',\n *   sessionId: 'session-456'\n * });\n */\nexport function useDeleteComment(\n  options?: Partial<\n    UseMutationOptions<void, Error, { commentId: string; sessionId: string }>\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<void, Error, { commentId: string; sessionId: string }>({\n    mutationFn: ({ commentId }) => commentService.deleteComment(commentId),\n\n    onMutate: async ({ commentId, sessionId }) => {\n      await queryClient.cancelQueries({\n        queryKey: COMMENT_KEYS.session(sessionId),\n      });\n\n      const previousComments = queryClient.getQueryData(\n        COMMENT_KEYS.session(sessionId)\n      );\n\n      // Optimistically remove from comments list\n      queryClient.setQueryData(COMMENT_KEYS.list(sessionId), (old: any) => {\n        if (!old?.comments) return old;\n\n        return {\n          ...old,\n          comments: old.comments.filter(\n            (comment: any) => comment.id !== commentId\n          ),\n        };\n      });\n\n      return { previousComments };\n    },\n\n    onError: (error, { sessionId }, context: unknown) => {\n      if (\n        context &&\n        typeof context === 'object' &&\n        'previousComments' in context &&\n        context.previousComments\n      ) {\n        queryClient.setQueryData(\n          COMMENT_KEYS.session(sessionId),\n          context.previousComments\n        );\n      }\n    },\n\n    onSuccess: (_, { sessionId }) => {\n      // Invalidate comments\n      queryClient.invalidateQueries({\n        queryKey: COMMENT_KEYS.session(sessionId),\n      });\n\n      // Update comment count in session cache and feed\n      const updateSessionCommentCount = (session: any) => {\n        if (session?.id !== sessionId) return session;\n        return {\n          ...session,\n          commentCount: Math.max(0, (session.commentCount || 0) - 1),\n        };\n      };\n\n      // Update session detail cache\n      queryClient.setQueryData(\n        SESSION_KEYS.detail(sessionId),\n        updateSessionCommentCount\n      );\n\n      // Update feed caches\n      queryClient.setQueriesData<any>({ queryKey: ['feed'] }, (old: any) => {\n        if (!old) return old;\n\n        if (Array.isArray(old)) {\n          return old.map(updateSessionCommentCount);\n        } else if (old.sessions) {\n          return {\n            ...old,\n            sessions: old.sessions.map(updateSessionCommentCount),\n          };\n        } else if (old.pages) {\n          return {\n            ...old,\n            pages: old.pages.map((page: any) => ({\n              ...page,\n              sessions: page.sessions.map(updateSessionCommentCount),\n            })),\n          };\n        }\n\n        return old;\n      });\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Like or unlike a comment\n *\n * @example\n * const likeMutation = useCommentLike('session-123');\n * likeMutation.mutate({ commentId: 'comment-456', action: 'like' });\n * likeMutation.mutate({ commentId: 'comment-456', action: 'unlike' });\n */\nexport function useCommentLike(\n  sessionId: string,\n  options?: Partial<UseMutationOptions<void, Error, CommentLikeData>>\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<void, Error, CommentLikeData>({\n    mutationFn: async ({ commentId, action }) => {\n      try {\n        if (action === 'like') {\n          await commentService.likeComment(commentId);\n        } else {\n          await commentService.unlikeComment(commentId);\n        }\n      } catch (error: unknown) {\n        // If already liked/unliked, treat as success (idempotent)\n        const errorMsg = error.message || String(error);\n        if (\n          errorMsg.includes('Already liked') ||\n          errorMsg.includes('not liked')\n        ) {\n          return;\n        }\n        throw error;\n      }\n    },\n\n    onMutate: async ({ commentId, action }) => {\n      await queryClient.cancelQueries({\n        queryKey: COMMENT_KEYS.session(sessionId),\n      });\n\n      const previousComments = queryClient.getQueryData(\n        COMMENT_KEYS.session(sessionId)\n      );\n\n      const increment = action === 'like' ? 1 : -1;\n\n      // Optimistically update comments\n      queryClient.setQueryData(COMMENT_KEYS.list(sessionId), (old: any) => {\n        if (!old?.comments) return old;\n\n        return {\n          ...old,\n          comments: old.comments.map((comment: any) =>\n            comment.id === commentId\n              ? {\n                  ...comment,\n                  likeCount: Math.max(0, (comment.likeCount || 0) + increment),\n                  isLiked: action === 'like',\n                }\n              : comment\n          ),\n        };\n      });\n\n      return { previousComments };\n    },\n\n    onError: (error, variables, context: unknown) => {\n      if (\n        context &&\n        typeof context === 'object' &&\n        'previousComments' in context &&\n        context.previousComments\n      ) {\n        queryClient.setQueryData(\n          COMMENT_KEYS.session(sessionId),\n          context.previousComments\n        );\n      }\n    },\n\n    onSuccess: () => {\n      // Refetch to ensure consistency\n      queryClient.invalidateQueries({\n        queryKey: COMMENT_KEYS.session(sessionId),\n      });\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Helper hook to invalidate comments for a session\n *\n * @example\n * const invalidateComments = useInvalidateComments();\n * invalidateComments(sessionId);\n */\nexport function useInvalidateComments() {\n  const queryClient = useQueryClient();\n\n  return (sessionId: string) => {\n    queryClient.invalidateQueries({\n      queryKey: COMMENT_KEYS.session(sessionId),\n    });\n    queryClient.invalidateQueries({ queryKey: COMMENT_KEYS.list(sessionId) });\n  };\n}\n\n/**\n * Helper hook to invalidate all comments\n *\n * @example\n * const invalidateAllComments = useInvalidateAllComments();\n * invalidateAllComments();\n */\nexport function useInvalidateAllComments() {\n  const queryClient = useQueryClient();\n\n  return () => {\n    queryClient.invalidateQueries({ queryKey: COMMENT_KEYS.all() });\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/comments/hooks/useComments.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/comments/services/CommentService.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Comment' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 10,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 10
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ValidatedCreateCommentData' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 20,
        "column": 29,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 55
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ValidatedUpdateCommentData' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 21,
        "column": 29,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 55
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'cursor' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 31,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 31,
        "endColumn": 11
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Comment Service - Business Logic Layer\n *\n * Orchestrates business workflows for comments.\n * No React dependencies - pure TypeScript for testability.\n */\n\nimport { firebaseApi } from '@/lib/api';\nimport {\n  Comment,\n  CommentWithDetails,\n  CreateCommentData,\n  UpdateCommentData,\n  CommentsResponse,\n} from '@/types';\nimport {\n  validateOrThrow,\n  CreateCommentSchema,\n  UpdateCommentSchema,\n  type CreateCommentData as ValidatedCreateCommentData,\n  type UpdateCommentData as ValidatedUpdateCommentData,\n} from '@/lib/validation';\n\nexport class CommentService {\n  /**\n   * Get all comments for a session\n   */\n  async getSessionComments(\n    sessionId: string,\n    limit: number = 20,\n    cursor?: string\n  ): Promise<CommentsResponse> {\n    try {\n      return await firebaseApi.comment.getSessionComments(sessionId, limit);\n    } catch (error) {\n      console.error('Error getting session comments:', error);\n      return {\n        comments: [],\n        hasMore: false,\n      };\n    }\n  }\n\n  /**\n   * Create a new comment\n   */\n  async createComment(data: unknown): Promise<CommentWithDetails> {\n    // Validate input data\n    const validatedData = validateOrThrow(CreateCommentSchema, data);\n\n    return firebaseApi.comment.createComment(validatedData as CreateCommentData);\n  }\n\n  /**\n   * Update a comment\n   */\n  async updateComment(commentId: string, data: unknown): Promise<void> {\n    // Validate input data\n    const validatedData = validateOrThrow(UpdateCommentSchema, data);\n\n    await firebaseApi.comment.updateComment(commentId, validatedData as UpdateCommentData);\n  }\n\n  /**\n   * Delete a comment\n   */\n  async deleteComment(commentId: string): Promise<void> {\n    return firebaseApi.comment.deleteComment(commentId);\n  }\n\n  /**\n   * Like a comment\n   */\n  async likeComment(commentId: string): Promise<void> {\n    return firebaseApi.comment.likeComment(commentId);\n  }\n\n  /**\n   * Unlike a comment\n   */\n  async unlikeComment(commentId: string): Promise<void> {\n    return firebaseApi.comment.unlikeComment(commentId);\n  }\n}\n\nexport interface CommentLikeData {\n  commentId: string;\n  action: 'like' | 'unlike';\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/feed/components/FeedPageContent.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/feed/components/LandingPageContent.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/feed/hooks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/feed/hooks/useFeed.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'FeedOptions' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 18,
        "column": 36,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 47
      },
      {
        "ruleId": "@tanstack/query/exhaustive-deps",
        "severity": 1,
        "message": "The following dependencies are missing in your queryKey: currentUserId",
        "line": 136,
        "column": 5,
        "nodeType": "Property",
        "messageId": "missingDeps",
        "endLine": 136,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "fixTo",
            "data": {
              "result": "[...FEED_KEYS.user(userId), limit, currentUserId]"
            },
            "fix": {
              "range": [3951, 3985],
              "text": "[...FEED_KEYS.user(userId), limit, currentUserId]"
            },
            "desc": "Fix to [...FEED_KEYS.user(userId), limit, currentUserId]"
          }
        ]
      },
      {
        "ruleId": "@tanstack/query/exhaustive-deps",
        "severity": 1,
        "message": "The following dependencies are missing in your queryKey: currentUserId",
        "line": 160,
        "column": 5,
        "nodeType": "Property",
        "messageId": "missingDeps",
        "endLine": 160,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "fixTo",
            "data": {
              "result": "[...FEED_KEYS.group(groupId), limit, currentUserId]"
            },
            "fix": {
              "range": [4581, 4617],
              "text": "[...FEED_KEYS.group(groupId), limit, currentUserId]"
            },
            "desc": "Fix to [...FEED_KEYS.group(groupId), limit, currentUserId]"
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Feed Query Hooks - React Query Boundary\n *\n * This is the ONLY place where React Query should be used for feed.\n * All components should use these hooks instead of direct React Query or firebaseApi calls.\n *\n * Architecture:\n * Components → useFeed hooks (React Query) → FeedService → Repositories → Firebase\n */\n\nimport {\n  useInfiniteQuery,\n  useQuery,\n  UseQueryOptions,\n  UseInfiniteQueryOptions,\n  InfiniteData,\n} from '@tanstack/react-query';\nimport { FeedService, FeedFilters, FeedOptions } from '../services/FeedService';\nimport { Session } from '@/domain/entities/Session';\nimport { STANDARD_CACHE_TIMES } from '@/lib/react-query';\n\n// Singleton service instance\nconst feedService = new FeedService();\n\n// ==================== TYPES ====================\n\n// Type for infinite query options without 'select' property\n// Infinite queries must return InfiniteData, so select cannot transform to FeedResult\ntype InfiniteQueryOptions<TData, TError> = Omit<\n  Partial<UseInfiniteQueryOptions<TData, TError, InfiniteData<TData, unknown>>>,\n  'select'\n>;\n\nexport interface FeedResult {\n  sessions: Session[];\n  hasMore: boolean;\n  nextCursor?: string;\n}\n\nexport interface FeedPage {\n  sessions: Session[];\n  hasMore: boolean;\n  nextCursor?: string;\n}\n\n// ==================== CACHE KEYS ====================\n// Hierarchical cache keys for efficient invalidation\n\nexport const FEED_KEYS = {\n  all: () => ['feed'] as const,\n  lists: () => [...FEED_KEYS.all(), 'list'] as const,\n  list: (userId: string, filters: FeedFilters) =>\n    [...FEED_KEYS.lists(), userId, filters] as const,\n  user: (userId: string) => [...FEED_KEYS.all(), 'user', userId] as const,\n  group: (groupId: string) => [...FEED_KEYS.all(), 'group', groupId] as const,\n};\n\n// ==================== QUERY HOOKS ====================\n\n/**\n * Get paginated feed with infinite scroll support\n *\n * This is the primary hook for feed functionality with pagination.\n *\n * @example\n * const {\n *   data,\n *   fetchNextPage,\n *   hasNextPage,\n *   isFetchingNextPage\n * } = useFeedInfinite(userId, { type: 'following' });\n *\n * // Access all pages:\n * const allSessions = data?.pages.flatMap(page => page.sessions) || [];\n */\nexport function useFeedInfinite(\n  currentUserId: string,\n  filters: FeedFilters = {},\n  options?: InfiniteQueryOptions<FeedResult, Error>\n) {\n  return useInfiniteQuery<FeedResult, Error>({\n    queryKey: FEED_KEYS.list(currentUserId, filters),\n    queryFn: ({ pageParam }) =>\n      feedService.getFeed(currentUserId, filters, {\n        limit: 20,\n        cursor: pageParam as string | undefined,\n      }),\n    getNextPageParam: lastPage => {\n      return lastPage.hasMore ? lastPage.nextCursor : undefined;\n    },\n    initialPageParam: undefined as string | undefined,\n    staleTime: STANDARD_CACHE_TIMES.SHORT, // 1 minute - feed data changes frequently\n    enabled: !!currentUserId,\n    ...options,\n  });\n}\n\n/**\n * Get initial feed page (non-paginated)\n *\n * Use this for simple feed displays without infinite scroll.\n *\n * @example\n * const { data: feedData, isLoading, error } = useFeed(userId, { type: 'all' });\n */\nexport function useFeed(\n  currentUserId: string,\n  filters: FeedFilters = {},\n  limit: number = 20,\n  options?: Partial<UseQueryOptions<FeedResult, Error>>\n) {\n  return useQuery<FeedResult, Error>({\n    queryKey: [...FEED_KEYS.list(currentUserId, filters), limit],\n    queryFn: () => feedService.getFeed(currentUserId, filters, { limit }),\n    staleTime: STANDARD_CACHE_TIMES.SHORT, // 1 minute\n    enabled: !!currentUserId,\n    ...options,\n  });\n}\n\n/**\n * Get user-specific feed\n *\n * Shows sessions from a specific user (for profile pages).\n *\n * @example\n * const { data: userFeed } = useUserFeed(currentUserId, targetUserId);\n */\nexport function useUserFeed(\n  currentUserId: string,\n  userId: string,\n  limit: number = 20,\n  options?: Partial<UseQueryOptions<FeedResult, Error>>\n) {\n  return useQuery<FeedResult, Error>({\n    queryKey: [...FEED_KEYS.user(userId), limit],\n    queryFn: () =>\n      feedService.getFeed(currentUserId, { type: 'user', userId }, { limit }),\n    staleTime: STANDARD_CACHE_TIMES.MEDIUM, // 5 minutes\n    enabled: !!currentUserId && !!userId,\n    ...options,\n  });\n}\n\n/**\n * Get group-specific feed\n *\n * Shows sessions from a specific group.\n *\n * @example\n * const { data: groupFeed } = useGroupFeed(currentUserId, groupId);\n */\nexport function useGroupFeed(\n  currentUserId: string,\n  groupId: string,\n  limit: number = 20,\n  options?: Partial<UseQueryOptions<FeedResult, Error>>\n) {\n  return useQuery<FeedResult, Error>({\n    queryKey: [...FEED_KEYS.group(groupId), limit],\n    queryFn: () =>\n      feedService.getFeed(currentUserId, { type: 'group', groupId }, { limit }),\n    staleTime: STANDARD_CACHE_TIMES.MEDIUM, // 5 minutes\n    enabled: !!currentUserId && !!groupId,\n    ...options,\n  });\n}\n\n/**\n * Get following feed (infinite scroll version)\n *\n * Shows sessions from users the current user follows.\n *\n * @example\n * const {\n *   data,\n *   fetchNextPage,\n *   hasNextPage\n * } = useFollowingFeedInfinite(userId);\n */\nexport function useFollowingFeedInfinite(\n  currentUserId: string,\n  options?: InfiniteQueryOptions<FeedResult, Error>\n) {\n  return useFeedInfinite(currentUserId, { type: 'following' }, options);\n}\n\n/**\n * Get public/all feed (infinite scroll version)\n *\n * Shows all public sessions.\n *\n * @example\n * const {\n *   data,\n *   fetchNextPage,\n *   hasNextPage\n * } = usePublicFeedInfinite(userId);\n */\nexport function usePublicFeedInfinite(\n  currentUserId: string,\n  options?: InfiniteQueryOptions<FeedResult, Error>\n) {\n  return useFeedInfinite(currentUserId, { type: 'all' }, options);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/feed/hooks/useFeedMutations.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 104,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 104,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2844, 2847], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2844, 2847], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 108,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 108,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2973, 2976], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2973, 2976], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 108,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 108,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2994, 2997], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2994, 2997], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 114,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 114,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3138, 3141], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3138, 3141], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 146,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 146,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3983, 3986], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3983, 3986], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 146,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 146,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4004, 4007], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4004, 4007], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 151,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 151,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4117, 4120], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4117, 4120], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 153,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 153,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4192, 4195], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4192, 4195], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Feed Mutation Hooks - React Query Boundary\n *\n * Handles mutations that affect the feed (refresh, invalidation).\n * Session creation/deletion is handled in the Sessions feature.\n */\n\nimport { useMutation, useQueryClient, UseMutationOptions } from '@tanstack/react-query';\nimport { FeedService, FeedFilters } from '../services/FeedService';\nimport { FEED_KEYS, FeedResult } from './useFeed';\n\nconst feedService = new FeedService();\n\n/**\n * Refresh the feed\n *\n * Forces a fresh fetch of feed data.\n *\n * @example\n * const refreshMutation = useRefreshFeed();\n * refreshMutation.mutate({ userId, filters: { type: 'following' } });\n */\nexport function useRefreshFeed(\n  options?: Partial<UseMutationOptions<FeedResult, Error, { userId: string; filters?: FeedFilters }>>\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<FeedResult, Error, { userId: string; filters?: FeedFilters }>({\n    mutationFn: ({ userId, filters }) => feedService.refreshFeed(userId, filters),\n\n    onSuccess: (_, { userId, filters = {} }) => {\n      // Invalidate the specific feed query\n      queryClient.invalidateQueries({ queryKey: FEED_KEYS.list(userId, filters) });\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Helper hook to invalidate all feed queries\n *\n * Use this when an action affects the feed but is handled elsewhere\n * (e.g., creating a session, supporting a session, etc.)\n *\n * @example\n * const invalidateFeeds = useInvalidateFeeds();\n *\n * // After creating a session:\n * invalidateFeeds();\n */\nexport function useInvalidateFeeds() {\n  const queryClient = useQueryClient();\n\n  return () => {\n    queryClient.invalidateQueries({ queryKey: FEED_KEYS.all() });\n  };\n}\n\n/**\n * Helper hook to invalidate a specific user's feed\n *\n * @example\n * const invalidateUserFeed = useInvalidateUserFeed();\n * invalidateUserFeed(userId);\n */\nexport function useInvalidateUserFeed() {\n  const queryClient = useQueryClient();\n\n  return (userId: string) => {\n    queryClient.invalidateQueries({ queryKey: FEED_KEYS.user(userId) });\n  };\n}\n\n/**\n * Helper hook to invalidate a specific group's feed\n *\n * @example\n * const invalidateGroupFeed = useInvalidateGroupFeed();\n * invalidateGroupFeed(groupId);\n */\nexport function useInvalidateGroupFeed() {\n  const queryClient = useQueryClient();\n\n  return (groupId: string) => {\n    queryClient.invalidateQueries({ queryKey: FEED_KEYS.group(groupId) });\n  };\n}\n\n/**\n * Helper to manually add a session to the feed cache (optimistic update)\n *\n * Use this when creating a new session to immediately show it in the feed.\n *\n * @example\n * const addToFeed = useAddToFeedCache();\n *\n * // After creating a session:\n * addToFeed(userId, { type: 'following' }, newSession);\n */\nexport function useAddToFeedCache() {\n  const queryClient = useQueryClient();\n\n  return (userId: string, filters: FeedFilters, newSession: any) => {\n    const queryKey = FEED_KEYS.list(userId, filters);\n\n    // Update infinite query cache\n    queryClient.setQueryData<any>(queryKey, (old: any) => {\n      if (!old?.pages) return old;\n\n      // Add to the first page\n      return {\n        ...old,\n        pages: old.pages.map((page: any, index: number) => {\n          if (index === 0) {\n            return {\n              ...page,\n              sessions: [newSession, ...page.sessions],\n            };\n          }\n          return page;\n        }),\n      };\n    });\n  };\n}\n\n/**\n * Helper to manually remove a session from the feed cache (optimistic update)\n *\n * Use this when deleting a session to immediately remove it from the feed.\n *\n * @example\n * const removeFromFeed = useRemoveFromFeedCache();\n *\n * // After deleting a session:\n * removeFromFeed(userId, { type: 'following' }, sessionId);\n */\nexport function useRemoveFromFeedCache() {\n  const queryClient = useQueryClient();\n\n  return (userId: string, filters: FeedFilters, sessionId: string) => {\n    const queryKey = FEED_KEYS.list(userId, filters);\n\n    // Update infinite query cache\n    queryClient.setQueryData<any>(queryKey, (old: any) => {\n      if (!old?.pages) return old;\n\n      return {\n        ...old,\n        pages: old.pages.map((page: any) => ({\n          ...page,\n          sessions: page.sessions.filter((s: any) => s.id !== sessionId),\n        })),\n      };\n    });\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/feed/services/FeedService.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Session' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 8,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'cursor' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 123,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 123,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'cursor' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 146,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 146,
        "endColumn": 11
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Feed Service - Application Layer\n *\n * Orchestrates feed workflows and business logic.\n * Coordinates between repositories to build different feed types.\n */\n\nimport { Session } from '@/domain/entities/Session';\nimport {\n  FeedRepository,\n  FeedResult,\n} from '@/infrastructure/firebase/repositories/FeedRepository';\nimport { SocialGraphRepository } from '@/infrastructure/firebase/repositories/SocialGraphRepository';\nimport { SessionRepository } from '@/infrastructure/firebase/repositories/SessionRepository';\n\nexport type FeedType =\n  | 'following'\n  | 'trending'\n  | 'all'\n  | 'user'\n  | 'group'\n  | 'recent'\n  | 'group-members-unfollowed';\n\nexport interface FeedFilters {\n  type?: FeedType;\n  userId?: string;\n  groupId?: string;\n}\n\nexport interface FeedOptions {\n  limit?: number;\n  cursor?: string;\n}\n\nexport class FeedService {\n  private readonly feedRepo: FeedRepository;\n  private readonly socialGraphRepo: SocialGraphRepository;\n  private readonly sessionRepo: SessionRepository;\n\n  constructor() {\n    this.feedRepo = new FeedRepository();\n    this.socialGraphRepo = new SocialGraphRepository();\n    this.sessionRepo = new SessionRepository();\n  }\n\n  /**\n   * Get feed based on filters\n   */\n  async getFeed(\n    currentUserId: string,\n    filters: FeedFilters = {},\n    options: FeedOptions = {}\n  ): Promise<FeedResult> {\n    const { type = 'following' } = filters;\n    const { limit = 20, cursor } = options;\n\n    switch (type) {\n      case 'following':\n        return this.getFollowingFeed(currentUserId, limit, cursor);\n\n      case 'trending':\n      case 'all':\n      case 'recent':\n        return this.getPublicFeed(limit, cursor);\n\n      case 'user':\n        if (!filters.userId) {\n          throw new Error('userId required for user feed');\n        }\n        return this.getUserFeed(filters.userId, limit, cursor);\n\n      case 'group':\n        if (!filters.groupId) {\n          throw new Error('groupId required for group feed');\n        }\n        return this.getGroupFeed(filters.groupId, limit, cursor);\n\n      case 'group-members-unfollowed':\n        return this.getGroupMembersUnfollowedFeed(currentUserId, limit, cursor);\n\n      default:\n        throw new Error(`Unknown feed type: ${type}`);\n    }\n  }\n\n  /**\n   * Get feed from users the current user is following\n   */\n  private async getFollowingFeed(\n    currentUserId: string,\n    limit: number,\n    cursor?: string\n  ): Promise<FeedResult> {\n    // Get list of following\n    const followingIds =\n      await this.socialGraphRepo.getFollowingIds(currentUserId);\n\n    if (followingIds.length === 0) {\n      return { sessions: [], hasMore: false };\n    }\n\n    // Fetch sessions from followed users\n    return this.feedRepo.getFeedForFollowing(followingIds, limit, cursor);\n  }\n\n  /**\n   * Get public feed (all sessions with everyone visibility)\n   */\n  private async getPublicFeed(\n    limit: number,\n    cursor?: string\n  ): Promise<FeedResult> {\n    return this.feedRepo.getPublicFeed(limit, cursor);\n  }\n\n  /**\n   * Get feed for a specific user\n   */\n  private async getUserFeed(\n    userId: string,\n    limit: number,\n    cursor?: string\n  ): Promise<FeedResult> {\n    // Use SessionRepository's findByUserId method\n    const sessions = await this.sessionRepo.findByUserId(userId, limit);\n\n    // For now, we don't have pagination cursor support in SessionRepository\n    // This would need to be enhanced for proper pagination\n    return {\n      sessions,\n      hasMore: sessions.length >= limit,\n      nextCursor:\n        sessions.length >= limit\n          ? sessions[sessions.length - 1]?.id\n          : undefined,\n    };\n  }\n\n  /**\n   * Get feed for a specific group\n   */\n  private async getGroupFeed(\n    groupId: string,\n    limit: number,\n    cursor?: string\n  ): Promise<FeedResult> {\n    // Use SessionRepository's findByGroupId method\n    const sessions = await this.sessionRepo.findByGroupId(groupId, limit);\n\n    return {\n      sessions,\n      hasMore: sessions.length >= limit,\n      nextCursor:\n        sessions.length >= limit\n          ? sessions[sessions.length - 1]?.id\n          : undefined,\n    };\n  }\n\n  /**\n   * Get feed from group members who are not followed\n   */\n  private async getGroupMembersUnfollowedFeed(\n    currentUserId: string,\n    limit: number,\n    cursor?: string\n  ): Promise<FeedResult> {\n    // Get all group member IDs\n    const groupMemberIds =\n      await this.socialGraphRepo.getGroupMemberIds(currentUserId);\n\n    if (groupMemberIds.length === 0) {\n      return { sessions: [], hasMore: false };\n    }\n\n    // Get following IDs\n    const followingIds =\n      await this.socialGraphRepo.getFollowingIds(currentUserId);\n\n    // Fetch sessions from unfollowed group members\n    return this.feedRepo.getFeedForGroupMembersUnfollowed(\n      groupMemberIds,\n      followingIds,\n      limit,\n      cursor\n    );\n  }\n\n  /**\n   * Refresh feed (invalidate cache - handled by React Query in hooks layer)\n   */\n  async refreshFeed(\n    currentUserId: string,\n    filters: FeedFilters = {}\n  ): Promise<FeedResult> {\n    // Simply re-fetch with no cursor\n    return this.getFeed(currentUserId, filters, { limit: 20 });\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/components/GroupDetailPage.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/components/GroupLeaderboard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/components/GroupMembersList.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/domain/LeaderboardCalculator.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/domain/__tests__/LeaderboardCalculator.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/hooks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/hooks/useGroupDetails.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/hooks/useGroupLeaderboard.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 108,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 108,
        "endColumn": 23
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * useGroupLeaderboard Hook\n *\n * Fetches and manages group leaderboard data based on member activity.\n */\n\nimport { useQuery } from '@tanstack/react-query';\nimport {\n  collection,\n  query,\n  where,\n  getDocs,\n  getDoc,\n  doc,\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { STANDARD_CACHE_TIMES } from '@/lib/react-query';\n\nexport interface LeaderboardEntry {\n  userId: string;\n  name: string;\n  username: string;\n  profilePicture?: string;\n  totalHours: number;\n  sessionCount: number;\n  rank: number;\n}\n\nexport function useGroupLeaderboard(\n  groupId: string,\n  timeframe: 'week' | 'month' | 'allTime' = 'allTime'\n) {\n  return useQuery({\n    queryKey: ['group-leaderboard', groupId, timeframe],\n    queryFn: async () => {\n      // Fetch group memberships\n      const membershipsRef = collection(db, 'groupMemberships');\n      const membershipsQuery = query(\n        membershipsRef,\n        where('groupId', '==', groupId),\n        where('status', '==', 'active')\n      );\n\n      const membershipsSnapshot = await getDocs(membershipsQuery);\n      const memberIds = membershipsSnapshot.docs.map(doc => doc.data().userId);\n\n      if (memberIds.length === 0) {\n        return [];\n      }\n\n      // Calculate date range based on timeframe\n      let startDate: Date | undefined;\n      const now = new Date();\n\n      if (timeframe === 'week') {\n        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      } else if (timeframe === 'month') {\n        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n      }\n\n      // Fetch sessions for each member\n      const leaderboardPromises = memberIds.map(async userId => {\n        try {\n          // Fetch user data\n          const userDoc = await getDoc(doc(db, 'users', userId));\n          if (!userDoc.exists()) {\n            return null;\n          }\n\n          const userData = userDoc.data();\n\n          // Fetch sessions\n          const sessionsRef = collection(db, 'sessions');\n          let sessionsQuery = query(sessionsRef, where('userId', '==', userId));\n\n          // Add date filter if needed\n          if (startDate) {\n            sessionsQuery = query(\n              sessionsRef,\n              where('userId', '==', userId),\n              where('createdAt', '>=', startDate)\n            );\n          }\n\n          const sessionsSnapshot = await getDocs(sessionsQuery);\n\n          // Calculate total hours and session count\n          let totalSeconds = 0;\n          let sessionCount = 0;\n\n          sessionsSnapshot.docs.forEach(sessionDoc => {\n            const sessionData = sessionDoc.data();\n            totalSeconds += sessionData.duration || 0;\n            sessionCount++;\n          });\n\n          const totalHours = totalSeconds / 3600;\n\n          return {\n            userId,\n            name: userData.name || 'Unknown User',\n            username: userData.username || 'unknown',\n            profilePicture: userData.profilePicture,\n            totalHours,\n            sessionCount,\n            rank: 0, // Will be set after sorting\n          } as LeaderboardEntry;\n        } catch (error) {\n          // Failed to fetch leaderboard data for user\n          return null;\n        }\n      });\n\n      const leaderboardData = await Promise.all(leaderboardPromises);\n\n      // Filter out null values and sort by total hours\n      const validEntries = leaderboardData\n        .filter((entry): entry is LeaderboardEntry => entry !== null)\n        .sort((a, b) => b.totalHours - a.totalHours);\n\n      // Assign ranks\n      validEntries.forEach((entry, index) => {\n        entry.rank = index + 1;\n      });\n\n      return validEntries;\n    },\n    staleTime: STANDARD_CACHE_TIMES.SHORT, // 1 minute - leaderboard data changes frequently\n    enabled: !!groupId,\n  });\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/hooks/useGroupMembers.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 67,
        "column": 20,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 25
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * useGroupMembers Hook\n *\n * Fetches and manages group member data with their profiles.\n */\n\nimport { useQuery } from '@tanstack/react-query';\nimport {\n  collection,\n  query,\n  where,\n  getDocs,\n  getDoc,\n  doc,\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { STANDARD_CACHE_TIMES } from '@/lib/react-query';\n\nexport interface GroupMember {\n  id: string;\n  name: string;\n  username: string;\n  email: string;\n  profilePicture?: string;\n  bio?: string;\n  joinedAt: Date;\n}\n\nexport function useGroupMembers(groupId: string) {\n  return useQuery({\n    queryKey: ['group-members', groupId],\n    queryFn: async () => {\n      // Fetch group memberships\n      const membershipsRef = collection(db, 'groupMemberships');\n      const q = query(\n        membershipsRef,\n        where('groupId', '==', groupId),\n        where('status', '==', 'active')\n      );\n\n      const membershipsSnapshot = await getDocs(q);\n\n      // Fetch user details for each member\n      const memberPromises = membershipsSnapshot.docs.map(\n        async membershipDoc => {\n          const membershipData = membershipDoc.data();\n          const userId = membershipData.userId;\n\n          try {\n            const userDoc = await getDoc(doc(db, 'users', userId));\n\n            if (!userDoc.exists()) {\n              return null;\n            }\n\n            const userData = userDoc.data();\n\n            return {\n              id: userId,\n              name: userData.name || 'Unknown User',\n              username: userData.username || 'unknown',\n              email: userData.email || '',\n              profilePicture: userData.profilePicture,\n              bio: userData.bio,\n              joinedAt: membershipData.joinedAt?.toDate() || new Date(),\n            } as GroupMember;\n          } catch (error) {\n            // Failed to fetch user\n            return null;\n          }\n        }\n      );\n\n      const members = await Promise.all(memberPromises);\n\n      // Filter out null values (deleted/inaccessible users)\n      return members.filter((member): member is GroupMember => member !== null);\n    },\n    staleTime: STANDARD_CACHE_TIMES.MEDIUM, // 5 minutes\n    enabled: !!groupId,\n  });\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/hooks/useGroupMutations.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 57,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 57,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1651, 1654], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1651, 1654], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 143,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 143,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4004, 4007], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4004, 4007], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 152,
        "column": 70,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 152,
        "endColumn": 73,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4292, 4295], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4292, 4295], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 154,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 154,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4381, 4384], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4381, 4384], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Group Mutations - React Query Boundary\n *\n * This file contains all group mutation hooks (create, update, delete, join, leave).\n * Includes optimistic updates and cache invalidation.\n */\n\nimport {\n  useMutation,\n  useQueryClient,\n  UseMutationOptions,\n} from '@tanstack/react-query';\nimport { GroupService } from '../services/GroupService';\nimport { GROUPS_KEYS } from './useGroups';\n\n// Singleton service instance\nconst groupService = new GroupService();\n\n// ==================== MUTATION HOOKS ====================\n\n/**\n * Join a group\n *\n * @example\n * const joinMutation = useJoinGroup();\n * joinMutation.mutate({ groupId: '123', userId: 'user-456' });\n */\nexport function useJoinGroup(\n  options?: Partial<\n    UseMutationOptions<void, Error, { groupId: string; userId: string }>\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<void, Error, { groupId: string; userId: string }>({\n    mutationFn: ({ groupId, userId }) =>\n      groupService.joinGroup(groupId, userId),\n\n    onMutate: async ({ groupId, userId }) => {\n      // Cancel outgoing queries\n      await queryClient.cancelQueries({\n        queryKey: GROUPS_KEYS.detail(groupId),\n      });\n      await queryClient.cancelQueries({\n        queryKey: GROUPS_KEYS.userGroups(userId),\n      });\n\n      // Snapshot previous values for rollback\n      const previousGroup = queryClient.getQueryData(\n        GROUPS_KEYS.detail(groupId)\n      );\n      const previousUserGroups = queryClient.getQueryData(\n        GROUPS_KEYS.userGroups(userId)\n      );\n\n      // Optimistically update group member count\n      queryClient.setQueryData(GROUPS_KEYS.detail(groupId), (old: any) => {\n        if (!old) return old;\n        return {\n          ...old,\n          memberIds: [...old.memberIds, userId],\n        };\n      });\n\n      return { previousGroup, previousUserGroups };\n    },\n\n    onError: (error, variables, context: unknown) => {\n      // Rollback on error\n      if (\n        context &&\n        typeof context === 'object' &&\n        'previousGroup' in context &&\n        context.previousGroup\n      ) {\n        queryClient.setQueryData(\n          GROUPS_KEYS.detail(variables.groupId),\n          context.previousGroup\n        );\n      }\n      if (\n        context &&\n        typeof context === 'object' &&\n        'previousUserGroups' in context &&\n        context.previousUserGroups\n      ) {\n        queryClient.setQueryData(\n          GROUPS_KEYS.userGroups(variables.userId),\n          context.previousUserGroups\n        );\n      }\n    },\n\n    onSuccess: (_, { groupId, userId }) => {\n      // Invalidate relevant caches\n      queryClient.invalidateQueries({ queryKey: GROUPS_KEYS.detail(groupId) });\n      queryClient.invalidateQueries({\n        queryKey: GROUPS_KEYS.userGroups(userId),\n      });\n      queryClient.invalidateQueries({ queryKey: GROUPS_KEYS.stats(groupId) });\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Leave a group\n *\n * @example\n * const leaveMutation = useLeaveGroup();\n * leaveMutation.mutate({ groupId: '123', userId: 'user-456' });\n */\nexport function useLeaveGroup(\n  options?: Partial<\n    UseMutationOptions<void, Error, { groupId: string; userId: string }>\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<void, Error, { groupId: string; userId: string }>({\n    mutationFn: ({ groupId, userId }) =>\n      groupService.leaveGroup(groupId, userId),\n\n    onMutate: async ({ groupId, userId }) => {\n      // Cancel outgoing queries\n      await queryClient.cancelQueries({\n        queryKey: GROUPS_KEYS.detail(groupId),\n      });\n      await queryClient.cancelQueries({\n        queryKey: GROUPS_KEYS.userGroups(userId),\n      });\n\n      // Snapshot previous values\n      const previousGroup = queryClient.getQueryData(\n        GROUPS_KEYS.detail(groupId)\n      );\n      const previousUserGroups = queryClient.getQueryData(\n        GROUPS_KEYS.userGroups(userId)\n      );\n\n      // Optimistically update group\n      queryClient.setQueryData(GROUPS_KEYS.detail(groupId), (old: any) => {\n        if (!old) return old;\n        return {\n          ...old,\n          memberIds: old.memberIds.filter((id: string) => id !== userId),\n        };\n      });\n\n      // Optimistically remove from user groups\n      queryClient.setQueryData(GROUPS_KEYS.userGroups(userId), (old: any) => {\n        if (!Array.isArray(old)) return old;\n        return old.filter((group: any) => group.id !== groupId);\n      });\n\n      return { previousGroup, previousUserGroups };\n    },\n\n    onError: (error, variables, context: unknown) => {\n      // Rollback on error\n      if (\n        context &&\n        typeof context === 'object' &&\n        'previousGroup' in context &&\n        context.previousGroup\n      ) {\n        queryClient.setQueryData(\n          GROUPS_KEYS.detail(variables.groupId),\n          context.previousGroup\n        );\n      }\n      if (\n        context &&\n        typeof context === 'object' &&\n        'previousUserGroups' in context &&\n        context.previousUserGroups\n      ) {\n        queryClient.setQueryData(\n          GROUPS_KEYS.userGroups(variables.userId),\n          context.previousUserGroups\n        );\n      }\n    },\n\n    onSuccess: (_, { groupId, userId }) => {\n      // Invalidate relevant caches\n      queryClient.invalidateQueries({ queryKey: GROUPS_KEYS.detail(groupId) });\n      queryClient.invalidateQueries({\n        queryKey: GROUPS_KEYS.userGroups(userId),\n      });\n      queryClient.invalidateQueries({ queryKey: GROUPS_KEYS.stats(groupId) });\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Helper hook to invalidate all group-related queries\n * Useful for scenarios where you need to refresh all group data\n *\n * @example\n * const invalidateGroups = useInvalidateGroups();\n * invalidateGroups();\n */\nexport function useInvalidateGroups() {\n  const queryClient = useQueryClient();\n\n  return () => {\n    queryClient.invalidateQueries({ queryKey: GROUPS_KEYS.all() });\n  };\n}\n\n/**\n * Helper hook to invalidate specific group data\n *\n * @example\n * const invalidateGroup = useInvalidateGroup();\n * invalidateGroup('group-123');\n */\nexport function useInvalidateGroup() {\n  const queryClient = useQueryClient();\n\n  return (groupId: string) => {\n    queryClient.invalidateQueries({ queryKey: GROUPS_KEYS.detail(groupId) });\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/hooks/useGroups.ts",
    "messages": [
      {
        "ruleId": "@tanstack/query/exhaustive-deps",
        "severity": 1,
        "message": "The following dependencies are missing in your queryKey: limit",
        "line": 142,
        "column": 5,
        "nodeType": "Property",
        "messageId": "missingDeps",
        "endLine": 142,
        "endColumn": 41
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Groups Feature Hooks - React Query Boundary\n *\n * This is the ONLY place where React Query should be used for groups.\n * All components should use these hooks instead of direct React Query or firebaseApi calls.\n *\n * Architecture:\n * Components → useGroups hooks (React Query) → GroupService → GroupRepository → Firebase\n */\n\nimport { useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { GroupService } from '../services/GroupService';\nimport { Group as DomainGroup } from '@/domain/entities/Group';\nimport { Group as UIGroup } from '@/types';\nimport {\n  LeaderboardEntry,\n  TimePeriod,\n  GroupStats,\n} from '../types/groups.types';\n\n// Singleton service instance\nconst groupService = new GroupService();\n\n// ==================== ADAPTERS ====================\n/**\n * Convert domain Group entity to UI Group interface\n * Maps domain model to the shape expected by UI components\n */\nfunction adaptDomainGroupToUI(domainGroup: DomainGroup): UIGroup {\n  return {\n    id: domainGroup.id,\n    name: domainGroup.name,\n    description: domainGroup.description,\n    category: domainGroup.category,\n    type: 'professional', // Default type - can be made configurable\n    privacySetting:\n      domainGroup.privacy === 'public' ? 'public' : 'approval-required',\n    memberCount: domainGroup.getMemberCount(),\n    adminUserIds: Array.from(domainGroup.adminUserIds),\n    memberIds: Array.from(domainGroup.memberIds),\n    createdByUserId: domainGroup.createdByUserId,\n    createdAt: domainGroup.createdAt,\n    updatedAt: domainGroup.createdAt, // Use createdAt as updatedAt since domain doesn't track it\n    imageUrl: domainGroup.imageUrl,\n    location: domainGroup.location,\n    // Optional fields - add defaults if needed by UI layer\n    icon: undefined,\n    color: undefined,\n    bannerUrl: undefined,\n  };\n}\n\n/**\n * Convert array of domain Groups to UI Groups\n */\nfunction adaptDomainGroupsToUI(domainGroups: DomainGroup[]): UIGroup[] {\n  return domainGroups.map(adaptDomainGroupToUI);\n}\n\n// ==================== CACHE KEYS ====================\n// Hierarchical cache keys for efficient invalidation\nexport const GROUPS_KEYS = {\n  all: () => ['groups'] as const,\n  lists: () => [...GROUPS_KEYS.all(), 'list'] as const,\n  list: (filters?: string) => [...GROUPS_KEYS.lists(), { filters }] as const,\n  details: () => [...GROUPS_KEYS.all(), 'detail'] as const,\n  detail: (id: string) => [...GROUPS_KEYS.details(), id] as const,\n  userGroups: (userId: string) =>\n    [...GROUPS_KEYS.all(), 'user', userId] as const,\n  publicGroups: () => [...GROUPS_KEYS.lists(), 'public'] as const,\n  leaderboard: (groupId: string, period: TimePeriod) =>\n    [...GROUPS_KEYS.detail(groupId), 'leaderboard', period] as const,\n  stats: (groupId: string) =>\n    [...GROUPS_KEYS.detail(groupId), 'stats'] as const,\n};\n\n// ==================== CACHE TIMES ====================\nconst CACHE_TIMES = {\n  SHORT: 1 * 60 * 1000, // 1 minute\n  MEDIUM: 5 * 60 * 1000, // 5 minutes\n  LONG: 15 * 60 * 1000, // 15 minutes\n  VERY_LONG: 60 * 60 * 1000, // 1 hour\n};\n\n// ==================== QUERY HOOKS ====================\n\n/**\n * Get details for a specific group\n *\n * @example\n * const { data: group, isLoading, error } = useGroupDetails(groupId);\n */\nexport function useGroupDetails(\n  groupId: string,\n  options?: Partial<UseQueryOptions<UIGroup | null, Error>>\n) {\n  return useQuery<UIGroup | null, Error>({\n    queryKey: GROUPS_KEYS.detail(groupId),\n    queryFn: async () => {\n      const domainGroup = await groupService.getGroupDetails(groupId);\n      return domainGroup ? adaptDomainGroupToUI(domainGroup) : null;\n    },\n    staleTime: CACHE_TIMES.LONG, // 15 minutes cache\n    enabled: !!groupId,\n    ...options,\n  });\n}\n\n/**\n * Get all groups the user is a member of\n *\n * @example\n * const { data: userGroups, isLoading } = useUserGroups(userId);\n */\nexport function useUserGroups(\n  userId: string,\n  options?: Partial<UseQueryOptions<UIGroup[], Error>>\n) {\n  return useQuery<UIGroup[], Error>({\n    queryKey: GROUPS_KEYS.userGroups(userId),\n    queryFn: async () => {\n      const domainGroups = await groupService.getUserGroups(userId);\n      return adaptDomainGroupsToUI(domainGroups);\n    },\n    staleTime: CACHE_TIMES.LONG, // 15 minutes cache\n    enabled: !!userId,\n    ...options,\n  });\n}\n\n/**\n * Get all public groups for discovery\n *\n * @example\n * const { data: publicGroups, isLoading } = usePublicGroups();\n */\nexport function usePublicGroups(\n  limit?: number,\n  options?: Partial<UseQueryOptions<UIGroup[], Error>>\n) {\n  return useQuery<UIGroup[], Error>({\n    queryKey: GROUPS_KEYS.publicGroups(),\n    queryFn: async () => {\n      const domainGroups = await groupService.getPublicGroups(limit);\n      return adaptDomainGroupsToUI(domainGroups);\n    },\n    staleTime: CACHE_TIMES.LONG, // 15 minutes cache\n    ...options,\n  });\n}\n\n/**\n * Get group leaderboard for a specific time period\n *\n * @example\n * const { data: leaderboard } = useGroupLeaderboard(groupId, 'week');\n */\nexport function useGroupLeaderboard(\n  groupId: string,\n  period: TimePeriod,\n  options?: Partial<UseQueryOptions<LeaderboardEntry[], Error>>\n) {\n  return useQuery<LeaderboardEntry[], Error>({\n    queryKey: GROUPS_KEYS.leaderboard(groupId, period),\n    queryFn: () => groupService.getGroupLeaderboard(groupId, period),\n    staleTime: CACHE_TIMES.MEDIUM, // 5 minutes cache for leaderboards\n    enabled: !!groupId,\n    ...options,\n  });\n}\n\n/**\n * Get group statistics\n *\n * @example\n * const { data: stats } = useGroupStats(groupId);\n */\nexport function useGroupStats(\n  groupId: string,\n  options?: Partial<UseQueryOptions<GroupStats, Error>>\n) {\n  return useQuery<GroupStats, Error>({\n    queryKey: GROUPS_KEYS.stats(groupId),\n    queryFn: () => groupService.getGroupStats(groupId),\n    staleTime: CACHE_TIMES.MEDIUM, // 5 minutes cache for stats\n    enabled: !!groupId,\n    ...options,\n  });\n}\n\n/**\n * Check if a user can join a specific group\n *\n * @example\n * const { data: canJoin } = useCanJoinGroup(groupId, userId);\n */\nexport function useCanJoinGroup(\n  groupId: string,\n  userId: string,\n  options?: Partial<UseQueryOptions<boolean, Error>>\n) {\n  return useQuery<boolean, Error>({\n    queryKey: [...GROUPS_KEYS.detail(groupId), 'canJoin', userId],\n    queryFn: () => groupService.canUserJoin(groupId, userId),\n    staleTime: CACHE_TIMES.MEDIUM,\n    enabled: !!groupId && !!userId,\n    ...options,\n  });\n}\n\n/**\n * Check if a user can invite others to a specific group\n *\n * @example\n * const { data: canInvite } = useCanInviteToGroup(groupId, userId);\n */\nexport function useCanInviteToGroup(\n  groupId: string,\n  userId: string,\n  options?: Partial<UseQueryOptions<boolean, Error>>\n) {\n  return useQuery<boolean, Error>({\n    queryKey: [...GROUPS_KEYS.detail(groupId), 'canInvite', userId],\n    queryFn: () => groupService.canUserInvite(groupId, userId),\n    staleTime: CACHE_TIMES.MEDIUM,\n    enabled: !!groupId && !!userId,\n    ...options,\n  });\n}\n\n/**\n * Get all groups with optional filters\n *\n * @example\n * const { data: groups } = useGroups({ category: 'fitness' });\n */\nexport function useGroups(\n  filters?: Record<string, unknown>,\n  options?: Partial<UseQueryOptions<UIGroup[], Error>>\n) {\n  return useQuery<UIGroup[], Error>({\n    queryKey: GROUPS_KEYS.list(JSON.stringify(filters || {})),\n    queryFn: async () => {\n      const domainGroups = await groupService.getPublicGroups();\n      return adaptDomainGroupsToUI(domainGroups);\n    },\n    staleTime: CACHE_TIMES.LONG,\n    ...options,\n  });\n}\n\n/**\n * Search for groups with specific criteria\n *\n * @example\n * const { data: groups } = useGroupSearch({ name: 'fitness' }, 50);\n */\nexport function useGroupSearch(\n  filters: { name?: string; location?: string; category?: string },\n  limit: number = 50,\n  options?: Partial<UseQueryOptions<UIGroup[], Error>>\n) {\n  return useQuery<UIGroup[], Error>({\n    queryKey: [...GROUPS_KEYS.lists(), 'search', filters, limit],\n    queryFn: async () => {\n      // Get all public groups and filter client-side\n      const domainGroups = await groupService.getPublicGroups(limit);\n      const filtered = domainGroups.filter(group => {\n        const matchesName =\n          !filters.name ||\n          group.name.toLowerCase().includes(filters.name.toLowerCase());\n        const matchesLocation =\n          !filters.location ||\n          group.location\n            ?.toLowerCase()\n            .includes(filters.location.toLowerCase());\n        const matchesCategory =\n          !filters.category || group.category === filters.category;\n        return matchesName && matchesLocation && matchesCategory;\n      });\n      return adaptDomainGroupsToUI(filtered);\n    },\n    staleTime: CACHE_TIMES.SHORT,\n    ...options,\n  });\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/services/GroupService.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'UpdateGroupSchema' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 21,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'GroupRoleSchema' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 23,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'GroupInviteSchema' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 24,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'CreateGroupData' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 25,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'UpdateGroupData' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 26,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'GroupMembershipData' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 27,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 27,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'GroupRoleData' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 28,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'GroupInviteData' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 29,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 23
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 8,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Group Service - Application Layer\n *\n * Orchestrates business workflows for groups.\n * Coordinates between repositories and domain services.\n */\n\nimport { Group } from '@/domain/entities/Group';\nimport { GroupRepository } from '@/infrastructure/firebase/repositories/GroupRepository';\nimport { UserRepository } from '@/infrastructure/firebase/repositories/UserRepository';\nimport { SessionRepository } from '@/infrastructure/firebase/repositories/SessionRepository';\nimport { LeaderboardCalculator } from '../domain/LeaderboardCalculator';\nimport {\n  LeaderboardEntry,\n  TimePeriod,\n  GroupStats,\n} from '../types/groups.types';\nimport {\n  validateOrThrow,\n  CreateGroupSchema,\n  UpdateGroupSchema,\n  GroupMembershipSchema,\n  GroupRoleSchema,\n  GroupInviteSchema,\n  type CreateGroupData,\n  type UpdateGroupData,\n  type GroupMembershipData,\n  type GroupRoleData,\n  type GroupInviteData,\n} from '@/lib/validation';\n\n/**\n * Note: For now, we're using direct instantiation.\n * In the future, we can add DI (tsyringe) for better testability.\n */\nexport class GroupService {\n  private readonly groupRepo: GroupRepository;\n  private readonly userRepo: UserRepository;\n  private readonly sessionRepo: SessionRepository;\n  private readonly leaderboardCalc: LeaderboardCalculator;\n\n  constructor() {\n    this.groupRepo = new GroupRepository();\n    this.userRepo = new UserRepository();\n    this.sessionRepo = new SessionRepository();\n    this.leaderboardCalc = new LeaderboardCalculator();\n  }\n\n  /**\n   * Get group details by ID\n   */\n  async getGroupDetails(groupId: string): Promise<Group | null> {\n    return this.groupRepo.findById(groupId);\n  }\n\n  /**\n   * Get groups for a user\n   */\n  async getUserGroups(userId: string, limit?: number): Promise<Group[]> {\n    return this.groupRepo.findByMemberId(userId, limit);\n  }\n\n  /**\n   * Get public groups\n   */\n  async getPublicGroups(limit?: number): Promise<Group[]> {\n    return this.groupRepo.findPublic(limit);\n  }\n\n  /**\n   * Join a group\n   */\n  async joinGroup(data: unknown, userId: string): Promise<void> {\n    // Validate input data\n    const validated = validateOrThrow(GroupMembershipSchema, data);\n\n    // Use validated groupId\n    const groupId = validated.groupId;\n    const group = await this.groupRepo.findById(groupId);\n\n    if (!group) {\n      throw new Error('Group not found');\n    }\n\n    // Business rule: Check if already a member\n    if (group.isMember(userId)) {\n      throw new Error('Already a member of this group');\n    }\n\n    // Create updated group with new member\n    const updatedGroup = group.withAddedMember(userId);\n\n    // Save to repository\n    await this.groupRepo.save(updatedGroup);\n  }\n\n  /**\n   * Leave a group\n   */\n  async leaveGroup(data: unknown, userId: string): Promise<void> {\n    // Validate input data\n    const validated = validateOrThrow(GroupMembershipSchema, data);\n\n    // Use validated groupId\n    const groupId = validated.groupId;\n    const group = await this.groupRepo.findById(groupId);\n\n    if (!group) {\n      throw new Error('Group not found');\n    }\n\n    // Business rule: Check if member\n    if (!group.isMember(userId)) {\n      throw new Error('Not a member of this group');\n    }\n\n    // Business rule: Owner cannot leave\n    if (group.isOwner(userId)) {\n      throw new Error(\n        'Group owner cannot leave. Please delete the group or transfer ownership first.'\n      );\n    }\n\n    // Create updated group with member removed\n    const updatedGroup = group.withRemovedMember(userId);\n\n    // Save to repository\n    await this.groupRepo.save(updatedGroup);\n  }\n\n  /**\n   * Get group leaderboard\n   */\n  async getGroupLeaderboard(\n    groupId: string,\n    period: TimePeriod\n  ): Promise<LeaderboardEntry[]> {\n    const group = await this.groupRepo.findById(groupId);\n\n    if (!group) {\n      throw new Error('Group not found');\n    }\n\n    // Fetch all members (convert readonly array to mutable)\n    const memberIds = Array.from(group.memberIds);\n    const users = await this.userRepo.findByIds(memberIds);\n\n    // Calculate date range based on period\n    const dateRange = this.getDateRangeForPeriod(period);\n\n    // Fetch sessions for all group members in the date range\n    const sessions = await this.sessionRepo.findByUserIds(memberIds, {\n      groupId: groupId,\n      startDate: dateRange.start,\n      endDate: dateRange.end,\n    });\n\n    // Calculate leaderboard using domain service\n    return this.leaderboardCalc.calculate(users, sessions, period);\n  }\n\n  /**\n   * Helper method to get date range for a time period\n   */\n  private getDateRangeForPeriod(period: TimePeriod): {\n    start: Date;\n    end: Date;\n  } {\n    const now = new Date();\n    const end = now;\n    let start: Date;\n\n    switch (period) {\n      case 'today':\n        start = new Date(now);\n        start.setHours(0, 0, 0, 0);\n        break;\n\n      case 'week':\n        start = new Date(now);\n        start.setDate(start.getDate() - 7);\n        break;\n\n      case 'month':\n        start = new Date(now);\n        start.setMonth(start.getMonth() - 1);\n        break;\n\n      case 'all-time':\n        start = new Date(0); // Beginning of time\n        break;\n\n      default:\n        start = new Date(now);\n        start.setDate(start.getDate() - 7);\n    }\n\n    return { start, end };\n  }\n\n  /**\n   * Get group stats\n   */\n  async getGroupStats(groupId: string): Promise<GroupStats> {\n    const group = await this.groupRepo.findById(groupId);\n\n    if (!group) {\n      throw new Error('Group not found');\n    }\n\n    // Fetch all sessions for this group\n    const allSessions = await this.sessionRepo.findByGroupId(groupId, 1000);\n\n    // Calculate total hours\n    const totalSeconds = allSessions.reduce(\n      (sum, session) => sum + session.duration,\n      0\n    );\n    const totalHours = totalSeconds / 3600;\n\n    // Get sessions from the last week\n    const weekAgo = new Date();\n    weekAgo.setDate(weekAgo.getDate() - 7);\n    const recentSessions = allSessions.filter(s => s.createdAt >= weekAgo);\n\n    // Count unique active members this week\n    const activeMemberIds = new Set(recentSessions.map(s => s.userId));\n\n    return {\n      memberCount: group.getMemberCount(),\n      totalSessions: allSessions.length,\n      totalHours: Math.round(totalHours * 10) / 10, // Round to 1 decimal\n      activeMembersThisWeek: activeMemberIds.size,\n    };\n  }\n\n  /**\n   * Check if user can join group\n   */\n  async canUserJoin(groupId: string, userId: string): Promise<boolean> {\n    const group = await this.groupRepo.findById(groupId);\n\n    if (!group) {\n      return false;\n    }\n\n    // Cannot join if already a member\n    if (group.isMember(userId)) {\n      return false;\n    }\n\n    // Can join if group is public\n    if (group.privacy === 'public') {\n      return true;\n    }\n\n    // For approval-required groups, would need invitation logic\n    return false;\n  }\n\n  /**\n   * Check if user can invite to group\n   */\n  async canUserInvite(groupId: string, userId: string): Promise<boolean> {\n    const group = await this.groupRepo.findById(groupId);\n\n    if (!group) {\n      return false;\n    }\n\n    return group.canUserInvite(userId);\n  }\n\n  /**\n   * Create a new group\n   */\n  async createGroup(data: unknown, userId: string): Promise<Group> {\n    // Validate input data\n    const validated = validateOrThrow(CreateGroupSchema, data);\n\n    // Generate ID for the group\n    const groupId = this.generateGroupId();\n\n    // Create domain group with creator as both member and admin\n    const group = new Group(\n      groupId,\n      validated.name,\n      validated.description,\n      validated.category,\n      validated.privacySetting,\n      [userId], // Creator is first member\n      [userId], // Creator is first admin\n      userId,\n      new Date(),\n      validated.location,\n      validated.imageUrl\n    );\n\n    // Save to repository\n    await this.groupRepo.save(group);\n\n    return group;\n  }\n\n  /**\n   * Generate a unique group ID\n   */\n  private generateGroupId(): string {\n    // Simple ID generation using timestamp + random suffix\n    return `group_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/groups/types/groups.types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/profile/components/OwnProfilePageContent.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 481,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 481,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14438, 14441], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14438, 14441], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 486,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 486,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14700, 14703], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14700, 14703], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Own Profile Page Content Component (Clean Architecture)\n *\n * This component handles the current user's profile presentation logic.\n * Extracted from the route file for better separation of concerns.\n */\n\n'use client';\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useAuth } from '@/hooks/useAuth';\nimport Header from '@/components/HeaderComponent';\nimport MobileHeader from '@/components/MobileHeader';\nimport BottomNavigation from '@/components/BottomNavigation';\nimport Footer from '@/components/Footer';\nimport {\n  useProfileById,\n  useProfileStats,\n  useFollowers,\n  useFollowing,\n} from '@/features/profile/hooks';\nimport { useUserSessions } from '@/features/sessions/hooks';\nimport { useProjects } from '@/features/projects/hooks';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport {\n  Settings,\n  LogOut,\n  Edit,\n  TrendingUp,\n  BarChart3,\n  ChevronDown,\n  BarChart2,\n  MapPin,\n} from 'lucide-react';\nimport {\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  Tooltip,\n  Area,\n  ComposedChart,\n  BarChart,\n  Bar,\n} from 'recharts';\nimport { useSearchParams, useRouter } from 'next/navigation';\nimport Feed from '@/components/Feed';\nimport { ActivityList } from '@/components/ActivityList';\nimport { Activity } from '@/types';\nimport { FollowersList } from '@/features/social/components/FollowersList';\nimport { FollowingList } from '@/features/social/components/FollowingList';\n\ntype ProfileTab =\n  | 'progress'\n  | 'sessions'\n  | 'followers'\n  | 'following'\n  | 'activities';\ntype TimePeriod = '7D' | '2W' | '4W' | '3M' | '1Y';\ntype ChartType = 'bar' | 'line';\n\ninterface ChartDataPoint {\n  name: string;\n  hours: number;\n  sessions: number;\n  avgDuration: number;\n}\n\nexport function OwnProfilePageContent() {\n  const { user, logout } = useAuth();\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const tabParam = searchParams?.get('tab') as ProfileTab | null;\n\n  const [activeTab, setActiveTab] = useState<ProfileTab>(\n    tabParam === 'sessions'\n      ? 'sessions'\n      : tabParam === 'followers'\n        ? 'followers'\n        : tabParam === 'following'\n          ? 'following'\n          : tabParam === 'activities'\n            ? 'activities'\n            : 'progress'\n  );\n  const [timePeriod, setTimePeriod] = useState<TimePeriod>('7D');\n  const [showSettingsMenu, setShowSettingsMenu] = useState(false);\n  const [chartType, setChartType] = useState<ChartType>('line');\n  const [showChartTypeDropdown, setShowChartTypeDropdown] = useState(false);\n  const [selectedActivityId, setSelectedActivityId] = useState<string>('all');\n  const [showActivityDropdown, setShowActivityDropdown] = useState(false);\n\n  // Use new feature hooks for data with automatic caching\n  const { data: sessions = [], isLoading: sessionsLoading } = useUserSessions(\n    user?.id || '',\n    {\n      enabled: !!user?.id,\n    }\n  );\n  const { data: stats = null, isLoading: statsLoading } = useProfileStats(\n    user?.id || '',\n    {\n      enabled: !!user?.id,\n    }\n  );\n  const { data: userProfile = null } = useProfileById(user?.id || '', {\n    enabled: !!user?.id,\n  });\n  const { data: followers = [] } = useFollowers(user?.id || '', {\n    enabled: !!user?.id,\n  });\n  const { data: following = [] } = useFollowing(user?.id || '', {\n    enabled: !!user?.id,\n  });\n  const { data: activities = [] } = useProjects({\n    enabled: !!user?.id,\n  });\n\n  const isLoading = sessionsLoading || statsLoading;\n\n  // Update tab when URL changes\n  useEffect(() => {\n    if (\n      tabParam === 'sessions' ||\n      tabParam === 'progress' ||\n      tabParam === 'followers' ||\n      tabParam === 'following' ||\n      tabParam === 'activities'\n    ) {\n      setActiveTab(tabParam);\n    }\n  }, [tabParam]);\n\n  // Filter sessions based on selected activity\n  const filteredSessions = useMemo(() => {\n    if (selectedActivityId === 'all') return sessions;\n    return sessions.filter(\n      s =>\n        s.activityId === selectedActivityId ||\n        s.projectId === selectedActivityId\n    );\n  }, [sessions, selectedActivityId]);\n\n  // Calculate chart data using useMemo to prevent infinite loop\n  const chartData = useMemo(() => {\n    if (!filteredSessions) return [];\n\n    const now = new Date();\n    const data: ChartDataPoint[] = [];\n\n    if (timePeriod === '7D') {\n      // Last 7 days\n      const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n      for (let i = 6; i >= 0; i--) {\n        const day = new Date(now);\n        day.setDate(day.getDate() - i);\n\n        const daySessions = filteredSessions.filter(\n          s => new Date(s.createdAt).toDateString() === day.toDateString()\n        );\n        const hoursWorked = daySessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          daySessions.length > 0\n            ? daySessions.reduce((sum, s) => sum + s.duration, 0) /\n              daySessions.length /\n              60\n            : 0;\n\n        data.push({\n          name: `${(dayNames[day.getDay()] || 'Day').slice(0, 3)} ${day.getDate()}`,\n          hours: Number(hoursWorked.toFixed(2)),\n          sessions: daySessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    } else if (timePeriod === '2W') {\n      // Last 14 days\n      const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n      for (let i = 13; i >= 0; i--) {\n        const day = new Date(now);\n        day.setDate(day.getDate() - i);\n\n        const daySessions = filteredSessions.filter(\n          s => new Date(s.createdAt).toDateString() === day.toDateString()\n        );\n        const hoursWorked = daySessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          daySessions.length > 0\n            ? daySessions.reduce((sum, s) => sum + s.duration, 0) /\n              daySessions.length /\n              60\n            : 0;\n\n        data.push({\n          name: `${(dayNames[day.getDay()] || 'Day').slice(0, 3)} ${day.getDate()}`,\n          hours: Number(hoursWorked.toFixed(2)),\n          sessions: daySessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    } else if (timePeriod === '4W') {\n      // Last 4 weeks\n      for (let i = 3; i >= 0; i--) {\n        const weekStart = new Date(now);\n        weekStart.setDate(weekStart.getDate() - (i * 7 + 6));\n        const weekEnd = new Date(now);\n        weekEnd.setDate(weekEnd.getDate() - i * 7);\n\n        const weekSessions = filteredSessions.filter(s => {\n          const sessionDate = new Date(s.createdAt);\n          return sessionDate >= weekStart && sessionDate <= weekEnd;\n        });\n        const hoursWorked = weekSessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          weekSessions.length > 0\n            ? weekSessions.reduce((sum, s) => sum + s.duration, 0) /\n              weekSessions.length /\n              60\n            : 0;\n\n        data.push({\n          name: `Week ${4 - i}`,\n          hours: Number(hoursWorked.toFixed(2)),\n          sessions: weekSessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    } else if (timePeriod === '3M') {\n      // Last 3 months\n      const monthNames = [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec',\n      ];\n      for (let i = 2; i >= 0; i--) {\n        const month = new Date(now);\n        month.setMonth(month.getMonth() - i);\n\n        const monthSessions = filteredSessions.filter(s => {\n          const sessionDate = new Date(s.createdAt);\n          return (\n            sessionDate.getMonth() === month.getMonth() &&\n            sessionDate.getFullYear() === month.getFullYear()\n          );\n        });\n        const hoursWorked = monthSessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          monthSessions.length > 0\n            ? monthSessions.reduce((sum, s) => sum + s.duration, 0) /\n              monthSessions.length /\n              60\n            : 0;\n\n        data.push({\n          name: monthNames[month.getMonth()] || 'Month',\n          hours: Number(hoursWorked.toFixed(2)),\n          sessions: monthSessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    } else if (timePeriod === '1Y') {\n      // Last 12 months\n      const monthNames = [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec',\n      ];\n      for (let i = 11; i >= 0; i--) {\n        const month = new Date(now);\n        month.setMonth(month.getMonth() - i);\n\n        const monthSessions = filteredSessions.filter(s => {\n          const sessionDate = new Date(s.createdAt);\n          return (\n            sessionDate.getMonth() === month.getMonth() &&\n            sessionDate.getFullYear() === month.getFullYear()\n          );\n        });\n        const hoursWorked = monthSessions.reduce(\n          (sum, s) => sum + s.duration / 3600,\n          0\n        );\n        const avgDuration =\n          monthSessions.length > 0\n            ? monthSessions.reduce((sum, s) => sum + s.duration, 0) /\n              monthSessions.length /\n              60\n            : 0;\n\n        data.push({\n          name: monthNames[month.getMonth()] || 'Month',\n          hours: Number(hoursWorked.toFixed(2)),\n          sessions: monthSessions.length,\n          avgDuration: Math.round(avgDuration),\n        });\n      }\n    }\n\n    return data;\n  }, [filteredSessions, timePeriod]);\n\n  // Calculate stats with percentage changes\n  const calculatedStats = useMemo(() => {\n    const now = new Date();\n\n    // Helper to get date range based on time period\n    const getDateRange = (period: TimePeriod) => {\n      const end = new Date(now);\n      const start = new Date(now);\n\n      switch (period) {\n        case '7D':\n          start.setDate(now.getDate() - 7);\n          break;\n        case '2W':\n          start.setDate(now.getDate() - 14);\n          break;\n        case '4W':\n          start.setDate(now.getDate() - 28);\n          break;\n        case '3M':\n          start.setMonth(now.getMonth() - 3);\n          break;\n        case '1Y':\n          start.setFullYear(now.getFullYear() - 1);\n          break;\n      }\n\n      return { start, end };\n    };\n\n    // Get current and previous period ranges\n    const currentRange = getDateRange(timePeriod);\n    const previousStart = new Date(currentRange.start);\n    const periodLength =\n      currentRange.end.getTime() - currentRange.start.getTime();\n    previousStart.setTime(previousStart.getTime() - periodLength);\n\n    // Filter sessions for current period\n    const currentPeriodSessions = filteredSessions.filter(s => {\n      const sessionDate = new Date(s.createdAt);\n      return (\n        sessionDate >= currentRange.start && sessionDate <= currentRange.end\n      );\n    });\n\n    // Filter sessions for previous period\n    const previousPeriodSessions = filteredSessions.filter(s => {\n      const sessionDate = new Date(s.createdAt);\n      return sessionDate >= previousStart && sessionDate < currentRange.start;\n    });\n\n    // Calculate current period stats\n    const currentHours = currentPeriodSessions.reduce(\n      (sum, s) => sum + s.duration / 3600,\n      0\n    );\n    const currentSessionCount = currentPeriodSessions.length;\n    const currentAvgDuration =\n      currentSessionCount > 0\n        ? currentPeriodSessions.reduce((sum, s) => sum + s.duration, 0) /\n          currentSessionCount /\n          60\n        : 0;\n\n    const currentActiveDays = new Set(\n      currentPeriodSessions.map(s => new Date(s.createdAt).toDateString())\n    ).size;\n\n    // Calculate previous period stats\n    const previousHours = previousPeriodSessions.reduce(\n      (sum, s) => sum + s.duration / 3600,\n      0\n    );\n    const previousSessionCount = previousPeriodSessions.length;\n    const previousAvgDuration =\n      previousSessionCount > 0\n        ? previousPeriodSessions.reduce((sum, s) => sum + s.duration, 0) /\n          previousSessionCount /\n          60\n        : 0;\n\n    const previousActiveDays = new Set(\n      previousPeriodSessions.map(s => new Date(s.createdAt).toDateString())\n    ).size;\n\n    // Calculate percentage changes\n    const calculateChange = (\n      current: number,\n      previous: number\n    ): number | null => {\n      if (previous === 0) return null; // No previous data\n      return ((current - previous) / previous) * 100;\n    };\n\n    const hoursChange = calculateChange(currentHours, previousHours);\n    const sessionsChange = calculateChange(\n      currentSessionCount,\n      previousSessionCount\n    );\n    const avgDurationChange = calculateChange(\n      currentAvgDuration,\n      previousAvgDuration\n    );\n    const activeDaysChange = calculateChange(\n      currentActiveDays,\n      previousActiveDays\n    );\n\n    return {\n      totalHours: currentHours,\n      sessions: currentSessionCount,\n      avgDuration: Math.round(currentAvgDuration),\n      currentStreak: stats?.currentStreak || 0,\n      longestStreak: stats?.longestStreak || 0,\n      activeDays: currentActiveDays,\n      activities: activities?.length || 0,\n\n      // Percentage changes\n      hoursChange,\n      sessionsChange,\n      avgDurationChange,\n      activeDaysChange,\n      activitiesChange: null, // Activities count doesn't have time-based comparison\n      streakChange: null, // Streaks don't have meaningful percentage changes\n    };\n  }, [filteredSessions, stats, activities, timePeriod]);\n\n  // Average duration over time data - extract from chartData\n  const avgDurationData = useMemo(() => {\n    return chartData.map(d => ({ name: d.name, value: d.avgDuration }));\n  }, [chartData]);\n\n  // Helper to render percentage change\n  const renderPercentageChange = (change: number | null) => {\n    if (change === null) return null;\n\n    const isPositive = change >= 0;\n    const formattedChange = Math.abs(change).toFixed(0);\n\n    return (\n      <div\n        className={`text-sm ${isPositive ? 'text-green-600' : 'text-red-600'}`}\n      >\n        {isPositive ? '↑' : '↓'} {formattedChange}%\n      </div>\n    );\n  };\n\n  // Custom tooltip formatter\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white border border-gray-200 rounded-lg shadow-lg p-3\">\n          <p className=\"text-sm font-medium text-gray-900 mb-2\">{label}</p>\n          {payload.map((entry: any, index: number) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              <span className=\"font-semibold\">{entry.name}</span>: {entry.value}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const handleEditActivity = (activity: Activity) => {\n    router.push(`/activities/${activity.id}/edit`);\n  };\n\n  if (!user) return null;\n\n  return (\n    <>\n      <div className=\"min-h-screen bg-white md:bg-gray-50\">\n        {/* Desktop Header */}\n        <div className=\"hidden md:block\">\n          <Header />\n        </div>\n\n        {/* Mobile Header */}\n        <div className=\"md:hidden\">\n          <MobileHeader title=\"My Profile\" />\n        </div>\n\n        {/* Content */}\n        <div className=\"pb-32 md:pb-8\">\n          <div className=\"max-w-7xl mx-auto px-4 md:px-6 lg:px-8 py-6\">\n            <div className=\"max-w-4xl mx-auto\">\n              {/* Profile Card with This Week Stats */}\n              <div className=\"bg-gray-50 md:rounded-xl md:border border-gray-200 p-3 md:p-6 mb-4 md:mb-6 relative\">\n                {/* Settings Icon */}\n                <div className=\"absolute top-3 md:top-4 right-3 md:right-4 z-10\">\n                  <div className=\"relative\">\n                    <button\n                      onClick={() => setShowSettingsMenu(!showSettingsMenu)}\n                      className=\"p-1.5 md:p-2 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded-full transition-colors focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-offset-2\"\n                      aria-label=\"Open settings menu\"\n                      aria-expanded={showSettingsMenu}\n                      aria-haspopup=\"true\"\n                    >\n                      <Settings className=\"w-4 h-4 md:w-5 md:h-5\" />\n                    </button>\n\n                    {/* Settings Dropdown */}\n                    {showSettingsMenu && (\n                      <div className=\"absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-10\">\n                        <Link\n                          href=\"/settings\"\n                          className=\"block px-4 py-2 text-sm text-gray-900 hover:bg-gray-50 transition-colors\"\n                          onClick={() => setShowSettingsMenu(false)}\n                        >\n                          Settings\n                        </Link>\n                        <hr className=\"my-2 border-gray-200\" />\n                        <button\n                          onClick={() => {\n                            setShowSettingsMenu(false);\n                            logout();\n                          }}\n                          className=\"w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors flex items-center gap-2\"\n                        >\n                          <LogOut className=\"w-4 h-4\" />\n                          Log Out\n                        </button>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Responsive Layout - Stacks on mobile, side-by-side on desktop */}\n                <div className=\"flex flex-col md:flex-row md:gap-8\">\n                  {/* Left Column - Profile Info */}\n                  <div className=\"flex-1\">\n                    {/* Profile Picture */}\n                    {user.profilePicture || userProfile?.profilePicture ? (\n                      <div className=\"w-20 h-20 md:w-32 md:h-32 rounded-full overflow-hidden ring-4 ring-white shadow-md mb-3 md:mb-4\">\n                        <Image\n                          src={\n                            userProfile?.profilePicture ||\n                            user.profilePicture ||\n                            ''\n                          }\n                          alt={user.name}\n                          width={128}\n                          height={128}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      </div>\n                    ) : (\n                      <div className=\"w-20 h-20 md:w-32 md:h-32 bg-[#FC4C02] rounded-full flex items-center justify-center ring-4 ring-white shadow-md mb-3 md:mb-4\">\n                        <span className=\"text-white font-bold text-2xl md:text-4xl\">\n                          {user.name.charAt(0).toUpperCase()}\n                        </span>\n                      </div>\n                    )}\n\n                    {/* Name and Username */}\n                    <h1 className=\"text-lg md:text-2xl font-bold text-gray-900\">\n                      {user.name}\n                    </h1>\n                    <p className=\"text-gray-600 text-sm md:text-base mb-2 md:mb-3\">\n                      @{user.username}\n                    </p>\n\n                    {/* Bio */}\n                    {(userProfile?.bio || user.bio) && (\n                      <p className=\"text-gray-700 mb-2 md:mb-3 text-sm md:text-base leading-snug\">\n                        {userProfile?.bio || user.bio}\n                      </p>\n                    )}\n\n                    {/* Location */}\n                    {(userProfile?.location || user.location) && (\n                      <p className=\"text-gray-500 text-xs md:text-sm mb-3 md:mb-4 flex items-center gap-1\">\n                        <MapPin\n                          className=\"w-3 h-3 md:w-4 md:h-4\"\n                          aria-hidden=\"true\"\n                        />\n                        {userProfile?.location || user.location}\n                      </p>\n                    )}\n\n                    {/* Edit Profile Button */}\n                    <Link\n                      href=\"/settings\"\n                      className=\"inline-flex items-center gap-2 mb-3 md:mb-4 px-3 md:px-4 py-2 md:py-2.5 bg-gray-100 text-gray-700 hover:bg-gray-200 rounded-lg transition-colors font-semibold text-xs md:text-sm\"\n                    >\n                      <Edit className=\"w-3.5 h-3.5 md:w-4 md:h-4\" />\n                      Edit Profile\n                    </Link>\n\n                    {/* Follower/Following Counts */}\n                    <div className=\"flex gap-4 md:gap-6 mb-4 md:mb-0\">\n                      <button\n                        onClick={() => {\n                          setActiveTab('followers');\n                          router.push('/profile?tab=followers');\n                        }}\n                        className=\"hover:underline focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-offset-2 rounded px-1\"\n                        aria-label={`View ${followers.length} followers`}\n                      >\n                        <span className=\"font-bold text-gray-900 text-sm md:text-base\">\n                          {followers.length}\n                        </span>{' '}\n                        <span className=\"text-gray-600 text-xs md:text-sm\">\n                          Followers\n                        </span>\n                      </button>\n                      <button\n                        onClick={() => {\n                          setActiveTab('following');\n                          router.push('/profile?tab=following');\n                        }}\n                        className=\"hover:underline focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-offset-2 rounded px-1\"\n                        aria-label={`View ${following.length} following`}\n                      >\n                        <span className=\"font-bold text-gray-900 text-sm md:text-base\">\n                          {following.length}\n                        </span>{' '}\n                        <span className=\"text-gray-600 text-xs md:text-sm\">\n                          Following\n                        </span>\n                      </button>\n                    </div>\n                  </div>\n\n                  {/* Right Column - This Week Stats */}\n                  <div className=\"md:w-64 border-t md:border-t-0 md:border-l border-gray-200 pt-4 md:pt-0 md:pl-8\">\n                    <div className=\"flex items-center gap-2 mb-3 md:mb-4\">\n                      <BarChart2\n                        className=\"w-4 h-4 md:w-5 md:h-5 text-[#FC4C02]\"\n                        aria-hidden=\"true\"\n                      />\n                      <h2 className=\"text-sm md:text-base font-bold\">\n                        This week\n                      </h2>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 md:grid-cols-1 gap-3 md:gap-4 md:space-y-0\">\n                      <div>\n                        <div className=\"text-[10px] md:text-xs text-gray-600 uppercase tracking-wide\">\n                          Time\n                        </div>\n                        <div className=\"text-lg md:text-2xl font-bold\">\n                          {stats?.weeklyHours?.toFixed(1) || 0}h\n                        </div>\n                      </div>\n                      <div>\n                        <div className=\"text-[10px] md:text-xs text-gray-600 uppercase tracking-wide\">\n                          Sessions\n                        </div>\n                        <div className=\"text-lg md:text-2xl font-bold\">\n                          {stats?.sessionsThisWeek || 0}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Tabs */}\n              <div className=\"sticky top-12 md:top-14 bg-white md:bg-gray-50 z-30 -mx-4 md:mx-0\">\n                <div className=\"bg-white md:bg-gray-50 border-b border-gray-200\">\n                  <div\n                    className=\"flex md:gap-8 px-4 md:px-0 overflow-x-auto scrollbar-hide\"\n                    role=\"tablist\"\n                    aria-label=\"Profile sections\"\n                  >\n                    <button\n                      onClick={() => {\n                        setActiveTab('progress');\n                        router.push('/profile?tab=progress');\n                      }}\n                      className={`flex-1 md:flex-initial py-3 md:py-4 px-1 text-sm md:text-base font-medium border-b-2 transition-colors whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-offset-2 ${\n                        activeTab === 'progress'\n                          ? 'border-[#007AFF] text-[#007AFF]'\n                          : 'border-transparent text-gray-500 md:text-gray-600 hover:text-gray-700 md:hover:text-gray-900'\n                      }`}\n                      role=\"tab\"\n                      aria-selected={activeTab === 'progress'}\n                      aria-controls=\"progress-panel\"\n                      id=\"progress-tab\"\n                    >\n                      Progress\n                    </button>\n                    <button\n                      onClick={() => {\n                        setActiveTab('sessions');\n                        router.push('/profile?tab=sessions');\n                      }}\n                      className={`flex-1 md:flex-initial py-3 md:py-4 px-1 text-sm md:text-base font-medium border-b-2 transition-colors whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-offset-2 ${\n                        activeTab === 'sessions'\n                          ? 'border-[#007AFF] text-[#007AFF]'\n                          : 'border-transparent text-gray-500 md:text-gray-600 hover:text-gray-700 md:hover:text-gray-900'\n                      }`}\n                      role=\"tab\"\n                      aria-selected={activeTab === 'sessions'}\n                      aria-controls=\"sessions-panel\"\n                      id=\"sessions-tab\"\n                    >\n                      Sessions\n                    </button>\n                    {/* Activities tab - Desktop only */}\n                    <button\n                      onClick={() => {\n                        setActiveTab('activities');\n                        router.push('/profile?tab=activities');\n                      }}\n                      className={`hidden md:flex flex-1 md:flex-initial py-3 md:py-4 px-1 text-sm md:text-base font-medium border-b-2 transition-colors whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-offset-2 ${\n                        activeTab === 'activities'\n                          ? 'border-[#007AFF] text-[#007AFF]'\n                          : 'border-transparent text-gray-500 md:text-gray-600 hover:text-gray-700 md:hover:text-gray-900'\n                      }`}\n                      role=\"tab\"\n                      aria-selected={activeTab === 'activities'}\n                      aria-controls=\"activities-panel\"\n                      id=\"activities-tab\"\n                    >\n                      Activities\n                    </button>\n                    <button\n                      onClick={() => {\n                        setActiveTab('followers');\n                        router.push('/profile?tab=followers');\n                      }}\n                      className={`flex-1 md:flex-initial py-3 md:py-4 px-1 text-sm md:text-base font-medium border-b-2 transition-colors whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-offset-2 ${\n                        activeTab === 'followers'\n                          ? 'border-[#007AFF] text-[#007AFF]'\n                          : 'border-transparent text-gray-500 md:text-gray-600 hover:text-gray-700 md:hover:text-gray-900'\n                      }`}\n                      role=\"tab\"\n                      aria-selected={activeTab === 'followers'}\n                      aria-controls=\"followers-panel\"\n                      id=\"followers-tab\"\n                    >\n                      Followers\n                    </button>\n                    <button\n                      onClick={() => {\n                        setActiveTab('following');\n                        router.push('/profile?tab=following');\n                      }}\n                      className={`flex-1 md:flex-initial py-3 md:py-4 px-1 text-sm md:text-base font-medium border-b-2 transition-colors whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-offset-2 ${\n                        activeTab === 'following'\n                          ? 'border-[#007AFF] text-[#007AFF]'\n                          : 'border-transparent text-gray-500 md:text-gray-600 hover:text-gray-700 md:hover:text-gray-900'\n                      }`}\n                      role=\"tab\"\n                      aria-selected={activeTab === 'following'}\n                      aria-controls=\"following-panel\"\n                      id=\"following-tab\"\n                    >\n                      Following\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              {/* Tab Content */}\n              <div className=\"mt-6\">\n                {activeTab === 'progress' && (\n                  <div className=\"max-w-4xl mx-auto space-y-4 md:space-y-6\">\n                    {/* Header with Time Period Selector and Chart Type */}\n                    <div className=\"flex items-center justify-between gap-2 py-2 -mx-4 px-4 md:mx-0 md:px-0\">\n                      {/* Activity Filter Dropdown */}\n                      <div className=\"relative flex-shrink-0\">\n                        <button\n                          onClick={() =>\n                            setShowActivityDropdown(!showActivityDropdown)\n                          }\n                          className=\"flex items-center gap-1.5 px-3 py-1.5 text-sm text-gray-700 bg-white border border-gray-300 rounded-full hover:bg-gray-50 transition-colors whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-offset-2 min-h-[44px]\"\n                          aria-label=\"Filter by activity\"\n                          aria-expanded={showActivityDropdown}\n                          aria-haspopup=\"listbox\"\n                        >\n                          <span className=\"font-medium\">\n                            {selectedActivityId === 'all'\n                              ? 'All'\n                              : activities.find(\n                                  a => a.id === selectedActivityId\n                                )?.name || 'All'}\n                          </span>\n                          <ChevronDown className=\"w-3.5 h-3.5\" />\n                        </button>\n\n                        {/* Activity Dropdown Menu */}\n                        {showActivityDropdown && (\n                          <>\n                            {/* Backdrop to close dropdown */}\n                            <div\n                              className=\"fixed inset-0 z-40\"\n                              onClick={() => setShowActivityDropdown(false)}\n                            />\n                            <div className=\"absolute left-0 top-full mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50 max-h-64 overflow-y-auto\">\n                              <button\n                                onClick={() => {\n                                  setSelectedActivityId('all');\n                                  setShowActivityDropdown(false);\n                                }}\n                                className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 transition-colors flex items-center gap-2 ${\n                                  selectedActivityId === 'all'\n                                    ? 'text-[#007AFF] font-medium bg-blue-50'\n                                    : 'text-gray-700'\n                                }`}\n                              >\n                                {selectedActivityId === 'all' && (\n                                  <span className=\"text-[#007AFF]\">✓</span>\n                                )}\n                                <span>All Activities</span>\n                              </button>\n                              {activities.map(activity => (\n                                <button\n                                  key={activity.id}\n                                  onClick={() => {\n                                    setSelectedActivityId(activity.id);\n                                    setShowActivityDropdown(false);\n                                  }}\n                                  className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 transition-colors flex items-center gap-2 ${\n                                    selectedActivityId === activity.id\n                                      ? 'text-[#007AFF] font-medium bg-blue-50'\n                                      : 'text-gray-700'\n                                  }`}\n                                >\n                                  {selectedActivityId === activity.id && (\n                                    <span className=\"text-[#007AFF]\">✓</span>\n                                  )}\n                                  <span className=\"flex items-center gap-2\">\n                                    <span style={{ color: activity.color }}>\n                                      ●\n                                    </span>\n                                    {activity.name}\n                                  </span>\n                                </button>\n                              ))}\n                            </div>\n                          </>\n                        )}\n                      </div>\n\n                      {/* Time Period Buttons - Scrollable on mobile */}\n                      <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n                        <div className=\"overflow-x-auto flex items-center gap-1.5 md:gap-2 flex-1 scrollbar-hide\">\n                          {(['7D', '2W', '4W', '3M', '1Y'] as TimePeriod[]).map(\n                            period => (\n                              <button\n                                key={period}\n                                onClick={() => setTimePeriod(period)}\n                                className={`px-3 md:px-4 py-1.5 md:py-2 text-xs md:text-sm font-medium rounded-full transition-colors whitespace-nowrap flex-shrink-0 focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-offset-2 min-h-[44px] ${\n                                  timePeriod === period\n                                    ? 'bg-gray-900 text-white'\n                                    : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'\n                                }`}\n                                aria-label={`Show ${period} time period`}\n                                aria-pressed={timePeriod === period}\n                              >\n                                {period}\n                              </button>\n                            )\n                          )}\n                        </div>\n\n                        {/* Chart Type Selector */}\n                        <div className=\"relative flex-shrink-0\">\n                          <button\n                            onClick={() =>\n                              setShowChartTypeDropdown(!showChartTypeDropdown)\n                            }\n                            className=\"flex items-center gap-1 px-2 md:px-3 py-1.5 md:py-2 text-xs md:text-sm text-gray-700 bg-white border border-gray-300 rounded-full hover:bg-gray-50 transition-colors whitespace-nowrap focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:ring-offset-2 min-h-[44px]\"\n                            aria-label={`Chart type: ${chartType}`}\n                            aria-expanded={showChartTypeDropdown}\n                            aria-haspopup=\"listbox\"\n                          >\n                            {chartType === 'bar' ? (\n                              <BarChart3\n                                className=\"w-3.5 h-3.5 md:w-4 md:h-4\"\n                                aria-hidden=\"true\"\n                              />\n                            ) : (\n                              <TrendingUp\n                                className=\"w-3.5 h-3.5 md:w-4 md:h-4\"\n                                aria-hidden=\"true\"\n                              />\n                            )}\n                            <span className=\"capitalize hidden sm:inline\">\n                              {chartType}\n                            </span>\n                            <ChevronDown\n                              className=\"w-3 h-3\"\n                              aria-hidden=\"true\"\n                            />\n                          </button>\n\n                          {/* Chart Type Dropdown */}\n                          {showChartTypeDropdown && (\n                            <>\n                              {/* Backdrop to close dropdown */}\n                              <div\n                                className=\"fixed inset-0 z-40\"\n                                onClick={() => setShowChartTypeDropdown(false)}\n                              />\n                              <div className=\"absolute right-0 mt-2 w-32 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50\">\n                                <button\n                                  onClick={() => {\n                                    setChartType('bar');\n                                    setShowChartTypeDropdown(false);\n                                  }}\n                                  className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 transition-colors flex items-center gap-2 ${\n                                    chartType === 'bar'\n                                      ? 'text-[#007AFF] font-medium'\n                                      : 'text-gray-700'\n                                  }`}\n                                >\n                                  {chartType === 'bar' && (\n                                    <span className=\"text-[#007AFF]\">✓</span>\n                                  )}\n                                  <BarChart3 className=\"w-4 h-4\" />\n                                  Bar\n                                </button>\n                                <button\n                                  onClick={() => {\n                                    setChartType('line');\n                                    setShowChartTypeDropdown(false);\n                                  }}\n                                  className={`w-full text-left px-4 py-2 text-sm hover:bg-gray-50 transition-colors flex items-center gap-2 ${\n                                    chartType === 'line'\n                                      ? 'text-[#007AFF] font-medium'\n                                      : 'text-gray-700'\n                                  }`}\n                                >\n                                  {chartType === 'line' && (\n                                    <span className=\"text-[#007AFF]\">✓</span>\n                                  )}\n                                  <TrendingUp className=\"w-4 h-4\" />\n                                  Line\n                                </button>\n                              </div>\n                            </>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Main Chart */}\n                    <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                      <div className=\"mb-4\">\n                        <h3 className=\"font-semibold text-gray-900\">\n                          Hours completed\n                        </h3>\n                      </div>\n                      <div className=\"h-72\">\n                        {isLoading ? (\n                          <div className=\"h-full bg-gray-50 rounded animate-pulse\" />\n                        ) : (\n                          <ResponsiveContainer width=\"100%\" height=\"100%\">\n                            {chartType === 'bar' ? (\n                              <BarChart\n                                data={chartData}\n                                margin={{\n                                  top: 10,\n                                  right: 10,\n                                  left: -20,\n                                  bottom: 0,\n                                }}\n                              >\n                                <XAxis\n                                  dataKey=\"name\"\n                                  tick={{ fontSize: 12, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                />\n                                <YAxis\n                                  tick={{ fontSize: 12, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                  width={40}\n                                />\n                                <Tooltip content={<CustomTooltip />} />\n                                <Bar\n                                  dataKey=\"hours\"\n                                  fill=\"#007AFF\"\n                                  radius={[4, 4, 0, 0]}\n                                  name=\"Hours\"\n                                />\n                              </BarChart>\n                            ) : (\n                              <ComposedChart\n                                data={chartData}\n                                margin={{\n                                  top: 10,\n                                  right: 10,\n                                  left: -20,\n                                  bottom: 0,\n                                }}\n                              >\n                                <defs>\n                                  <linearGradient\n                                    id=\"colorHours\"\n                                    x1=\"0\"\n                                    y1=\"0\"\n                                    x2=\"0\"\n                                    y2=\"1\"\n                                  >\n                                    <stop\n                                      offset=\"5%\"\n                                      stopColor=\"#007AFF\"\n                                      stopOpacity={0.3}\n                                    />\n                                    <stop\n                                      offset=\"95%\"\n                                      stopColor=\"#007AFF\"\n                                      stopOpacity={0}\n                                    />\n                                  </linearGradient>\n                                </defs>\n                                <XAxis\n                                  dataKey=\"name\"\n                                  tick={{ fontSize: 12, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                />\n                                <YAxis\n                                  tick={{ fontSize: 12, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                  width={40}\n                                />\n                                <Tooltip content={<CustomTooltip />} />\n                                <Area\n                                  type=\"monotone\"\n                                  dataKey=\"hours\"\n                                  stroke=\"#007AFF\"\n                                  strokeWidth={2}\n                                  fill=\"url(#colorHours)\"\n                                  name=\"Hours\"\n                                />\n                              </ComposedChart>\n                            )}\n                          </ResponsiveContainer>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Second Row - Two Charts */}\n                    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                      {/* Average Session Duration */}\n                      <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                        <div className=\"mb-4\">\n                          <h3 className=\"font-semibold text-gray-900\">\n                            Average session duration\n                          </h3>\n                        </div>\n                        <div className=\"h-48\">\n                          <ResponsiveContainer width=\"100%\" height=\"100%\">\n                            {chartType === 'bar' ? (\n                              <BarChart\n                                data={avgDurationData}\n                                margin={{\n                                  top: 5,\n                                  right: 5,\n                                  left: -30,\n                                  bottom: 0,\n                                }}\n                              >\n                                <XAxis\n                                  dataKey=\"name\"\n                                  tick={{ fontSize: 11, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                />\n                                <YAxis\n                                  tick={{ fontSize: 11, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                />\n                                <Tooltip content={<CustomTooltip />} />\n                                <Bar\n                                  dataKey=\"value\"\n                                  fill=\"#34C759\"\n                                  radius={[4, 4, 0, 0]}\n                                  name=\"Minutes\"\n                                />\n                              </BarChart>\n                            ) : (\n                              <ComposedChart\n                                data={avgDurationData}\n                                margin={{\n                                  top: 5,\n                                  right: 5,\n                                  left: -30,\n                                  bottom: 0,\n                                }}\n                              >\n                                <defs>\n                                  <linearGradient\n                                    id=\"colorAvgDuration\"\n                                    x1=\"0\"\n                                    y1=\"0\"\n                                    x2=\"0\"\n                                    y2=\"1\"\n                                  >\n                                    <stop\n                                      offset=\"5%\"\n                                      stopColor=\"#34C759\"\n                                      stopOpacity={0.3}\n                                    />\n                                    <stop\n                                      offset=\"95%\"\n                                      stopColor=\"#34C759\"\n                                      stopOpacity={0}\n                                    />\n                                  </linearGradient>\n                                </defs>\n                                <XAxis\n                                  dataKey=\"name\"\n                                  tick={{ fontSize: 11, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                />\n                                <YAxis\n                                  tick={{ fontSize: 11, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                />\n                                <Tooltip content={<CustomTooltip />} />\n                                <Area\n                                  type=\"monotone\"\n                                  dataKey=\"value\"\n                                  stroke=\"#34C759\"\n                                  strokeWidth={2}\n                                  fill=\"url(#colorAvgDuration)\"\n                                  name=\"Minutes\"\n                                />\n                              </ComposedChart>\n                            )}\n                          </ResponsiveContainer>\n                        </div>\n                      </div>\n\n                      {/* Sessions */}\n                      <div className=\"bg-white border border-gray-200 rounded-xl p-6\">\n                        <div className=\"mb-4\">\n                          <h3 className=\"font-semibold text-gray-900\">\n                            Sessions completed\n                          </h3>\n                        </div>\n                        <div className=\"h-48\">\n                          <ResponsiveContainer width=\"100%\" height=\"100%\">\n                            {chartType === 'bar' ? (\n                              <BarChart\n                                data={chartData}\n                                margin={{\n                                  top: 5,\n                                  right: 5,\n                                  left: -30,\n                                  bottom: 0,\n                                }}\n                              >\n                                <XAxis\n                                  dataKey=\"name\"\n                                  tick={{ fontSize: 11, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                />\n                                <YAxis\n                                  tick={{ fontSize: 11, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                />\n                                <Tooltip content={<CustomTooltip />} />\n                                <Bar\n                                  dataKey=\"sessions\"\n                                  fill=\"#34C759\"\n                                  radius={[4, 4, 0, 0]}\n                                  name=\"Sessions\"\n                                />\n                              </BarChart>\n                            ) : (\n                              <ComposedChart\n                                data={chartData}\n                                margin={{\n                                  top: 5,\n                                  right: 5,\n                                  left: -30,\n                                  bottom: 0,\n                                }}\n                              >\n                                <defs>\n                                  <linearGradient\n                                    id=\"colorSessionsSmall\"\n                                    x1=\"0\"\n                                    y1=\"0\"\n                                    x2=\"0\"\n                                    y2=\"1\"\n                                  >\n                                    <stop\n                                      offset=\"5%\"\n                                      stopColor=\"#34C759\"\n                                      stopOpacity={0.3}\n                                    />\n                                    <stop\n                                      offset=\"95%\"\n                                      stopColor=\"#34C759\"\n                                      stopOpacity={0}\n                                    />\n                                  </linearGradient>\n                                </defs>\n                                <XAxis\n                                  dataKey=\"name\"\n                                  tick={{ fontSize: 11, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                />\n                                <YAxis\n                                  tick={{ fontSize: 11, fill: '#666' }}\n                                  axisLine={false}\n                                  tickLine={false}\n                                />\n                                <Tooltip content={<CustomTooltip />} />\n                                <Area\n                                  type=\"monotone\"\n                                  dataKey=\"sessions\"\n                                  stroke=\"#34C759\"\n                                  strokeWidth={2}\n                                  fill=\"url(#colorSessionsSmall)\"\n                                  name=\"Sessions\"\n                                />\n                              </ComposedChart>\n                            )}\n                          </ResponsiveContainer>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Stats Grid - 5 columns */}\n                    <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n                      <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                        <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                          Total Hours\n                        </div>\n                        <div className=\"text-2xl font-bold mb-1\">\n                          {calculatedStats.totalHours.toFixed(1)}\n                        </div>\n                        {renderPercentageChange(calculatedStats.hoursChange)}\n                      </div>\n\n                      <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                        <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                          Avg Duration\n                        </div>\n                        <div className=\"text-2xl font-bold mb-1\">\n                          {calculatedStats.avgDuration}m\n                        </div>\n                        {renderPercentageChange(\n                          calculatedStats.avgDurationChange\n                        )}\n                      </div>\n\n                      <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                        <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                          Sessions\n                        </div>\n                        <div className=\"text-2xl font-bold mb-1\">\n                          {calculatedStats.sessions}\n                        </div>\n                        {renderPercentageChange(calculatedStats.sessionsChange)}\n                      </div>\n\n                      <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                        <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                          Active Days\n                        </div>\n                        <div className=\"text-2xl font-bold mb-1\">\n                          {calculatedStats.activeDays}\n                        </div>\n                        {renderPercentageChange(\n                          calculatedStats.activeDaysChange\n                        )}\n                      </div>\n\n                      <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                        <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                          Activities\n                        </div>\n                        <div className=\"text-2xl font-bold mb-1\">\n                          {calculatedStats.activities}\n                        </div>\n                        {renderPercentageChange(\n                          calculatedStats.activitiesChange\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Secondary Stats Grid - Streaks */}\n                    <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n                      <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                        <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                          Current Streak\n                        </div>\n                        <div className=\"text-2xl font-bold mb-1\">\n                          {calculatedStats.currentStreak}\n                        </div>\n                        {renderPercentageChange(calculatedStats.streakChange)}\n                      </div>\n\n                      <div className=\"bg-white border border-gray-200 rounded-xl p-4\">\n                        <div className=\"text-sm text-gray-600 mb-2 uppercase tracking-wide\">\n                          Longest Streak\n                        </div>\n                        <div className=\"text-2xl font-bold mb-1\">\n                          {calculatedStats.longestStreak}\n                        </div>\n                        {renderPercentageChange(calculatedStats.streakChange)}\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {activeTab === 'sessions' && (\n                  <div className=\"max-w-4xl mx-auto\">\n                    <Feed\n                      filters={{ type: 'user', userId: user.id }}\n                      showEndMessage={true}\n                    />\n                  </div>\n                )}\n\n                {activeTab === 'followers' && (\n                  <div>\n                    <FollowersList userId={user.id} />\n                  </div>\n                )}\n\n                {activeTab === 'following' && (\n                  <div>\n                    <FollowingList userId={user.id} />\n                  </div>\n                )}\n\n                {activeTab === 'activities' && (\n                  <div className=\"max-w-4xl mx-auto\">\n                    <ActivityList onEditActivity={handleEditActivity} />\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Mobile Bottom Navigation */}\n        <div className=\"md:hidden\">\n          <BottomNavigation />\n        </div>\n\n        {/* Footer - Desktop only */}\n        <Footer />\n      </div>\n    </>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/profile/domain/ProfileStatsCalculator.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'data' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 40,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 40,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Profile Stats Calculator - Domain Service\n *\n * Pure business logic for calculating profile statistics and chart data.\n * No infrastructure dependencies - easy to test.\n */\n\nimport { Session } from '@/domain/entities/Session';\n\nexport type TimePeriod = '7D' | '2W' | '4W' | '3M' | '1Y';\n\nexport interface ChartDataPoint {\n  name: string;\n  hours: number;\n  sessions: number;\n  avgDuration: number; // in minutes\n}\n\nexport interface ProfileStats {\n  totalHours: number;\n  totalSessions: number;\n  averageSessionDuration: number; // in minutes\n  longestSession: number; // in seconds\n  currentStreak: number;\n  longestStreak: number;\n  // Additional computed fields\n  weeklyHours?: number; // Hours this week\n  sessionsThisWeek?: number; // Sessions count this week\n}\n\nexport class ProfileStatsCalculator {\n  /**\n   * Calculate chart data for a given time period\n   */\n  calculateChartData(\n    sessions: Session[],\n    period: TimePeriod\n  ): ChartDataPoint[] {\n    const now = new Date();\n    const data: ChartDataPoint[] = [];\n\n    switch (period) {\n      case '7D':\n        return this.calculateDailyData(sessions, 7, now);\n\n      case '2W':\n        return this.calculateDailyData(sessions, 14, now);\n\n      case '4W':\n        return this.calculateWeeklyData(sessions, 4, now);\n\n      case '3M':\n        return this.calculateWeeklyData(sessions, 12, now);\n\n      case '1Y':\n        return this.calculateMonthlyData(sessions, 12, now);\n\n      default:\n        return this.calculateDailyData(sessions, 7, now);\n    }\n  }\n\n  /**\n   * Calculate daily chart data\n   */\n  private calculateDailyData(\n    sessions: Session[],\n    days: number,\n    now: Date\n  ): ChartDataPoint[] {\n    const dayNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    const data: ChartDataPoint[] = [];\n\n    for (let i = days - 1; i >= 0; i--) {\n      const day = new Date(now);\n      day.setDate(day.getDate() - i);\n      day.setHours(0, 0, 0, 0);\n\n      const nextDay = new Date(day);\n      nextDay.setDate(nextDay.getDate() + 1);\n\n      const daySessions = sessions.filter(s => {\n        const sessionDate = s.createdAt;\n        return sessionDate >= day && sessionDate < nextDay;\n      });\n\n      const hoursWorked = daySessions.reduce(\n        (sum, s) => sum + s.getDurationInHours(),\n        0\n      );\n      const avgDuration =\n        daySessions.length > 0\n          ? daySessions.reduce((sum, s) => sum + s.duration, 0) /\n            daySessions.length /\n            60\n          : 0;\n\n      const dayName = dayNames[day.getDay()];\n      data.push({\n        name: `${dayName?.slice(0, 3) || ''} ${day.getDate()}`,\n        hours: Number(hoursWorked.toFixed(2)),\n        sessions: daySessions.length,\n        avgDuration: Math.round(avgDuration),\n      });\n    }\n\n    return data;\n  }\n\n  /**\n   * Calculate weekly chart data\n   */\n  private calculateWeeklyData(\n    sessions: Session[],\n    weeks: number,\n    now: Date\n  ): ChartDataPoint[] {\n    const data: ChartDataPoint[] = [];\n\n    for (let i = weeks - 1; i >= 0; i--) {\n      const weekStart = new Date(now);\n      weekStart.setDate(weekStart.getDate() - i * 7 - weekStart.getDay());\n      weekStart.setHours(0, 0, 0, 0);\n\n      const weekEnd = new Date(weekStart);\n      weekEnd.setDate(weekEnd.getDate() + 7);\n\n      const weekSessions = sessions.filter(s => {\n        const sessionDate = s.createdAt;\n        return sessionDate >= weekStart && sessionDate < weekEnd;\n      });\n\n      const hoursWorked = weekSessions.reduce(\n        (sum, s) => sum + s.getDurationInHours(),\n        0\n      );\n      const avgDuration =\n        weekSessions.length > 0\n          ? weekSessions.reduce((sum, s) => sum + s.duration, 0) /\n            weekSessions.length /\n            60\n          : 0;\n\n      // Format as \"Week of Mon DD\"\n      const monthNames = [\n        'Jan',\n        'Feb',\n        'Mar',\n        'Apr',\n        'May',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Oct',\n        'Nov',\n        'Dec',\n      ];\n      const weekLabel = `Week of ${monthNames[weekStart.getMonth()]} ${weekStart.getDate()}`;\n\n      data.push({\n        name: weekLabel,\n        hours: Number(hoursWorked.toFixed(2)),\n        sessions: weekSessions.length,\n        avgDuration: Math.round(avgDuration),\n      });\n    }\n\n    return data;\n  }\n\n  /**\n   * Calculate monthly chart data\n   */\n  private calculateMonthlyData(\n    sessions: Session[],\n    months: number,\n    now: Date\n  ): ChartDataPoint[] {\n    const monthNames = [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'Jun',\n      'Jul',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec',\n    ];\n    const data: ChartDataPoint[] = [];\n\n    for (let i = months - 1; i >= 0; i--) {\n      const monthStart = new Date(now.getFullYear(), now.getMonth() - i, 1);\n      const monthEnd = new Date(now.getFullYear(), now.getMonth() - i + 1, 1);\n\n      const monthSessions = sessions.filter(s => {\n        const sessionDate = s.createdAt;\n        return sessionDate >= monthStart && sessionDate < monthEnd;\n      });\n\n      const hoursWorked = monthSessions.reduce(\n        (sum, s) => sum + s.getDurationInHours(),\n        0\n      );\n      const avgDuration =\n        monthSessions.length > 0\n          ? monthSessions.reduce((sum, s) => sum + s.duration, 0) /\n            monthSessions.length /\n            60\n          : 0;\n\n      const monthName = monthNames[monthStart.getMonth()];\n      data.push({\n        name: monthName || '',\n        hours: Number(hoursWorked.toFixed(2)),\n        sessions: monthSessions.length,\n        avgDuration: Math.round(avgDuration),\n      });\n    }\n\n    return data;\n  }\n\n  /**\n   * Calculate overall profile statistics\n   */\n  calculateStats(sessions: Session[]): ProfileStats {\n    if (sessions.length === 0) {\n      return {\n        totalHours: 0,\n        totalSessions: 0,\n        averageSessionDuration: 0,\n        longestSession: 0,\n        currentStreak: 0,\n        longestStreak: 0,\n      };\n    }\n\n    // Total hours and sessions\n    const totalSeconds = sessions.reduce((sum, s) => sum + s.duration, 0);\n    const totalHours = totalSeconds / 3600;\n    const totalSessions = sessions.length;\n\n    // Average session duration\n    const averageSessionDuration = totalSeconds / sessions.length / 60; // in minutes\n\n    // Longest session\n    const longestSession = Math.max(...sessions.map(s => s.duration));\n\n    // Calculate streaks\n    const { currentStreak, longestStreak } = this.calculateStreaks(sessions);\n\n    return {\n      totalHours: Number(totalHours.toFixed(2)),\n      totalSessions,\n      averageSessionDuration: Math.round(averageSessionDuration),\n      longestSession,\n      currentStreak,\n      longestStreak,\n    };\n  }\n\n  /**\n   * Calculate current and longest streak\n   */\n  private calculateStreaks(sessions: Session[]): {\n    currentStreak: number;\n    longestStreak: number;\n  } {\n    if (sessions.length === 0) {\n      return { currentStreak: 0, longestStreak: 0 };\n    }\n\n    // Sort sessions by date (most recent first)\n    const sortedSessions = [...sessions].sort(\n      (a, b) => b.createdAt.getTime() - a.createdAt.getTime()\n    );\n\n    // Get unique dates\n    const uniqueDates = new Set<string>();\n    sortedSessions.forEach(s => {\n      const dateStr = s.createdAt.toDateString();\n      uniqueDates.add(dateStr);\n    });\n\n    const dates = Array.from(uniqueDates).map(d => new Date(d));\n    dates.sort((a, b) => b.getTime() - a.getTime());\n\n    // Calculate current streak\n    let currentStreak = 0;\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const yesterday = new Date(today);\n    yesterday.setDate(yesterday.getDate() - 1);\n\n    // Check if there's activity today or yesterday\n    if (dates.length > 0) {\n      const firstDate = dates[0];\n      if (!firstDate) {\n        return { currentStreak: 0, longestStreak: 0 };\n      }\n\n      const mostRecentDate = new Date(firstDate);\n      mostRecentDate.setHours(0, 0, 0, 0);\n\n      if (\n        mostRecentDate.getTime() === today.getTime() ||\n        mostRecentDate.getTime() === yesterday.getTime()\n      ) {\n        currentStreak = 1;\n\n        // Count consecutive days\n        for (let i = 1; i < dates.length; i++) {\n          const prevDateValue = dates[i - 1];\n          const currDateValue = dates[i];\n\n          if (!prevDateValue || !currDateValue) {\n            break;\n          }\n\n          const prevDate = new Date(prevDateValue);\n          prevDate.setHours(0, 0, 0, 0);\n          const currDate = new Date(currDateValue);\n          currDate.setHours(0, 0, 0, 0);\n\n          const dayDiff = Math.round(\n            (prevDate.getTime() - currDate.getTime()) / (1000 * 60 * 60 * 24)\n          );\n\n          if (dayDiff === 1) {\n            currentStreak++;\n          } else {\n            break;\n          }\n        }\n      }\n    }\n\n    // Calculate longest streak\n    let longestStreak = 0;\n    let tempStreak = 1;\n\n    for (let i = 1; i < dates.length; i++) {\n      const prevDateValue = dates[i - 1];\n      const currDateValue = dates[i];\n\n      if (!prevDateValue || !currDateValue) {\n        continue;\n      }\n\n      const prevDate = new Date(prevDateValue);\n      prevDate.setHours(0, 0, 0, 0);\n      const currDate = new Date(currDateValue);\n      currDate.setHours(0, 0, 0, 0);\n\n      const dayDiff = Math.round(\n        (prevDate.getTime() - currDate.getTime()) / (1000 * 60 * 60 * 24)\n      );\n\n      if (dayDiff === 1) {\n        tempStreak++;\n        longestStreak = Math.max(longestStreak, tempStreak);\n      } else {\n        tempStreak = 1;\n      }\n    }\n\n    longestStreak = Math.max(longestStreak, tempStreak, currentStreak);\n\n    return { currentStreak, longestStreak };\n  }\n\n  /**\n   * Filter sessions by activity/project ID\n   */\n  filterSessionsByActivity(sessions: Session[], activityId: string): Session[] {\n    if (activityId === 'all') {\n      return sessions;\n    }\n\n    return sessions.filter(\n      s =>\n        s.activityId === activityId ||\n        s.projectId === activityId ||\n        s.groupIds.includes(activityId)\n    );\n  }\n\n  /**\n   * Get top activities by hours\n   */\n  getTopActivities(\n    sessions: Session[],\n    limit: number = 5\n  ): Array<{ id: string; hours: number; sessions: number }> {\n    const activityMap = new Map<string, { hours: number; sessions: number }>();\n\n    sessions.forEach(s => {\n      const id = s.projectId || s.activityId || 'unknown';\n      const existing = activityMap.get(id) || { hours: 0, sessions: 0 };\n\n      activityMap.set(id, {\n        hours: existing.hours + s.getDurationInHours(),\n        sessions: existing.sessions + 1,\n      });\n    });\n\n    return Array.from(activityMap.entries())\n      .map(([id, data]) => ({ id, ...data }))\n      .sort((a, b) => b.hours - a.hours)\n      .slice(0, limit);\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/profile/hooks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/profile/hooks/useProfile.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 195,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 195,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 222,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 222,
        "endColumn": 21
      },
      {
        "ruleId": "@tanstack/query/exhaustive-deps",
        "severity": 1,
        "message": "The following dependencies are missing in your queryKey: profileUser",
        "line": 268,
        "column": 5,
        "nodeType": "Property",
        "messageId": "missingDeps",
        "endLine": 268,
        "endColumn": 83,
        "suggestions": [
          {
            "messageId": "fixTo",
            "data": {
              "result": "[...PROFILE_KEYS.detail(profileUser?.id || ''), 'canView', viewerId, profileUser]"
            },
            "fix": {
              "range": [8151, 8219],
              "text": "[...PROFILE_KEYS.detail(profileUser?.id || ''), 'canView', viewerId, profileUser]"
            },
            "desc": "Fix to [...PROFILE_KEYS.detail(profileUser?.id || ''), 'canView', viewerId, profileUser]"
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Profile Query Hooks - React Query Boundary\n *\n * This is the ONLY place where React Query should be used for profiles.\n * All components should use these hooks instead of direct React Query or firebaseApi calls.\n *\n * Architecture:\n * Components → useProfile hooks (React Query) → ProfileService → Repositories → Firebase\n */\n\nimport { useQuery, UseQueryOptions } from '@tanstack/react-query';\nimport { ProfileService } from '../services/ProfileService';\nimport { User } from '@/domain/entities/User';\nimport { Session } from '@/domain/entities/Session';\nimport { TimePeriod, ChartDataPoint, ProfileStats } from '../domain/ProfileStatsCalculator';\nimport { STANDARD_CACHE_TIMES } from '@/lib/react-query';\n\n// Singleton service instance\nconst profileService = new ProfileService();\n\n// ==================== CACHE KEYS ====================\n\nexport const PROFILE_KEYS = {\n  all: () => ['profile'] as const,\n  details: () => [...PROFILE_KEYS.all(), 'detail'] as const,\n  detail: (userId: string) => [...PROFILE_KEYS.details(), userId] as const,\n  byUsername: (username: string) => [...PROFILE_KEYS.all(), 'username', username] as const,\n  sessions: (userId: string, limit?: number) =>\n    [...PROFILE_KEYS.detail(userId), 'sessions', limit] as const,\n  stats: (userId: string) => [...PROFILE_KEYS.detail(userId), 'stats'] as const,\n  chartData: (userId: string, period: TimePeriod, activityId?: string) =>\n    [...PROFILE_KEYS.detail(userId), 'chart', period, activityId] as const,\n  topActivities: (userId: string, limit?: number) =>\n    [...PROFILE_KEYS.detail(userId), 'topActivities', limit] as const,\n  followers: (userId: string) => [...PROFILE_KEYS.detail(userId), 'followers'] as const,\n  following: (userId: string) => [...PROFILE_KEYS.detail(userId), 'following'] as const,\n  isFollowing: (currentUserId: string, targetUserId: string) =>\n    [...PROFILE_KEYS.all(), 'isFollowing', currentUserId, targetUserId] as const,\n};\n\n// ==================== QUERY HOOKS ====================\n\n/**\n * Get user profile by ID\n *\n * @example\n * const { data: profile, isLoading, error } = useProfileById(userId);\n */\nexport function useProfileById(\n  userId: string,\n  options?: Partial<UseQueryOptions<User | null, Error>>\n) {\n  return useQuery<User | null, Error>({\n    queryKey: PROFILE_KEYS.detail(userId),\n    queryFn: () => profileService.getProfileById(userId),\n    staleTime: STANDARD_CACHE_TIMES.LONG, // 15 minutes\n    enabled: !!userId,\n    ...options,\n  });\n}\n\n/**\n * Get user profile by username\n *\n * Useful for profile pages using username in URL.\n *\n * @example\n * const { data: profile, isLoading, error } = useProfileByUsername('john_doe');\n */\nexport function useProfileByUsername(\n  username: string,\n  options?: Partial<UseQueryOptions<User | null, Error>>\n) {\n  return useQuery<User | null, Error>({\n    queryKey: PROFILE_KEYS.byUsername(username),\n    queryFn: async () => {\n      try {\n        return await profileService.getProfileByUsername(username);\n      } catch (error: unknown) {\n        // Return null for not found/permission errors instead of throwing\n        if (error?.message?.includes('not found') || error?.message?.includes('private')) {\n          return null;\n        }\n        throw error;\n      }\n    },\n    staleTime: STANDARD_CACHE_TIMES.LONG, // 15 minutes\n    retry: false, // Don't retry on permission/not found errors\n    enabled: !!username,\n    ...options,\n  });\n}\n\n/**\n * Get user's sessions\n *\n * @example\n * const { data: sessions, isLoading } = useUserSessions(userId, 50);\n */\nexport function useUserSessions(\n  userId: string,\n  limit: number = 50,\n  options?: Partial<UseQueryOptions<Session[], Error>>\n) {\n  return useQuery<Session[], Error>({\n    queryKey: PROFILE_KEYS.sessions(userId, limit),\n    queryFn: () => profileService.getUserSessions(userId, limit),\n    staleTime: STANDARD_CACHE_TIMES.MEDIUM, // 5 minutes\n    enabled: !!userId,\n    ...options,\n  });\n}\n\n/**\n * Get profile statistics\n *\n * Includes total time, session count, streak info, etc.\n *\n * @example\n * const { data: stats } = useProfileStats(userId);\n */\nexport function useProfileStats(\n  userId: string,\n  options?: Partial<UseQueryOptions<ProfileStats, Error>>\n) {\n  return useQuery<ProfileStats, Error>({\n    queryKey: PROFILE_KEYS.stats(userId),\n    queryFn: () => profileService.getProfileStats(userId),\n    staleTime: STANDARD_CACHE_TIMES.VERY_LONG, // 1 hour - stats change slowly\n    enabled: !!userId,\n    ...options,\n  });\n}\n\n/**\n * Get chart data for profile analytics\n *\n * Returns data points for charting over a time period.\n *\n * @example\n * const { data: chartData } = useProfileChartData(userId, 'week', 'all');\n */\nexport function useProfileChartData(\n  userId: string,\n  period: TimePeriod,\n  activityId: string = 'all',\n  options?: Partial<UseQueryOptions<ChartDataPoint[], Error>>\n) {\n  return useQuery<ChartDataPoint[], Error>({\n    queryKey: PROFILE_KEYS.chartData(userId, period, activityId),\n    queryFn: () => profileService.getChartData(userId, period, activityId),\n    staleTime: STANDARD_CACHE_TIMES.LONG, // 15 minutes\n    enabled: !!userId,\n    ...options,\n  });\n}\n\n/**\n * Get top activities for a user\n *\n * Returns the most logged activities by time spent.\n *\n * @example\n * const { data: topActivities } = useTopActivities(userId, 5);\n */\nexport function useTopActivities(\n  userId: string,\n  limit: number = 5,\n  options?: Partial<UseQueryOptions<Array<{ id: string; hours: number; sessions: number }>, Error>>\n) {\n  return useQuery<Array<{ id: string; hours: number; sessions: number }>, Error>({\n    queryKey: PROFILE_KEYS.topActivities(userId, limit),\n    queryFn: () => profileService.getTopActivities(userId, limit),\n    staleTime: STANDARD_CACHE_TIMES.LONG, // 15 minutes\n    enabled: !!userId,\n    ...options,\n  });\n}\n\n/**\n * Get user's followers\n *\n * @example\n * const { data: followerIds } = useFollowers(userId);\n */\nexport function useFollowers(\n  userId: string,\n  options?: Partial<UseQueryOptions<string[], Error>>\n) {\n  return useQuery<string[], Error>({\n    queryKey: PROFILE_KEYS.followers(userId),\n    queryFn: async () => {\n      try {\n        return await profileService.getFollowers(userId);\n      } catch (error) {\n        // Return empty array on permission errors\n        return [];\n      }\n    },\n    staleTime: STANDARD_CACHE_TIMES.LONG, // 15 minutes\n    retry: false, // Don't retry on permission errors\n    enabled: !!userId,\n    ...options,\n  });\n}\n\n/**\n * Get users that a user is following\n *\n * @example\n * const { data: followingIds } = useFollowing(userId);\n */\nexport function useFollowing(\n  userId: string,\n  options?: Partial<UseQueryOptions<string[], Error>>\n) {\n  return useQuery<string[], Error>({\n    queryKey: PROFILE_KEYS.following(userId),\n    queryFn: async () => {\n      try {\n        return await profileService.getFollowing(userId);\n      } catch (error) {\n        // Return empty array on permission errors\n        return [];\n      }\n    },\n    staleTime: STANDARD_CACHE_TIMES.LONG, // 15 minutes\n    retry: false, // Don't retry on permission errors\n    enabled: !!userId,\n    ...options,\n  });\n}\n\n/**\n * Check if current user follows target user\n *\n * @example\n * const { data: isFollowing } = useIsFollowing(currentUserId, targetUserId);\n */\nexport function useIsFollowing(\n  currentUserId: string,\n  targetUserId: string,\n  options?: Partial<UseQueryOptions<boolean, Error>>\n) {\n  return useQuery<boolean, Error>({\n    queryKey: PROFILE_KEYS.isFollowing(currentUserId, targetUserId),\n    queryFn: () => profileService.isFollowing(currentUserId, targetUserId),\n    staleTime: STANDARD_CACHE_TIMES.MEDIUM, // 5 minutes\n    enabled: !!currentUserId && !!targetUserId && currentUserId !== targetUserId,\n    ...options,\n  });\n}\n\n/**\n * Check if profile can be viewed by current user\n *\n * Handles privacy settings (everyone, followers, private).\n *\n * @example\n * const { data: canView } = useCanViewProfile(profileUser, viewerId);\n */\nexport function useCanViewProfile(\n  profileUser: User | null,\n  viewerId: string | null,\n  options?: Partial<UseQueryOptions<boolean, Error>>\n) {\n  return useQuery<boolean, Error>({\n    queryKey: [...PROFILE_KEYS.detail(profileUser?.id || ''), 'canView', viewerId],\n    queryFn: () => {\n      if (!profileUser) return false;\n      return profileService.canViewProfile(profileUser, viewerId);\n    },\n    staleTime: STANDARD_CACHE_TIMES.MEDIUM, // 5 minutes\n    enabled: !!profileUser,\n    ...options,\n  });\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/profile/hooks/useProfileMutations.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 89,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 89,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2495, 2498], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2495, 2498], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 201,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 201,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5580, 5583], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5580, 5583], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Profile Mutation Hooks - React Query Boundary\n *\n * Note: Follow/unfollow mutations are currently placeholders as the ProfileService\n * shows these operations aren't fully implemented in the clean architecture yet.\n * When they are implemented, these hooks will handle the React Query integration.\n */\n\nimport {\n  useMutation,\n  useQueryClient,\n  UseMutationOptions,\n} from '@tanstack/react-query';\nimport { ProfileService } from '../services/ProfileService';\nimport { PROFILE_KEYS } from './useProfile';\n\nconst profileService = new ProfileService();\n\n// Context types for optimistic updates\ninterface FollowUserContext {\n  previousProfile: unknown;\n  previousFollowing: unknown;\n}\n\ninterface UnfollowUserContext {\n  previousProfile: unknown;\n}\n\n/**\n * Follow a user\n *\n * Note: Currently a placeholder. The actual implementation is pending\n * in the ProfileService. Use the existing firebaseApi.user.followUser for now.\n *\n * @example\n * const followMutation = useFollowUser();\n * followMutation.mutate({ currentUserId, targetUserId });\n */\nexport function useFollowUser(\n  options?: Partial<\n    UseMutationOptions<\n      void,\n      Error,\n      { currentUserId: string; targetUserId: string },\n      FollowUserContext\n    >\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<\n    void,\n    Error,\n    { currentUserId: string; targetUserId: string },\n    FollowUserContext\n  >({\n    mutationFn: ({ currentUserId, targetUserId }) =>\n      profileService.followUser(currentUserId, targetUserId),\n\n    onMutate: async ({ currentUserId, targetUserId }) => {\n      // Cancel outgoing queries\n      await queryClient.cancelQueries({\n        queryKey: PROFILE_KEYS.detail(targetUserId),\n      });\n      await queryClient.cancelQueries({\n        queryKey: PROFILE_KEYS.following(currentUserId),\n      });\n      await queryClient.cancelQueries({\n        queryKey: PROFILE_KEYS.followers(targetUserId),\n      });\n\n      // Snapshot previous values\n      const previousProfile = queryClient.getQueryData(\n        PROFILE_KEYS.detail(targetUserId)\n      );\n      const previousFollowing = queryClient.getQueryData(\n        PROFILE_KEYS.following(currentUserId)\n      );\n\n      // Optimistically update isFollowing\n      queryClient.setQueryData(\n        PROFILE_KEYS.isFollowing(currentUserId, targetUserId),\n        true\n      );\n\n      // Optimistically update follower count on profile\n      queryClient.setQueryData(\n        PROFILE_KEYS.detail(targetUserId),\n        (old: any) => {\n          if (!old) return old;\n          return {\n            ...old,\n            followerCount: (old.followerCount || 0) + 1,\n          };\n        }\n      );\n\n      return { previousProfile, previousFollowing };\n    },\n\n    onError: (error, variables, context: FollowUserContext | undefined) => {\n      // Rollback on error\n      if (context?.previousProfile) {\n        queryClient.setQueryData(\n          PROFILE_KEYS.detail(variables.targetUserId),\n          context.previousProfile\n        );\n      }\n      if (context?.previousFollowing) {\n        queryClient.setQueryData(\n          PROFILE_KEYS.following(variables.currentUserId),\n          context.previousFollowing\n        );\n      }\n      queryClient.setQueryData(\n        PROFILE_KEYS.isFollowing(\n          variables.currentUserId,\n          variables.targetUserId\n        ),\n        false\n      );\n    },\n\n    onSuccess: (_, { currentUserId, targetUserId }) => {\n      // Invalidate relevant caches\n      queryClient.invalidateQueries({\n        queryKey: PROFILE_KEYS.detail(targetUserId),\n      });\n      queryClient.invalidateQueries({\n        queryKey: PROFILE_KEYS.following(currentUserId),\n      });\n      queryClient.invalidateQueries({\n        queryKey: PROFILE_KEYS.followers(targetUserId),\n      });\n      queryClient.invalidateQueries({\n        queryKey: PROFILE_KEYS.isFollowing(currentUserId, targetUserId),\n      });\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Unfollow a user\n *\n * Note: Currently a placeholder. The actual implementation is pending\n * in the ProfileService. Use the existing firebaseApi.user.unfollowUser for now.\n *\n * @example\n * const unfollowMutation = useUnfollowUser();\n * unfollowMutation.mutate({ currentUserId, targetUserId });\n */\nexport function useUnfollowUser(\n  options?: Partial<\n    UseMutationOptions<\n      void,\n      Error,\n      { currentUserId: string; targetUserId: string },\n      UnfollowUserContext\n    >\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<\n    void,\n    Error,\n    { currentUserId: string; targetUserId: string },\n    UnfollowUserContext\n  >({\n    mutationFn: ({ currentUserId, targetUserId }) =>\n      profileService.unfollowUser(currentUserId, targetUserId),\n\n    onMutate: async ({ currentUserId, targetUserId }) => {\n      // Cancel outgoing queries\n      await queryClient.cancelQueries({\n        queryKey: PROFILE_KEYS.detail(targetUserId),\n      });\n      await queryClient.cancelQueries({\n        queryKey: PROFILE_KEYS.following(currentUserId),\n      });\n      await queryClient.cancelQueries({\n        queryKey: PROFILE_KEYS.followers(targetUserId),\n      });\n\n      // Snapshot previous values\n      const previousProfile = queryClient.getQueryData(\n        PROFILE_KEYS.detail(targetUserId)\n      );\n\n      // Optimistically update isFollowing\n      queryClient.setQueryData(\n        PROFILE_KEYS.isFollowing(currentUserId, targetUserId),\n        false\n      );\n\n      // Optimistically update follower count on profile\n      queryClient.setQueryData(\n        PROFILE_KEYS.detail(targetUserId),\n        (old: any) => {\n          if (!old) return old;\n          return {\n            ...old,\n            followerCount: Math.max(0, (old.followerCount || 0) - 1),\n          };\n        }\n      );\n\n      return { previousProfile };\n    },\n\n    onError: (error, variables, context: UnfollowUserContext | undefined) => {\n      // Rollback on error\n      if (context?.previousProfile) {\n        queryClient.setQueryData(\n          PROFILE_KEYS.detail(variables.targetUserId),\n          context.previousProfile\n        );\n      }\n      queryClient.setQueryData(\n        PROFILE_KEYS.isFollowing(\n          variables.currentUserId,\n          variables.targetUserId\n        ),\n        true\n      );\n    },\n\n    onSuccess: (_, { currentUserId, targetUserId }) => {\n      // Invalidate relevant caches\n      queryClient.invalidateQueries({\n        queryKey: PROFILE_KEYS.detail(targetUserId),\n      });\n      queryClient.invalidateQueries({\n        queryKey: PROFILE_KEYS.following(currentUserId),\n      });\n      queryClient.invalidateQueries({\n        queryKey: PROFILE_KEYS.followers(targetUserId),\n      });\n      queryClient.invalidateQueries({\n        queryKey: PROFILE_KEYS.isFollowing(currentUserId, targetUserId),\n      });\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Helper hook to invalidate all profile-related queries for a user\n *\n * @example\n * const invalidateProfile = useInvalidateProfile();\n * invalidateProfile(userId);\n */\nexport function useInvalidateProfile() {\n  const queryClient = useQueryClient();\n\n  return (userId: string) => {\n    queryClient.invalidateQueries({ queryKey: PROFILE_KEYS.detail(userId) });\n  };\n}\n\n/**\n * Helper hook to invalidate all profile queries\n *\n * Use after operations that affect multiple profiles.\n *\n * @example\n * const invalidateAllProfiles = useInvalidateAllProfiles();\n * invalidateAllProfiles();\n */\nexport function useInvalidateAllProfiles() {\n  const queryClient = useQueryClient();\n\n  return () => {\n    queryClient.invalidateQueries({ queryKey: PROFILE_KEYS.all() });\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/profile/services/ProfileService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/projects/hooks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/projects/hooks/useProjectMutations.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/projects/hooks/useProjects.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/projects/services/ProjectService.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Activity' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 14,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ActivityStats' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 18,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 16
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Project Service - Business Logic Layer\n *\n * Orchestrates business workflows for projects (activities).\n * No React dependencies - pure TypeScript for testability.\n *\n * Note: Projects are now called \"Activities\" in the codebase,\n * but we maintain backwards compatibility with Project naming.\n */\n\nimport { firebaseApi } from '@/lib/api';\nimport {\n  Project,\n  Activity,\n  CreateProjectData,\n  UpdateProjectData,\n  ProjectStats,\n  ActivityStats,\n} from '@/types';\nimport { validateOrThrow, CreateProjectSchema, UpdateProjectSchema } from '@/lib/validation';\n\nexport class ProjectService {\n  /**\n   * Get all projects (activities) for the current user\n   */\n  async getProjects(): Promise<Project[]> {\n    try {\n      return await firebaseApi.project.getProjects();\n    } catch (error) {\n      console.error('Error getting projects:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get a single project by ID\n   */\n  async getProject(projectId: string): Promise<Project | null> {\n    try {\n      return await firebaseApi.project.getProjectById(projectId);\n    } catch (error) {\n      console.error('Error getting project:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get project statistics\n   */\n  async getProjectStats(projectId: string): Promise<ProjectStats | null> {\n    try {\n      return await firebaseApi.project.getProjectStats(projectId);\n    } catch (error) {\n      console.error('Error getting project stats:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Create a new project\n   */\n  async createProject(data: unknown): Promise<Project> {\n    const validated = validateOrThrow(CreateProjectSchema, data);\n    return firebaseApi.project.createProject(validated as CreateProjectData);\n  }\n\n  /**\n   * Update a project\n   */\n  async updateProject(projectId: string, data: unknown): Promise<Project> {\n    const validated = validateOrThrow(UpdateProjectSchema, data);\n    return firebaseApi.project.updateProject(projectId, validated as UpdateProjectData);\n  }\n\n  /**\n   * Delete a project\n   */\n  async deleteProject(projectId: string): Promise<void> {\n    return firebaseApi.project.deleteProject(projectId);\n  }\n\n  /**\n   * Archive a project\n   */\n  async archiveProject(projectId: string): Promise<Project> {\n    return this.updateProject(projectId, { status: 'archived' });\n  }\n\n  /**\n   * Restore an archived project\n   */\n  async restoreProject(projectId: string): Promise<Project> {\n    return this.updateProject(projectId, { status: 'active' });\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/search/components/SearchLoadingSkeleton.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/search/hooks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/search/hooks/useFollowingList.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'CACHE_KEYS' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 15,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 20
      },
      {
        "ruleId": "@tanstack/query/exhaustive-deps",
        "severity": 1,
        "message": "The following dependencies are missing in your queryKey: userId",
        "line": 34,
        "column": 5,
        "nodeType": "Property",
        "messageId": "missingDeps",
        "endLine": 34,
        "endColumn": 77
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Following List Hook\n *\n * ULTRA-OPTIMIZED React Query hook for fetching ONLY following IDs.\n *\n * Key optimizations:\n * - Fetches only IDs, not full user objects (10x faster)\n * - Returns Set for O(1) lookup (instant .has() checks)\n * - Aggressive caching (30 min stale time)\n * - No refetching on mount/focus\n */\n\nimport { useQuery } from '@tanstack/react-query';\nimport { getFollowingIds } from '@/lib/api/users/getFollowingIds';\nimport { CACHE_KEYS, CACHE_TIMES } from '@/lib/queryClient';\n\ninterface UseFollowingListOptions {\n  userId?: string;\n  enabled?: boolean;\n}\n\ninterface UseFollowingListReturn {\n  followingIds: Set<string>;\n  isLoading: boolean;\n  isError: boolean;\n  error: Error | null;\n}\n\nexport function useFollowingList({\n  userId,\n  enabled = true,\n}: UseFollowingListOptions): UseFollowingListReturn {\n  const { data, isLoading, isError, error } = useQuery({\n    queryKey: userId ? ['following-ids', userId] : ['following-ids', 'null'],\n    queryFn: async () => {\n      if (!userId) {\n        return new Set<string>();\n      }\n      return await getFollowingIds(userId);\n    },\n    enabled: enabled && !!userId,\n    staleTime: CACHE_TIMES.VERY_LONG, // 30 minutes - following changes infrequently\n    gcTime: 60 * 60 * 1000, // 1 hour - keep in memory longer\n    refetchOnWindowFocus: false,\n    refetchOnMount: false, // Critical: don't refetch if we have data\n    refetchOnReconnect: false,\n  });\n\n  return {\n    followingIds: data ?? new Set<string>(),\n    isLoading,\n    isError,\n    error: error as Error | null,\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/search/hooks/useSearchGroups.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/search/hooks/useSearchUsers.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'CACHE_KEYS' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 12,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 12,
        "endColumn": 20
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Search Users Hook\n *\n * Optimized React Query hook for searching users with:\n * - Automatic caching and deduplication\n * - Stale-while-revalidate pattern\n * - Proper loading and error states\n */\n\nimport { useQuery } from '@tanstack/react-query';\nimport { firebaseUserApi } from '@/lib/api';\nimport { CACHE_KEYS, CACHE_TIMES } from '@/lib/queryClient';\nimport type { UserSearchResult } from '@/types';\n\ninterface UseSearchUsersOptions {\n  searchTerm: string;\n  enabled?: boolean;\n  page?: number;\n  limit?: number;\n}\n\ninterface UseSearchUsersReturn {\n  users: UserSearchResult[];\n  totalCount: number;\n  hasMore: boolean;\n  isLoading: boolean;\n  isError: boolean;\n  error: Error | null;\n}\n\nexport function useSearchUsers({\n  searchTerm,\n  enabled = true,\n  page = 1,\n  limit = 20,\n}: UseSearchUsersOptions): UseSearchUsersReturn {\n  const trimmedTerm = searchTerm.trim();\n\n  const { data, isLoading, isError, error } = useQuery({\n    queryKey: ['search', 'users', trimmedTerm, page, limit],\n    queryFn: async () => {\n      if (!trimmedTerm) {\n        return { users: [], totalCount: 0, hasMore: false };\n      }\n      return firebaseUserApi.searchUsers(trimmedTerm, page, limit);\n    },\n    enabled: enabled && trimmedTerm.length > 0,\n    staleTime: CACHE_TIMES.MEDIUM, // 5 minutes\n    gcTime: CACHE_TIMES.LONG, // 15 minutes\n    refetchOnWindowFocus: false, // Don't refetch on window focus for search results\n  });\n\n  return {\n    users: data?.users ?? [],\n    totalCount: data?.totalCount ?? 0,\n    hasMore: data?.hasMore ?? false,\n    isLoading,\n    isError,\n    error: error as Error | null,\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/search/hooks/useSuggestedGroups.ts",
    "messages": [
      {
        "ruleId": "@tanstack/query/exhaustive-deps",
        "severity": 1,
        "message": "The following dependencies are missing in your queryKey: limit",
        "line": 66,
        "column": 5,
        "nodeType": "Property",
        "messageId": "missingDeps",
        "endLine": 66,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "fixTo",
            "data": {
              "result": "[...CACHE_KEYS.SUGGESTED_GROUPS(), userId, limit]"
            },
            "fix": {
              "range": [1475, 1517],
              "text": "[...CACHE_KEYS.SUGGESTED_GROUPS(), userId, limit]"
            },
            "desc": "Fix to [...CACHE_KEYS.SUGGESTED_GROUPS(), userId, limit]"
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Suggested Groups Hook\n *\n * Optimized React Query hook for fetching suggested groups with:\n * - Automatic caching to prevent repeated loads\n * - Filters out already-joined groups\n * - Proper loading and error states\n */\n\nimport { useQuery } from '@tanstack/react-query';\nimport {\n  collection,\n  query as firestoreQuery,\n  orderBy,\n  limit as limitFn,\n  getDocs,\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { CACHE_KEYS, CACHE_TIMES } from '@/lib/queryClient';\nimport { useUserGroups } from './useUserGroups';\n\ninterface SuggestedGroup {\n  id: string;\n  name: string;\n  description: string;\n  imageUrl?: string;\n  location?: string;\n  category?: string;\n  memberCount: number;\n  members: number;\n  image?: string;\n}\n\ninterface UseSuggestedGroupsOptions {\n  userId?: string;\n  enabled?: boolean;\n  limit?: number;\n}\n\ninterface UseSuggestedGroupsReturn {\n  suggestedGroups: SuggestedGroup[];\n  isLoading: boolean;\n  isError: boolean;\n  error: Error | null;\n}\n\nexport function useSuggestedGroups({\n  userId,\n  enabled = true,\n  limit = 20,\n}: UseSuggestedGroupsOptions): UseSuggestedGroupsReturn {\n  // Fetch user's joined groups first\n  const { groups: userGroups, isLoading: isLoadingUserGroups } = useUserGroups({\n    userId,\n    enabled: enabled && !!userId,\n  });\n\n  const joinedGroupIds = new Set(userGroups.map(g => g.id));\n\n  const {\n    data,\n    isLoading: isLoadingSuggested,\n    isError,\n    error,\n  } = useQuery({\n    queryKey: [...CACHE_KEYS.SUGGESTED_GROUPS(), userId],\n    queryFn: async () => {\n      // Fetch all groups ordered by popularity\n      const allGroupsSnapshot = await getDocs(\n        firestoreQuery(\n          collection(db, 'groups'),\n          orderBy('memberCount', 'desc'),\n          limitFn(limit)\n        )\n      );\n\n      const allGroups: SuggestedGroup[] = allGroupsSnapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          name: data.name,\n          description: data.description,\n          imageUrl: data.imageUrl,\n          location: data.location,\n          category: data.category,\n          memberCount: data.memberCount,\n          members: data.memberCount,\n          image: data.imageUrl || '📁',\n        };\n      });\n\n      // Filter out groups user is already in\n      return allGroups.filter(group => !joinedGroupIds.has(group.id));\n    },\n    enabled: enabled && !isLoadingUserGroups,\n    staleTime: CACHE_TIMES.LONG, // 15 minutes\n    gcTime: CACHE_TIMES.VERY_LONG, // 1 hour\n    refetchOnWindowFocus: false,\n  });\n\n  return {\n    suggestedGroups: data ?? [],\n    isLoading: isLoadingUserGroups || isLoadingSuggested,\n    isError,\n    error: error as Error | null,\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/search/hooks/useSuggestedUsers.ts",
    "messages": [
      {
        "ruleId": "@tanstack/query/exhaustive-deps",
        "severity": 1,
        "message": "The following dependencies are missing in your queryKey: limit",
        "line": 32,
        "column": 5,
        "nodeType": "Property",
        "messageId": "missingDeps",
        "endLine": 32,
        "endColumn": 43
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Suggested Users Hook\n *\n * Optimized React Query hook for fetching suggested users with:\n * - Automatic caching to prevent repeated loads\n * - Prefetching for instant tab switching\n * - Proper loading and error states\n */\n\nimport { useQuery } from '@tanstack/react-query';\nimport { firebaseUserApi } from '@/lib/api';\nimport { CACHE_KEYS, CACHE_TIMES } from '@/lib/queryClient';\nimport type { SuggestedUser } from '@/types';\n\ninterface UseSuggestedUsersOptions {\n  enabled?: boolean;\n  limit?: number;\n}\n\ninterface UseSuggestedUsersReturn {\n  suggestedUsers: SuggestedUser[];\n  isLoading: boolean;\n  isError: boolean;\n  error: Error | null;\n}\n\nexport function useSuggestedUsers({\n  enabled = true,\n  limit = 10,\n}: UseSuggestedUsersOptions = {}): UseSuggestedUsersReturn {\n  const { data, isLoading, isError, error } = useQuery({\n    queryKey: CACHE_KEYS.SUGGESTED_USERS(),\n    queryFn: () => firebaseUserApi.getSuggestedUsers(limit),\n    enabled,\n    staleTime: CACHE_TIMES.LONG, // 15 minutes\n    gcTime: CACHE_TIMES.VERY_LONG, // 1 hour\n    refetchOnWindowFocus: false,\n  });\n\n  return {\n    suggestedUsers: data ?? [],\n    isLoading,\n    isError,\n    error: error as Error | null,\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/search/hooks/useUserGroups.ts",
    "messages": [
      {
        "ruleId": "@tanstack/query/exhaustive-deps",
        "severity": 1,
        "message": "The following dependencies are missing in your queryKey: userId, limit",
        "line": 34,
        "column": 5,
        "nodeType": "Property",
        "messageId": "missingDeps",
        "endLine": 34,
        "endColumn": 80
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * User Groups Hook\n *\n * Optimized React Query hook for fetching user's joined groups with:\n * - Automatic caching\n * - Proper loading and error states\n * - Cache invalidation on group join/leave\n */\n\nimport { useQuery } from '@tanstack/react-query';\nimport { firebaseApi } from '@/lib/api';\nimport { CACHE_KEYS, CACHE_TIMES } from '@/lib/queryClient';\nimport type { Group } from '@/types';\n\ninterface UseUserGroupsOptions {\n  userId?: string;\n  enabled?: boolean;\n  limit?: number;\n}\n\ninterface UseUserGroupsReturn {\n  groups: Group[];\n  isLoading: boolean;\n  isError: boolean;\n  error: Error | null;\n}\n\nexport function useUserGroups({\n  userId,\n  enabled = true,\n  limit,\n}: UseUserGroupsOptions): UseUserGroupsReturn {\n  const { data, isLoading, isError, error } = useQuery({\n    queryKey: userId ? CACHE_KEYS.USER_GROUPS(userId) : ['user-groups', 'null'],\n    queryFn: () => {\n      if (!userId) {\n        return [];\n      }\n      return firebaseApi.group.getUserGroups(userId, limit);\n    },\n    enabled: enabled && !!userId,\n    staleTime: CACHE_TIMES.MEDIUM, // 5 minutes\n    gcTime: CACHE_TIMES.LONG, // 15 minutes\n    refetchOnWindowFocus: false,\n  });\n\n  return {\n    groups: data ?? [],\n    isLoading,\n    isError,\n    error: error as Error | null,\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/sessions/hooks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/sessions/hooks/useSessionMutations.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 20,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 20,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [524, 527], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [524, 527], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 20,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 20,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [529, 532], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [529, 532], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 25,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 25,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [623, 626], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [623, 626], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 25,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 25,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [628, 631], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [628, 631], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 66,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 66,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1691, 1694], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1691, 1694], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 66,
        "column": 69,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 66,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1726, 1729], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1726, 1729], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 70,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 70,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1833, 1836], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1833, 1836], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 74,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 74,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1982, 1985], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1982, 1985], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 80,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 80,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2170, 2173], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2170, 2173], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 82,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 82,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2253, 2256], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2253, 2256], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 96,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 96,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2612, 2615], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2612, 2615], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 96,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 96,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2617, 2620], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2617, 2620], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 165,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 165,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4730, 4733], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4730, 4733], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 165,
        "column": 69,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 165,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4765, 4768], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4765, 4768], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 168,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 168,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4846, 4849], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4846, 4849], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 196,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 196,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5774, 5777], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5774, 5777], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 209,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 209,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6086, 6089], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6086, 6089], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 237,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 237,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6910, 6913], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6910, 6913], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 237,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 237,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6915, 6918], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6915, 6918], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 304,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 304,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8534, 8537], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8534, 8537], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 20,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Session Mutation Hooks - React Query Boundary\n *\n * All write operations for sessions (delete, support, update).\n */\n\nimport {\n  useMutation,\n  useQueryClient,\n  UseMutationOptions,\n} from '@tanstack/react-query';\nimport { SessionService, SupportSessionData } from '../services/SessionService';\nimport { SESSION_KEYS } from './useSessions';\nimport { Session } from '@/types';\n\nconst sessionService = new SessionService();\n\n// Context types for optimistic updates\ninterface DeleteSessionContext {\n  previousFeedData: [any, any][];\n  previousSession: unknown;\n}\n\ninterface SupportSessionContext {\n  previousFeedData: [any, any][];\n  previousSession: unknown;\n}\n\ninterface UpdateSessionContext {\n  previousSession: unknown;\n}\n\n/**\n * Delete a session\n *\n * @example\n * const deleteMutation = useDeleteSession();\n * deleteMutation.mutate(sessionId);\n */\nexport function useDeleteSession(\n  options?: Partial<\n    UseMutationOptions<void, Error, string, DeleteSessionContext>\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<void, Error, string, DeleteSessionContext>({\n    mutationFn: sessionId => sessionService.deleteSession(sessionId),\n\n    onMutate: async sessionId => {\n      // Cancel outgoing queries\n      await queryClient.cancelQueries({ queryKey: ['feed'] });\n      await queryClient.cancelQueries({\n        queryKey: SESSION_KEYS.detail(sessionId),\n      });\n\n      // Snapshot\n      const previousFeedData = queryClient.getQueriesData({\n        queryKey: ['feed'],\n      });\n      const previousSession = queryClient.getQueryData(\n        SESSION_KEYS.detail(sessionId)\n      );\n\n      // Optimistically remove from feed\n      queryClient.setQueriesData<any>({ queryKey: ['feed'] }, (old: any) => {\n        if (!old) return old;\n\n        if (Array.isArray(old)) {\n          return old.filter((s: any) => s.id !== sessionId);\n        } else if (old.sessions) {\n          return {\n            ...old,\n            sessions: old.sessions.filter((s: any) => s.id !== sessionId),\n          };\n        } else if (old.pages) {\n          // Handle infinite query\n          return {\n            ...old,\n            pages: old.pages.map((page: any) => ({\n              ...page,\n              sessions: page.sessions.filter((s: any) => s.id !== sessionId),\n            })),\n          };\n        }\n\n        return old;\n      });\n\n      return { previousFeedData, previousSession };\n    },\n\n    onError: (error, sessionId, context: DeleteSessionContext | undefined) => {\n      // Rollback\n      if (context?.previousFeedData) {\n        context.previousFeedData.forEach(([queryKey, data]: [any, any]) => {\n          queryClient.setQueryData(queryKey, data);\n        });\n      }\n      if (context?.previousSession) {\n        queryClient.setQueryData(\n          SESSION_KEYS.detail(sessionId),\n          context.previousSession\n        );\n      }\n    },\n\n    onSettled: (_, __, sessionId) => {\n      // Invalidate all related queries\n      queryClient.invalidateQueries({ queryKey: ['feed'] });\n      queryClient.invalidateQueries({\n        queryKey: SESSION_KEYS.detail(sessionId),\n      });\n      queryClient.invalidateQueries({ queryKey: SESSION_KEYS.all() });\n      queryClient.invalidateQueries({ queryKey: ['profile'] }); // Invalidate profile stats\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Support (like) or unsupport a session\n *\n * @example\n * const supportMutation = useSupportSession(currentUserId);\n * supportMutation.mutate({ sessionId: 'abc123', action: 'support' });\n * supportMutation.mutate({ sessionId: 'abc123', action: 'unsupport' });\n */\nexport function useSupportSession(\n  currentUserId?: string,\n  options?: Partial<\n    UseMutationOptions<void, Error, SupportSessionData, SupportSessionContext>\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<void, Error, SupportSessionData, SupportSessionContext>({\n    mutationFn: async ({ sessionId, action }) => {\n      if (action === 'support') {\n        await sessionService.supportSession(sessionId);\n      } else {\n        await sessionService.unsupportSession(sessionId);\n      }\n    },\n\n    onMutate: async ({ sessionId, action }): Promise<SupportSessionContext> => {\n      // Cancel outgoing queries\n      await queryClient.cancelQueries({ queryKey: ['feed'] });\n      await queryClient.cancelQueries({\n        queryKey: SESSION_KEYS.detail(sessionId),\n      });\n\n      // Snapshot\n      const previousFeedData = queryClient.getQueriesData({\n        queryKey: ['feed'],\n      });\n      const previousSession = queryClient.getQueryData(\n        SESSION_KEYS.detail(sessionId)\n      );\n\n      const increment = action === 'support' ? 1 : -1;\n\n      // Optimistically update feed sessions\n      queryClient.setQueriesData<any>({ queryKey: ['feed'] }, (old: any) => {\n        if (!old) return old;\n\n        const updateSession = (session: any) => {\n          if (session.id !== sessionId) return session;\n\n          const supportedBy = session.supportedBy || [];\n          const newSupportedBy =\n            action === 'support'\n              ? [...supportedBy, currentUserId].filter(Boolean)\n              : supportedBy.filter((id: string) => id !== currentUserId);\n\n          return {\n            ...session,\n            supportCount: Math.max(0, (session.supportCount || 0) + increment),\n            supportedBy: newSupportedBy,\n            isSupported: action === 'support',\n          };\n        };\n\n        if (Array.isArray(old)) {\n          return old.map(updateSession);\n        } else if (old.sessions) {\n          return {\n            ...old,\n            sessions: old.sessions.map(updateSession),\n          };\n        } else if (old.pages) {\n          // Handle infinite query\n          return {\n            ...old,\n            pages: old.pages.map((page: any) => ({\n              ...page,\n              sessions: page.sessions.map(updateSession),\n            })),\n          };\n        }\n\n        return old;\n      });\n\n      // Optimistically update single session\n      queryClient.setQueryData<Session | null>(\n        SESSION_KEYS.detail(sessionId),\n        (old: any) => {\n          if (!old) return old;\n\n          const supportedBy = old.supportedBy || [];\n          const newSupportedBy =\n            action === 'support'\n              ? [...supportedBy, currentUserId].filter(Boolean)\n              : supportedBy.filter((id: string) => id !== currentUserId);\n\n          return {\n            ...old,\n            supportCount: Math.max(0, (old.supportCount || 0) + increment),\n            supportedBy: newSupportedBy,\n            isSupported: action === 'support',\n          };\n        }\n      );\n\n      return { previousFeedData, previousSession };\n    },\n\n    onError: (\n      error,\n      { sessionId },\n      context: SupportSessionContext | undefined\n    ) => {\n      // Rollback\n      if (context?.previousFeedData) {\n        context.previousFeedData.forEach(([queryKey, data]: [any, any]) => {\n          queryClient.setQueryData(queryKey, data);\n        });\n      }\n      if (context?.previousSession) {\n        queryClient.setQueryData(\n          SESSION_KEYS.detail(sessionId),\n          context.previousSession\n        );\n      }\n    },\n\n    onSettled: (_, __, { sessionId }) => {\n      // Refetch to ensure consistency\n      queryClient.invalidateQueries({ queryKey: ['feed'] });\n      queryClient.invalidateQueries({\n        queryKey: SESSION_KEYS.detail(sessionId),\n      });\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Update a session\n *\n * @example\n * const updateMutation = useUpdateSession();\n * updateMutation.mutate({\n *   sessionId: 'abc123',\n *   data: { title: 'Updated title', visibility: 'everyone' }\n * });\n */\nexport function useUpdateSession(\n  options?: Partial<\n    UseMutationOptions<\n      void,\n      Error,\n      { sessionId: string; data: Partial<Session> },\n      UpdateSessionContext\n    >\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<\n    void,\n    Error,\n    { sessionId: string; data: Partial<Session> },\n    UpdateSessionContext\n  >({\n    mutationFn: ({ sessionId, data }) =>\n      sessionService.updateSession(sessionId, data),\n\n    onMutate: async ({ sessionId, data }): Promise<UpdateSessionContext> => {\n      await queryClient.cancelQueries({\n        queryKey: SESSION_KEYS.detail(sessionId),\n      });\n\n      const previousSession = queryClient.getQueryData(\n        SESSION_KEYS.detail(sessionId)\n      );\n\n      // Optimistically update\n      queryClient.setQueryData<Session | null>(\n        SESSION_KEYS.detail(sessionId),\n        (old: any) => {\n          if (!old) return old;\n          return { ...old, ...data };\n        }\n      );\n\n      return { previousSession };\n    },\n\n    onError: (\n      error,\n      { sessionId },\n      context: UpdateSessionContext | undefined\n    ) => {\n      if (context?.previousSession) {\n        queryClient.setQueryData(\n          SESSION_KEYS.detail(sessionId),\n          context.previousSession\n        );\n      }\n    },\n\n    onSuccess: (_, { sessionId }) => {\n      queryClient.invalidateQueries({\n        queryKey: SESSION_KEYS.detail(sessionId),\n      });\n      queryClient.invalidateQueries({ queryKey: ['feed'] });\n      queryClient.invalidateQueries({ queryKey: SESSION_KEYS.all() });\n      queryClient.invalidateQueries({ queryKey: ['profile'] }); // Invalidate profile stats\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Helper hook to invalidate session data\n *\n * @example\n * const invalidateSession = useInvalidateSession();\n * invalidateSession(sessionId);\n */\nexport function useInvalidateSession() {\n  const queryClient = useQueryClient();\n\n  return (sessionId: string) => {\n    queryClient.invalidateQueries({ queryKey: SESSION_KEYS.detail(sessionId) });\n    queryClient.invalidateQueries({\n      queryKey: SESSION_KEYS.detailWithData(sessionId),\n    });\n  };\n}\n\n/**\n * Helper hook to invalidate all sessions\n *\n * @example\n * const invalidateAllSessions = useInvalidateAllSessions();\n * invalidateAllSessions();\n */\nexport function useInvalidateAllSessions() {\n  const queryClient = useQueryClient();\n\n  return () => {\n    queryClient.invalidateQueries({ queryKey: SESSION_KEYS.all() });\n    queryClient.invalidateQueries({ queryKey: ['feed'] });\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/sessions/hooks/useSessions.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/sessions/services/SessionService.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'UpdateSessionData' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 10,
        "column": 53,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 70
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Session Service - Business Logic Layer\n *\n * Orchestrates business workflows for sessions.\n * No React dependencies - pure TypeScript for testability.\n */\n\nimport { firebaseApi } from '@/lib/api';\nimport { Session, SessionWithDetails, SessionFilters } from '@/types';\nimport { validateOrThrow, UpdateSessionSchema, type UpdateSessionData } from '@/lib/validation';\n\nexport class SessionService {\n  /**\n   * Get session by ID\n   */\n  async getSession(sessionId: string): Promise<Session | null> {\n    try {\n      return await firebaseApi.session.getSession(sessionId);\n    } catch (error) {\n      console.error('Error getting session:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get session with populated user and activity details\n   */\n  async getSessionWithDetails(sessionId: string): Promise<SessionWithDetails | null> {\n    try {\n      return await firebaseApi.session.getSessionWithDetails(sessionId);\n    } catch (error) {\n      console.error('Error getting session with details:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Get all sessions for a user\n   */\n  async getUserSessions(\n    userId: string,\n    filters?: SessionFilters\n  ): Promise<Session[]> {\n    try {\n      const result = await firebaseApi.session.getSessions(1, 100, {\n        userId,\n        ...filters,\n      });\n      return result.sessions;\n    } catch (error) {\n      console.error('Error getting user sessions:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Delete a session\n   */\n  async deleteSession(sessionId: string): Promise<void> {\n    return firebaseApi.session.deleteSession(sessionId);\n  }\n\n  /**\n   * Support (like) a session\n   */\n  async supportSession(sessionId: string): Promise<void> {\n    return firebaseApi.post.supportSession(sessionId);\n  }\n\n  /**\n   * Remove support from a session\n   */\n  async unsupportSession(sessionId: string): Promise<void> {\n    return firebaseApi.post.removeSupportFromSession(sessionId);\n  }\n\n  /**\n   * Update session\n   */\n  async updateSession(sessionId: string, data: unknown): Promise<void> {\n    // Validate input data\n    const validatedData = validateOrThrow(UpdateSessionSchema, data);\n\n    return firebaseApi.session.updateSession(sessionId, validatedData);\n  }\n}\n\nexport interface SupportSessionData {\n  sessionId: string;\n  action: 'support' | 'unsupport';\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/settings/components/SettingsPageContent.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ChevronRight' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 23,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'LogOut' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 28,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Trash2' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 29,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'router' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 42,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 42,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 616,
        "column": 108,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 616,
        "endColumn": 111,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [27903, 27906], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [27903, 27906], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Settings Page Content Component (Clean Architecture)\n *\n * This component handles all settings presentation logic.\n * Extracted from the route file for better separation of concerns.\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport Header from '@/components/HeaderComponent';\nimport MobileHeader from '@/components/MobileHeader';\nimport BottomNavigation from '@/components/BottomNavigation';\nimport Footer from '@/components/Footer';\nimport NotificationSettings from '@/components/NotificationSettings';\nimport {\n  User,\n  Shield,\n  Bell,\n  Globe,\n  Mail,\n  Upload,\n  ChevronRight,\n  Link as LinkIcon,\n  Twitter,\n  Github,\n  Linkedin,\n  LogOut,\n  Trash2\n} from 'lucide-react';\nimport { useAuth } from '@/hooks/useAuth';\nimport Image from 'next/image';\nimport { firebaseUserApi } from '@/lib/api';\nimport { toast } from 'sonner';\nimport { useRouter } from 'next/navigation';\nimport ConfirmDialog from '@/components/ConfirmDialog';\n\ntype SettingsTab = 'profile' | 'privacy' | 'notifications' | 'display';\n\nexport function SettingsPageContent() {\n  const { user, logout } = useAuth();\n  const router = useRouter();\n  const [activeTab, setActiveTab] = useState<SettingsTab>('profile');\n  const [formData, setFormData] = useState({\n    name: user?.name || '',\n    tagline: user?.tagline || '',\n    pronouns: user?.pronouns || '',\n    bio: user?.bio || '',\n    location: user?.location || '',\n    website: user?.website || '',\n    twitter: user?.socialLinks?.twitter || '',\n    github: user?.socialLinks?.github || '',\n    linkedin: user?.socialLinks?.linkedin || '',\n    profileVisibility: 'everyone' as 'everyone' | 'followers' | 'private',\n  });\n  const [isSaving, setIsSaving] = useState(false);\n  const [saved, setSaved] = useState(false);\n  const [isUploadingPhoto, setIsUploadingPhoto] = useState(false);\n  const [profilePictureUrl, setProfilePictureUrl] = useState(user?.profilePicture || '');\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [originalFormData, setOriginalFormData] = useState({\n    name: user?.name || '',\n    tagline: user?.tagline || '',\n    pronouns: user?.pronouns || '',\n    bio: user?.bio || '',\n    location: user?.location || '',\n    website: user?.website || '',\n    twitter: user?.socialLinks?.twitter || '',\n    github: user?.socialLinks?.github || '',\n    linkedin: user?.socialLinks?.linkedin || '',\n    profileVisibility: 'everyone' as 'everyone' | 'followers' | 'private',\n  });\n\n  const tabs = [\n    { id: 'profile' as SettingsTab, label: 'My Profile', icon: User },\n    { id: 'privacy' as SettingsTab, label: 'Privacy Controls', icon: Shield },\n    { id: 'notifications' as SettingsTab, label: 'Email Notifications', icon: Bell },\n    { id: 'display' as SettingsTab, label: 'Display Preferences', icon: Globe },\n  ];\n\n  // Check if form has been modified\n  const hasChanges =\n    formData.name !== originalFormData.name ||\n    formData.tagline !== originalFormData.tagline ||\n    formData.pronouns !== originalFormData.pronouns ||\n    formData.bio !== originalFormData.bio ||\n    formData.location !== originalFormData.location ||\n    formData.website !== originalFormData.website ||\n    formData.twitter !== originalFormData.twitter ||\n    formData.github !== originalFormData.github ||\n    formData.linkedin !== originalFormData.linkedin ||\n    formData.profileVisibility !== originalFormData.profileVisibility;\n\n  // Update form data when user data loads\n  useEffect(() => {\n    if (user) {\n      const userData = {\n        name: user.name || '',\n        tagline: user.tagline || '',\n        pronouns: user.pronouns || '',\n        bio: user.bio || '',\n        location: user.location || '',\n        website: user.website || '',\n        twitter: user.socialLinks?.twitter || '',\n        github: user.socialLinks?.github || '',\n        linkedin: user.socialLinks?.linkedin || '',\n        profileVisibility: 'everyone' as 'everyone' | 'followers' | 'private',\n      };\n      setFormData({\n        ...userData,\n      });\n      setOriginalFormData(userData);\n      setProfilePictureUrl(user.profilePicture || '');\n    }\n  }, [user]);\n\n  const handlePhotoUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (!file) return;\n\n    // Validate file type\n    const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\n    if (!validTypes.includes(file.type)) {\n      toast.error('Invalid file type. Please upload a JPEG, PNG, GIF, or WebP image.');\n      return;\n    }\n\n    // Validate file size (5MB max)\n    const maxSize = 5 * 1024 * 1024;\n    if (file.size > maxSize) {\n      toast.error('File size too large. Maximum size is 5MB.');\n      return;\n    }\n\n    try {\n      setIsUploadingPhoto(true);\n      \n      // Upload to Firebase Storage\n      const downloadURL = await firebaseUserApi.uploadProfilePicture(file);\n      \n      // Update profile with new picture URL\n      await firebaseUserApi.updateProfile({\n        profilePicture: downloadURL,\n      });\n      \n      setProfilePictureUrl(downloadURL);\n      toast.success('Profile picture updated!');\n    } catch (err: unknown) {\n      console.error('Upload error:', err);\n      toast.error(err?.message || 'Failed to upload photo');\n    } finally {\n      setIsUploadingPhoto(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      setIsSaving(true);\n\n      // Build social links object only if at least one link is provided\n      const socialLinks: { twitter?: string; github?: string; linkedin?: string } = {};\n      if (formData.twitter) socialLinks.twitter = formData.twitter;\n      if (formData.github) socialLinks.github = formData.github;\n      if (formData.linkedin) socialLinks.linkedin = formData.linkedin;\n\n      await firebaseUserApi.updateProfile({\n        name: formData.name,\n        tagline: formData.tagline || undefined,\n        pronouns: formData.pronouns || undefined,\n        bio: formData.bio || undefined,\n        location: formData.location || undefined,\n        website: formData.website || undefined,\n        socialLinks: Object.keys(socialLinks).length > 0 ? socialLinks : undefined,\n        profileVisibility: formData.profileVisibility,\n      });\n      toast.success('Profile updated successfully!');\n      setSaved(true);\n\n      // Reload the page after a short delay to refresh the user context\n      setTimeout(() => {\n        window.location.reload();\n      }, 1000);\n    } catch (err: unknown) {\n      toast.error(err?.message || 'Failed to update profile');\n      setIsSaving(false);\n    }\n  };\n\n  const handlePrivacySubmit = async () => {\n    try {\n      setIsSaving(true);\n      await firebaseUserApi.updateProfile({\n        profileVisibility: formData.profileVisibility,\n      });\n      toast.success('Privacy settings updated successfully!');\n      setSaved(true);\n\n      // Reload the page after a short delay\n      setTimeout(() => {\n        window.location.reload();\n      }, 1000);\n    } catch (err: unknown) {\n      toast.error(err?.message || 'Failed to update privacy settings');\n      setIsSaving(false);\n    }\n  };\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      toast.success('Logged out successfully');\n    } catch (err: unknown) {\n      toast.error(err?.message || 'Failed to log out');\n    }\n  };\n\n  const handleDeleteAccount = async () => {\n    if (!user) return;\n\n    try {\n      setIsDeleting(true);\n      // We'll implement the actual API call next\n      await firebaseUserApi.deleteAccount();\n      toast.success('Account deleted successfully');\n      // The logout will happen automatically as part of deleteAccount\n    } catch (err: unknown) {\n      console.error('Delete account error:', err);\n      toast.error(err?.message || 'Failed to delete account');\n      setIsDeleting(false);\n      setShowDeleteConfirm(false);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"min-h-screen bg-gray-50 pb-20 md:pb-0\">\n        {/* Desktop Header */}\n        <div className=\"hidden md:block\">\n          <Header />\n        </div>\n        \n        {/* Mobile Header */}\n        <div className=\"md:hidden\">\n          <MobileHeader title=\"Settings\" />\n        </div>\n        \n        <div className=\"max-w-7xl mx-auto px-0 md:px-4 sm:px-6 lg:px-8 py-0 md:py-8\">\n          <div className=\"flex flex-col md:flex-row gap-0 md:gap-8\">\n            {/* Sidebar - Desktop Only */}\n            <div className=\"hidden md:block w-64 flex-shrink-0\">\n              <div className=\"bg-white rounded-lg shadow-sm overflow-hidden\">\n                {tabs.map((tab) => {\n                  const Icon = tab.icon;\n                  return (\n                    <button\n                      key={tab.id}\n                      onClick={() => setActiveTab(tab.id)}\n                      className={`w-full flex items-center gap-3 px-4 py-3 text-left transition-colors ${\n                        activeTab === tab.id\n                          ? 'bg-[#007AFF] text-white'\n                          : 'text-gray-700 hover:bg-gray-50'\n                      }`}\n                    >\n                      <Icon className=\"w-5 h-5\" />\n                      <span className=\"font-medium\">{tab.label}</span>\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Mobile Tabs */}\n            <div className=\"md:hidden bg-white border-b border-gray-200\">\n              <div className=\"overflow-x-auto scrollbar-hide\">\n                <div className=\"flex\">\n                  {tabs.map((tab) => {\n                    const Icon = tab.icon;\n                    return (\n                      <button\n                        key={tab.id}\n                        onClick={() => setActiveTab(tab.id)}\n                        className={`flex-shrink-0 flex items-center gap-2 px-4 py-3 text-sm font-medium border-b-2 transition-colors ${\n                          activeTab === tab.id\n                            ? 'border-[#007AFF] text-[#007AFF]'\n                            : 'border-transparent text-gray-600'\n                        }`}\n                      >\n                        <Icon className=\"w-4 h-4\" />\n                        <span className=\"whitespace-nowrap\">{tab.label}</span>\n                      </button>\n                    );\n                  })}\n                </div>\n              </div>\n            </div>\n\n            {/* Main Content */}\n            <div className=\"flex-1\">\n              <div className=\"p-4 md:p-0\">\n                {activeTab === 'profile' && (\n                  <form onSubmit={handleSubmit}>\n                    <div className=\"bg-gray-50 rounded-xl border border-gray-200 p-4 md:p-6 space-y-6\">\n                      <div>\n                        <h2 className=\"text-2xl font-bold text-gray-900 mb-2 flex items-center gap-2\">\n                          <User className=\"w-6 h-6 text-[#007AFF]\" />\n                          My Profile\n                        </h2>\n                        <p className=\"text-gray-600 text-sm\">Update your personal information and profile settings</p>\n                      </div>\n\n                      {/* Profile Picture */}\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                          Profile Picture\n                        </label>\n                        <div className=\"flex flex-col md:flex-row md:items-center gap-4\">\n                          {profilePictureUrl || user?.profilePicture ? (\n                            <div className=\"w-24 h-24 rounded-full overflow-hidden ring-4 ring-white flex-shrink-0\">\n                              <Image\n                                src={profilePictureUrl || user?.profilePicture || ''}\n                                alt=\"Profile\"\n                                width={96}\n                                height={96}\n                                quality={95}\n                                priority\n                                className=\"w-full h-full object-cover\"\n                              />\n                            </div>\n                          ) : (\n                            <div className=\"w-24 h-24 bg-gradient-to-br from-[#FC4C02] to-[#FF8800] rounded-full flex items-center justify-center text-white text-4xl font-bold flex-shrink-0\">\n                              {user?.name.charAt(0).toUpperCase() || 'N'}\n                            </div>\n                          )}\n                          <div className=\"flex-1\">\n                            <input\n                              type=\"file\"\n                              id=\"profile-photo-upload\"\n                              accept=\"image/jpeg,image/png,image/gif,image/webp\"\n                              onChange={handlePhotoUpload}\n                              className=\"hidden\"\n                            />\n                            <label\n                              htmlFor=\"profile-photo-upload\"\n                              className={`flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors w-full md:w-auto justify-center md:justify-start cursor-pointer ${isUploadingPhoto ? 'opacity-50 cursor-not-allowed' : ''}`}\n                            >\n                              {isUploadingPhoto ? (\n                                <>\n                                  <div className=\"w-4 h-4 border-2 border-gray-300 border-t-[#007AFF] rounded-full animate-spin\"></div>\n                                  Uploading...\n                                </>\n                              ) : (\n                                <>\n                                  <Upload className=\"w-4 h-4\" />\n                                  Upload Photo\n                                </>\n                              )}\n                            </label>\n                            <p className=\"text-sm text-gray-500 mt-2\">\n                              JPG, PNG, GIF or WebP. Max 5MB.\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Name */}\n                      <div>\n                        <label htmlFor=\"name\" className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n                          <User className=\"w-4 h-4\" />\n                          Name\n                        </label>\n                        <input\n                          type=\"text\"\n                          id=\"name\"\n                          value={formData.name}\n                          onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                          className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] outline-none\"\n                        />\n                      </div>\n\n                      {/* Username */}\n                      <div>\n                        <label htmlFor=\"username\" className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n                          <User className=\"w-4 h-4\" />\n                          Username\n                        </label>\n                        <div className=\"relative\">\n                          <span className=\"absolute left-4 top-1/2 -translate-y-1/2 text-gray-500\">@</span>\n                          <input\n                            type=\"text\"\n                            id=\"username\"\n                            value={user?.username || ''}\n                            disabled\n                            className=\"w-full pl-8 pr-4 py-2 border border-gray-300 rounded-lg bg-gray-50 text-gray-500 cursor-not-allowed\"\n                          />\n                        </div>\n                        <p className=\"text-xs text-gray-500 mt-1\">Username cannot be changed - it&apos;s your unique identifier</p>\n                      </div>\n\n                      {/* Tagline */}\n                      <div>\n                        <label htmlFor=\"tagline\" className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n                          Tagline\n                        </label>\n                        <input\n                          type=\"text\"\n                          id=\"tagline\"\n                          value={formData.tagline}\n                          onChange={(e) => setFormData({ ...formData, tagline: e.target.value })}\n                          maxLength={60}\n                          placeholder=\"Your headline or current status...\"\n                          className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] outline-none\"\n                        />\n                        <p className=\"text-sm text-gray-500 mt-1\">{formData.tagline.length}/60 • Appears below your name on your profile</p>\n                      </div>\n\n                      {/* Pronouns */}\n                      <div>\n                        <label htmlFor=\"pronouns\" className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n                          Pronouns\n                        </label>\n                        <input\n                          type=\"text\"\n                          id=\"pronouns\"\n                          value={formData.pronouns}\n                          onChange={(e) => setFormData({ ...formData, pronouns: e.target.value })}\n                          maxLength={20}\n                          placeholder=\"e.g., she/her, he/him, they/them\"\n                          className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] outline-none\"\n                        />\n                      </div>\n\n                      {/* Bio */}\n                      <div>\n                        <label htmlFor=\"bio\" className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n                          Bio\n                        </label>\n                        <textarea\n                          id=\"bio\"\n                          value={formData.bio}\n                          onChange={(e) => setFormData({ ...formData, bio: e.target.value })}\n                          rows={4}\n                          maxLength={160}\n                          placeholder=\"Tell us about yourself...\"\n                          className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] outline-none resize-none\"\n                        />\n                        <p className=\"text-sm text-gray-500 mt-1\">{formData.bio.length}/160</p>\n                      </div>\n\n                      {/* Location */}\n                      <div>\n                        <label htmlFor=\"location\" className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n                          <Globe className=\"w-4 h-4\" />\n                          Location\n                        </label>\n                        <input\n                          type=\"text\"\n                          id=\"location\"\n                          value={formData.location}\n                          onChange={(e) => setFormData({ ...formData, location: e.target.value })}\n                          placeholder=\"City, Country\"\n                          className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] outline-none\"\n                        />\n                      </div>\n\n                      {/* Links Section */}\n                      <div className=\"pt-4 border-t border-gray-200\">\n                        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Links</h3>\n\n                        {/* Website */}\n                        <div className=\"mb-4\">\n                          <label htmlFor=\"website\" className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n                            <LinkIcon className=\"w-4 h-4\" />\n                            Website\n                          </label>\n                          <input\n                            type=\"url\"\n                            id=\"website\"\n                            value={formData.website}\n                            onChange={(e) => setFormData({ ...formData, website: e.target.value })}\n                            placeholder=\"https://yourwebsite.com\"\n                            className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] outline-none\"\n                          />\n                        </div>\n\n                        {/* Social Links */}\n                        <div className=\"space-y-4\">\n                          <div>\n                            <label htmlFor=\"twitter\" className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n                              <Twitter className=\"w-4 h-4\" />\n                              Twitter/X\n                            </label>\n                            <div className=\"relative\">\n                              <span className=\"absolute left-4 top-1/2 -translate-y-1/2 text-gray-500\">@</span>\n                              <input\n                                type=\"text\"\n                                id=\"twitter\"\n                                value={formData.twitter}\n                                onChange={(e) => setFormData({ ...formData, twitter: e.target.value })}\n                                placeholder=\"username\"\n                                className=\"w-full pl-8 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] outline-none\"\n                              />\n                            </div>\n                          </div>\n\n                          <div>\n                            <label htmlFor=\"github\" className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n                              <Github className=\"w-4 h-4\" />\n                              GitHub\n                            </label>\n                            <input\n                              type=\"text\"\n                              id=\"github\"\n                              value={formData.github}\n                              onChange={(e) => setFormData({ ...formData, github: e.target.value })}\n                              placeholder=\"username\"\n                              className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] outline-none\"\n                            />\n                          </div>\n\n                          <div>\n                            <label htmlFor=\"linkedin\" className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n                              <Linkedin className=\"w-4 h-4\" />\n                              LinkedIn\n                            </label>\n                            <input\n                              type=\"text\"\n                              id=\"linkedin\"\n                              value={formData.linkedin}\n                              onChange={(e) => setFormData({ ...formData, linkedin: e.target.value })}\n                              placeholder=\"username\"\n                              className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] outline-none\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Account Information */}\n                      <div className=\"pt-4 border-t border-gray-200\">\n                        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Account Information</h3>\n                        \n                        {/* Email */}\n                        <div className=\"mb-4\">\n                          <label className=\"flex items-center gap-2 text-sm font-medium text-gray-700 mb-2\">\n                            <Mail className=\"w-4 h-4\" />\n                            Email\n                          </label>\n                          <p className=\"text-gray-900 px-4 py-2 bg-gray-50 rounded-lg border border-gray-200\">\n                            {user?.email || 'No email set'}\n                          </p>\n                        </div>\n\n                        {/* Membership Status */}\n                        <div>\n                          <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                            Membership Status\n                          </label>\n                          <p className=\"text-gray-900 px-4 py-2 bg-gray-50 rounded-lg border border-gray-200\">\n                            Free Account\n                          </p>\n                        </div>\n                      </div>\n\n                      {/* Submit Buttons */}\n                      <div className=\"flex flex-col md:flex-row gap-3 pt-4\">\n                        <a\n                          href={user ? `/profile/${user.username}` : '/'}\n                          className=\"px-6 py-3 md:py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors text-center\"\n                        >\n                          Cancel\n                        </a>\n                        <button\n                          type=\"submit\"\n                          disabled={isSaving || !hasChanges}\n                          className={`px-6 py-3 md:py-2 rounded-lg transition-colors text-white ${\n                            isSaving || !hasChanges\n                              ? 'bg-gray-400 cursor-not-allowed' \n                              : saved \n                                ? 'bg-green-600 hover:bg-green-600' \n                                : 'bg-[#007AFF] hover:bg-[#0051D5]'\n                          }`}\n                        >\n                          {isSaving ? 'Saving…' : saved ? '✓ Saved' : 'Save Changes'}\n                        </button>\n                      </div>\n                    </div>\n                  </form>\n                )}\n\n                {activeTab === 'privacy' && (\n                  <div className=\"bg-gray-50 rounded-xl border border-gray-200 p-4 md:p-6 space-y-6\">\n                    <div>\n                      <h2 className=\"text-2xl font-bold text-gray-900 mb-2 flex items-center gap-2\">\n                        <Shield className=\"w-6 h-6 text-[#007AFF]\" />\n                        Privacy Controls\n                      </h2>\n                      <p className=\"text-gray-600 text-sm\">Control who can see your profile and content</p>\n                    </div>\n\n                    <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n                      <div className=\"px-6 py-4 border-b border-gray-200\">\n                        <h3 className=\"text-base font-semibold text-gray-900 flex items-center gap-2\">\n                          <Globe className=\"w-5 h-5 text-[#007AFF]\" />\n                          Profile Visibility\n                        </h3>\n                        <p className=\"text-sm text-gray-600 mt-1\">Control who can view your profile and sessions</p>\n                      </div>\n                      <div className=\"px-6 py-4\">\n                        <label htmlFor=\"profileVisibility\" className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                          Profile Access\n                        </label>\n                        <select\n                          id=\"profileVisibility\"\n                          value={formData.profileVisibility}\n                          onChange={(e) => setFormData({ ...formData, profileVisibility: e.target.value as any })}\n                          className=\"w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF] outline-none\"\n                        >\n                          <option value=\"everyone\">🌐 Everyone - Your profile and sessions are visible to all users</option>\n                          <option value=\"followers\">👥 Followers Only - Only your followers can see your profile and sessions</option>\n                          <option value=\"private\">🔒 Only You - Your profile and sessions are completely private</option>\n                        </select>\n                        <p className=\"text-xs text-gray-500 mt-2\">\n                          {formData.profileVisibility === 'everyone' && 'Your profile, sessions, and stats are visible to everyone.'}\n                          {formData.profileVisibility === 'followers' && 'Only your followers can see your profile and sessions. You won\\'t appear in suggestions.'}\n                          {formData.profileVisibility === 'private' && 'Your profile is completely private. Only you can see your sessions and stats.'}\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* Submit Buttons */}\n                    <div className=\"flex flex-col md:flex-row gap-3 pt-2\">\n                      <button\n                        type=\"button\"\n                        onClick={() => setFormData({ ...formData, profileVisibility: originalFormData.profileVisibility })}\n                        className=\"px-6 py-3 md:py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors text-center\"\n                      >\n                        Cancel\n                      </button>\n                      <button\n                        type=\"button\"\n                        onClick={handlePrivacySubmit}\n                        disabled={isSaving || !hasChanges}\n                        className={`px-6 py-3 md:py-2 rounded-lg transition-colors text-white ${\n                          isSaving || !hasChanges\n                            ? 'bg-gray-400 cursor-not-allowed'\n                            : saved\n                              ? 'bg-[#34C759] hover:bg-[#34C759]'\n                              : 'bg-[#007AFF] hover:bg-[#0051D5]'\n                        }`}\n                      >\n                        {isSaving ? 'Saving…' : saved ? '✓ Saved' : 'Save Changes'}\n                      </button>\n                    </div>\n                  </div>\n                )}\n\n                {activeTab === 'notifications' && (\n                  <NotificationSettings />\n                )}\n\n                {activeTab === 'display' && (\n                  <div className=\"bg-gray-50 rounded-xl border border-gray-200 p-4 md:p-6 space-y-6\">\n                    <div>\n                      <h2 className=\"text-2xl font-bold text-gray-900 mb-2 flex items-center gap-2\">\n                        <Globe className=\"w-6 h-6 text-[#007AFF]\" />\n                        Display Preferences\n                      </h2>\n                      <p className=\"text-gray-600 text-sm\">Customize how the app looks and feels.</p>\n                    </div>\n\n                    <div className=\"bg-white border border-gray-200 rounded-lg overflow-hidden\">\n                      <div className=\"px-6 py-8 text-center\">\n                        <Globe className=\"w-12 h-12 text-gray-400 mx-auto mb-3\" />\n                        <h3 className=\"font-medium text-gray-900 mb-1\">Coming Soon</h3>\n                        <p className=\"text-sm text-gray-600\">\n                          Display preferences will be available in a future update\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Danger Zone - Only show on My Profile tab */}\n              {activeTab === 'profile' && (\n                <div className=\"mt-4 p-4 md:pl-6\">\n                  <div className=\"flex items-center gap-2\">\n                    <button\n                      onClick={handleLogout}\n                      className=\"text-lg font-bold text-gray-700 hover:text-gray-900 transition-colors\"\n                    >\n                      Log Out\n                    </button>\n                    <span className=\"text-gray-300 text-lg\">|</span>\n                    <button\n                      onClick={() => setShowDeleteConfirm(true)}\n                      className=\"text-lg font-bold text-red-600 hover:text-red-700 transition-colors\"\n                    >\n                      Delete Account\n                    </button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        \n        {/* Mobile Bottom Navigation */}\n        <div className=\"md:hidden\">\n          <BottomNavigation />\n        </div>\n\n        {/* Footer - Desktop only */}\n        <Footer />\n\n        {/* Delete Account Confirmation Dialog */}\n        <ConfirmDialog\n          isOpen={showDeleteConfirm}\n          onClose={() => setShowDeleteConfirm(false)}\n          onConfirm={handleDeleteAccount}\n          title=\"Delete Account\"\n          message=\"Are you absolutely sure you want to delete your account? This will permanently delete all your data including sessions, projects, follows, and comments. This action cannot be undone.\"\n          confirmText=\"Delete My Account\"\n          cancelText=\"Cancel\"\n          variant=\"danger\"\n          isLoading={isDeleting}\n        />\n      </div>\n    </>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/social/components/FollowersList.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/social/components/FollowingList.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/social/hooks/useFollowers.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 60,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 60,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 72,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'err' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 104,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 104,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * useFollowers Hook\n *\n * Fetches the list of users who follow a given user.\n */\n\nimport { useQuery } from '@tanstack/react-query';\nimport {\n  collection,\n  query,\n  where,\n  getDocs,\n  getDoc,\n  doc,\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { STANDARD_CACHE_TIMES } from '@/lib/react-query';\n\nexport interface FollowerUser {\n  id: string;\n  name: string;\n  username: string;\n  email: string;\n  profilePicture?: string;\n  bio?: string;\n}\n\nexport function useFollowers(userId: string) {\n  return useQuery({\n    queryKey: ['followers', userId],\n    queryFn: async () => {\n      // Try new social_graph structure first\n      try {\n        const inboundRef = collection(db, `social_graph/${userId}/inbound`);\n        const inboundSnapshot = await getDocs(inboundRef);\n\n        if (!inboundSnapshot.empty) {\n          // Fetch user details for each follower\n          const followerPromises = inboundSnapshot.docs.map(\n            async followerDoc => {\n              const followerId = followerDoc.id;\n\n              try {\n                const userDoc = await getDoc(doc(db, 'users', followerId));\n\n                if (!userDoc.exists()) {\n                  return null;\n                }\n\n                const userData = userDoc.data();\n\n                return {\n                  id: followerId,\n                  name: userData.name || 'Unknown User',\n                  username: userData.username || 'unknown',\n                  email: userData.email || '',\n                  profilePicture: userData.profilePicture,\n                  bio: userData.bio,\n                } as FollowerUser;\n              } catch (error) {\n                // Failed to fetch follower user\n                return null;\n              }\n            }\n          );\n\n          const followers = await Promise.all(followerPromises);\n          return followers.filter(\n            (follower): follower is FollowerUser => follower !== null\n          );\n        }\n      } catch (error) {\n        // If social_graph doesn't exist, fall through to old follows collection\n      }\n\n      // Fallback to old follows collection\n      const followsRef = collection(db, 'follows');\n      const followsQuery = query(\n        followsRef,\n        where('followingId', '==', userId)\n      );\n      const followsSnapshot = await getDocs(followsQuery);\n\n      const followerPromises = followsSnapshot.docs.map(async followDoc => {\n        const followerId = followDoc.data().followerId;\n\n        try {\n          const userDoc = await getDoc(doc(db, 'users', followerId));\n\n          if (!userDoc.exists()) {\n            return null;\n          }\n\n          const userData = userDoc.data();\n\n          return {\n            id: followerId,\n            name: userData.name || 'Unknown User',\n            username: userData.username || 'unknown',\n            email: userData.email || '',\n            profilePicture: userData.profilePicture,\n            bio: userData.bio,\n          } as FollowerUser;\n        } catch (err) {\n          // Failed to fetch follower user\n          return null;\n        }\n      });\n\n      const followers = await Promise.all(followerPromises);\n      return followers.filter(\n        (follower): follower is FollowerUser => follower !== null\n      );\n    },\n    staleTime: STANDARD_CACHE_TIMES.MEDIUM, // 5 minutes\n    enabled: !!userId,\n  });\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/social/hooks/useFollowing.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 60,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 60,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 72,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'err' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 101,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 101,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * useFollowing Hook\n *\n * Fetches the list of users that a given user is following.\n */\n\nimport { useQuery } from '@tanstack/react-query';\nimport {\n  collection,\n  query,\n  where,\n  getDocs,\n  getDoc,\n  doc,\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { STANDARD_CACHE_TIMES } from '@/lib/react-query';\n\nexport interface FollowingUser {\n  id: string;\n  name: string;\n  username: string;\n  email: string;\n  profilePicture?: string;\n  bio?: string;\n}\n\nexport function useFollowing(userId: string) {\n  return useQuery({\n    queryKey: ['following', userId],\n    queryFn: async () => {\n      // Try new social_graph structure first\n      try {\n        const outboundRef = collection(db, `social_graph/${userId}/outbound`);\n        const outboundSnapshot = await getDocs(outboundRef);\n\n        if (!outboundSnapshot.empty) {\n          // Fetch user details for each following\n          const followingPromises = outboundSnapshot.docs.map(\n            async followingDoc => {\n              const followingId = followingDoc.id;\n\n              try {\n                const userDoc = await getDoc(doc(db, 'users', followingId));\n\n                if (!userDoc.exists()) {\n                  return null;\n                }\n\n                const userData = userDoc.data();\n\n                return {\n                  id: followingId,\n                  name: userData.name || 'Unknown User',\n                  username: userData.username || 'unknown',\n                  email: userData.email || '',\n                  profilePicture: userData.profilePicture,\n                  bio: userData.bio,\n                } as FollowingUser;\n              } catch (error) {\n                // Failed to fetch following user\n                return null;\n              }\n            }\n          );\n\n          const following = await Promise.all(followingPromises);\n          return following.filter(\n            (user): user is FollowingUser => user !== null\n          );\n        }\n      } catch (error) {\n        // If social_graph doesn't exist, fall through to old follows collection\n      }\n\n      // Fallback to old follows collection\n      const followsRef = collection(db, 'follows');\n      const followsQuery = query(followsRef, where('followerId', '==', userId));\n      const followsSnapshot = await getDocs(followsQuery);\n\n      const followingPromises = followsSnapshot.docs.map(async followDoc => {\n        const followingId = followDoc.data().followingId;\n\n        try {\n          const userDoc = await getDoc(doc(db, 'users', followingId));\n\n          if (!userDoc.exists()) {\n            return null;\n          }\n\n          const userData = userDoc.data();\n\n          return {\n            id: followingId,\n            name: userData.name || 'Unknown User',\n            username: userData.username || 'unknown',\n            email: userData.email || '',\n            profilePicture: userData.profilePicture,\n            bio: userData.bio,\n          } as FollowingUser;\n        } catch (err) {\n          // Failed to fetch following user\n          return null;\n        }\n      });\n\n      const following = await Promise.all(followingPromises);\n      return following.filter((user): user is FollowingUser => user !== null);\n    },\n    staleTime: STANDARD_CACHE_TIMES.MEDIUM, // 5 minutes\n    enabled: !!userId,\n  });\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/streaks/hooks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/streaks/hooks/useStreakMutations.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/streaks/hooks/useStreaks.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/streaks/services/StreakService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/timer/hooks/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/timer/hooks/useTimer.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/timer/hooks/useTimerMutations.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 98,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 98,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2318, 2321], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2318, 2321], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 164,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 164,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3814, 3817], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3814, 3817], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Timer Mutation Hooks - React Query Boundary\n *\n * All write operations for timer (start, pause, resume, complete, cancel).\n */\n\nimport {\n  useMutation,\n  useQueryClient,\n  UseMutationOptions,\n} from '@tanstack/react-query';\nimport {\n  TimerService,\n  StartTimerData,\n  CompleteTimerData,\n} from '../services/TimerService';\nimport { ActiveSession } from '@/domain/entities/ActiveSession';\nimport { Session } from '@/domain/entities/Session';\n\nconst timerService = new TimerService();\n\n// Query keys for timer-related queries\nexport const TIMER_KEYS = {\n  active: (userId: string) => ['timer', 'active', userId] as const,\n};\n\n/**\n * Start a new timer\n *\n * @example\n * const startMutation = useStartTimer();\n * startMutation.mutate({\n *   userId,\n *   projectId,\n *   activityId,\n *   title: 'Working on feature X'\n * });\n */\nexport function useStartTimer(\n  options?: Partial<UseMutationOptions<ActiveSession, Error, StartTimerData>>\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<ActiveSession, Error, StartTimerData>({\n    mutationFn: data => timerService.startTimer(data),\n\n    onSuccess: (activeSession, variables) => {\n      // Update cache with new active session\n      queryClient.setQueryData(\n        TIMER_KEYS.active(variables.userId),\n        activeSession\n      );\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Pause the active timer\n *\n * @example\n * const pauseMutation = usePauseTimer();\n * pauseMutation.mutate(userId);\n */\nexport function usePauseTimer(\n  options?: Partial<\n    UseMutationOptions<\n      ActiveSession,\n      Error,\n      string,\n      { previousSession: ActiveSession | undefined }\n    >\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<\n    ActiveSession,\n    Error,\n    string,\n    { previousSession: ActiveSession | undefined }\n  >({\n    mutationFn: userId => timerService.pauseTimer(userId),\n\n    onMutate: async (\n      userId\n    ): Promise<{ previousSession: ActiveSession | undefined }> => {\n      // Cancel outgoing queries\n      await queryClient.cancelQueries({ queryKey: TIMER_KEYS.active(userId) });\n\n      // Snapshot\n      const previousSession = queryClient.getQueryData<ActiveSession>(\n        TIMER_KEYS.active(userId)\n      );\n\n      // Optimistically update\n      queryClient.setQueryData(TIMER_KEYS.active(userId), (old: any) => {\n        if (!old) return old;\n        return {\n          ...old,\n          status: 'paused',\n        };\n      });\n\n      return { previousSession };\n    },\n\n    onError: (error, userId, context) => {\n      // Rollback\n      if (context?.previousSession) {\n        queryClient.setQueryData(\n          TIMER_KEYS.active(userId),\n          context.previousSession\n        );\n      }\n    },\n\n    onSuccess: (pausedSession, userId) => {\n      // Update with actual paused session\n      queryClient.setQueryData(TIMER_KEYS.active(userId), pausedSession);\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Resume a paused timer\n *\n * @example\n * const resumeMutation = useResumeTimer();\n * resumeMutation.mutate(userId);\n */\nexport function useResumeTimer(\n  options?: Partial<\n    UseMutationOptions<\n      ActiveSession,\n      Error,\n      string,\n      { previousSession: ActiveSession | undefined }\n    >\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<\n    ActiveSession,\n    Error,\n    string,\n    { previousSession: ActiveSession | undefined }\n  >({\n    mutationFn: userId => timerService.resumeTimer(userId),\n\n    onMutate: async (\n      userId\n    ): Promise<{ previousSession: ActiveSession | undefined }> => {\n      await queryClient.cancelQueries({ queryKey: TIMER_KEYS.active(userId) });\n\n      const previousSession = queryClient.getQueryData<ActiveSession>(\n        TIMER_KEYS.active(userId)\n      );\n\n      queryClient.setQueryData(TIMER_KEYS.active(userId), (old: any) => {\n        if (!old) return old;\n        return {\n          ...old,\n          status: 'running',\n        };\n      });\n\n      return { previousSession };\n    },\n\n    onError: (error, userId, context) => {\n      if (context?.previousSession) {\n        queryClient.setQueryData(\n          TIMER_KEYS.active(userId),\n          context.previousSession\n        );\n      }\n    },\n\n    onSuccess: (resumedSession, userId) => {\n      queryClient.setQueryData(TIMER_KEYS.active(userId), resumedSession);\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Complete and save the timer session\n *\n * @example\n * const completeMutation = useCompleteTimer();\n * completeMutation.mutate({\n *   userId,\n *   data: {\n *     title: 'Final title',\n *     description: 'Work completed',\n *     visibility: 'everyone'\n *   }\n * });\n */\nexport function useCompleteTimer(\n  options?: Partial<\n    UseMutationOptions<\n      Session,\n      Error,\n      { userId: string; data: CompleteTimerData }\n    >\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<\n    Session,\n    Error,\n    { userId: string; data: CompleteTimerData }\n  >({\n    mutationFn: ({ userId, data }) => timerService.completeTimer(userId, data),\n\n    onSuccess: async (session, { userId }) => {\n      // Clear active session\n      queryClient.setQueryData(TIMER_KEYS.active(userId), null);\n\n      // Force immediate refetch of feed queries to show new session at top\n      // This creates an Instagram-like experience where posts appear immediately\n      // Using refetchType: 'active' ensures only currently-mounted queries refetch\n      await queryClient.invalidateQueries({\n        queryKey: ['feed'],\n        refetchType: 'active', // Only refetch queries that are currently being observed\n      });\n\n      // Invalidate other related data (these will refetch when needed)\n      queryClient.invalidateQueries({ queryKey: ['profile'] }); // Invalidate all profile-related queries\n      queryClient.invalidateQueries({ queryKey: ['sessions'] }); // Invalidate session queries\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Cancel the active timer without saving\n *\n * @example\n * const cancelMutation = useCancelTimer();\n * cancelMutation.mutate(userId);\n */\nexport function useCancelTimer(\n  options?: Partial<UseMutationOptions<void, Error, string>>\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<void, Error, string>({\n    mutationFn: userId => timerService.cancelTimer(userId),\n\n    onSuccess: (_, userId) => {\n      // Clear active session\n      queryClient.setQueryData(TIMER_KEYS.active(userId), null);\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Adjust the start time of the active timer\n *\n * @example\n * const adjustMutation = useAdjustStartTime();\n * adjustMutation.mutate({ userId, newStartTime: new Date('2025-10-27T10:00:00') });\n */\nexport function useAdjustStartTime(\n  options?: Partial<\n    UseMutationOptions<\n      ActiveSession,\n      Error,\n      { userId: string; newStartTime: Date }\n    >\n  >\n) {\n  const queryClient = useQueryClient();\n\n  return useMutation<\n    ActiveSession,\n    Error,\n    { userId: string; newStartTime: Date }\n  >({\n    mutationFn: ({ userId, newStartTime }) =>\n      timerService.adjustStartTime(userId, newStartTime),\n\n    onSuccess: (adjustedSession, { userId }) => {\n      // Update cache with adjusted session\n      queryClient.setQueryData(TIMER_KEYS.active(userId), adjustedSession);\n    },\n\n    ...options,\n  });\n}\n\n/**\n * Helper hook to invalidate timer data\n *\n * @example\n * const invalidateTimer = useInvalidateTimer();\n * invalidateTimer(userId);\n */\nexport function useInvalidateTimer() {\n  const queryClient = useQueryClient();\n\n  return (userId: string) => {\n    queryClient.invalidateQueries({ queryKey: TIMER_KEYS.active(userId) });\n  };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/timer/hooks/useTimerState.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/features/timer/services/TimerService.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/hooks/__tests__/useCommentLikeMutation.test.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/hooks/useActivitiesQuery.ts",
    "messages": [
      {
        "ruleId": "@tanstack/query/exhaustive-deps",
        "severity": 1,
        "message": "The following dependencies are missing in your queryKey: user.id",
        "line": 77,
        "column": 5,
        "nodeType": "Property",
        "messageId": "missingDeps",
        "endLine": 77,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "fixTo",
            "data": { "result": "['activity', 'stats', activityId, user?.id]" },
            "fix": {
              "range": [2198, 2231],
              "text": "['activity', 'stats', activityId, user?.id]"
            },
            "desc": "Fix to ['activity', 'stats', activityId, user?.id]"
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 110,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 110,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3182, 3185], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3182, 3185], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useQuery, useMutation, useQueryClient, UseQueryOptions } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport {\n  Activity,\n  ActivityStats,\n  CreateActivityData,\n  UpdateActivityData,\n} from '@/types';\nimport { firebaseActivityApi } from '@/lib/api';\nimport { CACHE_KEYS, CACHE_TIMES } from '@/lib/queryClient';\nimport { db } from '@/lib/firebase';\nimport { collection, getDocs, query, where, or, and } from 'firebase/firestore';\nimport { safeNumber } from '@/lib/utils';\n\n/**\n * Hook to fetch user activities with caching\n * Replaces ActivitiesContext for better performance and code splitting\n *\n * @param userId - User ID to fetch activities for (defaults to current user)\n * @param options - Additional React Query options\n */\nexport function useActivities(\n  userId?: string,\n  options?: Partial<UseQueryOptions<Activity[]>>\n) {\n  const { user } = useAuth();\n  const effectiveUserId = userId || user?.id;\n\n  return useQuery({\n    queryKey: CACHE_KEYS.PROJECTS(effectiveUserId || 'none'),\n    queryFn: async () => {\n      const activities = await firebaseActivityApi.getProjects();\n      // Icon migration happens automatically in the API\n      return activities;\n    },\n    enabled: !!effectiveUserId,\n    staleTime: CACHE_TIMES.LONG, // 15 minutes cache\n    gcTime: CACHE_TIMES.LONG,\n    ...options,\n  });\n}\n\n/**\n * Hook to get a single activity by ID\n * Derived from the activities list for efficiency\n */\nexport function useActivity(\n  activityId: string,\n  options?: Partial<UseQueryOptions<Activity | null>>\n) {\n  const { user } = useAuth();\n  const { data: activities } = useActivities(user?.id);\n\n  return useQuery({\n    queryKey: ['activity', activityId],\n    queryFn: () => {\n      const activity = activities?.find((a) => a.id === activityId);\n      return activity || null;\n    },\n    enabled: !!activities && !!activityId,\n    staleTime: CACHE_TIMES.LONG,\n    ...options,\n  });\n}\n\n/**\n * Hook to get activity statistics\n * Fetches on-demand for heavy computation\n */\nexport function useActivityStats(\n  activityId: string,\n  options?: Partial<UseQueryOptions<ActivityStats>>\n) {\n  const { user } = useAuth();\n\n  return useQuery({\n    queryKey: ['activity', 'stats', activityId],\n    queryFn: async () => {\n      if (!user?.id) {\n        return {\n          totalHours: 0,\n          weeklyHours: 0,\n          sessionCount: 0,\n          currentStreak: 0,\n          weeklyProgressPercentage: 0,\n          totalProgressPercentage: 0,\n          averageSessionDuration: 0,\n        };\n      }\n\n      // Query for both activityId and projectId (backwards compatibility)\n      const q = query(\n        collection(db, 'sessions'),\n        and(\n          where('userId', '==', user.id),\n          or(where('activityId', '==', activityId), where('projectId', '==', activityId))\n        )\n      );\n      const snapshot = await getDocs(q);\n\n      let totalSeconds = 0;\n      let weeklySeconds = 0;\n      let sessionCount = 0;\n      const now = new Date();\n      const weekStart = new Date(now);\n      weekStart.setDate(now.getDate() - now.getDay());\n      weekStart.setHours(0, 0, 0, 0);\n\n      snapshot.forEach((doc) => {\n        const data: any = doc.data();\n        const duration = safeNumber(data.duration, 0);\n        const start = data.startTime?.toDate ? data.startTime.toDate() : new Date(data.startTime);\n        totalSeconds += duration;\n        sessionCount += 1;\n        if (start >= weekStart) weeklySeconds += duration;\n      });\n\n      const totalHours = totalSeconds / 3600;\n      const weeklyHours = weeklySeconds / 3600;\n\n      // Streak placeholder for now\n      const currentStreak = sessionCount > 0 ? 1 : 0;\n\n      return {\n        totalHours,\n        weeklyHours,\n        sessionCount,\n        currentStreak,\n        weeklyProgressPercentage: 0,\n        totalProgressPercentage: 0,\n        averageSessionDuration: sessionCount > 0 ? totalSeconds / sessionCount : 0,\n      };\n    },\n    enabled: !!activityId && !!user,\n    staleTime: CACHE_TIMES.VERY_LONG, // 1 hour cache for stats\n    ...options,\n  });\n}\n\n/**\n * Hook to create a new activity with optimistic updates\n */\nexport function useCreateActivity() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const queryKey = CACHE_KEYS.PROJECTS(user?.id || 'none');\n\n  return useMutation({\n    mutationFn: (data: CreateActivityData) => firebaseActivityApi.createProject(data),\n\n    // Optimistic update\n    onMutate: async (newActivity) => {\n      // Cancel any outgoing refetches\n      await queryClient.cancelQueries({ queryKey });\n\n      // Snapshot the previous value\n      const previousActivities = queryClient.getQueryData<Activity[]>(queryKey);\n\n      // Optimistically create a temporary activity\n      const tempActivity: Activity = {\n        id: `temp-${Date.now()}`,\n        userId: user?.id || '',\n        name: newActivity.name,\n        description: newActivity.description,\n        icon: newActivity.icon || 'flat-color-icons:briefcase',\n        color: newActivity.color || '#007AFF',\n        status: 'active',\n        weeklyTarget: newActivity.weeklyTarget,\n        totalTarget: newActivity.totalTarget,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      // Add to cache optimistically\n      if (previousActivities) {\n        queryClient.setQueryData<Activity[]>(queryKey, [...previousActivities, tempActivity]);\n      }\n\n      return { previousActivities, tempActivity };\n    },\n\n    // On success, replace temp with real activity\n    onSuccess: (newActivity, variables, context) => {\n      const previousActivities = context?.previousActivities || [];\n      const tempActivity = context?.tempActivity;\n\n      // Replace temp activity with real one\n      queryClient.setQueryData<Activity[]>(\n        queryKey,\n        previousActivities\n          .filter((a) => a.id !== tempActivity?.id)\n          .concat(newActivity)\n      );\n    },\n\n    // On error, roll back\n    onError: (err, variables, context) => {\n      if (context?.previousActivities) {\n        queryClient.setQueryData(queryKey, context.previousActivities);\n      }\n      console.error('Error creating activity:', err);\n    },\n\n    // Always refetch after error or success\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey });\n    },\n  });\n}\n\n/**\n * Hook to update an existing activity with optimistic updates\n */\nexport function useUpdateActivity() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const queryKey = CACHE_KEYS.PROJECTS(user?.id || 'none');\n\n  return useMutation({\n    mutationFn: ({ id, data }: { id: string; data: UpdateActivityData }) =>\n      firebaseActivityApi.updateProject(id, data),\n\n    // Optimistic update\n    onMutate: async ({ id, data }) => {\n      await queryClient.cancelQueries({ queryKey });\n\n      const previousActivities = queryClient.getQueryData<Activity[]>(queryKey);\n\n      // Optimistically update the activity\n      if (previousActivities) {\n        queryClient.setQueryData<Activity[]>(\n          queryKey,\n          previousActivities.map((a) =>\n            a.id === id ? { ...a, ...data, updatedAt: new Date() } : a\n          )\n        );\n      }\n\n      return { previousActivities };\n    },\n\n    // On success, use the real updated activity\n    onSuccess: (updatedActivity, variables, context) => {\n      const previousActivities = context?.previousActivities || [];\n      queryClient.setQueryData<Activity[]>(\n        queryKey,\n        previousActivities.map((a) => (a.id === updatedActivity.id ? updatedActivity : a))\n      );\n    },\n\n    // On error, roll back\n    onError: (err, variables, context) => {\n      if (context?.previousActivities) {\n        queryClient.setQueryData(queryKey, context.previousActivities);\n      }\n      console.error('Error updating activity:', err);\n    },\n\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey });\n    },\n  });\n}\n\n/**\n * Hook to delete an activity with optimistic updates\n */\nexport function useDeleteActivity() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const queryKey = CACHE_KEYS.PROJECTS(user?.id || 'none');\n\n  return useMutation({\n    mutationFn: (activityId: string) => firebaseActivityApi.deleteProject(activityId),\n\n    // Optimistic update\n    onMutate: async (activityId) => {\n      await queryClient.cancelQueries({ queryKey });\n\n      const previousActivities = queryClient.getQueryData<Activity[]>(queryKey);\n\n      // Optimistically remove the activity\n      if (previousActivities) {\n        queryClient.setQueryData<Activity[]>(\n          queryKey,\n          previousActivities.filter((a) => a.id !== activityId)\n        );\n      }\n\n      return { previousActivities };\n    },\n\n    // On error, roll back\n    onError: (err, activityId, context) => {\n      if (context?.previousActivities) {\n        queryClient.setQueryData(queryKey, context.previousActivities);\n      }\n      console.error('Error deleting activity:', err);\n    },\n\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey });\n    },\n  });\n}\n\n/**\n * Hook to archive an activity\n * Convenience wrapper around useUpdateActivity\n */\nexport function useArchiveActivity() {\n  const updateActivity = useUpdateActivity();\n\n  return useMutation({\n    mutationFn: (activityId: string) =>\n      updateActivity.mutateAsync({ id: activityId, data: { status: 'archived' } }),\n  });\n}\n\n/**\n * Hook to restore an archived activity\n * Convenience wrapper around useUpdateActivity\n */\nexport function useRestoreActivity() {\n  const updateActivity = useUpdateActivity();\n\n  return useMutation({\n    mutationFn: (activityId: string) =>\n      updateActivity.mutateAsync({ id: activityId, data: { status: 'active' } }),\n  });\n}\n\n/**\n * Backward compatibility: Alias activities as projects\n */\nexport const useProjects = useActivities;\nexport const useProject = useActivity;\nexport const useProjectStats = useActivityStats;\nexport const useCreateProject = useCreateActivity;\nexport const useUpdateProject = useUpdateActivity;\nexport const useDeleteProject = useDeleteActivity;\nexport const useArchiveProject = useArchiveActivity;\nexport const useRestoreProject = useRestoreActivity;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/hooks/useAuth.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/hooks/useDebounce.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/hooks/useNotifications.ts",
    "messages": [
      {
        "ruleId": "@tanstack/query/exhaustive-deps",
        "severity": 1,
        "message": "The following dependencies are missing in your queryKey: user, limit",
        "line": 30,
        "column": 5,
        "nodeType": "Property",
        "messageId": "missingDeps",
        "endLine": 30,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useQuery, useMutation, useQueryClient, UseQueryOptions } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Notification } from '@/types';\nimport { firebaseNotificationApi } from '@/lib/api';\nimport { collection, query, where, orderBy, limit as firestoreLimit, onSnapshot } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { useEffect, useMemo } from 'react';\nimport { CACHE_KEYS, CACHE_TIMES } from '@/lib/queryClient';\n\n/**\n * Hook to fetch user notifications with optional real-time updates\n *\n * @param options.realtime - Enable real-time Firestore listener (default: false)\n * @param options.limit - Maximum number of notifications to fetch (default: 50)\n */\nexport function useNotifications(options?: {\n  realtime?: boolean;\n  limit?: number;\n  queryOptions?: Partial<UseQueryOptions<Notification[]>>;\n}) {\n  const { user, isAuthenticated } = useAuth();\n  const queryClient = useQueryClient();\n  const realtime = options?.realtime ?? false;\n  const limit = options?.limit ?? 50;\n\n  const queryKey = CACHE_KEYS.NOTIFICATIONS(user?.id || 'none');\n\n  // Base query for notifications\n  const notificationsQuery = useQuery({\n    queryKey,\n    queryFn: async () => {\n      if (!user) return [];\n      return firebaseNotificationApi.getUserNotifications(user.id, limit);\n    },\n    enabled: isAuthenticated && !!user,\n    staleTime: CACHE_TIMES.REAL_TIME, // 30 seconds\n    gcTime: CACHE_TIMES.MEDIUM, // 5 minutes\n    ...options?.queryOptions,\n  });\n\n  // Set up real-time listener if requested\n  useEffect(() => {\n    if (!realtime || !isAuthenticated || !user) return;\n\n    const notificationsRef = query(\n      collection(db, 'notifications'),\n      where('userId', '==', user.id),\n      orderBy('createdAt', 'desc'),\n      firestoreLimit(limit)\n    );\n\n    const unsubscribe = onSnapshot(\n      notificationsRef,\n      (snapshot) => {\n        const notifications: Notification[] = [];\n\n        snapshot.forEach((doc) => {\n          const data = doc.data();\n          const notification: Notification = {\n            id: doc.id,\n            userId: data.userId,\n            type: data.type,\n            title: data.title,\n            message: data.message,\n            linkUrl: data.linkUrl,\n            isRead: data.isRead || false,\n            createdAt: data.createdAt?.toDate() || new Date(),\n            actorId: data.actorId,\n            actorName: data.actorName,\n            actorUsername: data.actorUsername,\n            actorProfilePicture: data.actorProfilePicture,\n            sessionId: data.sessionId,\n            commentId: data.commentId,\n            groupId: data.groupId,\n            challengeId: data.challengeId,\n          };\n\n          notifications.push(notification);\n        });\n\n        // Update React Query cache with real-time data\n        queryClient.setQueryData(queryKey, notifications);\n      },\n      (error) => {\n        console.error('Error in notifications real-time listener:', error);\n      }\n    );\n\n    return () => unsubscribe();\n  }, [realtime, isAuthenticated, user, limit, queryClient, queryKey]);\n\n  return notificationsQuery;\n}\n\n/**\n * Hook to get unread notification count\n * Derived from notifications query for efficiency\n */\nexport function useUnreadCount() {\n  const { user } = useAuth();\n  const queryKey = CACHE_KEYS.NOTIFICATIONS(user?.id || 'none');\n  const queryClient = useQueryClient();\n\n  // Get cached notifications data\n  const notifications = queryClient.getQueryData<Notification[]>(queryKey);\n\n  return useMemo(\n    () => notifications?.filter((n) => !n.isRead).length ?? 0,\n    [notifications]\n  );\n}\n\n/**\n * Hook to mark a notification as read with optimistic updates\n */\nexport function useMarkNotificationRead() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const queryKey = CACHE_KEYS.NOTIFICATIONS(user?.id || 'none');\n\n  return useMutation({\n    mutationFn: (notificationId: string) =>\n      firebaseNotificationApi.markAsRead(notificationId),\n\n    // Optimistic update\n    onMutate: async (notificationId) => {\n      // Cancel any outgoing refetches\n      await queryClient.cancelQueries({ queryKey });\n\n      // Snapshot the previous value\n      const previousNotifications = queryClient.getQueryData<Notification[]>(queryKey);\n\n      // Optimistically update to the new value\n      if (previousNotifications) {\n        queryClient.setQueryData<Notification[]>(\n          queryKey,\n          previousNotifications.map((n) =>\n            n.id === notificationId ? { ...n, isRead: true } : n\n          )\n        );\n      }\n\n      // Return context with the previous value\n      return { previousNotifications };\n    },\n\n    // On error, roll back to the previous value\n    onError: (err, notificationId, context) => {\n      if (context?.previousNotifications) {\n        queryClient.setQueryData(queryKey, context.previousNotifications);\n      }\n      console.error('Error marking notification as read:', err);\n    },\n\n    // Always refetch after error or success\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey });\n    },\n  });\n}\n\n/**\n * Hook to mark all notifications as read\n */\nexport function useMarkAllNotificationsRead() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const queryKey = CACHE_KEYS.NOTIFICATIONS(user?.id || 'none');\n\n  return useMutation({\n    mutationFn: async () => {\n      if (!user) throw new Error('User not authenticated');\n      return firebaseNotificationApi.markAllAsRead(user.id);\n    },\n\n    // Optimistic update\n    onMutate: async () => {\n      await queryClient.cancelQueries({ queryKey });\n\n      const previousNotifications = queryClient.getQueryData<Notification[]>(queryKey);\n\n      if (previousNotifications) {\n        queryClient.setQueryData<Notification[]>(\n          queryKey,\n          previousNotifications.map((n) => ({ ...n, isRead: true }))\n        );\n      }\n\n      return { previousNotifications };\n    },\n\n    onError: (err, variables, context) => {\n      if (context?.previousNotifications) {\n        queryClient.setQueryData(queryKey, context.previousNotifications);\n      }\n      console.error('Error marking all notifications as read:', err);\n    },\n\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey });\n    },\n  });\n}\n\n/**\n * Hook to delete a notification with optimistic updates\n */\nexport function useDeleteNotification() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const queryKey = CACHE_KEYS.NOTIFICATIONS(user?.id || 'none');\n\n  return useMutation({\n    mutationFn: (notificationId: string) =>\n      firebaseNotificationApi.deleteNotification(notificationId),\n\n    // Optimistic update\n    onMutate: async (notificationId) => {\n      await queryClient.cancelQueries({ queryKey });\n\n      const previousNotifications = queryClient.getQueryData<Notification[]>(queryKey);\n\n      if (previousNotifications) {\n        queryClient.setQueryData<Notification[]>(\n          queryKey,\n          previousNotifications.filter((n) => n.id !== notificationId)\n        );\n      }\n\n      return { previousNotifications };\n    },\n\n    onError: (err, notificationId, context) => {\n      if (context?.previousNotifications) {\n        queryClient.setQueryData(queryKey, context.previousNotifications);\n      }\n      console.error('Error deleting notification:', err);\n    },\n\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey });\n    },\n  });\n}\n\n/**\n * Hook to clear all notifications\n */\nexport function useClearAllNotifications() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const queryKey = CACHE_KEYS.NOTIFICATIONS(user?.id || 'none');\n\n  return useMutation({\n    mutationFn: async () => {\n      if (!user) throw new Error('User not authenticated');\n\n      const notifications = queryClient.getQueryData<Notification[]>(queryKey) || [];\n\n      // Delete all notifications in parallel\n      await Promise.all(\n        notifications.map((notification) =>\n          firebaseNotificationApi.deleteNotification(notification.id)\n        )\n      );\n    },\n\n    // Optimistic update\n    onMutate: async () => {\n      await queryClient.cancelQueries({ queryKey });\n\n      const previousNotifications = queryClient.getQueryData<Notification[]>(queryKey);\n\n      // Clear the cache immediately\n      queryClient.setQueryData<Notification[]>(queryKey, []);\n\n      return { previousNotifications };\n    },\n\n    onError: (err, variables, context) => {\n      if (context?.previousNotifications) {\n        queryClient.setQueryData(queryKey, context.previousNotifications);\n      }\n      console.error('Error clearing all notifications:', err);\n    },\n\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey });\n    },\n  });\n}\n\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/hooks/useTimerQuery.ts",
    "messages": [
      {
        "ruleId": "@tanstack/query/exhaustive-deps",
        "severity": 1,
        "message": "The following dependencies are missing in your queryKey: user",
        "line": 22,
        "column": 5,
        "nodeType": "Property",
        "messageId": "missingDeps",
        "endLine": 22,
        "endColumn": 60
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * React Query hooks for timer-related data fetching\n *\n * This module provides React Query hooks for server-state related to timers.\n * This is the ONLY place where React Query is used for timer functionality.\n */\n\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { firebaseSessionApi } from '@/lib/api';\nimport { useAuth } from '@/hooks/useAuth';\nimport { Session, CreateSessionData } from '@/types';\nimport { CACHE_KEYS, CACHE_TIMES } from '@/lib/queryClient';\n\n/**\n * Hook to fetch the active session from Firebase\n * Returns the persisted active session if one exists\n */\nexport function useActiveTimerQuery() {\n  const { user, isAuthenticated } = useAuth();\n\n  return useQuery({\n    queryKey: CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n    queryFn: async () => {\n      if (!user) return null;\n\n      const activeSession = await firebaseSessionApi.getActiveSession();\n      if (!activeSession) return null;\n\n      // Validate session age (max 24 hours)\n      const MAX_SESSION_AGE_MS = 24 * 60 * 60 * 1000;\n      const now = new Date();\n      const sessionAge = now.getTime() - activeSession.startTime.getTime();\n\n      if (sessionAge > MAX_SESSION_AGE_MS || sessionAge < 0) {\n        // Clear stale or invalid session\n        await firebaseSessionApi.clearActiveSession();\n        return null;\n      }\n\n      return activeSession;\n    },\n    enabled: isAuthenticated && !!user,\n    staleTime: CACHE_TIMES.REAL_TIME, // 30 seconds - frequently check for updates\n    refetchOnWindowFocus: true, // Refetch when window regains focus\n    refetchInterval: 10000, // Check every 10 seconds if session still exists\n     \n  });\n}\n\n// Backward compatibility alias\nexport const useActiveSession = useActiveTimerQuery;\n\n/**\n * Hook to start a new timer\n * Creates an active session in Firebase and updates cache\n */\nexport function useStartTimerMutation() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({\n      projectId,\n      customStartTime,\n    }: {\n      projectId: string;\n      customStartTime?: Date;\n    }) => {\n      if (!user) {\n        throw new Error('User must be authenticated to start timer');\n      }\n\n      const startTime = customStartTime || new Date();\n\n      // Save active session to Firebase\n      await firebaseSessionApi.saveActiveSession({\n        startTime,\n        projectId: projectId,\n        selectedTaskIds: [],\n        pausedDuration: 0,\n        isPaused: false,\n      });\n\n      return { projectId, startTime };\n    },\n    onSuccess: data => {\n      // Update the active session cache immediately with optimistic data\n      queryClient.setQueryData(CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'), {\n        startTime: data.startTime,\n        projectId: data.projectId,\n        selectedTaskIds: [],\n        pausedDuration: 0,\n        isPaused: false,\n      });\n    },\n  });\n}\n\n/**\n * Hook to pause the active timer\n * Saves paused state with elapsed time to Firebase\n */\nexport function usePauseTimerMutation() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({\n      startTime,\n      projectId,\n      elapsedSeconds,\n    }: {\n      startTime: Date;\n      projectId: string;\n      elapsedSeconds: number;\n    }) => {\n      await firebaseSessionApi.saveActiveSession({\n        startTime,\n        projectId,\n        selectedTaskIds: [],\n        pausedDuration: elapsedSeconds,\n        isPaused: true,\n      });\n\n      return { startTime, projectId, elapsedSeconds };\n    },\n    onSuccess: data => {\n      // Update cache with paused state\n      queryClient.setQueryData(CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'), {\n        startTime: data.startTime,\n        projectId: data.projectId,\n        selectedTaskIds: [],\n        pausedDuration: data.elapsedSeconds,\n        isPaused: true,\n      });\n    },\n  });\n}\n\n/**\n * Hook to resume a paused timer\n * Calculates adjusted start time and saves to Firebase\n */\nexport function useResumeTimerMutation() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({\n      pausedDuration,\n      projectId,\n    }: {\n      pausedDuration: number;\n      projectId: string;\n    }) => {\n      // Calculate the new start time to account for paused duration\n      const now = new Date();\n      const adjustedStartTime = new Date(now.getTime() - pausedDuration * 1000);\n\n      await firebaseSessionApi.saveActiveSession({\n        startTime: adjustedStartTime,\n        projectId,\n        selectedTaskIds: [],\n        pausedDuration: 0,\n        isPaused: false,\n      });\n\n      return { adjustedStartTime, projectId };\n    },\n    onSuccess: data => {\n      // Update cache with resumed state\n      queryClient.setQueryData(CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'), {\n        startTime: data.adjustedStartTime,\n        projectId: data.projectId,\n        selectedTaskIds: [],\n        pausedDuration: 0,\n        isPaused: false,\n      });\n    },\n  });\n}\n\n/**\n * Hook to save the active session to Firebase\n * Used for auto-save functionality\n */\nexport function useSaveActiveSession() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async (sessionData: {\n      startTime: Date;\n      projectId: string;\n      selectedTaskIds: string[];\n      pausedDuration: number;\n      isPaused: boolean;\n    }) => {\n      return firebaseSessionApi.saveActiveSession(sessionData);\n    },\n    onSuccess: (data, variables) => {\n      // Update the active session cache immediately\n      queryClient.setQueryData(CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'), {\n        startTime: variables.startTime,\n        projectId: variables.projectId,\n        selectedTaskIds: variables.selectedTaskIds,\n        pausedDuration: variables.pausedDuration,\n        isPaused: variables.isPaused,\n      });\n    },\n  });\n}\n\n/**\n * Hook to cancel/reset the active timer\n * Clears the active session from Firebase without creating a session\n */\nexport function useCancelTimerMutation() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async () => {\n      return firebaseSessionApi.clearActiveSession();\n    },\n    onMutate: async () => {\n      // Optimistically clear the active session\n      await queryClient.cancelQueries({\n        queryKey: CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n      });\n\n      const previousActiveSession = queryClient.getQueryData(\n        CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none')\n      );\n\n      queryClient.setQueryData(\n        CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n        null\n      );\n\n      return { previousActiveSession };\n    },\n    onError: (err, variables, context) => {\n      // Restore previous active session on error\n      if (context?.previousActiveSession) {\n        queryClient.setQueryData(\n          CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n          context.previousActiveSession\n        );\n      }\n    },\n    onSuccess: () => {\n      // Clear the active session cache\n      queryClient.setQueryData(\n        CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n        null\n      );\n    },\n  });\n}\n\n/**\n * Hook to clear the active session from Firebase\n * Used when canceling or completing a session\n * @deprecated Use useCancelTimerMutation instead\n */\nexport function useClearActiveSession() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async () => {\n      return firebaseSessionApi.clearActiveSession();\n    },\n    onSuccess: () => {\n      // Clear the active session cache\n      queryClient.setQueryData(\n        CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n        null\n      );\n    },\n  });\n}\n\n/**\n * Hook to finish the timer and create a session\n * Clears active session and creates a completed session record\n */\nexport function useFinishTimerMutation() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({\n      title,\n      description,\n      tags,\n      howFelt,\n      privateNotes,\n      options,\n    }: {\n      title: string;\n      description?: string;\n      tags?: string[];\n      howFelt?: number;\n      privateNotes?: string;\n      options?: {\n        visibility?: 'everyone' | 'followers' | 'private';\n        showStartTime?: boolean;\n        publishToFeeds?: boolean;\n        customDuration?: number;\n        images?: string[];\n        activityId: string;\n        projectId: string;\n        startTime: Date;\n      };\n    }) => {\n      if (!options) {\n        throw new Error(\n          'Options with activityId, projectId, and startTime are required'\n        );\n      }\n\n      const sessionData: CreateSessionData = {\n        activityId: options.activityId,\n        projectId: options.projectId,\n        title,\n        description,\n        duration: options.customDuration || 0,\n        startTime: options.startTime,\n        tags,\n        visibility: options.visibility,\n        showStartTime: options.showStartTime,\n        publishToFeeds: options.publishToFeeds,\n        howFelt,\n        privateNotes,\n        images: options.images,\n      };\n\n      let session: Session;\n\n      if (options.visibility && options.visibility !== 'private') {\n        // Create session with post for non-private sessions\n        const result = await firebaseSessionApi.createSessionWithPost(\n          sessionData,\n          description || `Completed ${title}`,\n          options.visibility\n        );\n        session = result.session;\n      } else {\n        // Create private session only\n        session = await firebaseSessionApi.createSession(sessionData);\n      }\n\n      return session;\n    },\n    onMutate: async () => {\n      // Optimistically clear the active session\n      await queryClient.cancelQueries({\n        queryKey: CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n      });\n\n      const previousActiveSession = queryClient.getQueryData(\n        CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none')\n      );\n\n      queryClient.setQueryData(\n        CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n        null\n      );\n\n      return { previousActiveSession };\n    },\n    onSuccess: async session => {\n      // Clear active session from Firebase\n      await firebaseSessionApi.clearActiveSession();\n\n      // Ensure cache is cleared\n      queryClient.setQueryData(\n        CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n        null\n      );\n\n      // Invalidate sessions cache to show the new session\n      queryClient.invalidateQueries({\n        queryKey: CACHE_KEYS.SESSIONS(user?.id || 'none'),\n      });\n\n      // Invalidate user stats since a new session was added\n      queryClient.invalidateQueries({\n        queryKey: CACHE_KEYS.USER_STATS(user?.id || 'none'),\n      });\n\n      // Invalidate activity stats for the project\n      if (session.activityId) {\n        queryClient.invalidateQueries({\n          queryKey: CACHE_KEYS.ACTIVITY_STATS(session.activityId),\n        });\n      }\n    },\n    onError: (err, variables, context) => {\n      // Restore previous active session on error\n      if (context?.previousActiveSession) {\n        queryClient.setQueryData(\n          CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n          context.previousActiveSession\n        );\n      }\n    },\n  });\n}\n\n/**\n * Hook to create a session (finish timer)\n * Handles both private sessions and sessions with posts\n * @deprecated Use useFinishTimerMutation instead\n */\nexport function useCreateSession() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const clearActiveSession = useClearActiveSession();\n\n  return useMutation({\n    mutationFn: async ({\n      sessionData,\n      visibility,\n    }: {\n      sessionData: CreateSessionData;\n      visibility?: 'everyone' | 'followers' | 'private';\n    }) => {\n      let session: Session;\n\n      if (visibility && visibility !== 'private') {\n        // Create session with post for non-private sessions\n        const result = await firebaseSessionApi.createSessionWithPost(\n          sessionData,\n          sessionData.description || `Completed ${sessionData.title}`,\n          visibility\n        );\n        session = result.session;\n      } else {\n        // Create private session only\n        session = await firebaseSessionApi.createSession(sessionData);\n      }\n\n      return session;\n    },\n    onMutate: async () => {\n      // Optimistically clear the active session\n      await queryClient.cancelQueries({\n        queryKey: CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n      });\n\n      const previousActiveSession = queryClient.getQueryData(\n        CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none')\n      );\n\n      queryClient.setQueryData(\n        CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n        null\n      );\n\n      return { previousActiveSession };\n    },\n    onSuccess: async session => {\n      // Clear active session from Firebase\n      await clearActiveSession.mutateAsync();\n\n      // Invalidate sessions cache to show the new session\n      queryClient.invalidateQueries({\n        queryKey: CACHE_KEYS.SESSIONS(user?.id || 'none'),\n      });\n\n      // Invalidate user stats since a new session was added\n      queryClient.invalidateQueries({\n        queryKey: CACHE_KEYS.USER_STATS(user?.id || 'none'),\n      });\n\n      // Invalidate activity stats for the project\n      if (session.activityId) {\n        queryClient.invalidateQueries({\n          queryKey: CACHE_KEYS.ACTIVITY_STATS(session.activityId),\n        });\n      }\n    },\n    onError: (err, variables, context) => {\n      // Restore previous active session on error\n      if (context?.previousActiveSession) {\n        queryClient.setQueryData(\n          CACHE_KEYS.ACTIVE_SESSION(user?.id || 'none'),\n          context.previousActiveSession\n        );\n      }\n    },\n  });\n}\n\n/**\n * Backward compatibility: Export aliases matching old context API\n */\nexport {\n  useActiveSession as useTimerActiveSession,\n  useSaveActiveSession as useTimerSave,\n  useClearActiveSession as useTimerClear,\n  useCreateSession as useTimerFinish,\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/infrastructure/firebase/mappers/ActiveSessionMapper.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/infrastructure/firebase/mappers/GroupMapper.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/infrastructure/firebase/mappers/SessionMapper.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 78,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 78,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 131,
        "column": 18,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 131,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 242,
        "column": 44,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 242,
        "endColumn": 49
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Session Mapper\n *\n * Converts between Firestore documents and Session domain entities.\n */\n\nimport {\n  DocumentSnapshot,\n  Timestamp,\n  getDoc,\n  doc as firestoreDoc,\n} from 'firebase/firestore';\nimport {\n  Session,\n  SessionVisibility,\n  SessionUser,\n  SessionActivity,\n} from '@/domain/entities/Session';\nimport { db, auth } from '@/lib/firebase';\nimport { DEFAULT_ACTIVITIES } from '@/types';\n\nexport class SessionMapper {\n  /**\n   * Convert Firestore document to Session domain entity (without enrichment)\n   */\n  toDomain(doc: DocumentSnapshot): Session {\n    const data = doc.data();\n    if (!data) {\n      throw new Error(`Session document ${doc.id} does not exist`);\n    }\n\n    return new Session(\n      doc.id,\n      data.userId,\n      data.projectId,\n      data.activityId || null,\n      data.duration,\n      this.timestampToDate(data.createdAt),\n      data.title,\n      data.description,\n      (data.visibility as SessionVisibility) || 'everyone',\n      data.supportCount || 0,\n      data.commentCount || 0,\n      data.groupIds || []\n    );\n  }\n\n  /**\n   * Convert Firestore document to enriched Session domain entity (with user/activity data)\n   * Returns null if user data cannot be fetched (deleted/inaccessible users)\n   */\n  async toDomainEnriched(doc: DocumentSnapshot): Promise<Session | null> {\n    const data = doc.data();\n    if (!data) {\n      throw new Error(`Session document ${doc.id} does not exist`);\n    }\n\n    // Fetch user data - REQUIRED, skip session if user is inaccessible\n    let user: SessionUser | undefined;\n    try {\n      const userDoc = await getDoc(firestoreDoc(db, 'users', data.userId));\n      if (!userDoc.exists()) {\n        // User does not exist - skip session\n        return null;\n      }\n\n      const userData = userDoc.data();\n      user = {\n        id: data.userId,\n        email: userData.email || '',\n        name: userData.name || 'Unknown User',\n        username: userData.username || 'unknown',\n        bio: userData.bio,\n        profilePicture: userData.profilePicture,\n        createdAt: this.timestampToDate(userData.createdAt),\n        updatedAt: this.timestampToDate(userData.updatedAt),\n      };\n    } catch (error) {\n      // If we can't fetch the user (permissions, deleted, etc), skip this session\n      return null;\n    }\n\n    // Fetch activity data\n    let activity: SessionActivity | undefined;\n    const activityId = data.activityId || data.projectId;\n\n    if (activityId) {\n      // Check if it's a default activity first\n      const defaultActivity = DEFAULT_ACTIVITIES.find(a => a.id === activityId);\n\n      if (defaultActivity) {\n        activity = {\n          id: defaultActivity.id,\n          userId: data.userId,\n          name: defaultActivity.name,\n          description: '',\n          icon: defaultActivity.icon,\n          color: defaultActivity.color,\n          status: 'active' as const,\n          isDefault: true,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        };\n      } else {\n        // Fetch custom activity\n        try {\n          const activityDoc = await getDoc(\n            firestoreDoc(\n              db,\n              'projects',\n              data.userId,\n              'userProjects',\n              activityId\n            )\n          );\n          if (activityDoc.exists()) {\n            const activityData = activityDoc.data();\n            activity = {\n              id: activityId,\n              userId: data.userId,\n              name: activityData.name || 'Unknown Activity',\n              description: activityData.description || '',\n              icon: activityData.icon || 'flat-color-icons:briefcase',\n              color: activityData.color || '#007AFF',\n              status: activityData.status || 'active',\n              isDefault: false,\n              createdAt: this.timestampToDate(activityData.createdAt),\n              updatedAt: this.timestampToDate(activityData.updatedAt),\n            };\n          }\n        } catch (error) {\n          // Failed to fetch activity - use default\n        }\n      }\n    }\n\n    // Check if current user has supported this session\n    const supportedBy = data.supportedBy || [];\n    const isSupported = auth.currentUser\n      ? supportedBy.includes(auth.currentUser.uid)\n      : false;\n\n    return new Session(\n      doc.id,\n      data.userId,\n      data.projectId,\n      data.activityId || null,\n      data.duration,\n      this.timestampToDate(data.createdAt),\n      data.title,\n      data.description,\n      (data.visibility as SessionVisibility) || 'everyone',\n      data.supportCount || 0,\n      data.commentCount || 0,\n      data.groupIds || [],\n      // Enriched data\n      user,\n      activity,\n      activity, // project (backwards compatibility)\n      data.images || [],\n      isSupported,\n      supportedBy,\n      data.allowComments !== false,\n      this.timestampToDate(data.updatedAt),\n      this.timestampToDate(data.startTime),\n      data.tags || [],\n      data.showStartTime,\n      data.howFelt,\n      data.privateNotes,\n      data.isArchived || false\n    );\n  }\n\n  /**\n   * Convert Session domain entity to Firestore document data\n   */\n  toFirestore(session: Session): Record<string, unknown> {\n    const data: Record<string, unknown> = {\n      userId: session.userId,\n      projectId: session.projectId,\n      duration: session.duration,\n      createdAt: Timestamp.fromDate(session.createdAt),\n      visibility: session.visibility,\n      supportCount: session.supportCount,\n      commentCount: session.commentCount,\n    };\n\n    // Add optional fields only if defined\n    if (session.activityId !== null && session.activityId !== undefined) {\n      data.activityId = session.activityId;\n    }\n\n    if (session.title !== undefined) {\n      data.title = session.title;\n    }\n\n    if (session.description !== undefined) {\n      data.description = session.description;\n    }\n\n    if (session.groupIds && session.groupIds.length > 0) {\n      data.groupIds = Array.from(session.groupIds);\n    }\n\n    return data;\n  }\n\n  /**\n   * Convert Firestore Timestamp to Date\n   */\n  private timestampToDate(timestamp: Timestamp | Date | undefined): Date {\n    if (!timestamp) {\n      return new Date();\n    }\n\n    if (timestamp instanceof Date) {\n      return timestamp;\n    }\n\n    return timestamp.toDate();\n  }\n\n  /**\n   * Convert multiple Firestore documents to Session entities (without enrichment)\n   */\n  toDomainList(docs: DocumentSnapshot[]): Session[] {\n    return docs.map(doc => this.toDomain(doc));\n  }\n\n  /**\n   * Convert multiple Firestore documents to enriched Session entities (with user/activity data)\n   * Processes in batches for performance\n   */\n  async toDomainListEnriched(docs: DocumentSnapshot[]): Promise<Session[]> {\n    const sessions: Session[] = [];\n    const batchSize = 10;\n\n    for (let i = 0; i < docs.length; i += batchSize) {\n      const batch = docs.slice(i, i + batchSize);\n      const batchResults = await Promise.all(\n        batch.map(doc =>\n          this.toDomainEnriched(doc).catch(error => {\n            // Failed to enrich session - return null to filter out\n            return null;\n          })\n        )\n      );\n\n      // Filter out null values (failed enrichments)\n      const validSessions = batchResults.filter(\n        (session): session is Session => session !== null\n      );\n      sessions.push(...validSessions);\n    }\n\n    return sessions;\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/infrastructure/firebase/mappers/UserMapper.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/infrastructure/firebase/repositories/ActiveSessionRepository.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'getDoc' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 11,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'where' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 16,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 8
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * ActiveSession Repository\n *\n * Handles data access for active timer sessions.\n * Stores in users/{userId}/activeSession subcollection for better security.\n */\n\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  setDoc,\n  deleteDoc,\n  query,\n  where,\n  limit as limitFn,\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { ActiveSession } from '@/domain/entities/ActiveSession';\nimport { ActiveSessionMapper } from '../mappers/ActiveSessionMapper';\n\nexport class ActiveSessionRepository {\n  private readonly mapper: ActiveSessionMapper;\n\n  constructor() {\n    this.mapper = new ActiveSessionMapper();\n  }\n\n  /**\n   * Get active session for a user\n   */\n  async getActiveSession(userId: string): Promise<ActiveSession | null> {\n    try {\n      // Check subcollection: users/{userId}/activeSession\n      const activeSessionRef = collection(db, `users/${userId}/activeSession`);\n      const q = query(activeSessionRef, limitFn(1));\n      const snapshot = await getDocs(q);\n\n      if (snapshot.empty) {\n        return null;\n      }\n\n      const doc = snapshot.docs[0];\n      if (!doc) {\n        return null;\n      }\n      return this.mapper.toDomain(doc);\n    } catch (error) {\n      console.error(`Error getting active session for user ${userId}:`, error);\n      throw new Error(\n        `Failed to get active session: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Save active session\n   */\n  async saveActiveSession(session: ActiveSession): Promise<void> {\n    try {\n      const docRef = doc(\n        db,\n        `users/${session.userId}/activeSession`,\n        session.id\n      );\n      const data = this.mapper.toFirestore(session);\n\n      await setDoc(docRef, data);\n    } catch (error) {\n      console.error(`Error saving active session ${session.id}:`, error);\n      throw new Error(\n        `Failed to save active session: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Delete active session\n   */\n  async deleteActiveSession(userId: string, sessionId: string): Promise<void> {\n    try {\n      const docRef = doc(db, `users/${userId}/activeSession`, sessionId);\n      await deleteDoc(docRef);\n    } catch (error) {\n      console.error(`Error deleting active session ${sessionId}:`, error);\n      throw new Error(\n        `Failed to delete active session: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Clear all active sessions for a user (cleanup)\n   */\n  async clearActiveSession(userId: string): Promise<void> {\n    try {\n      const activeSessionRef = collection(db, `users/${userId}/activeSession`);\n      const snapshot = await getDocs(activeSessionRef);\n\n      const deletePromises = snapshot.docs.map(doc => deleteDoc(doc.ref));\n\n      await Promise.all(deletePromises);\n    } catch (error) {\n      console.error(\n        `Error clearing active sessions for user ${userId}:`,\n        error\n      );\n      throw new Error(\n        `Failed to clear active sessions: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Check if user has an active session\n   */\n  async hasActiveSession(userId: string): Promise<boolean> {\n    try {\n      const session = await this.getActiveSession(userId);\n      return session !== null;\n    } catch (error) {\n      console.error(`Error checking active session for user ${userId}:`, error);\n      return false;\n    }\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/infrastructure/firebase/repositories/FeedRepository.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/infrastructure/firebase/repositories/GroupRepository.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'updateDoc' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 14,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'increment' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 21,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'Timestamp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 22,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 12
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Group Repository\n *\n * Handles all data access for Groups.\n * Implements the Repository pattern for clean separation between domain and infrastructure.\n */\n\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  setDoc,\n  updateDoc,\n  deleteDoc,\n  query,\n  where,\n  orderBy,\n  limit as limitFn,\n  writeBatch,\n  increment,\n  Timestamp\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { Group } from '@/domain/entities/Group';\nimport { GroupMapper } from '../mappers/GroupMapper';\n\nexport class GroupRepository {\n  private readonly mapper: GroupMapper;\n  private readonly collectionName = 'groups';\n\n  constructor() {\n    this.mapper = new GroupMapper();\n  }\n\n  /**\n   * Find group by ID\n   */\n  async findById(groupId: string): Promise<Group | null> {\n    try {\n      const docRef = doc(db, this.collectionName, groupId);\n      const docSnap = await getDoc(docRef);\n\n      if (!docSnap.exists()) {\n        return null;\n      }\n\n      return this.mapper.toDomain(docSnap);\n    } catch (error) {\n      console.error(`Error finding group ${groupId}:`, error);\n      throw new Error(`Failed to find group: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Find groups by member ID\n   */\n  async findByMemberId(userId: string, limit: number = 50): Promise<Group[]> {\n    try {\n      const q = query(\n        collection(db, this.collectionName),\n        where('memberIds', 'array-contains', userId),\n        orderBy('createdAt', 'desc'),\n        limitFn(limit)\n      );\n\n      const snapshot = await getDocs(q);\n      return this.mapper.toDomainList(snapshot.docs);\n    } catch (error) {\n      console.error(`Error finding groups for user ${userId}:`, error);\n      throw new Error(`Failed to find groups: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Find public groups\n   */\n  async findPublic(limit: number = 50): Promise<Group[]> {\n    try {\n      const q = query(\n        collection(db, this.collectionName),\n        where('privacy', '==', 'public'),\n        orderBy('memberCount', 'desc'),\n        limitFn(limit)\n      );\n\n      const snapshot = await getDocs(q);\n      return this.mapper.toDomainList(snapshot.docs);\n    } catch (error) {\n      console.error('Error finding public groups:', error);\n      throw new Error(`Failed to find public groups: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Save group (create or update)\n   */\n  async save(group: Group): Promise<void> {\n    try {\n      const docRef = doc(db, this.collectionName, group.id);\n      const data = this.mapper.toFirestore(group);\n\n      await setDoc(docRef, data, { merge: true });\n    } catch (error) {\n      console.error(`Error saving group ${group.id}:`, error);\n      throw new Error(`Failed to save group: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Add member to group (updates group entity)\n   */\n  async addMember(groupId: string, userId: string): Promise<void> {\n    try {\n      // Firestore doesn't have array append in batches\n      // We need to read first, then write\n      const group = await this.findById(groupId);\n      if (!group) {\n        throw new Error('Group not found');\n      }\n\n      const updatedGroup = group.withAddedMember(userId);\n      await this.save(updatedGroup);\n    } catch (error) {\n      console.error(`Error adding member ${userId} to group ${groupId}:`, error);\n      throw new Error(`Failed to add member: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Remove member from group (transactional with count update)\n   */\n  async removeMember(groupId: string, userId: string): Promise<void> {\n    try {\n      const batch = writeBatch(db);\n      const groupRef = doc(db, this.collectionName, groupId);\n\n      // Note: Firestore doesn't have array remove operator in batches\n      // We need to read first, then write\n      const group = await this.findById(groupId);\n      if (!group) {\n        throw new Error('Group not found');\n      }\n\n      const updatedGroup = group.withRemovedMember(userId);\n      const data = this.mapper.toFirestore(updatedGroup);\n\n      batch.set(groupRef, data);\n      await batch.commit();\n    } catch (error) {\n      console.error(`Error removing member ${userId} from group ${groupId}:`, error);\n      throw new Error(`Failed to remove member: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Delete group\n   */\n  async delete(groupId: string): Promise<void> {\n    try {\n      const docRef = doc(db, this.collectionName, groupId);\n      await deleteDoc(docRef);\n    } catch (error) {\n      console.error(`Error deleting group ${groupId}:`, error);\n      throw new Error(`Failed to delete group: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Check if group exists\n   */\n  async exists(groupId: string): Promise<boolean> {\n    try {\n      const docRef = doc(db, this.collectionName, groupId);\n      const docSnap = await getDoc(docRef);\n      return docSnap.exists();\n    } catch (error) {\n      console.error(`Error checking if group ${groupId} exists:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Get member count for a group\n   */\n  async getMemberCount(groupId: string): Promise<number> {\n    try {\n      const docRef = doc(db, this.collectionName, groupId);\n      const docSnap = await getDoc(docRef);\n\n      if (!docSnap.exists()) {\n        return 0;\n      }\n\n      const data = docSnap.data();\n      return data.memberCount || data.memberIds?.length || 0;\n    } catch (error) {\n      console.error(`Error getting member count for group ${groupId}:`, error);\n      return 0;\n    }\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/infrastructure/firebase/repositories/SessionRepository.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/infrastructure/firebase/repositories/SocialGraphRepository.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'socialGraphError' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 32,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'socialGraphError' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 71,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 71,
        "endColumn": 32
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Social Graph Repository\n *\n * Handles queries for social relationships (follows, group memberships).\n */\n\nimport {\n  collection,\n  getDocs,\n  query,\n  where\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\n\nexport class SocialGraphRepository {\n  /**\n   * Get list of users that a user is following\n   */\n  async getFollowingIds(userId: string): Promise<string[]> {\n    try {\n      let followingIds: string[] = [];\n\n      // Try new social_graph structure first\n      try {\n        const outboundRef = collection(db, `social_graph/${userId}/outbound`);\n        const outboundSnapshot = await getDocs(outboundRef);\n\n        if (!outboundSnapshot.empty) {\n          followingIds = outboundSnapshot.docs.map(doc => doc.id);\n          return followingIds;\n        }\n      } catch (socialGraphError) {\n        // If social_graph doesn't exist, fall through to legacy follows\n      }\n\n      // Fallback to old follows collection\n      const followingQuery = query(\n        collection(db, 'follows'),\n        where('followerId', '==', userId)\n      );\n      const followingSnapshot = await getDocs(followingQuery);\n\n      followingIds = followingSnapshot.docs.map(doc => {\n        const data = doc.data();\n        return data.followingId;\n      });\n\n      return followingIds;\n    } catch (error) {\n      console.error(`Error getting following IDs for user ${userId}:`, error);\n      throw new Error(`Failed to get following IDs: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get list of followers for a user\n   */\n  async getFollowerIds(userId: string): Promise<string[]> {\n    try {\n      let followerIds: string[] = [];\n\n      // Try new social_graph structure first\n      try {\n        const inboundRef = collection(db, `social_graph/${userId}/inbound`);\n        const inboundSnapshot = await getDocs(inboundRef);\n\n        if (!inboundSnapshot.empty) {\n          followerIds = inboundSnapshot.docs.map(doc => doc.id);\n          return followerIds;\n        }\n      } catch (socialGraphError) {\n        // If social_graph doesn't exist, fall through to legacy follows\n      }\n\n      // Fallback to old follows collection\n      const followersQuery = query(\n        collection(db, 'follows'),\n        where('followingId', '==', userId)\n      );\n      const followersSnapshot = await getDocs(followersQuery);\n\n      followerIds = followersSnapshot.docs.map(doc => {\n        const data = doc.data();\n        return data.followerId;\n      });\n\n      return followerIds;\n    } catch (error) {\n      console.error(`Error getting follower IDs for user ${userId}:`, error);\n      throw new Error(`Failed to get follower IDs: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get all group member IDs for groups a user belongs to\n   */\n  async getGroupMemberIds(userId: string): Promise<string[]> {\n    try {\n      // Get user's groups\n      const membershipsQuery = query(\n        collection(db, 'groupMemberships'),\n        where('userId', '==', userId),\n        where('status', '==', 'active')\n      );\n      const membershipsSnapshot = await getDocs(membershipsQuery);\n      const groupIds = membershipsSnapshot.docs.map(doc => doc.data().groupId);\n\n      if (groupIds.length === 0) {\n        return [];\n      }\n\n      // Get all members from those groups (batch queries due to 'in' limitation)\n      const allMemberIds = new Set<string>();\n\n      // Process in batches of 10 (Firestore 'in' limit)\n      for (let i = 0; i < groupIds.length; i += 10) {\n        const batchGroupIds = groupIds.slice(i, i + 10);\n\n        const groupMembershipsQuery = query(\n          collection(db, 'groupMemberships'),\n          where('groupId', 'in', batchGroupIds),\n          where('status', '==', 'active')\n        );\n\n        const groupMembershipsSnapshot = await getDocs(groupMembershipsQuery);\n        groupMembershipsSnapshot.docs.forEach(doc => {\n          const memberId = doc.data().userId;\n          // Don't include the user themselves\n          if (memberId !== userId) {\n            allMemberIds.add(memberId);\n          }\n        });\n      }\n\n      return Array.from(allMemberIds);\n    } catch (error) {\n      console.error(`Error getting group member IDs for user ${userId}:`, error);\n      throw new Error(`Failed to get group member IDs: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Check if user A follows user B\n   */\n  async isFollowing(followerId: string, followingId: string): Promise<boolean> {\n    try {\n      const followingIds = await this.getFollowingIds(followerId);\n      return followingIds.includes(followingId);\n    } catch (error) {\n      console.error(`Error checking if ${followerId} follows ${followingId}:`, error);\n      return false;\n    }\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/infrastructure/firebase/repositories/UserRepository.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'writeBatch' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 19,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 19,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * User Repository\n *\n * Handles all data access for Users.\n * Implements the Repository pattern for clean separation between domain and infrastructure.\n */\n\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  setDoc,\n  updateDoc,\n  query,\n  where,\n  orderBy,\n  limit as limitFn,\n  writeBatch,\n  increment,\n} from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\nimport { User } from '@/domain/entities/User';\nimport { UserMapper } from '../mappers/UserMapper';\n\nexport class UserRepository {\n  private readonly mapper: UserMapper;\n  private readonly collectionName = 'users';\n\n  constructor() {\n    this.mapper = new UserMapper();\n  }\n\n  /**\n   * Find user by ID\n   */\n  async findById(userId: string): Promise<User | null> {\n    try {\n      const docRef = doc(db, this.collectionName, userId);\n      const docSnap = await getDoc(docRef);\n\n      if (!docSnap.exists()) {\n        return null;\n      }\n\n      return this.mapper.toDomain(docSnap);\n    } catch (error) {\n      console.error(`Error finding user ${userId}:`, error);\n      throw new Error(\n        `Failed to find user: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Find user by username\n   */\n  async findByUsername(username: string): Promise<User | null> {\n    try {\n      const q = query(\n        collection(db, this.collectionName),\n        where('username', '==', username),\n        limitFn(1)\n      );\n\n      const snapshot = await getDocs(q);\n\n      if (snapshot.empty) {\n        return null;\n      }\n\n      const doc = snapshot.docs[0];\n      if (!doc) {\n        return null;\n      }\n      return this.mapper.toDomain(doc);\n    } catch (error) {\n      console.error(`Error finding user by username ${username}:`, error);\n      throw new Error(\n        `Failed to find user: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Find multiple users by IDs\n   */\n  async findByIds(userIds: string[]): Promise<User[]> {\n    try {\n      if (userIds.length === 0) {\n        return [];\n      }\n\n      // Firestore 'in' queries are limited to 10 items\n      // If we have more, we need to batch the requests\n      const batchSize = 10;\n      const batches: Promise<User[]>[] = [];\n\n      for (let i = 0; i < userIds.length; i += batchSize) {\n        const batchIds = userIds.slice(i, i + batchSize);\n        const batchPromise = this.fetchUserBatch(batchIds);\n        batches.push(batchPromise);\n      }\n\n      const results = await Promise.all(batches);\n      return results.flat();\n    } catch (error) {\n      console.error('Error finding users by IDs:', error);\n      throw new Error(\n        `Failed to find users: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Helper method to fetch a batch of users (max 10)\n   */\n  private async fetchUserBatch(userIds: string[]): Promise<User[]> {\n    const q = query(\n      collection(db, this.collectionName),\n      where('__name__', 'in', userIds)\n    );\n\n    const snapshot = await getDocs(q);\n    return this.mapper.toDomainList(snapshot.docs);\n  }\n\n  /**\n   * Search users by username (prefix match)\n   */\n  async searchByUsername(prefix: string, limit: number = 20): Promise<User[]> {\n    try {\n      // Firestore doesn't support full text search\n      // This is a simple prefix match using range queries\n      const q = query(\n        collection(db, this.collectionName),\n        where('username', '>=', prefix),\n        where('username', '<=', prefix + '\\uf8ff'),\n        orderBy('username'),\n        limitFn(limit)\n      );\n\n      const snapshot = await getDocs(q);\n      return this.mapper.toDomainList(snapshot.docs);\n    } catch (error) {\n      console.error(\n        `Error searching users by username prefix ${prefix}:`,\n        error\n      );\n      throw new Error(\n        `Failed to search users: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Save user (create or update)\n   */\n  async save(user: User): Promise<void> {\n    try {\n      const docRef = doc(db, this.collectionName, user.id);\n      const data = this.mapper.toFirestore(user);\n\n      await setDoc(docRef, data, { merge: true });\n    } catch (error) {\n      console.error(`Error saving user ${user.id}:`, error);\n      throw new Error(\n        `Failed to save user: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Update follower count\n   */\n  async updateFollowerCount(userId: string, delta: number): Promise<void> {\n    try {\n      const docRef = doc(db, this.collectionName, userId);\n      await updateDoc(docRef, {\n        followerCount: increment(delta),\n      });\n    } catch (error) {\n      console.error(`Error updating follower count for user ${userId}:`, error);\n      throw new Error(\n        `Failed to update follower count: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Update following count\n   */\n  async updateFollowingCount(userId: string, delta: number): Promise<void> {\n    try {\n      const docRef = doc(db, this.collectionName, userId);\n      await updateDoc(docRef, {\n        followingCount: increment(delta),\n      });\n    } catch (error) {\n      console.error(\n        `Error updating following count for user ${userId}:`,\n        error\n      );\n      throw new Error(\n        `Failed to update following count: ${error instanceof Error ? error.message : 'Unknown error'}`\n      );\n    }\n  }\n\n  /**\n   * Check if user exists\n   */\n  async exists(userId: string): Promise<boolean> {\n    try {\n      const docRef = doc(db, this.collectionName, userId);\n      const docSnap = await getDoc(docRef);\n      return docSnap.exists();\n    } catch (error) {\n      console.error(`Error checking if user ${userId} exists:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Check if username is available\n   */\n  async isUsernameAvailable(username: string): Promise<boolean> {\n    try {\n      const user = await this.findByUsername(username);\n      return user === null;\n    } catch (error) {\n      console.error(\n        `Error checking username availability for ${username}:`,\n        error\n      );\n      return false;\n    }\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/instrumentation-client.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/instrumentation.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/__tests__/errorHandler.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/__tests__/imageUpload.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/__tests__/rateLimit.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/achievements/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setDoc' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 16,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 9
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Achievements API Module\n * Handles achievement definitions and tracking\n */\n\n// ============================================================================\n// IMPORTS\n// ============================================================================\n\n// Firebase imports\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  setDoc,\n  addDoc,\n  updateDoc,\n  query,\n  where,\n  orderBy,\n  limit as limitFn,\n  serverTimestamp,\n} from 'firebase/firestore';\n\n// Local Firebase config\nimport { db, auth } from '@/lib/firebase';\n\n// Error handling\nimport { handleError } from '@/lib/errorHandler';\n\n// Shared utilities\nimport { convertTimestamp } from '../shared/utils';\n\n// Types\nimport type {\n  AchievementType,\n  Achievement,\n  AchievementProgress,\n  UserAchievementData,\n} from '@/types';\n\n// ============================================================================\n// ACHIEVEMENT DEFINITIONS\n// ============================================================================\n\n/**\n * Achievement metadata defining all available achievements\n */\nexport const ACHIEVEMENT_DEFINITIONS: Record<\n  AchievementType,\n  { name: string; description: string; icon: string; targetValue?: number }\n> = {\n  'streak-7': {\n    name: '7 Day Streak',\n    description: 'Complete sessions for 7 days in a row',\n    icon: '🔥',\n    targetValue: 7,\n  },\n  'streak-30': {\n    name: '30 Day Streak',\n    description: 'Complete sessions for 30 days in a row',\n    icon: '🔥',\n    targetValue: 30,\n  },\n  'streak-100': {\n    name: '100 Day Streak',\n    description: 'Complete sessions for 100 days in a row',\n    icon: '🔥',\n    targetValue: 100,\n  },\n  'streak-365': {\n    name: 'Year Streak',\n    description: 'Complete sessions for 365 days in a row',\n    icon: '🔥',\n    targetValue: 365,\n  },\n  'hours-10': {\n    name: 'First 10 Hours',\n    description: 'Log 10 hours of work',\n    icon: '⏱️',\n    targetValue: 10,\n  },\n  'hours-50': {\n    name: '50 Hours',\n    description: 'Log 50 hours of work',\n    icon: '⏱️',\n    targetValue: 50,\n  },\n  'hours-100': {\n    name: '100 Hours',\n    description: 'Log 100 hours of work',\n    icon: '⏱️',\n    targetValue: 100,\n  },\n  'hours-500': {\n    name: '500 Hours',\n    description: 'Log 500 hours of work',\n    icon: '⏱️',\n    targetValue: 500,\n  },\n  'hours-1000': {\n    name: '1000 Hours',\n    description: 'Log 1000 hours of work',\n    icon: '⏱️',\n    targetValue: 1000,\n  },\n  'challenge-complete': {\n    name: 'Challenge Complete',\n    description: 'Complete a challenge',\n    icon: '🏆',\n  },\n  'challenge-winner': {\n    name: 'Challenge Winner',\n    description: 'Win a challenge',\n    icon: '👑',\n  },\n  'personal-record-session': {\n    name: 'Personal Record',\n    description: 'Complete your longest session',\n    icon: '🎯',\n  },\n  'personal-record-day': {\n    name: 'Best Day Ever',\n    description: 'Complete your most productive day',\n    icon: '🌟',\n  },\n  'early-bird': {\n    name: 'Early Bird',\n    description: 'Complete a session before 6 AM',\n    icon: '🌅',\n  },\n  'night-owl': {\n    name: 'Night Owl',\n    description: 'Complete a session after 10 PM',\n    icon: '🦉',\n  },\n  'weekend-warrior': {\n    name: 'Weekend Warrior',\n    description: 'Complete 10 weekend sessions',\n    icon: '💪',\n  },\n  'consistency-king': {\n    name: 'Consistency King',\n    description: 'Complete sessions for 30 consecutive days',\n    icon: '👑',\n  },\n};\n\nexport const firebaseAchievementApi = {\n  // Get user's achievements\n  getUserAchievements: async (userId: string): Promise<Achievement[]> => {\n    try {\n      const achievementsQuery = query(\n        collection(db, 'achievements'),\n        where('userId', '==', userId),\n        orderBy('earnedAt', 'desc')\n      );\n\n      const snapshot = await getDocs(achievementsQuery);\n      return snapshot.docs.map(\n        doc =>\n          ({\n            id: doc.id,\n            ...doc.data(),\n            earnedAt: convertTimestamp(doc.data().earnedAt),\n          }) as Achievement\n      );\n    } catch (error) {\n      const apiError = handleError(error, 'Get achievements', {\n        defaultMessage: 'Failed to get achievements',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Get achievement progress for all achievement types\n  getAchievementProgress: async (\n    userId: string\n  ): Promise<AchievementProgress[]> => {\n    try {\n      const [achievements, userData] = await Promise.all([\n        firebaseAchievementApi.getUserAchievements(userId),\n        firebaseAchievementApi.getUserAchievementData(userId),\n      ]);\n\n      const unlockedTypes = new Set(achievements.map(a => a.type));\n      const progress: AchievementProgress[] = [];\n\n      // Streak achievements\n      const streakAchievements: AchievementType[] = [\n        'streak-7',\n        'streak-30',\n        'streak-100',\n        'streak-365',\n      ];\n      streakAchievements.forEach(type => {\n        const def = ACHIEVEMENT_DEFINITIONS[type];\n        const isUnlocked = unlockedTypes.has(type);\n        const achievement = achievements.find(a => a.type === type);\n\n        progress.push({\n          type,\n          name: def.name,\n          description: def.description,\n          icon: def.icon,\n          currentValue: userData.currentStreak,\n          targetValue: def.targetValue || 0,\n          percentage: Math.min(\n            100,\n            (userData.currentStreak / (def.targetValue || 1)) * 100\n          ),\n          isUnlocked,\n          unlockedAt: achievement?.earnedAt,\n        });\n      });\n\n      // Hour achievements\n      const hourAchievements: AchievementType[] = [\n        'hours-10',\n        'hours-50',\n        'hours-100',\n        'hours-500',\n        'hours-1000',\n      ];\n      hourAchievements.forEach(type => {\n        const def = ACHIEVEMENT_DEFINITIONS[type];\n        const isUnlocked = unlockedTypes.has(type);\n        const achievement = achievements.find(a => a.type === type);\n\n        progress.push({\n          type,\n          name: def.name,\n          description: def.description,\n          icon: def.icon,\n          currentValue: userData.totalHours,\n          targetValue: def.targetValue || 0,\n          percentage: Math.min(\n            100,\n            (userData.totalHours / (def.targetValue || 1)) * 100\n          ),\n          isUnlocked,\n          unlockedAt: achievement?.earnedAt,\n        });\n      });\n\n\n      return progress;\n    } catch (error) {\n      const apiError = handleError(error, 'Get achievement progress', {\n        defaultMessage: 'Failed to get achievement progress',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Get user data for achievement checking\n  getUserAchievementData: async (\n    userId: string\n  ): Promise<UserAchievementData> => {\n    try {\n      // Dynamic imports to avoid circular dependencies\n      const { firebaseStreakApi } = await import('../streaks');\n      const { firebaseUserApi } = await import('../users');\n\n      const [streakData, userStats] = await Promise.all([\n        firebaseStreakApi.getStreakData(userId),\n        firebaseUserApi.getUserStats(userId),\n      ]);\n\n      // Get session stats\n      const sessionsQuery = query(\n        collection(db, 'sessions'),\n        where('userId', '==', userId),\n        orderBy('duration', 'desc'),\n        limitFn(1)\n      );\n      const sessionsSnapshot = await getDocs(sessionsQuery);\n      const longestSession = sessionsSnapshot.docs[0]?.data()?.duration || 0;\n\n      return {\n        userId,\n        totalHours: userStats.totalHours,\n        currentStreak: streakData.currentStreak,\n        longestStreak: streakData.longestStreak,\n        totalSessions: userStats.sessionsThisMonth, // Approximate\n        longestSession: Math.floor(longestSession / 60),\n        mostHoursInDay: 0, // TODO: Calculate from daily stats\n        challengesCompleted: 0, // TODO: Get from challenges\n        challengesWon: 0, // TODO: Get from challenges\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Get user achievement data', {\n        defaultMessage: 'Failed to get user achievement data',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Check and award new achievements after session\n  checkAchievements: async (\n    userId: string,\n    sessionId?: string\n  ): Promise<Achievement[]> => {\n    try {\n      const [existingAchievements, userData] = await Promise.all([\n        firebaseAchievementApi.getUserAchievements(userId),\n        firebaseAchievementApi.getUserAchievementData(userId),\n      ]);\n\n      const unlockedTypes = new Set(existingAchievements.map(a => a.type));\n      const newAchievements: Achievement[] = [];\n\n      // Check streak achievements\n      if (userData.currentStreak >= 7 && !unlockedTypes.has('streak-7')) {\n        newAchievements.push(\n          await firebaseAchievementApi.awardAchievement(\n            userId,\n            'streak-7',\n            sessionId\n          )\n        );\n      }\n      if (userData.currentStreak >= 30 && !unlockedTypes.has('streak-30')) {\n        newAchievements.push(\n          await firebaseAchievementApi.awardAchievement(\n            userId,\n            'streak-30',\n            sessionId\n          )\n        );\n      }\n      if (userData.currentStreak >= 100 && !unlockedTypes.has('streak-100')) {\n        newAchievements.push(\n          await firebaseAchievementApi.awardAchievement(\n            userId,\n            'streak-100',\n            sessionId\n          )\n        );\n      }\n      if (userData.currentStreak >= 365 && !unlockedTypes.has('streak-365')) {\n        newAchievements.push(\n          await firebaseAchievementApi.awardAchievement(\n            userId,\n            'streak-365',\n            sessionId\n          )\n        );\n      }\n\n      // Check hour achievements\n      if (userData.totalHours >= 10 && !unlockedTypes.has('hours-10')) {\n        newAchievements.push(\n          await firebaseAchievementApi.awardAchievement(\n            userId,\n            'hours-10',\n            sessionId\n          )\n        );\n      }\n      if (userData.totalHours >= 50 && !unlockedTypes.has('hours-50')) {\n        newAchievements.push(\n          await firebaseAchievementApi.awardAchievement(\n            userId,\n            'hours-50',\n            sessionId\n          )\n        );\n      }\n      if (userData.totalHours >= 100 && !unlockedTypes.has('hours-100')) {\n        newAchievements.push(\n          await firebaseAchievementApi.awardAchievement(\n            userId,\n            'hours-100',\n            sessionId\n          )\n        );\n      }\n      if (userData.totalHours >= 500 && !unlockedTypes.has('hours-500')) {\n        newAchievements.push(\n          await firebaseAchievementApi.awardAchievement(\n            userId,\n            'hours-500',\n            sessionId\n          )\n        );\n      }\n      if (userData.totalHours >= 1000 && !unlockedTypes.has('hours-1000')) {\n        newAchievements.push(\n          await firebaseAchievementApi.awardAchievement(\n            userId,\n            'hours-1000',\n            sessionId\n          )\n        );\n      }\n\n\n      // Check time-based achievements if recent session provided\n      if (userData.recentSession) {\n        const sessionHour = userData.recentSession.startTime.getHours();\n\n        if (sessionHour < 6 && !unlockedTypes.has('early-bird')) {\n          newAchievements.push(\n            await firebaseAchievementApi.awardAchievement(\n              userId,\n              'early-bird',\n              sessionId\n            )\n          );\n        }\n\n        if (sessionHour >= 22 && !unlockedTypes.has('night-owl')) {\n          newAchievements.push(\n            await firebaseAchievementApi.awardAchievement(\n              userId,\n              'night-owl',\n              sessionId\n            )\n          );\n        }\n      }\n\n      return newAchievements;\n    } catch (error) {\n      const apiError = handleError(error, 'Check achievements', {\n        defaultMessage: 'Failed to check achievements',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Award an achievement\n  awardAchievement: async (\n    userId: string,\n    type: AchievementType,\n    sessionId?: string\n  ): Promise<Achievement> => {\n    try {\n      const def = ACHIEVEMENT_DEFINITIONS[type];\n      const achievementData = {\n        userId,\n        type,\n        name: def.name,\n        description: def.description,\n        icon: def.icon,\n        earnedAt: serverTimestamp(),\n        sessionId: sessionId || null,\n        isShared: false,\n      };\n\n      const docRef = await addDoc(\n        collection(db, 'achievements'),\n        achievementData\n      );\n\n      // Create notification\n      await addDoc(collection(db, 'notifications'), {\n        userId,\n        type: 'achievement',\n        title: 'Achievement Unlocked!',\n        message: `You earned the \"${def.name}\" achievement!`,\n        linkUrl: `/profile/${userId}?tab=achievements`,\n        isRead: false,\n        createdAt: serverTimestamp(),\n      });\n\n      return {\n        id: docRef.id,\n        ...achievementData,\n        earnedAt: new Date(),\n      } as Achievement;\n    } catch (error) {\n      const apiError = handleError(error, 'Award achievement', {\n        defaultMessage: 'Failed to award achievement',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Share achievement to feed\n  shareAchievement: async (achievementId: string): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const achievementDoc = await getDoc(\n        doc(db, 'achievements', achievementId)\n      );\n      if (!achievementDoc.exists()) {\n        throw new Error('Achievement not found');\n      }\n\n      const achievement = achievementDoc.data() as Achievement;\n      if (achievement.userId !== auth.currentUser.uid) {\n        throw new Error('Unauthorized');\n      }\n\n      // Create a post about the achievement\n      await addDoc(collection(db, 'posts'), {\n        userId: auth.currentUser.uid,\n        type: 'achievement',\n        content: `Just unlocked the \"${achievement.name}\" achievement! ${achievement.icon}`,\n        achievementId,\n        visibility: 'everyone',\n        supportCount: 0,\n        commentCount: 0,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n      });\n\n      // Mark achievement as shared\n      await updateDoc(doc(db, 'achievements', achievementId), {\n        isShared: true,\n      });\n    } catch (error) {\n      const apiError = handleError(error, 'Share achievement', {\n        defaultMessage: 'Failed to share achievement',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n};\n\n// Firebase Notification API\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/auth/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'apiError' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 53,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'checkEmailExistsInFirestore' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 66,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'apiError' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 77,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 77,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 318,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 318,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8841, 8844], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8841, 8844], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 408,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 408,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12228, 12231], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12228, 12231], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'token' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 442,
        "column": 26,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 442,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'token' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 496,
        "column": 23,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 496,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'error' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 501,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 501,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'credential' is assigned a value but never used. Allowed unused vars must match /^_/u.",
        "line": 514,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 514,
        "endColumn": 25
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 9,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Authentication API Module\n * Handles user authentication operations: login, signup, Google OAuth, and session management\n */\n\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  setDoc,\n  query,\n  where,\n  limit as limitFn,\n  serverTimestamp,\n} from 'firebase/firestore';\nimport {\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  signOut,\n  onAuthStateChanged,\n  User as FirebaseUser,\n  updateProfile,\n  GoogleAuthProvider,\n  signInWithPopup,\n  getRedirectResult,\n} from 'firebase/auth';\nimport { db, auth } from '@/lib/firebase';\nimport { handleError, ErrorSeverity } from '@/lib/errorHandler';\nimport { checkRateLimit, RateLimitError } from '@/lib/rateLimit';\nimport { convertTimestamp } from '../shared/utils';\nimport type {\n  AuthResponse,\n  LoginCredentials,\n  SignupCredentials,\n  AuthUser,\n} from '@/types';\n\n/**\n * Check if a username already exists in Firestore\n */\nconst checkUsernameExists = async (username: string): Promise<boolean> => {\n  try {\n    const usersRef = collection(db, 'users');\n    const q = query(\n      usersRef,\n      where('usernameLower', '==', username.toLowerCase()),\n      limitFn(1)\n    );\n    const snapshot = await getDocs(q);\n    return !snapshot.empty;\n  } catch (error) {\n    const apiError = handleError(error, 'Check username availability', {\n      severity: ErrorSeverity.WARNING,\n    });\n    // If there's an error checking, allow the signup to proceed\n    // Firebase Auth will handle duplicate emails\n    return false;\n  }\n};\n\n/**\n * Check if an email already exists in Firestore\n * Note: Firebase Auth is the primary check for email uniqueness\n */\nconst checkEmailExistsInFirestore = async (email: string): Promise<boolean> => {\n  try {\n    const usersRef = collection(db, 'users');\n    const q = query(\n      usersRef,\n      where('email', '==', email.toLowerCase()),\n      limitFn(1)\n    );\n    const snapshot = await getDocs(q);\n    return !snapshot.empty;\n  } catch (error) {\n    const apiError = handleError(error, 'Check email availability', {\n      severity: ErrorSeverity.WARNING,\n    });\n    return false;\n  }\n};\n\n/**\n * Generate a unique username from an email and optional display name\n */\nconst generateUniqueUsername = async (\n  email: string,\n  displayName?: string\n): Promise<string> => {\n  // Try using display name first if provided\n  if (displayName) {\n    const baseUsername = displayName\n      .toLowerCase()\n      .replace(/[^a-z0-9]/g, '')\n      .substring(0, 20);\n\n    if (baseUsername.length >= 3) {\n      // Try the base username first\n      if (!(await checkUsernameExists(baseUsername))) {\n        return baseUsername;\n      }\n\n      // Try with numbers appended\n      for (let i = 1; i <= 999; i++) {\n        const candidate = `${baseUsername}${i}`;\n        if (!(await checkUsernameExists(candidate))) {\n          return candidate;\n        }\n      }\n    }\n  }\n\n  // Fall back to email-based username\n  const emailParts = email.split('@');\n  const emailPart = emailParts[0];\n  if (!emailPart) {\n    throw new Error('Invalid email format');\n  }\n  const baseUsername = emailPart\n    .toLowerCase()\n    .replace(/[^a-z0-9]/g, '')\n    .substring(0, 20);\n\n  // Try the base username first\n  if (baseUsername.length >= 3 && !(await checkUsernameExists(baseUsername))) {\n    return baseUsername;\n  }\n\n  // Try with numbers appended\n  for (let i = 1; i <= 9999; i++) {\n    const candidate = `${baseUsername}${i}`;\n    if (!(await checkUsernameExists(candidate))) {\n      return candidate;\n    }\n  }\n\n  // Last resort: use a random string\n  const randomSuffix = Math.random().toString(36).substring(2, 10);\n  return `user_${randomSuffix}`;\n};\n\n/**\n * Authentication API\n * All authentication-related operations\n */\nexport const firebaseAuthApi = {\n  /**\n   * Login with email and password\n   */\n  login: async (credentials: LoginCredentials): Promise<AuthResponse> => {\n    try {\n      // Rate limit login attempts by email\n      checkRateLimit(credentials.email, 'AUTH_LOGIN');\n\n      const userCredential = await signInWithEmailAndPassword(\n        auth,\n        credentials.email,\n        credentials.password\n      );\n      const firebaseUser = userCredential.user;\n\n      // Get user profile from Firestore\n      const userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));\n      let userData = userDoc.data();\n\n      // If user profile doesn't exist, create it\n      if (!userData) {\n        const newUserData = {\n          email: credentials.email,\n          name: 'New User',\n          username: credentials.email.split('@')[0],\n          bio: '',\n          location: '',\n          profilePicture: null,\n          followersCount: 0,\n          followingCount: 0,\n          totalHours: 0,\n          profileVisibility: 'everyone',\n          activityVisibility: 'everyone',\n          projectVisibility: 'everyone',\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp(),\n        };\n\n        await setDoc(doc(db, 'users', firebaseUser.uid), newUserData);\n        userData = newUserData;\n      }\n\n      const user: AuthUser = {\n        id: firebaseUser.uid,\n        email: firebaseUser.email!,\n        name: userData.name,\n        username: userData.username,\n        bio: userData.bio,\n        location: userData.location,\n        profilePicture: userData.profilePicture,\n        createdAt: convertTimestamp(userData.createdAt),\n        updatedAt: convertTimestamp(userData.updatedAt),\n      };\n\n      const token = await firebaseUser.getIdToken();\n\n      return { user, token };\n    } catch (error) {\n      // Re-throw rate limit errors as-is\n      if (error instanceof RateLimitError) {\n        throw error;\n      }\n      const apiError = handleError(error, 'Login', {\n        defaultMessage: 'Login failed',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Sign up a new user with email and password\n   */\n  signup: async (credentials: SignupCredentials): Promise<AuthResponse> => {\n    try {\n      // Rate limit signup attempts by email\n      checkRateLimit(credentials.email, 'AUTH_SIGNUP');\n\n      // Validate username uniqueness BEFORE creating Firebase Auth user\n      const usernameExists = await checkUsernameExists(credentials.username);\n      if (usernameExists) {\n        throw new Error(\n          'This username is already taken. Please choose a different username.'\n        );\n      }\n\n      // Create Firebase Auth user (this will throw if email already exists)\n      const userCredential = await createUserWithEmailAndPassword(\n        auth,\n        credentials.email,\n        credentials.password\n      );\n      const firebaseUser = userCredential.user;\n\n      // Create user profile in Firestore\n      const userData = {\n        email: credentials.email,\n        name: credentials.name,\n        username: credentials.username,\n        usernameLower: credentials.username.toLowerCase(),\n        nameLower: credentials.name.toLowerCase(),\n        bio: '',\n        location: '',\n        profilePicture: null,\n        followersCount: 0,\n        followingCount: 0,\n        totalHours: 0,\n        inboundFriendshipCount: 0,\n        outboundFriendshipCount: 0,\n        mutualFriendshipCount: 0,\n        profileVisibility: 'everyone',\n        activityVisibility: 'everyone',\n        projectVisibility: 'everyone',\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n      };\n\n      await setDoc(doc(db, 'users', firebaseUser.uid), userData);\n\n      // Update Firebase Auth profile\n      await updateProfile(firebaseUser, {\n        displayName: credentials.name,\n      });\n\n      const user: AuthUser = {\n        id: firebaseUser.uid,\n        email: credentials.email,\n        name: credentials.name,\n        username: credentials.username,\n        bio: '',\n        location: '',\n        profilePicture: undefined,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      const token = await firebaseUser.getIdToken();\n\n      return { user, token };\n    } catch (error) {\n      // Re-throw rate limit errors as-is\n      if (error instanceof RateLimitError) {\n        throw error;\n      }\n      const apiError = handleError(error, 'Signup', {\n        defaultMessage: 'Signup failed',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Sign in with Google OAuth\n   */\n  signInWithGoogle: async (): Promise<AuthResponse> => {\n    try {\n      const provider = new GoogleAuthProvider();\n      // Add scopes for better user info\n      provider.addScope('profile');\n      provider.addScope('email');\n\n      // Set custom parameters\n      provider.setCustomParameters({\n        prompt: 'select_account',\n      });\n\n      let userCredential;\n\n      try {\n        // Use popup for better UX and to avoid cross-origin issues\n        userCredential = await signInWithPopup(auth, provider);\n      } catch (popupError: any) {\n        console.error('[signInWithGoogle] Popup error:', popupError);\n        console.error('[signInWithGoogle] Error code:', popupError.code);\n        console.error('[signInWithGoogle] Error message:', popupError.message);\n\n        // Handle specific error codes\n        if (popupError.code === 'auth/popup-blocked') {\n          throw new Error(\n            'Popup was blocked by your browser. Please allow popups for this site.'\n          );\n        } else if (popupError.code === 'auth/popup-closed-by-user') {\n          throw new Error('Sign-in was cancelled.');\n        } else if (popupError.code === 'auth/cancelled-popup-request') {\n          throw new Error('Sign-in was cancelled.');\n        } else if (popupError.code === 'auth/unauthorized-domain') {\n          throw new Error(\n            'This domain is not authorized for Google Sign-in. Please contact support.'\n          );\n        } else if (popupError.code === 'auth/network-request-failed') {\n          throw new Error(\n            'Network error. Please check your internet connection and try again.'\n          );\n        }\n        // Re-throw if it's a different error\n        throw popupError;\n      }\n\n      const firebaseUser = userCredential.user;\n\n      // Check if user profile exists\n      const userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));\n      let userData = userDoc.data();\n\n      // If user profile doesn't exist, create it\n      if (!userData) {\n        // Generate a unique username using the helper function\n        const username = await generateUniqueUsername(\n          firebaseUser.email!,\n          firebaseUser.displayName || undefined\n        );\n\n        userData = {\n          email: firebaseUser.email!,\n          name: firebaseUser.displayName || 'New User',\n          username: username,\n          usernameLower: username.toLowerCase(),\n          nameLower: (firebaseUser.displayName || 'New User').toLowerCase(),\n          bio: '',\n          location: '',\n          profilePicture: firebaseUser.photoURL || null,\n          followersCount: 0,\n          followingCount: 0,\n          totalHours: 0,\n          inboundFriendshipCount: 0,\n          outboundFriendshipCount: 0,\n          mutualFriendshipCount: 0,\n          profileVisibility: 'everyone',\n          activityVisibility: 'everyone',\n          projectVisibility: 'everyone',\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp(),\n        };\n\n        await setDoc(doc(db, 'users', firebaseUser.uid), userData);\n      }\n\n      const user: AuthUser = {\n        id: firebaseUser.uid,\n        email: firebaseUser.email!,\n        name: userData.name,\n        username: userData.username,\n        bio: userData.bio,\n        location: userData.location,\n        profilePicture: userData.profilePicture,\n        createdAt: convertTimestamp(userData.createdAt),\n        updatedAt: convertTimestamp(userData.updatedAt),\n      };\n\n      const token = await firebaseUser.getIdToken();\n\n      return { user, token };\n    } catch (error: unknown) {\n      console.error('Google sign-in error:', error);\n\n      // Special case: if redirect is in progress, pass through without modification\n      if (error.message === 'REDIRECT_IN_PROGRESS') {\n        throw error;\n      }\n\n      // If the error is already a custom Error with a message, re-throw it as-is\n      if (error instanceof Error && !(error as any).code) {\n        throw error;\n      }\n\n      // Provide more specific error messages for Firebase errors\n      if (error.message && error.message.includes('Firebase Console')) {\n        throw error;\n      }\n\n      const apiError = handleError(error, 'Google sign-in', {\n        defaultMessage:\n          'Google sign-in failed. Please check that Google authentication is enabled in Firebase Console.',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Logout current user\n   */\n  logout: async (): Promise<void> => {\n    try {\n      await signOut(auth);\n    } catch (error) {\n      const apiError = handleError(error, 'Logout', {\n        defaultMessage: 'Logout failed',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get current authenticated user\n   */\n  getCurrentUser: async (token?: string): Promise<AuthUser> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('No authenticated user');\n      }\n\n      const userDoc = await getDoc(doc(db, 'users', auth.currentUser.uid));\n      let userData = userDoc.data();\n\n      // If user profile doesn't exist, create a basic one\n      if (!userData) {\n        const basicUserData = {\n          email: auth.currentUser.email!,\n          name: auth.currentUser.displayName || 'New User',\n          username: auth.currentUser.email!.split('@')[0],\n          bio: '',\n          location: '',\n          profilePicture: auth.currentUser.photoURL || null,\n          followersCount: 0,\n          followingCount: 0,\n          totalHours: 0,\n          profileVisibility: 'everyone',\n          activityVisibility: 'everyone',\n          projectVisibility: 'everyone',\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp(),\n        };\n\n        await setDoc(doc(db, 'users', auth.currentUser.uid), basicUserData);\n        userData = basicUserData;\n      }\n\n      return {\n        id: auth.currentUser.uid,\n        email: auth.currentUser.email!,\n        name: userData.name,\n        username: userData.username,\n        bio: userData.bio,\n        location: userData.location,\n        profilePicture: userData.profilePicture,\n        createdAt: convertTimestamp(userData.createdAt),\n        updatedAt: convertTimestamp(userData.updatedAt),\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Get current user', {\n        defaultMessage: 'Failed to get current user',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Verify authentication token\n   */\n  verifyToken: async (token: string): Promise<boolean> => {\n    try {\n      // Firebase handles token verification automatically\n      // We just need to check if user is authenticated\n      return !!auth.currentUser;\n    } catch (error) {\n      return false;\n    }\n  },\n\n  /**\n   * Handle Google redirect result (for mobile OAuth flow)\n   */\n  handleGoogleRedirectResult: async (): Promise<AuthResponse | null> => {\n    try {\n      const result = await getRedirectResult(auth);\n\n      if (result) {\n        const credential = GoogleAuthProvider.credentialFromResult(result);\n      }\n\n      if (!result) {\n        // No redirect result (user didn't come from redirect flow)\n        return null;\n      }\n\n      const firebaseUser = result.user;\n\n      // Check if user profile exists\n      const userDoc = await getDoc(doc(db, 'users', firebaseUser.uid));\n      let userData = userDoc.data();\n\n      // If user profile doesn't exist, create it\n      if (!userData) {\n        const username = await generateUniqueUsername(\n          firebaseUser.email!,\n          firebaseUser.displayName || undefined\n        );\n\n        userData = {\n          email: firebaseUser.email!,\n          name: firebaseUser.displayName || 'New User',\n          username: username,\n          usernameLower: username.toLowerCase(),\n          nameLower: (firebaseUser.displayName || 'New User').toLowerCase(),\n          bio: '',\n          location: '',\n          profilePicture: firebaseUser.photoURL || null,\n          followersCount: 0,\n          followingCount: 0,\n          totalHours: 0,\n          inboundFriendshipCount: 0,\n          outboundFriendshipCount: 0,\n          mutualFriendshipCount: 0,\n          profileVisibility: 'everyone',\n          activityVisibility: 'everyone',\n          projectVisibility: 'everyone',\n          createdAt: serverTimestamp(),\n          updatedAt: serverTimestamp(),\n        };\n\n        await setDoc(doc(db, 'users', firebaseUser.uid), userData);\n      }\n\n      const user: AuthUser = {\n        id: firebaseUser.uid,\n        email: firebaseUser.email!,\n        name: userData.name,\n        username: userData.username,\n        bio: userData.bio,\n        location: userData.location,\n        profilePicture: userData.profilePicture,\n        createdAt: convertTimestamp(userData.createdAt),\n        updatedAt: convertTimestamp(userData.updatedAt),\n      };\n\n      const token = await firebaseUser.getIdToken();\n\n      return { user, token };\n    } catch (error: unknown) {\n      console.error('[handleGoogleRedirectResult] ERROR:', error);\n      console.error('[handleGoogleRedirectResult] Error details:', {\n        message: error.message,\n        code: error.code,\n        stack: error.stack,\n      });\n\n      const apiError = handleError(error, 'Google sign-in redirect', {\n        defaultMessage: 'Google sign-in failed. Please try again.',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Listen to authentication state changes\n   */\n  onAuthStateChanged: (callback: (user: FirebaseUser | null) => void) => {\n    return onAuthStateChanged(auth, callback);\n  },\n\n  /**\n   * Check if username is available for signup\n   */\n  checkUsernameAvailability: async (username: string): Promise<boolean> => {\n    const exists = await checkUsernameExists(username);\n    return !exists; // Return true if available (username does not exist)\n  },\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/challenges/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 482,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 482,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14797, 14800], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14797, 14800], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 560,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 560,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17847, 17850], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17847, 17850], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Challenges API Module\n * Handles challenge system: CRUD operations, participants, leaderboards, progress tracking\n */\n\n// ============================================================================\n// IMPORTS\n// ============================================================================\n\n// Firebase imports\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  addDoc,\n  updateDoc,\n  query,\n  where,\n  orderBy,\n  limit as limitFn,\n  serverTimestamp,\n  writeBatch,\n  increment,\n} from 'firebase/firestore';\n\n// Local Firebase config\nimport { db, auth } from '@/lib/firebase';\n\n// Error handling\nimport { handleError, ErrorSeverity } from '@/lib/errorHandler';\n\n// Error messages\nimport { ERROR_MESSAGES } from '@/config/errorMessages';\n\n// Shared utilities\nimport { convertTimestamp, removeUndefinedFields } from '../shared/utils';\n\n// Types\nimport type {\n  Challenge,\n  CreateChallengeData,\n  UpdateChallengeData,\n  ChallengeFilters,\n  ChallengeProgress,\n  ChallengeLeaderboard,\n  ChallengeLeaderboardEntry,\n  ChallengeStats,\n} from '@/types';\n\n// ============================================================================\n// PUBLIC API\n// ============================================================================\n\nexport const firebaseChallengeApi = {\n  // Create a new challenge (group admins only)\n  createChallenge: async (data: CreateChallengeData): Promise<Challenge> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      // If groupId is provided, verify user is admin\n      if (data.groupId) {\n        const groupDoc = await getDoc(doc(db, 'groups', data.groupId));\n        if (!groupDoc.exists()) {\n          throw new Error('Group not found');\n        }\n        const groupData = groupDoc.data();\n        if (!groupData.adminUserIds.includes(auth.currentUser.uid)) {\n          throw new Error('Only group admins can create challenges');\n        }\n      }\n\n      const challengeData = {\n        ...data,\n        createdByUserId: auth.currentUser.uid,\n        participantCount: 0,\n        isActive: true,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n      };\n\n      const docRef = await addDoc(collection(db, 'challenges'), challengeData);\n\n      return {\n        id: docRef.id,\n        ...data,\n        createdByUserId: auth.currentUser.uid,\n        participantCount: 0,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Create challenge', {\n        defaultMessage: ERROR_MESSAGES.UNKNOWN_ERROR,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Get challenge by ID\n  getChallenge: async (challengeId: string): Promise<Challenge> => {\n    try {\n      const challengeDoc = await getDoc(doc(db, 'challenges', challengeId));\n\n      if (!challengeDoc.exists()) {\n        throw new Error('Challenge not found');\n      }\n\n      const data = challengeDoc.data();\n      return {\n        id: challengeDoc.id,\n        groupId: data.groupId,\n        name: data.name,\n        description: data.description,\n        type: data.type,\n        goalValue: data.goalValue,\n        startDate: convertTimestamp(data.startDate),\n        endDate: convertTimestamp(data.endDate),\n        participantCount: data.participantCount || 0,\n        createdByUserId: data.createdByUserId,\n        createdAt: convertTimestamp(data.createdAt),\n        updatedAt: convertTimestamp(data.updatedAt),\n        rules: data.rules,\n        projectIds: data.projectIds,\n        isActive: data.isActive !== false,\n        rewards: data.rewards,\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Get challenge', {\n        defaultMessage: ERROR_MESSAGES.CHALLENGE_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Get challenges with filters\n  getChallenges: async (\n    filters: ChallengeFilters = {}\n  ): Promise<Challenge[]> => {\n    try {\n      // Start with a simple query to avoid complex index requirements\n      let challengesQuery = query(\n        collection(db, 'challenges'),\n        orderBy('createdAt', 'desc')\n      );\n\n      // Apply simple filters first\n      if (filters.groupId) {\n        challengesQuery = query(\n          collection(db, 'challenges'),\n          where('groupId', '==', filters.groupId),\n          orderBy('createdAt', 'desc')\n        );\n      } else if (filters.type) {\n        challengesQuery = query(\n          collection(db, 'challenges'),\n          where('type', '==', filters.type),\n          orderBy('createdAt', 'desc')\n        );\n      }\n\n      const snapshot = await getDocs(challengesQuery);\n      const challenges: Challenge[] = [];\n      const now = new Date();\n\n      for (const challengeDoc of snapshot.docs) {\n        const data = challengeDoc.data();\n\n        // Apply client-side filtering for complex conditions\n        const startDate = convertTimestamp(data.startDate);\n        const endDate = convertTimestamp(data.endDate);\n        const isActive = data.isActive !== false;\n\n        // Filter by status (client-side to avoid complex queries)\n        if (filters.status === 'active') {\n          if (!(now >= startDate && now <= endDate && isActive)) {\n            continue;\n          }\n        } else if (filters.status === 'upcoming') {\n          if (!(now < startDate && isActive)) {\n            continue;\n          }\n        } else if (filters.status === 'completed') {\n          if (!(now > endDate || !isActive)) {\n            continue;\n          }\n        }\n\n        // Filter by type (if not already filtered at query level)\n        if (filters.type && !filters.groupId && data.type !== filters.type) {\n          continue;\n        }\n\n        // If filtering by participation, check if current user is participating\n        if (filters.isParticipating && auth.currentUser) {\n          try {\n            const participantDoc = await getDoc(\n              doc(\n                db,\n                'challengeParticipants',\n                `${auth.currentUser.uid}_${challengeDoc.id}`\n              )\n            );\n            if (!participantDoc.exists()) {\n              continue;\n            }\n          } catch (error) {\n            // If we can't check participation, skip this challenge\n            handleError(\n              error,\n              `Check participation for challenge ${challengeDoc.id}`,\n              { severity: ErrorSeverity.WARNING }\n            );\n            continue;\n          }\n        }\n\n        challenges.push({\n          id: challengeDoc.id,\n          groupId: data.groupId,\n          name: data.name,\n          description: data.description,\n          type: data.type,\n          goalValue: data.goalValue,\n          startDate,\n          endDate,\n          participantCount: data.participantCount || 0,\n          createdByUserId: data.createdByUserId,\n          createdAt: convertTimestamp(data.createdAt),\n          updatedAt: convertTimestamp(data.updatedAt),\n          rules: data.rules,\n          projectIds: data.projectIds,\n          isActive,\n          rewards: data.rewards,\n        });\n      }\n\n      return challenges;\n    } catch (error) {\n      handleError(error, 'in getChallenges', { severity: ErrorSeverity.ERROR });\n      const apiError = handleError(error, 'Get challenges', {\n        defaultMessage: ERROR_MESSAGES.CHALLENGE_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Join a challenge\n  joinChallenge: async (challengeId: string): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const participantId = `${auth.currentUser.uid}_${challengeId}`;\n\n      // Check if already participating\n      const existingParticipant = await getDoc(\n        doc(db, 'challengeParticipants', participantId)\n      );\n      if (existingParticipant.exists()) {\n        throw new Error('Already participating in this challenge');\n      }\n\n      // Check if challenge exists and is active\n      const challengeDoc = await getDoc(doc(db, 'challenges', challengeId));\n      if (!challengeDoc.exists()) {\n        throw new Error('Challenge not found');\n      }\n\n      const challengeData = challengeDoc.data();\n      const now = new Date();\n      const endDate = convertTimestamp(challengeData.endDate);\n\n      if (!challengeData.isActive) {\n        throw new Error('Challenge is not active');\n      }\n      if (now > endDate) {\n        throw new Error('Challenge has ended');\n      }\n\n      const batch = writeBatch(db);\n\n      // Add participant\n      batch.set(doc(db, 'challengeParticipants', participantId), {\n        challengeId,\n        userId: auth.currentUser.uid,\n        joinedAt: serverTimestamp(),\n        progress: 0,\n        isCompleted: false,\n      });\n\n      // Update participant count\n      batch.update(doc(db, 'challenges', challengeId), {\n        participantCount: increment(1),\n        updatedAt: serverTimestamp(),\n      });\n\n      await batch.commit();\n    } catch (error) {\n      const apiError = handleError(error, 'Join challenge', {\n        defaultMessage: ERROR_MESSAGES.CHALLENGE_JOIN_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Leave a challenge\n  leaveChallenge: async (challengeId: string): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const participantId = `${auth.currentUser.uid}_${challengeId}`;\n\n      // Check if participating\n      const participantDoc = await getDoc(\n        doc(db, 'challengeParticipants', participantId)\n      );\n      if (!participantDoc.exists()) {\n        throw new Error('Not participating in this challenge');\n      }\n\n      const batch = writeBatch(db);\n\n      // Remove participant\n      batch.delete(doc(db, 'challengeParticipants', participantId));\n\n      // Update participant count\n      batch.update(doc(db, 'challenges', challengeId), {\n        participantCount: increment(-1),\n        updatedAt: serverTimestamp(),\n      });\n\n      await batch.commit();\n    } catch (error) {\n      const apiError = handleError(error, 'Leave challenge', {\n        defaultMessage: ERROR_MESSAGES.CHALLENGE_LEAVE_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Get challenge leaderboard\n  getChallengeLeaderboard: async (\n    challengeId: string\n  ): Promise<ChallengeLeaderboard> => {\n    try {\n      // Get all participants for this challenge\n      const participantsQuery = query(\n        collection(db, 'challengeParticipants'),\n        where('challengeId', '==', challengeId),\n        orderBy('progress', 'desc')\n      );\n\n      const participantsSnapshot = await getDocs(participantsQuery);\n      const entries: ChallengeLeaderboardEntry[] = [];\n\n      let rank = 1;\n      for (const participantDoc of participantsSnapshot.docs) {\n        const participantData = participantDoc.data();\n\n        // Get user data\n        try {\n          const userDoc = await getDoc(\n            doc(db, 'users', participantData.userId)\n          );\n          const userData = userDoc.data();\n\n          if (userData) {\n            entries.push({\n              userId: participantData.userId,\n              user: {\n                id: participantData.userId,\n                email: userData.email || '',\n                name: userData.name || 'Unknown User',\n                username: userData.username || 'unknown',\n                bio: userData.bio,\n                location: userData.location,\n                profilePicture: userData.profilePicture,\n                createdAt: convertTimestamp(userData.createdAt) || new Date(),\n                updatedAt: convertTimestamp(userData.updatedAt) || new Date(),\n              },\n              progress: participantData.progress || 0,\n              rank,\n              isCompleted: participantData.isCompleted || false,\n              completedAt: participantData.completedAt\n                ? convertTimestamp(participantData.completedAt)\n                : undefined,\n            });\n            rank++;\n          }\n        } catch (error) {\n          handleError(\n            error,\n            `Load user data for participant ${participantData.userId}`,\n            { severity: ErrorSeverity.WARNING }\n          );\n        }\n      }\n\n      return {\n        challengeId,\n        entries,\n        lastUpdated: new Date(),\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Get challenge leaderboard', {\n        defaultMessage: ERROR_MESSAGES.CHALLENGE_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Get user's progress in a challenge\n  getChallengeProgress: async (\n    challengeId: string,\n    userId?: string\n  ): Promise<ChallengeProgress | null> => {\n    try {\n      const targetUserId = userId || auth.currentUser?.uid;\n      if (!targetUserId) {\n        throw new Error('User not authenticated');\n      }\n\n      const participantId = `${targetUserId}_${challengeId}`;\n      const participantDoc = await getDoc(\n        doc(db, 'challengeParticipants', participantId)\n      );\n\n      if (!participantDoc.exists()) {\n        return null;\n      }\n\n      const participantData = participantDoc.data();\n      const challengeDoc = await getDoc(doc(db, 'challenges', challengeId));\n      const challengeData = challengeDoc.data();\n\n      // Calculate percentage based on challenge type and goal\n      let percentage = 0;\n      if (challengeData?.goalValue && participantData.progress) {\n        percentage = Math.min(\n          (participantData.progress / challengeData.goalValue) * 100,\n          100\n        );\n      }\n\n      // Get rank by counting participants with higher progress\n      const higherProgressQuery = query(\n        collection(db, 'challengeParticipants'),\n        where('challengeId', '==', challengeId),\n        where('progress', '>', participantData.progress || 0)\n      );\n      const higherProgressSnapshot = await getDocs(higherProgressQuery);\n      const rank = higherProgressSnapshot.size + 1;\n\n      return {\n        challengeId,\n        userId: targetUserId,\n        currentValue: participantData.progress || 0,\n        targetValue: challengeData?.goalValue,\n        percentage,\n        rank,\n        isCompleted: participantData.isCompleted || false,\n        lastUpdated: convertTimestamp(participantData.updatedAt) || new Date(),\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Get challenge progress', {\n        defaultMessage: ERROR_MESSAGES.CHALLENGE_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Update challenge progress (called when sessions are logged)\n  updateChallengeProgress: async (\n    userId: string,\n    sessionData: any\n  ): Promise<void> => {\n    try {\n      // Get all active challenges the user is participating in\n      const participantsQuery = query(\n        collection(db, 'challengeParticipants'),\n        where('userId', '==', userId)\n      );\n\n      const participantsSnapshot = await getDocs(participantsQuery);\n      const batch = writeBatch(db);\n\n      for (const participantDoc of participantsSnapshot.docs) {\n        const participantData = participantDoc.data();\n        const challengeId = participantData.challengeId;\n\n        // Get challenge details\n        const challengeDoc = await getDoc(doc(db, 'challenges', challengeId));\n        if (!challengeDoc.exists()) continue;\n\n        const challengeData = challengeDoc.data();\n        const startDate = convertTimestamp(challengeData.startDate);\n        const endDate = convertTimestamp(challengeData.endDate);\n        const sessionStart = convertTimestamp(sessionData.startTime);\n\n        // Skip if challenge is not active or session is outside challenge period\n        if (\n          !challengeData.isActive ||\n          sessionStart < startDate ||\n          sessionStart > endDate\n        ) {\n          continue;\n        }\n\n        // Skip if challenge has specific projects and session project is not included\n        if (challengeData.projectIds && challengeData.projectIds.length > 0) {\n          if (!challengeData.projectIds.includes(sessionData.projectId)) {\n            continue;\n          }\n        }\n\n        // Calculate progress increment based on challenge type\n        let progressIncrement = 0;\n        switch (challengeData.type) {\n          case 'most-activity':\n            progressIncrement = sessionData.duration / 3600; // Convert seconds to hours\n            break;\n          case 'fastest-effort':\n            // Duration-based effort (tasks are deprecated)\n            // Using session duration as a proxy for effort\n            const hours = sessionData.duration / 3600;\n            if (hours > 0) {\n              // For fastest-effort, track the longest single session duration\n              if (hours > (participantData.progress || 0)) {\n                progressIncrement = hours - (participantData.progress || 0);\n              }\n            }\n            break;\n          case 'longest-session':\n            // Update if this session is longer than current best\n            const sessionHours = sessionData.duration / 3600;\n            if (sessionHours > (participantData.progress || 0)) {\n              progressIncrement =\n                sessionHours - (participantData.progress || 0);\n            }\n            break;\n          case 'group-goal':\n            progressIncrement = sessionData.duration / 3600; // Contribute hours to group goal\n            break;\n        }\n\n        if (progressIncrement > 0) {\n          const newProgress =\n            (participantData.progress || 0) + progressIncrement;\n          const isCompleted = challengeData.goalValue\n            ? newProgress >= challengeData.goalValue\n            : false;\n\n          const updateData: any = {\n            progress: newProgress,\n            updatedAt: serverTimestamp(),\n          };\n\n          if (isCompleted && !participantData.isCompleted) {\n            updateData.isCompleted = true;\n            updateData.completedAt = serverTimestamp();\n          }\n\n          batch.update(participantDoc.ref, updateData);\n        }\n      }\n\n      await batch.commit();\n    } catch (error) {\n      handleError(error, 'update challenge progress', {\n        severity: ErrorSeverity.ERROR,\n      });\n      // Don't throw error to avoid breaking session creation\n    }\n  },\n\n  // Get challenge statistics\n  getChallengeStats: async (challengeId: string): Promise<ChallengeStats> => {\n    try {\n      const challengeDoc = await getDoc(doc(db, 'challenges', challengeId));\n      if (!challengeDoc.exists()) {\n        throw new Error('Challenge not found');\n      }\n\n      const challengeData = challengeDoc.data();\n      const endDate = convertTimestamp(challengeData.endDate);\n      const now = new Date();\n      const timeRemaining = Math.max(0, endDate.getTime() - now.getTime());\n      const daysRemaining = Math.ceil(timeRemaining / (1000 * 60 * 60 * 24));\n\n      // Get all participants\n      const participantsQuery = query(\n        collection(db, 'challengeParticipants'),\n        where('challengeId', '==', challengeId)\n      );\n\n      const participantsSnapshot = await getDocs(participantsQuery);\n      const totalParticipants = participantsSnapshot.size;\n      let completedParticipants = 0;\n      let totalProgress = 0;\n\n      participantsSnapshot.forEach(doc => {\n        const data = doc.data();\n        if (data.isCompleted) {\n          completedParticipants++;\n        }\n        totalProgress += data.progress || 0;\n      });\n\n      const averageProgress =\n        totalParticipants > 0 ? totalProgress / totalParticipants : 0;\n\n      // Get top performers (top 3)\n      const leaderboard =\n        await firebaseChallengeApi.getChallengeLeaderboard(challengeId);\n      const topPerformers = leaderboard.entries.slice(0, 3);\n\n      return {\n        totalParticipants,\n        completedParticipants,\n        averageProgress,\n        topPerformers,\n        timeRemaining: Math.floor(timeRemaining / 1000), // Convert to seconds\n        daysRemaining,\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Get challenge stats', {\n        defaultMessage: 'Failed to get challenge stats',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Update challenge (admin only)\n  updateChallenge: async (\n    challengeId: string,\n    data: UpdateChallengeData\n  ): Promise<Challenge> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const challengeDoc = await getDoc(doc(db, 'challenges', challengeId));\n      if (!challengeDoc.exists()) {\n        throw new Error('Challenge not found');\n      }\n\n      const challengeData = challengeDoc.data();\n\n      // Check if user is admin (challenge creator or group admin)\n      let isAdmin = challengeData.createdByUserId === auth.currentUser.uid;\n\n      if (!isAdmin && challengeData.groupId) {\n        const groupDoc = await getDoc(doc(db, 'groups', challengeData.groupId));\n        if (groupDoc.exists()) {\n          const groupData = groupDoc.data();\n          isAdmin = groupData.adminUserIds.includes(auth.currentUser.uid);\n        }\n      }\n\n      if (!isAdmin) {\n        throw new Error(\n          'Only challenge creators or group admins can update challenges'\n        );\n      }\n\n      const updateData = removeUndefinedFields({\n        ...data,\n        updatedAt: serverTimestamp(),\n      });\n\n      await updateDoc(doc(db, 'challenges', challengeId), updateData);\n\n      // Return updated challenge\n      return await firebaseChallengeApi.getChallenge(challengeId);\n    } catch (error) {\n      const apiError = handleError(error, 'Update challenge', {\n        defaultMessage: 'Failed to update challenge',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Delete challenge (admin only)\n  deleteChallenge: async (challengeId: string): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const challengeDoc = await getDoc(doc(db, 'challenges', challengeId));\n      if (!challengeDoc.exists()) {\n        throw new Error('Challenge not found');\n      }\n\n      const challengeData = challengeDoc.data();\n\n      // Check if user is admin\n      let isAdmin = challengeData.createdByUserId === auth.currentUser.uid;\n\n      if (!isAdmin && challengeData.groupId) {\n        const groupDoc = await getDoc(doc(db, 'groups', challengeData.groupId));\n        if (groupDoc.exists()) {\n          const groupData = groupDoc.data();\n          isAdmin = groupData.adminUserIds.includes(auth.currentUser.uid);\n        }\n      }\n\n      if (!isAdmin) {\n        throw new Error(\n          'Only challenge creators or group admins can delete challenges'\n        );\n      }\n\n      const batch = writeBatch(db);\n\n      // Delete challenge\n      batch.delete(doc(db, 'challenges', challengeId));\n\n      // Delete all participants\n      const participantsQuery = query(\n        collection(db, 'challengeParticipants'),\n        where('challengeId', '==', challengeId)\n      );\n      const participantsSnapshot = await getDocs(participantsQuery);\n\n      participantsSnapshot.forEach(participantDoc => {\n        batch.delete(participantDoc.ref);\n      });\n\n      await batch.commit();\n    } catch (error) {\n      const apiError = handleError(error, 'Delete challenge', {\n        defaultMessage: 'Failed to delete challenge',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Search challenges with filters and limitFn\n  searchChallenges: async (\n    filters: ChallengeFilters = {},\n    limitCount: number = 50\n  ): Promise<Challenge[]> => {\n    try {\n      // Use getChallenges but apply limitFn\n      let challengesQuery = query(\n        collection(db, 'challenges'),\n        orderBy('createdAt', 'desc'),\n        limitFn(limitCount)\n      );\n\n      // Apply simple filters\n      if (filters.groupId) {\n        challengesQuery = query(\n          collection(db, 'challenges'),\n          where('groupId', '==', filters.groupId),\n          orderBy('createdAt', 'desc'),\n          limitFn(limitCount)\n        );\n      } else if (filters.type) {\n        challengesQuery = query(\n          collection(db, 'challenges'),\n          where('type', '==', filters.type),\n          orderBy('createdAt', 'desc'),\n          limitFn(limitCount)\n        );\n      }\n\n      const snapshot = await getDocs(challengesQuery);\n      const challenges: Challenge[] = [];\n      const now = new Date();\n\n      for (const challengeDoc of snapshot.docs) {\n        const data = challengeDoc.data();\n\n        // Apply client-side filtering for complex conditions\n        const startDate = convertTimestamp(data.startDate);\n        const endDate = convertTimestamp(data.endDate);\n        const isActive = data.isActive !== false;\n\n        // Filter by status (client-side)\n        if (filters.status === 'active') {\n          if (!(now >= startDate && now <= endDate && isActive)) {\n            continue;\n          }\n        } else if (filters.status === 'upcoming') {\n          if (!(now < startDate && isActive)) {\n            continue;\n          }\n        } else if (filters.status === 'completed') {\n          if (!(now > endDate || !isActive)) {\n            continue;\n          }\n        }\n\n        challenges.push({\n          id: challengeDoc.id,\n          groupId: data.groupId,\n          name: data.name,\n          description: data.description,\n          type: data.type,\n          goalValue: data.goalValue,\n          startDate,\n          endDate,\n          participantCount: data.participantCount || 0,\n          createdByUserId: data.createdByUserId,\n          createdAt: convertTimestamp(data.createdAt),\n          updatedAt: convertTimestamp(data.updatedAt),\n          rules: data.rules,\n          projectIds: data.projectIds,\n          isActive,\n          rewards: data.rewards,\n          category: data.category,\n        });\n      }\n\n      return challenges;\n    } catch (error) {\n      handleError(error, 'in searchChallenges', {\n        severity: ErrorSeverity.ERROR,\n      });\n      const apiError = handleError(error, 'Search challenges', {\n        defaultMessage: 'Failed to search challenges',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Get challenges that a user is participating in\n  getUserChallenges: async (userId: string): Promise<Challenge[]> => {\n    try {\n      // Get all challenge participations for this user\n      const participantsQuery = query(\n        collection(db, 'challengeParticipants'),\n        where('userId', '==', userId)\n      );\n\n      const participantsSnapshot = await getDocs(participantsQuery);\n      const challenges: Challenge[] = [];\n\n      // Fetch each challenge\n      for (const participantDoc of participantsSnapshot.docs) {\n        const participantData = participantDoc.data();\n        const challengeId = participantData.challengeId;\n\n        try {\n          const challenge =\n            await firebaseChallengeApi.getChallenge(challengeId);\n          challenges.push(challenge);\n        } catch (error) {\n          handleError(error, `Load challenge ${challengeId}`, {\n            severity: ErrorSeverity.WARNING,\n          });\n        }\n      }\n\n      // Sort by most recent first\n      challenges.sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n\n      return challenges;\n    } catch (error) {\n      const apiError = handleError(error, 'Get user challenges', {\n        defaultMessage: 'Failed to get user challenges',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n};\n\n// Import additional types for streak and achievement (for future use)\n// These types are imported but not currently used in this module\n\n// Streak API methods\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/groups/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'query' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 284,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 284,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'groupId' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 299,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 299,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'timeRange' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 300,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 300,
        "endColumn": 14
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Groups API Module\n * Handles group management: CRUD operations, membership, and statistics\n */\n\n// ============================================================================\n// IMPORTS\n// ============================================================================\n\nimport { db } from '@/lib/firebase';\nimport {\n  doc,\n  getDoc,\n  setDoc,\n  updateDoc,\n  deleteDoc,\n  serverTimestamp,\n} from 'firebase/firestore';\nimport { removeUndefinedFields, convertTimestamp } from '../shared/utils';\n\n// Types\nimport type { Group, CreateGroupData, UpdateGroupData } from '@/types';\n\n// ============================================================================\n// GROUPS API\n// ============================================================================\n\nexport const firebaseGroupApi = {\n  /**\n   * Get a group by ID\n   */\n  getGroup: async (groupId: string): Promise<Group | null> => {\n    try {\n      const docRef = doc(db, 'groups', groupId);\n      const docSnap = await getDoc(docRef);\n\n      if (!docSnap.exists()) {\n        return null;\n      }\n\n      const data = docSnap.data();\n      const memberIds = data.memberIds || [];\n      return {\n        id: docSnap.id,\n        name: data.name,\n        description: data.description,\n        imageUrl: data.imageUrl,\n        category: data.category,\n        type: data.type,\n        privacySetting: data.privacySetting,\n        location: data.location,\n        adminUserIds: data.adminUserIds || [],\n        memberIds: memberIds,\n        memberCount: data.memberCount ?? memberIds.length,\n        createdByUserId: data.createdByUserId,\n        createdAt: convertTimestamp(data.createdAt),\n        updatedAt: convertTimestamp(data.updatedAt),\n      } as Group;\n    } catch (error) {\n      console.error('Error getting group:', error);\n      throw new Error(\n        typeof error === 'string' ? error : 'Failed to get group'\n      );\n    }\n  },\n\n  /**\n   * Create a new group\n   */\n  createGroup: async (\n    groupData: CreateGroupData,\n    userId: string\n  ): Promise<Group> => {\n    try {\n      const groupId = doc(db, 'groups').id;\n      const now = serverTimestamp();\n\n      const newGroup = {\n        ...removeUndefinedFields(groupData),\n        adminUserIds: [userId],\n        memberIds: [userId],\n        memberCount: 1,\n        createdByUserId: userId,\n        createdAt: now,\n        updatedAt: now,\n      };\n\n      const docRef = doc(db, 'groups', groupId);\n      await setDoc(docRef, newGroup);\n\n      return {\n        id: groupId,\n        ...groupData,\n        adminUserIds: [userId],\n        memberIds: [userId],\n        memberCount: 1,\n        createdByUserId: userId,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      } as Group;\n    } catch (error) {\n      console.error('Error creating group:', error);\n      throw new Error('Failed to create group');\n    }\n  },\n\n  /**\n   * Update a group\n   */\n  updateGroup: async (\n    groupId: string,\n    updateData: UpdateGroupData\n  ): Promise<void> => {\n    try {\n      const docRef = doc(db, 'groups', groupId);\n      const updatePayload = {\n        ...removeUndefinedFields(updateData),\n        updatedAt: serverTimestamp(),\n      };\n\n      await updateDoc(docRef, updatePayload);\n    } catch (error) {\n      console.error('Error updating group:', error);\n      throw new Error('Failed to update group');\n    }\n  },\n\n  /**\n   * Delete a group\n   */\n  deleteGroup: async (groupId: string): Promise<void> => {\n    try {\n      const docRef = doc(db, 'groups', groupId);\n      await deleteDoc(docRef);\n    } catch (error) {\n      console.error('Error deleting group:', error);\n      throw new Error('Failed to delete group');\n    }\n  },\n\n  /**\n   * Add a member to a group\n   */\n  addMember: async (groupId: string, userId: string): Promise<void> => {\n    try {\n      const groupRef = doc(db, 'groups', groupId);\n      const groupSnap = await getDoc(groupRef);\n\n      if (!groupSnap.exists()) {\n        throw new Error('Group not found');\n      }\n\n      const groupData = groupSnap.data();\n      const memberIds = groupData.memberIds || [];\n\n      if (memberIds.includes(userId)) {\n        throw new Error('User is already a member of this group');\n      }\n\n      await updateDoc(groupRef, {\n        memberIds: [...memberIds, userId],\n        updatedAt: serverTimestamp(),\n      });\n    } catch (error) {\n      console.error('Error adding member to group:', error);\n      throw new Error('Failed to add member');\n    }\n  },\n\n  /**\n   * Remove a member from a group\n   */\n  removeMember: async (groupId: string, userId: string): Promise<void> => {\n    try {\n      const groupRef = doc(db, 'groups', groupId);\n      const groupSnap = await getDoc(groupRef);\n\n      if (!groupSnap.exists()) {\n        throw new Error('Group not found');\n      }\n\n      const groupData = groupSnap.data();\n      const memberIds = groupData.memberIds || [];\n\n      if (!memberIds.includes(userId)) {\n        throw new Error('User is not a member of this group');\n      }\n\n      await updateDoc(groupRef, {\n        memberIds: memberIds.filter((id: string) => id !== userId),\n        updatedAt: serverTimestamp(),\n      });\n    } catch (error) {\n      console.error('Error removing member from group:', error);\n      throw new Error('Failed to remove member');\n    }\n  },\n\n  /**\n   * Join a group\n   */\n  joinGroup: async (groupId: string, userId: string): Promise<void> => {\n    try {\n      // Use GroupService for business logic\n      const { GroupService } = await import(\n        '@/features/groups/services/GroupService'\n      );\n      const groupService = new GroupService();\n      await groupService.joinGroup(groupId, userId);\n    } catch (error) {\n      console.error('Error joining group:', error);\n      throw new Error(\n        typeof error === 'string'\n          ? error\n          : error instanceof Error\n            ? error.message\n            : 'Failed to join group'\n      );\n    }\n  },\n\n  /**\n   * Leave a group\n   */\n  leaveGroup: async (groupId: string, userId: string): Promise<void> => {\n    try {\n      // Use GroupService for business logic\n      const { GroupService } = await import(\n        '@/features/groups/services/GroupService'\n      );\n      const groupService = new GroupService();\n      await groupService.leaveGroup(groupId, userId);\n    } catch (error) {\n      console.error('Error leaving group:', error);\n      throw new Error(\n        typeof error === 'string'\n          ? error\n          : error instanceof Error\n            ? error.message\n            : 'Failed to leave group'\n      );\n    }\n  },\n\n  /**\n   * Get all groups for a user\n   */\n  getUserGroups: async (userId: string, limit?: number): Promise<Group[]> => {\n    try {\n      // Use GroupService for business logic\n      const { GroupService } = await import(\n        '@/features/groups/services/GroupService'\n      );\n      const groupService = new GroupService();\n      const domainGroups = await groupService.getUserGroups(userId, limit);\n\n      // Convert domain Group entities to API Group interface\n      return domainGroups.map(g => ({\n        id: g.id,\n        name: g.name,\n        description: g.description,\n        imageUrl: g.imageUrl,\n        category: g.category,\n        type: 'other' as const, // Default type, not in domain entity\n        privacySetting:\n          g.privacy === 'approval-required' ? 'approval-required' : 'public',\n        location: g.location,\n        adminUserIds: Array.from(g.adminUserIds),\n        memberIds: Array.from(g.memberIds),\n        memberCount: g.getMemberCount(),\n        createdByUserId: g.createdByUserId,\n        createdAt: g.createdAt,\n        updatedAt: g.createdAt, // Use createdAt as fallback\n      }));\n    } catch (error) {\n      console.error('Error getting user groups:', error);\n      throw new Error('Failed to get user groups');\n    }\n  },\n\n  /**\n   * Search groups by name or description\n   */\n  searchGroups: async (query: string): Promise<Group[]> => {\n    try {\n      // Note: For production, implement proper text search\n      // This is a placeholder implementation\n      return [];\n    } catch (error) {\n      console.error('Error searching groups:', error);\n      throw new Error('Failed to search groups');\n    }\n  },\n\n  /**\n   * Get group analytics data for a time range\n   */\n  getGroupAnalytics: async (\n    groupId: string,\n    timeRange: 'week' | 'month' | 'year'\n  ): Promise<{\n    hoursData: Array<{ date: string; hours: number; members: number }>;\n    membershipGrowth: Array<{ date: string; members: number }>;\n  }> => {\n    try {\n      // Placeholder implementation\n      // In production, this would fetch actual session data from Firestore\n      return {\n        hoursData: [],\n        membershipGrowth: [],\n      };\n    } catch (error) {\n      console.error('Error getting group analytics:', error);\n      throw new Error('Failed to get group analytics');\n    }\n  },\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/notifications/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'auth' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 28,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'challengeType' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 201,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 201,
        "endColumn": 18
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Notifications API Module  \n * Handles notification CRUD and challenge-specific notifications\n */\n\n// ============================================================================\n// IMPORTS\n// ============================================================================\n\n// Firebase imports\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n  query,\n  where,\n  orderBy,\n  limit as limitFn,\n  serverTimestamp,\n  writeBatch,\n} from 'firebase/firestore';\n\n// Local Firebase config\nimport { db, auth } from '@/lib/firebase';\n\n// Error handling\nimport { handleError, ErrorSeverity } from '@/lib/errorHandler';\n\n// Shared utilities\nimport { convertTimestamp } from '../shared/utils';\n\n// Types\nimport type { Notification } from '@/types';\n\n// ============================================================================\n// PUBLIC API\n// ============================================================================\n\nexport const firebaseNotificationApi = {\n  // Create a notification\n  createNotification: async (\n    notification: Omit<Notification, 'id' | 'createdAt'>\n  ): Promise<Notification> => {\n    try {\n      const notificationData = {\n        ...notification,\n        createdAt: serverTimestamp(),\n      };\n\n      const docRef = await addDoc(\n        collection(db, 'notifications'),\n        notificationData\n      );\n\n      return {\n        id: docRef.id,\n        ...notification,\n        createdAt: new Date(),\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Create notification', {\n        defaultMessage: 'Failed to create notification',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Get notifications for a user\n  getUserNotifications: async (\n    userId: string,\n    limitCount: number = 50\n  ): Promise<Notification[]> => {\n    try {\n      const notificationsQuery = query(\n        collection(db, 'notifications'),\n        where('userId', '==', userId),\n        orderBy('createdAt', 'desc'),\n        limitFn(limitCount > 0 ? limitCount : 50)\n      );\n\n      const snapshot = await getDocs(notificationsQuery);\n      const notifications: Notification[] = [];\n\n      snapshot.forEach(doc => {\n        const data = doc.data();\n        notifications.push({\n          id: doc.id,\n          userId: data.userId,\n          type: data.type,\n          title: data.title,\n          message: data.message,\n          linkUrl: data.linkUrl,\n          isRead: data.isRead || false,\n          createdAt: convertTimestamp(data.createdAt),\n          actorId: data.actorId,\n          actorName: data.actorName,\n          actorUsername: data.actorUsername,\n          actorProfilePicture: data.actorProfilePicture,\n          sessionId: data.sessionId,\n          commentId: data.commentId,\n          groupId: data.groupId,\n          challengeId: data.challengeId,\n        });\n      });\n\n      return notifications;\n    } catch (error) {\n      const apiError = handleError(error, 'Get notifications', {\n        defaultMessage: 'Failed to get notifications',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Mark notification as read\n  markAsRead: async (notificationId: string): Promise<void> => {\n    try {\n      await updateDoc(doc(db, 'notifications', notificationId), {\n        isRead: true,\n        updatedAt: serverTimestamp(),\n      });\n    } catch (error) {\n      const apiError = handleError(error, 'Mark notification as read', {\n        defaultMessage: 'Failed to mark notification as read',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Mark all notifications as read for a user\n  markAllAsRead: async (userId: string): Promise<void> => {\n    try {\n      const notificationsQuery = query(\n        collection(db, 'notifications'),\n        where('userId', '==', userId),\n        where('isRead', '==', false)\n      );\n\n      const snapshot = await getDocs(notificationsQuery);\n      const batch = writeBatch(db);\n\n      snapshot.forEach(doc => {\n        batch.update(doc.ref, {\n          isRead: true,\n          updatedAt: serverTimestamp(),\n        });\n      });\n\n      await batch.commit();\n    } catch (error) {\n      const apiError = handleError(error, 'Mark all notifications as read', {\n        defaultMessage: 'Failed to mark all notifications as read',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Delete a notification\n  deleteNotification: async (notificationId: string): Promise<void> => {\n    try {\n      await deleteDoc(doc(db, 'notifications', notificationId));\n    } catch (error) {\n      const apiError = handleError(error, 'Delete notification', {\n        defaultMessage: 'Failed to delete notification',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  // Get unread notification count\n  getUnreadCount: async (userId: string): Promise<number> => {\n    try {\n      const notificationsQuery = query(\n        collection(db, 'notifications'),\n        where('userId', '==', userId),\n        where('isRead', '==', false)\n      );\n\n      const snapshot = await getDocs(notificationsQuery);\n      return snapshot.size;\n    } catch (error) {\n      const apiError = handleError(error, 'Get unread count', {\n        defaultMessage: 'Failed to get unread count',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n};\n\n// Challenge Notification Helper Functions\nexport const challengeNotifications = {\n  // Notify when a user completes a challenge\n  notifyCompletion: async (\n    challengeId: string,\n    userId: string,\n    challengeName: string,\n    challengeType: string\n  ): Promise<void> => {\n    try {\n      const notification: Omit<Notification, 'id' | 'createdAt'> = {\n        userId,\n        type: 'challenge',\n        title: '🏆 Challenge Completed!',\n        message: `Congratulations! You've completed the \"${challengeName}\" challenge.`,\n        challengeId,\n        isRead: false,\n      };\n\n      await firebaseNotificationApi.createNotification(notification);\n    } catch (error) {\n      handleError(error, 'send completion notification', {\n        severity: ErrorSeverity.ERROR,\n      });\n    }\n  },\n\n  // Notify other participants when someone joins a challenge\n  notifyParticipantJoined: async (\n    challengeId: string,\n    newParticipantId: string,\n    newParticipantName: string,\n    challengeName: string\n  ): Promise<void> => {\n    try {\n      // Get all other participants\n      const participantsQuery = query(\n        collection(db, 'challengeParticipants'),\n        where('challengeId', '==', challengeId)\n      );\n\n      const participantsSnapshot = await getDocs(participantsQuery);\n      const batch = writeBatch(db);\n\n      participantsSnapshot.forEach(participantDoc => {\n        const participantData = participantDoc.data();\n\n        // Don't notify the person who just joined\n        if (participantData.userId !== newParticipantId) {\n          const notificationRef = doc(collection(db, 'notifications'));\n          batch.set(notificationRef, {\n            userId: participantData.userId,\n            type: 'challenge',\n            title: '👋 New Challenger!',\n            message: `${newParticipantName} joined the \"${challengeName}\" challenge.`,\n            challengeId,\n            actorName: newParticipantName,\n            isRead: false,\n            createdAt: serverTimestamp(),\n          });\n        }\n      });\n\n      await batch.commit();\n    } catch (error) {\n      handleError(error, 'send participant joined notifications', {\n        severity: ErrorSeverity.ERROR,\n      });\n    }\n  },\n\n  // Notify all participants when challenge is ending soon\n  notifyEndingSoon: async (\n    challengeId: string,\n    challengeName: string,\n    daysRemaining: number\n  ): Promise<void> => {\n    try {\n      // Get all participants\n      const participantsQuery = query(\n        collection(db, 'challengeParticipants'),\n        where('challengeId', '==', challengeId)\n      );\n\n      const participantsSnapshot = await getDocs(participantsQuery);\n      const batch = writeBatch(db);\n\n      participantsSnapshot.forEach(participantDoc => {\n        const participantData = participantDoc.data();\n\n        const notificationRef = doc(collection(db, 'notifications'));\n        batch.set(notificationRef, {\n          userId: participantData.userId,\n          type: 'challenge',\n          title: '⏰ Challenge Ending Soon!',\n          message: `The \"${challengeName}\" challenge ends in ${daysRemaining} day${daysRemaining !== 1 ? 's' : ''}. Make your final push!`,\n          challengeId,\n          isRead: false,\n          createdAt: serverTimestamp(),\n        });\n      });\n\n      await batch.commit();\n    } catch (error) {\n      handleError(error, 'send ending soon notifications', {\n        severity: ErrorSeverity.ERROR,\n      });\n    }\n  },\n\n  // Notify when a new challenge is created in a group\n  notifyNewChallenge: async (\n    challengeId: string,\n    challengeName: string,\n    challengeType: string,\n    groupId: string,\n    creatorName: string\n  ): Promise<void> => {\n    try {\n      // Get all group members\n      const groupDoc = await getDoc(doc(db, 'groups', groupId));\n      if (!groupDoc.exists()) return;\n\n      const groupData = groupDoc.data();\n      const memberIds = groupData.memberUserIds || [];\n      const batch = writeBatch(db);\n\n      memberIds.forEach((memberId: string) => {\n        // Don't notify the creator\n        if (memberId !== groupData.createdByUserId) {\n          const notificationRef = doc(collection(db, 'notifications'));\n          batch.set(notificationRef, {\n            userId: memberId,\n            type: 'challenge',\n            title: '🎯 New Challenge Available!',\n            message: `${creatorName} created a new \"${challengeName}\" challenge in your group.`,\n            challengeId,\n            groupId,\n            actorName: creatorName,\n            isRead: false,\n            createdAt: serverTimestamp(),\n          });\n        }\n      });\n\n      await batch.commit();\n    } catch (error) {\n      handleError(error, 'send new challenge notifications', {\n        severity: ErrorSeverity.ERROR,\n      });\n    }\n  },\n\n  // Notify when rank changes significantly (moved up 3+ positions)\n  notifyRankChange: async (\n    challengeId: string,\n    userId: string,\n    challengeName: string,\n    newRank: number,\n    previousRank: number\n  ): Promise<void> => {\n    try {\n      // Only notify for significant improvements (moved up 3+ positions)\n      if (previousRank - newRank >= 3) {\n        const notification: Omit<Notification, 'id' | 'createdAt'> = {\n          userId,\n          type: 'challenge',\n          title: '📈 Rank Improved!',\n          message: `You moved up to #${newRank} in the \"${challengeName}\" challenge!`,\n          challengeId,\n          isRead: false,\n        };\n\n        await firebaseNotificationApi.createNotification(notification);\n      }\n    } catch (error) {\n      handleError(error, 'send rank change notification', {\n        severity: ErrorSeverity.ERROR,\n      });\n    }\n  },\n\n  // Notify when reaching milestones (25%, 50%, 75%, 90% of goal)\n  notifyMilestone: async (\n    challengeId: string,\n    userId: string,\n    challengeName: string,\n    progress: number,\n    goalValue: number\n  ): Promise<void> => {\n    try {\n      const percentage = (progress / goalValue) * 100;\n      const milestones = [25, 50, 75, 90];\n\n      for (const milestone of milestones) {\n        if (percentage >= milestone && percentage < milestone + 5) {\n          // 5% buffer to avoid duplicate notifications\n          const notification: Omit<Notification, 'id' | 'createdAt'> = {\n            userId,\n            type: 'challenge',\n            title: `🎯 ${milestone}% Complete!`,\n            message: `You're ${milestone}% of the way through the \"${challengeName}\" challenge. Keep going!`,\n            challengeId,\n            isRead: false,\n          };\n\n          await firebaseNotificationApi.createNotification(notification);\n          break; // Only send one milestone notification at a time\n        }\n      }\n    } catch (error) {\n      handleError(error, 'send milestone notification', {\n        severity: ErrorSeverity.ERROR,\n      });\n    }\n  },\n};\n\n// Activity API (alias for Project API for new naming convention)\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/projects/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/sessions/helpers.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 20,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 20,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [508, 511], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [508, 511], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 50,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 50,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1529, 1532], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1529, 1532], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Sessions module helper functions\n * Shared utilities for session operations\n */\n\nimport { doc, getDoc } from 'firebase/firestore';\n\nimport { db, auth } from '@/lib/firebase';\nimport {\n  handleError,\n  isPermissionError,\n  isNotFoundError,\n  ErrorSeverity,\n} from '@/lib/errorHandler';\nimport { convertTimestamp } from '../shared/utils';\nimport type { SessionWithDetails } from '@/types';\nimport { DEFAULT_ACTIVITIES } from '@/types';\n\nexport const populateSessionsWithDetails = async (\n  sessionDocs: any[]\n): Promise<SessionWithDetails[]> => {\n  const sessions: SessionWithDetails[] = [];\n  const batchSize = 10;\n\n  for (let i = 0; i < sessionDocs.length; i += batchSize) {\n    const batch = sessionDocs.slice(i, i + batchSize);\n    const batchPromises = batch.map(async sessionDoc => {\n      const sessionData = sessionDoc.data();\n\n      // Get user data - skip session if user has been deleted or is inaccessible\n      let userDoc;\n      try {\n        userDoc = await getDoc(doc(db, 'users', sessionData.userId));\n      } catch (error) {\n        // Handle permission errors for deleted users\n        if (isPermissionError(error) || isNotFoundError(error)) {\n          return null;\n        }\n        // Re-throw other errors\n        throw error;\n      }\n\n      if (!userDoc.exists()) {\n        // User no longer exists - skip session\n        return null;\n      }\n      const userData = userDoc.data();\n\n      // Get activity data (check both activityId and projectId for backwards compatibility)\n      let activityData: any = null;\n      const activityId = sessionData.activityId || sessionData.projectId;\n\n      if (activityId) {\n        // First, check if it's a default activity\n        const defaultActivity = DEFAULT_ACTIVITIES.find(\n          a => a.id === activityId\n        );\n\n        if (defaultActivity) {\n          activityData = {\n            id: defaultActivity.id,\n            name: defaultActivity.name,\n            icon: defaultActivity.icon,\n            color: defaultActivity.color,\n            description: '',\n            status: 'active',\n            isDefault: true,\n          };\n        } else {\n          // If not a default activity, try to fetch from custom activities collection\n          try {\n            const activityDoc = await getDoc(\n              doc(\n                db,\n                'projects',\n                sessionData.userId,\n                'userProjects',\n                activityId\n              )\n            );\n            if (activityDoc.exists()) {\n              activityData = activityDoc.data();\n            }\n          } catch (error) {\n            handleError(error, `Fetch activity ${activityId}`, {\n              severity: ErrorSeverity.WARNING,\n            });\n          }\n        }\n      }\n\n      // Check if current user has supported this session\n      const supportedBy = sessionData.supportedBy || [];\n      const isSupported = supportedBy.includes(auth.currentUser!.uid);\n\n      // Build the session with full details\n      const session: SessionWithDetails = {\n        id: sessionDoc.id,\n        userId: sessionData.userId,\n        activityId: sessionData.activityId || sessionData.projectId || '',\n        projectId: sessionData.projectId || sessionData.activityId || '',\n        title: sessionData.title || 'Untitled Session',\n        description: sessionData.description || '',\n        duration: sessionData.duration || 0,\n        startTime: convertTimestamp(sessionData.startTime) || new Date(),\n        tags: sessionData.tags || [],\n        visibility: sessionData.visibility || 'everyone',\n        showStartTime: sessionData.showStartTime,\n        howFelt: sessionData.howFelt,\n        privateNotes: sessionData.privateNotes,\n        images: sessionData.images || [],\n        allowComments: sessionData.allowComments !== false,\n        isArchived: sessionData.isArchived || false,\n        supportCount: sessionData.supportCount || 0,\n        supportedBy: supportedBy,\n        commentCount: sessionData.commentCount || 0,\n        isSupported,\n        createdAt: convertTimestamp(sessionData.createdAt),\n        updatedAt: convertTimestamp(sessionData.updatedAt),\n        user: {\n          id: sessionData.userId,\n          email: userData?.email || '',\n          name: userData?.name || 'Unknown User',\n          username: userData?.username || 'unknown',\n          bio: userData?.bio,\n          location: userData?.location,\n          profilePicture: userData?.profilePicture,\n          createdAt: convertTimestamp(userData?.createdAt) || new Date(),\n          updatedAt: convertTimestamp(userData?.updatedAt) || new Date(),\n        },\n        activity: activityData\n          ? {\n              id: activityData.id || activityId || '',\n              userId: sessionData.userId,\n              name: activityData.name || 'Unknown Activity',\n              description: activityData.description || '',\n              icon: activityData.icon || 'flat-color-icons:briefcase',\n              color: activityData.color || '#007AFF',\n              status: activityData.status || 'active',\n              isDefault: activityData.isDefault || false,\n              createdAt: activityData.createdAt\n                ? convertTimestamp(activityData.createdAt)\n                : new Date(),\n              updatedAt: activityData.updatedAt\n                ? convertTimestamp(activityData.updatedAt)\n                : new Date(),\n            }\n          : {\n              id: activityId || '',\n              userId: sessionData.userId,\n              name: 'Unknown Activity',\n              description: '',\n              icon: 'flat-color-icons:briefcase',\n              color: '#007AFF',\n              status: 'active',\n              createdAt: new Date(),\n              updatedAt: new Date(),\n            },\n        project: activityData\n          ? {\n              id: activityData.id || activityId || '',\n              userId: sessionData.userId,\n              name: activityData.name || 'Unknown Activity',\n              description: activityData.description || '',\n              icon: activityData.icon || 'flat-color-icons:briefcase',\n              color: activityData.color || '#007AFF',\n              status: activityData.status || 'active',\n              isDefault: activityData.isDefault || false,\n              createdAt: activityData.createdAt\n                ? convertTimestamp(activityData.createdAt)\n                : new Date(),\n              updatedAt: activityData.updatedAt\n                ? convertTimestamp(activityData.updatedAt)\n                : new Date(),\n            }\n          : {\n              id: activityId || '',\n              userId: sessionData.userId,\n              name: 'Unknown Activity',\n              description: '',\n              icon: 'flat-color-icons:briefcase',\n              color: '#007AFF',\n              status: 'active',\n              createdAt: new Date(),\n              updatedAt: new Date(),\n            },\n      };\n\n      return session;\n    });\n\n    const batchResults = await Promise.all(batchPromises);\n    // Filter out null values (sessions from deleted users)\n    const validSessions = batchResults.filter(\n      (session): session is SessionWithDetails => session !== null\n    );\n    sessions.push(...validSessions);\n  }\n\n  return sessions;\n};\n\n// Helper function to check if username already exists\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/sessions/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 79,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 79,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1901, 1904], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1901, 1904], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 135,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 135,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3814, 3817], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3814, 3817], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 734,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 734,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23735, 23738], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23735, 23738], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Sessions API Module\n * Handles session/activity tracking: CRUD operations, feed, supports\n */\n\n// ============================================================================\n// IMPORTS\n// ============================================================================\n\n// Firebase imports\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n  query,\n  where,\n  orderBy,\n  limit as limitFn,\n  serverTimestamp,\n  Timestamp,\n  setDoc,\n} from 'firebase/firestore';\n\n// Local Firebase config\nimport { db, auth } from '@/lib/firebase';\n\n// Error handling\nimport {\n  handleError,\n  isPermissionError,\n  isNotFoundError,\n  ErrorSeverity,\n} from '@/lib/errorHandler';\nimport { checkRateLimit } from '@/lib/rateLimit';\n\n// Error messages\nimport { ERROR_MESSAGES } from '@/config/errorMessages';\n\n// Shared utilities\nimport { convertTimestamp } from '../shared/utils';\nimport { fetchUserDataForSocialContext } from '../social/helpers';\n\n// Import other API modules\nimport { firebasePostApi } from './posts';\nimport { firebaseChallengeApi } from '../challenges';\n\n// Config\nimport { TIMEOUTS } from '@/config/constants';\nimport { TIMEOUT_ERRORS } from '@/config/errorMessages';\n\n// Types\nimport type {\n  Session,\n  SessionWithDetails,\n  CreateSessionData,\n  SessionFilters,\n  SessionListResponse,\n  User,\n  Project,\n  Post,\n  Activity,\n} from '@/types';\n\n// ============================================================================\n// HELPER FUNCTIONS\n// ============================================================================\n\n/**\n * Validate and normalize project/activity status from Firestore\n * Ensures the status is one of the allowed values, falls back to 'active' if invalid\n *\n * @param status - The status value from Firestore (may be any string)\n * @returns A valid status value: 'active', 'completed', or 'archived'\n */\nfunction normalizeStatus(status: any): 'active' | 'completed' | 'archived' {\n  if (status === 'completed' || status === 'archived') {\n    return status;\n  }\n  return 'active';\n}\n\n/**\n * Create a timeout promise that rejects after a specified duration\n * Used to prevent Firebase queries from hanging indefinitely\n *\n * @param ms - Timeout duration in milliseconds\n * @param errorMessage - Error message to throw on timeout\n * @returns Promise that rejects after the specified duration\n */\nfunction createTimeout(ms: number, errorMessage: string): Promise<never> {\n  return new Promise((_, reject) => {\n    setTimeout(() => reject(new Error(errorMessage)), ms);\n  });\n}\n\n/**\n * Wrap a Firebase query with timeout protection\n * Races the query against a timeout to prevent hanging requests\n *\n * @param queryPromise - The Firebase query promise to execute\n * @param timeoutMs - Timeout duration in milliseconds (default: TIMEOUTS.FIREBASE_QUERY)\n * @returns Promise that resolves with query result or rejects on timeout\n */\nasync function withTimeout<T>(\n  queryPromise: Promise<T>,\n  timeoutMs: number = TIMEOUTS.FIREBASE_QUERY\n): Promise<T> {\n  return Promise.race([\n    queryPromise,\n    createTimeout(timeoutMs, TIMEOUT_ERRORS.FIREBASE_QUERY),\n  ]);\n}\n\n// ============================================================================\n// PUBLIC API\n// ============================================================================\n\nexport const firebaseSessionApi = {\n  // Create a new session\n  createSession: async (data: CreateSessionData): Promise<Session> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      // Rate limitFn session creation\n      checkRateLimit(auth.currentUser.uid, 'SESSION_CREATE');\n\n      // Prepare session data for Firestore\n      const activityId = data.activityId || data.projectId || ''; // Support both for backwards compatibility\n      const sessionData: any = {\n        userId: auth.currentUser.uid,\n        activityId: activityId, // New field\n        projectId: activityId, // Keep for backwards compatibility\n        title: data.title,\n        description: data.description || '',\n        duration: data.duration,\n        startTime: Timestamp.fromDate(data.startTime),\n        // tags removed - no longer used\n        visibility: data.visibility || 'private',\n        showStartTime: data.showStartTime || false,\n        privateNotes: data.privateNotes || '',\n        images: data.images || [],\n        allowComments: data.allowComments !== false,\n        isArchived: false,\n        // Social engagement fields (sessions ARE posts)\n        supportCount: 0,\n        supportedBy: [], // Initialize empty array for user IDs who support this session\n        commentCount: 0,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n      };\n\n      // Only add howFelt if it's defined (Firestore doesn't allow undefined values)\n      if (data.howFelt !== undefined) {\n        sessionData.howFelt = data.howFelt;\n      }\n\n      const docRef = await addDoc(collection(db, 'sessions'), sessionData);\n\n      // CRITICAL: Clear active session immediately after creating the session\n      // This ensures the timer is stopped even if the user navigates away\n      try {\n        await firebaseSessionApi.clearActiveSession();\n      } catch (error) {\n        handleError(error, 'clear active session', {\n          severity: ErrorSeverity.WARNING,\n        });\n        // Don't fail session creation if clearing active session fails\n      }\n\n      // Update challenge progress for this session\n      try {\n        await firebaseChallengeApi.updateChallengeProgress(\n          auth.currentUser.uid,\n          {\n            ...sessionData,\n            id: docRef.id,\n            startTime: data.startTime,\n          }\n        );\n      } catch (error) {\n        handleError(error, 'update challenge progress', {\n          severity: ErrorSeverity.WARNING,\n        });\n        // Don't fail session creation if challenge update fails\n      }\n\n      // Return session with proper structure\n      const newSession: Session = {\n        id: docRef.id,\n        userId: auth.currentUser.uid,\n        activityId: activityId,\n        projectId: activityId, // Backwards compatibility\n        title: data.title,\n        description: data.description,\n        duration: data.duration,\n        startTime: data.startTime,\n        // tags removed - no longer used\n        visibility: sessionData.visibility,\n        showStartTime: sessionData.showStartTime,\n        howFelt: data.howFelt,\n        privateNotes: data.privateNotes,\n        images: data.images || [],\n        allowComments: sessionData.allowComments,\n        isArchived: false,\n        // Social engagement fields (sessions ARE posts)\n        supportCount: 0,\n        commentCount: 0,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      return newSession;\n    } catch (error) {\n      const apiError = handleError(error, 'Create session', {\n        defaultMessage: ERROR_MESSAGES.SESSION_SAVE_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Create a session with an optional post based on visibility settings\n   *\n   * @param sessionData - The session data to create\n   * @param postContent - The content for the post (if visibility is not private)\n   * @param visibility - Who can see this session: 'everyone', 'followers', or 'private'\n   * @returns Promise resolving to an object containing the created session and optional post\n   * @throws Error if user is not authenticated or session creation fails\n   */\n  createSessionWithPost: async (\n    sessionData: CreateSessionData,\n    postContent: string,\n    visibility: 'everyone' | 'followers' | 'private'\n  ): Promise<{ session: Session; post?: Post }> => {\n    try {\n      // Create session first with the correct visibility\n      const session = await firebaseSessionApi.createSession({\n        ...sessionData,\n        visibility,\n      });\n\n      let post: Post | undefined;\n\n      // Create post if not private\n      if (visibility !== 'private') {\n        post = await firebasePostApi.createPost({\n          sessionId: session.id,\n          content: postContent,\n          visibility,\n        });\n      }\n\n      return { session, post };\n    } catch (error) {\n      handleError(error, 'in createSessionWithPost', {\n        severity: ErrorSeverity.ERROR,\n      });\n      const apiError = handleError(error, 'Create session with post', {\n        defaultMessage: ERROR_MESSAGES.SESSION_SAVE_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Save the active timer session to Firestore for persistence across tabs/devices\n   *\n   * @param timerData - The timer data to save\n   * @param timerData.startTime - When the timer started\n   * @param timerData.projectId - The project being tracked\n   * @param timerData.selectedTaskIds - Array of task IDs being tracked\n   * @param timerData.pausedDuration - Total time paused in milliseconds (optional)\n   * @param timerData.isPaused - Whether the timer is currently paused (optional)\n   * @returns Promise that resolves when the session is saved\n   * @throws Error if user is not authenticated or save fails\n   */\n  saveActiveSession: async (timerData: {\n    startTime: Date;\n    projectId: string;\n    selectedTaskIds: string[];\n    pausedDuration?: number;\n    isPaused?: boolean;\n  }): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const userId = auth.currentUser.uid;\n\n      // Ensure user document exists first (Firestore requires parent docs for subcollections)\n      const userRef = doc(db, 'users', userId);\n      await setDoc(\n        userRef,\n        {\n          uid: userId,\n          updatedAt: serverTimestamp(),\n        },\n        { merge: true }\n      );\n\n      // Save the active session\n      const activeSessionRef = doc(\n        db,\n        'users',\n        userId,\n        'activeSession',\n        'current'\n      );\n      await setDoc(activeSessionRef, {\n        startTime: Timestamp.fromDate(timerData.startTime),\n        projectId: timerData.projectId,\n        selectedTaskIds: timerData.selectedTaskIds,\n        pausedDuration: timerData.pausedDuration || 0,\n        isPaused: !!timerData.isPaused,\n        lastUpdated: serverTimestamp(),\n        createdAt: serverTimestamp(),\n      });\n    } catch (error) {\n      const apiError = handleError(error, 'Save active session');\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Retrieve the active timer session from Firestore\n   *\n   * @returns Promise resolving to the active session data or null if no active session exists\n   */\n  getActiveSession: async (): Promise<{\n    startTime: Date;\n    projectId: string;\n    selectedTaskIds: string[];\n    pausedDuration: number;\n    isPaused: boolean;\n  } | null> => {\n    try {\n      if (!auth.currentUser) {\n        return null;\n      }\n\n      const userId = auth.currentUser.uid;\n      const activeSessionRef = doc(\n        db,\n        'users',\n        userId,\n        'activeSession',\n        'current'\n      );\n      const activeSessionDoc = await getDoc(activeSessionRef);\n\n      if (!activeSessionDoc.exists()) {\n        return null;\n      }\n\n      const data = activeSessionDoc.data();\n\n      // Validate data exists and has required fields\n      if (!data || !data.startTime || !data.projectId) {\n        handleError(\n          new Error('Active session data is incomplete'),\n          'Get active session',\n          { severity: ErrorSeverity.WARNING }\n        );\n        return null;\n      }\n\n      return {\n        startTime: data.startTime.toDate(),\n        projectId: data.projectId,\n        selectedTaskIds: data.selectedTaskIds || [],\n        pausedDuration: data.pausedDuration || 0,\n        isPaused: !!data.isPaused,\n      };\n    } catch (error) {\n      // If it's a permission error or document doesn't exist, silently return null\n      if (isPermissionError(error) || isNotFoundError(error)) {\n        return null;\n      }\n      handleError(error, 'Get active session', {\n        severity: ErrorSeverity.ERROR,\n      });\n      return null;\n    }\n  },\n\n  /**\n   * Clear the active timer session from Firestore and broadcast cancellation to other tabs\n   *\n   * @returns Promise that resolves when the session is cleared\n   * @throws Error if clearing the session fails (except for permission/not found errors)\n   */\n  clearActiveSession: async (): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        return;\n      }\n\n      const userId = auth.currentUser.uid;\n      const activeSessionRef = doc(\n        db,\n        'users',\n        userId,\n        'activeSession',\n        'current'\n      );\n\n      // Delete the document immediately to prevent race conditions\n      // This is atomic and prevents any in-flight auto-save from restoring the session\n      await deleteDoc(activeSessionRef);\n\n      // Broadcast cancellation to other tabs using localStorage event\n      try {\n        const event = {\n          type: 'session-cancelled',\n          timestamp: Date.now(),\n          userId: userId,\n        };\n        localStorage.setItem('timer-event', JSON.stringify(event));\n        // Remove immediately to trigger the event\n        localStorage.removeItem('timer-event');\n      } catch (_storageError) {\n        // Ignore storage errors (e.g., in private browsing mode)\n      }\n    } catch (error) {\n      const apiError = handleError(error, 'Clear active session', {\n        defaultMessage: 'Failed to clear active session',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get sessions for a user with fully populated user and project data\n   * Sessions are used as the primary content type (like posts on Strava)\n   *\n   * @param userId - The user ID whose sessions to retrieve\n   * @param limitCount - Maximum number of sessions to return (default: 20)\n   * @param isOwnProfile - Whether viewing own profile (shows all sessions including private)\n   * @returns Promise resolving to array of sessions with user and project details\n   * @throws Error if user is not authenticated or fetch fails\n   */\n  getUserSessions: async (\n    userId: string,\n    limitCount: number = 20,\n    isOwnProfile: boolean = false\n  ): Promise<SessionWithDetails[]> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      let sessionsQuery;\n\n      if (isOwnProfile) {\n        // Show all sessions for own profile\n        sessionsQuery = query(\n          collection(db, 'sessions'),\n          where('userId', '==', userId),\n          orderBy('createdAt', 'desc'),\n          limitFn(limitCount)\n        );\n      } else {\n        // Show only public sessions for other profiles\n        sessionsQuery = query(\n          collection(db, 'sessions'),\n          where('userId', '==', userId),\n          where('visibility', '==', 'everyone'),\n          orderBy('createdAt', 'desc'),\n          limitFn(limitCount)\n        );\n      }\n\n      const querySnapshot = await withTimeout(getDocs(sessionsQuery));\n      const sessions: SessionWithDetails[] = [];\n\n      // Get user data once (since all sessions are from the same user)\n      const userDoc = await withTimeout(getDoc(doc(db, 'users', userId)));\n      const userData = userDoc.data();\n      const user: User = {\n        id: userId,\n        email: userData?.email || '',\n        name: userData?.name || 'Unknown User',\n        username: userData?.username || 'unknown',\n        bio: userData?.bio,\n        location: userData?.location,\n        profilePicture: userData?.profilePicture,\n        createdAt: convertTimestamp(userData?.createdAt) || new Date(),\n        updatedAt: convertTimestamp(userData?.updatedAt) || new Date(),\n      };\n\n      // Process each session\n      for (const sessionDoc of querySnapshot.docs) {\n        const sessionData = sessionDoc.data();\n\n        // Get project data\n        let projectData = null;\n        const projectId = sessionData.projectId;\n        if (projectId) {\n          try {\n            const projectDoc = await getDoc(\n              doc(db, 'projects', userId, 'userProjects', projectId)\n            );\n            if (projectDoc.exists()) {\n              projectData = projectDoc.data();\n            }\n          } catch (error) {\n            handleError(error, `Fetch project ${projectId}`, {\n              severity: ErrorSeverity.WARNING,\n            });\n          }\n        }\n\n        const project: Project = projectData\n          ? {\n              id: projectId,\n              userId: userId,\n              name: projectData.name || 'Unknown Project',\n              description: projectData.description || '',\n              icon: projectData.icon || '📁',\n              color: projectData.color || '#64748B',\n              weeklyTarget: projectData.weeklyTarget,\n              totalTarget: projectData.totalTarget,\n              status: normalizeStatus(projectData.status),\n              createdAt: convertTimestamp(projectData.createdAt) || new Date(),\n              updatedAt: convertTimestamp(projectData.updatedAt) || new Date(),\n            }\n          : {\n              id: projectId || 'unknown',\n              userId: userId,\n              name: 'Unknown Project',\n              description: '',\n              icon: '📁',\n              color: '#64748B',\n              status: 'active',\n              createdAt: new Date(),\n              updatedAt: new Date(),\n            };\n\n        sessions.push({\n          id: sessionDoc.id,\n          userId: sessionData.userId,\n          activityId: sessionData.activityId || sessionData.projectId || '',\n          projectId: sessionData.projectId || sessionData.activityId || '',\n          title: sessionData.title || 'Untitled Session',\n          description: sessionData.description || '',\n          duration: sessionData.duration || 0,\n          startTime: convertTimestamp(sessionData.startTime) || new Date(),\n          tags: sessionData.tags || [],\n          visibility: sessionData.visibility || 'everyone',\n          showStartTime: sessionData.showStartTime,\n          howFelt: sessionData.howFelt,\n          privateNotes: sessionData.privateNotes,\n          isArchived: sessionData.isArchived || false,\n          images: sessionData.images || [],\n          allowComments: sessionData.allowComments !== false,\n          supportCount: sessionData.supportCount || 0,\n          commentCount: sessionData.commentCount || 0,\n          createdAt: convertTimestamp(sessionData.createdAt) || new Date(),\n          updatedAt: convertTimestamp(sessionData.updatedAt) || new Date(),\n          user,\n          project,\n          activity: project,\n        });\n      }\n\n      return sessions;\n    } catch (error) {\n      handleError(error, 'get user sessions', {\n        severity: ErrorSeverity.ERROR,\n      });\n      const apiError = handleError(error, 'Get user sessions', {\n        defaultMessage: ERROR_MESSAGES.SESSION_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get the total count of sessions for a user\n   *\n   * @param userId - The user ID whose session count to retrieve\n   * @param isOwnProfile - Whether viewing own profile (counts all sessions including private)\n   * @returns Promise resolving to the session count (returns 0 on error)\n   */\n  getUserSessionsCount: async (\n    userId: string,\n    isOwnProfile: boolean = false\n  ): Promise<number> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      let sessionsQuery;\n\n      if (isOwnProfile) {\n        // Count all sessions for own profile\n        sessionsQuery = query(\n          collection(db, 'sessions'),\n          where('userId', '==', userId)\n        );\n      } else {\n        // Count only public sessions for other profiles\n        sessionsQuery = query(\n          collection(db, 'sessions'),\n          where('userId', '==', userId),\n          where('visibility', '==', 'everyone')\n        );\n      }\n\n      const querySnapshot = await withTimeout(getDocs(sessionsQuery));\n      return querySnapshot.size;\n    } catch (error) {\n      handleError(error, 'get user sessions count', {\n        severity: ErrorSeverity.ERROR,\n      });\n      return 0;\n    }\n  },\n\n  /**\n   * Get sessions for the authenticated user with optional filters\n   *\n   * @param page - Page number for pagination (default: 1)\n   * @param limitCount - Maximum number of sessions per page (default: 20)\n   * @param filters - Optional filters to apply (e.g., projectId)\n   * @returns Promise resolving to sessions list with pagination metadata\n   * @throws Error if user is not authenticated or fetch fails\n   */\n  getSessions: async (\n    _page: number = 1,\n    limitCount: number = 20,\n    filters: SessionFilters = {}\n  ): Promise<SessionListResponse> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      let sessionsQuery = query(\n        collection(db, 'sessions'),\n        where('userId', '==', auth.currentUser.uid),\n        orderBy('startTime', 'desc'),\n        limitFn(limitCount)\n      );\n\n      if (filters.projectId) {\n        sessionsQuery = query(\n          collection(db, 'sessions'),\n          where('userId', '==', auth.currentUser.uid),\n          where('projectId', '==', filters.projectId),\n          orderBy('startTime', 'desc'),\n          limitFn(limitCount)\n        );\n      }\n\n      const querySnapshot = await withTimeout(getDocs(sessionsQuery));\n      const sessions: Session[] = [];\n\n      querySnapshot.forEach(doc => {\n        const data = doc.data();\n        sessions.push({\n          id: doc.id,\n          userId: data.userId,\n          activityId: data.activityId || data.projectId || '',\n          projectId: data.projectId || data.activityId || '',\n          title: data.title,\n          description: data.description,\n          duration: data.duration,\n          startTime: convertTimestamp(data.startTime),\n          tags: data.tags || [],\n          visibility: data.visibility || 'private',\n          showStartTime: data.showStartTime,\n          howFelt: data.howFelt,\n          privateNotes: data.privateNotes,\n          isArchived: data.isArchived || false,\n          images: data.images || [],\n          allowComments: data.allowComments !== false,\n          supportCount: data.supportCount || 0,\n          commentCount: data.commentCount || 0,\n          createdAt: convertTimestamp(data.createdAt),\n          updatedAt: convertTimestamp(data.updatedAt),\n        });\n      });\n\n      return {\n        sessions,\n        totalCount: sessions.length,\n        hasMore: querySnapshot.docs.length === limitCount,\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Get sessions', {\n        defaultMessage: ERROR_MESSAGES.SESSION_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Update an existing session with new data\n   *\n   * @param sessionId - The ID of the session to update\n   * @param data - Partial session data with fields to update\n   * @returns Promise that resolves when the session is updated\n   * @throws Error if user is not authenticated, session not found, or permission denied\n   */\n  updateSession: async (\n    sessionId: string,\n    data: Partial<CreateSessionData>\n  ): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const sessionRef = doc(db, 'sessions', sessionId);\n      const sessionDoc = await getDoc(sessionRef);\n\n      if (\n        !sessionDoc.exists() ||\n        sessionDoc.data().userId !== auth.currentUser.uid\n      ) {\n        throw new Error('Session not found or permission denied');\n      }\n\n      // Prepare update data\n      const updateData: any = {\n        updatedAt: serverTimestamp(),\n      };\n\n      if (data.title !== undefined) updateData.title = data.title;\n      if (data.description !== undefined)\n        updateData.description = data.description;\n      if (data.projectId !== undefined) updateData.projectId = data.projectId;\n      if (data.visibility !== undefined)\n        updateData.visibility = data.visibility;\n      if (data.tags !== undefined) updateData.tags = data.tags;\n      if (data.howFelt !== undefined) updateData.howFelt = data.howFelt;\n      if (data.privateNotes !== undefined)\n        updateData.privateNotes = data.privateNotes;\n      if (data.images !== undefined) updateData.images = data.images;\n      if (data.allowComments !== undefined)\n        updateData.allowComments = data.allowComments;\n      if (data.startTime !== undefined)\n        updateData.startTime = Timestamp.fromDate(data.startTime);\n      if (data.duration !== undefined) updateData.duration = data.duration;\n\n      // Remove undefined values\n      Object.keys(updateData).forEach(\n        key => updateData[key] === undefined && delete updateData[key]\n      );\n\n      await updateDoc(sessionRef, updateData);\n    } catch (error) {\n      const apiError = handleError(error, 'Update session', {\n        defaultMessage: ERROR_MESSAGES.SESSION_UPDATE_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Delete a session permanently\n   *\n   * @param sessionId - The ID of the session to delete\n   * @returns Promise that resolves when the session is deleted\n   * @throws Error if user is not authenticated, session not found, or permission denied\n   */\n  deleteSession: async (sessionId: string): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const sessionRef = doc(db, 'sessions', sessionId);\n      const sessionDoc = await getDoc(sessionRef);\n\n      if (\n        !sessionDoc.exists() ||\n        sessionDoc.data().userId !== auth.currentUser.uid\n      ) {\n        throw new Error('Session not found or permission denied');\n      }\n\n      await deleteDoc(sessionRef);\n    } catch (error) {\n      const apiError = handleError(error, 'Delete session', {\n        defaultMessage: ERROR_MESSAGES.SESSION_DELETE_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get a single session by ID (basic data only, no populated details)\n   *\n   * @param sessionId - The ID of the session to retrieve\n   * @returns Promise resolving to the session data\n   * @throws Error if user is not authenticated, session not found, or permission denied\n   */\n  getSession: async (sessionId: string): Promise<Session> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const sessionRef = doc(db, 'sessions', sessionId);\n      const sessionDoc = await getDoc(sessionRef);\n\n      if (!sessionDoc.exists()) {\n        throw new Error('Session not found');\n      }\n\n      const data = sessionDoc.data();\n\n      // Check if user has permission to view\n      if (data.userId !== auth.currentUser.uid) {\n        throw new Error('Permission denied');\n      }\n\n      return {\n        id: sessionDoc.id,\n        userId: data.userId,\n        activityId: data.activityId || data.projectId || '',\n        projectId: data.projectId || data.activityId || '',\n        title: data.title,\n        description: data.description,\n        duration: data.duration,\n        startTime: convertTimestamp(data.startTime),\n        tags: data.tags || [],\n        visibility: data.visibility || 'private',\n        showStartTime: data.showStartTime,\n        howFelt: data.howFelt,\n        privateNotes: data.privateNotes,\n        isArchived: data.isArchived || false,\n        images: data.images || [],\n        allowComments: data.allowComments !== false,\n        supportCount: data.supportCount || 0,\n        commentCount: data.commentCount || 0,\n        createdAt: convertTimestamp(data.createdAt),\n        updatedAt: convertTimestamp(data.updatedAt),\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Get session', {\n        defaultMessage: ERROR_MESSAGES.SESSION_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get a single session with fully populated user and project details\n   *\n   * @param sessionId - The ID of the session to retrieve\n   * @returns Promise resolving to the session with user, project, and support status\n   * @throws Error if user is not authenticated, session not found, or permission denied\n   */\n  getSessionWithDetails: async (\n    sessionId: string\n  ): Promise<SessionWithDetails> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const sessionRef = doc(db, 'sessions', sessionId);\n      const sessionDoc = await getDoc(sessionRef);\n\n      if (!sessionDoc.exists()) {\n        throw new Error('Session not found');\n      }\n\n      const data = sessionDoc.data();\n\n      // Get user data\n      const userData = await fetchUserDataForSocialContext(data.userId);\n\n      // Get project data\n      let activity: Activity | null = null;\n      if (data.projectId || data.activityId) {\n        const activityId = data.activityId || data.projectId;\n        const activityRef = doc(\n          db,\n          'projects',\n          data.userId,\n          'userProjects',\n          activityId\n        );\n        const activityDoc = await getDoc(activityRef);\n        if (activityDoc.exists()) {\n          const activityData = activityDoc.data();\n          activity = {\n            id: activityDoc.id,\n            userId: data.userId,\n            name: activityData.name,\n            description: activityData.description || '',\n            color: activityData.color || '#007AFF',\n            icon: activityData.icon || 'FolderIcon',\n            status: normalizeStatus(activityData.status),\n            createdAt: convertTimestamp(activityData.createdAt),\n            updatedAt: convertTimestamp(activityData.updatedAt),\n          };\n        }\n      }\n\n      // Check if current user has supported this session\n      const supportedBy = data.supportedBy || [];\n      const isSupported = supportedBy.includes(auth.currentUser.uid);\n\n      // Create default activity object\n      const defaultActivity: Activity = {\n        id: '',\n        userId: data.userId,\n        name: 'No Activity',\n        description: '',\n        color: '#007AFF',\n        icon: 'FolderIcon',\n        status: 'active' as const,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n\n      return {\n        id: sessionDoc.id,\n        userId: data.userId,\n        activityId: data.activityId || data.projectId || '',\n        projectId: data.projectId || data.activityId || '',\n        title: data.title,\n        description: data.description,\n        duration: data.duration,\n        startTime: convertTimestamp(data.startTime),\n        tags: data.tags || [],\n        visibility: data.visibility || 'private',\n        showStartTime: data.showStartTime,\n        howFelt: data.howFelt,\n        privateNotes: data.privateNotes,\n        isArchived: data.isArchived || false,\n        images: data.images || [],\n        allowComments: data.allowComments !== false,\n        supportCount: data.supportCount || 0,\n        supportedBy: supportedBy,\n        commentCount: data.commentCount || 0,\n        isSupported,\n        createdAt: convertTimestamp(data.createdAt),\n        updatedAt: convertTimestamp(data.updatedAt),\n        user: {\n          id: data.userId,\n          name: userData?.name || 'Unknown User',\n          username: userData?.username || '',\n          email: userData?.email || '',\n          profilePicture: userData?.profilePicture,\n          bio: userData?.bio,\n          location: userData?.location,\n          createdAt: userData?.createdAt || new Date(),\n          updatedAt: userData?.updatedAt || new Date(),\n        },\n        activity: activity || defaultActivity,\n        project: activity || defaultActivity,\n      };\n    } catch (error) {\n      // Don't log permission errors - these are expected for private/restricted sessions\n      const silent = isPermissionError(error);\n      const apiError = handleError(error, 'Get session with details', {\n        defaultMessage: ERROR_MESSAGES.SESSION_LOAD_FAILED,\n        silent,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n};\n\n// Helper function to process post documents into PostWithDetails\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/sessions/posts.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/shared/utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/social/comments.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'isNotFoundError' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 41,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 41,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'ErrorSeverity' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 42,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 42,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'removeUndefinedFields' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 50,
        "column": 28,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 49
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'CommentLike' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 64,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 64,
        "endColumn": 14
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Comments API Module\n * Handles comment CRUD operations and likes\n */\n\n// ============================================================================\n// IMPORTS\n// ============================================================================\n\n// Firebase imports\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n  query,\n  where,\n  orderBy,\n  limit as limitFn,\n  serverTimestamp,\n  increment,\n  writeBatch,\n  setDoc,\n  startAfter,\n  DocumentSnapshot,\n  QueryDocumentSnapshot,\n  QuerySnapshot,\n  DocumentData,\n} from 'firebase/firestore';\n\n// Local Firebase config\nimport { db, auth } from '@/lib/firebase';\n\n// Error handling\nimport {\n  handleError,\n  isPermissionError,\n  isNotFoundError,\n  ErrorSeverity,\n} from '@/lib/errorHandler';\nimport { checkRateLimit } from '@/lib/rateLimit';\n\n// Error messages\nimport { ERROR_MESSAGES } from '@/config/errorMessages';\n\n// Shared utilities\nimport { convertTimestamp, removeUndefinedFields } from '../shared/utils';\n\n// Social helpers\nimport {\n  fetchUserDataForSocialContext,\n  buildCommentUserDetails,\n} from './helpers';\n\n// Types\nimport type {\n  Comment,\n  CommentWithDetails,\n  CreateCommentData,\n  UpdateCommentData,\n  CommentLike,\n  CommentsResponse,\n} from '@/types';\n\n// ============================================================================\n// PUBLIC API\n// ============================================================================\n\nexport const firebaseCommentApi = {\n  /**\n   * Create a new comment or reply on a session\n   * Automatically creates notifications for mentions, session owners, and parent comment owners\n   *\n   * @param data - The comment data including sessionId, content, and optional parentId for replies\n   * @returns Promise resolving to the created comment with user details\n   * @throws Error if user is not authenticated, rate limit exceeded, or creation fails\n   */\n  createComment: async (\n    data: CreateCommentData\n  ): Promise<CommentWithDetails> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      // Rate limitFn comment creation\n      checkRateLimit(auth.currentUser.uid, 'COMMENT');\n\n      const userId = auth.currentUser.uid;\n\n      // Extract mentions from content\n      const mentionRegex = /@(\\w+)/g;\n      const mentions = [...data.content.matchAll(mentionRegex)].map(\n        match => match[1]\n      );\n\n      const commentData: {\n        sessionId: string;\n        userId: string;\n        content: string;\n        likeCount: number;\n        replyCount: number;\n        isEdited: boolean;\n        createdAt: ReturnType<typeof serverTimestamp>;\n        updatedAt: ReturnType<typeof serverTimestamp>;\n        parentId?: string;\n      } = {\n        sessionId: data.sessionId,\n        userId,\n        content: data.content,\n        likeCount: 0,\n        replyCount: 0,\n        isEdited: false,\n        createdAt: serverTimestamp(),\n        updatedAt: serverTimestamp(),\n      };\n\n      // Only add parentId if it exists\n      if (data.parentId) {\n        commentData.parentId = data.parentId;\n      }\n\n      const docRef = await addDoc(collection(db, 'comments'), commentData);\n\n      // Increment comment count on session\n      const sessionRef = doc(db, 'sessions', data.sessionId);\n      await updateDoc(sessionRef, {\n        commentCount: increment(1),\n      });\n\n      // If this is a reply, increment reply count on parent comment\n      if (data.parentId) {\n        const parentCommentRef = doc(db, 'comments', data.parentId);\n        await updateDoc(parentCommentRef, {\n          replyCount: increment(1),\n        });\n      }\n\n      // Get user data\n      const userDoc = await getDoc(doc(db, 'users', userId));\n      const userData = userDoc.data();\n\n      // Create notifications for mentions\n      if (mentions.length > 0) {\n        // Get users by username\n        const usersQuery = query(\n          collection(db, 'users'),\n          where('username', 'in', mentions)\n        );\n        const usersSnapshot = await getDocs(usersQuery);\n\n        const notificationPromises = usersSnapshot.docs.map(async userDoc => {\n          const mentionedUserId = userDoc.id;\n          if (mentionedUserId !== userId) {\n            // Create notification\n            await addDoc(collection(db, 'notifications'), {\n              userId: mentionedUserId,\n              type: 'mention',\n              title: 'New mention',\n              message: `${userData?.name} mentioned you in a comment`,\n              linkUrl: `/sessions/${data.sessionId}`,\n              actorId: userId,\n              actorName: userData?.name,\n              actorUsername: userData?.username,\n              actorProfilePicture: userData?.profilePicture,\n              sessionId: data.sessionId,\n              commentId: docRef.id,\n              isRead: false,\n              createdAt: serverTimestamp(),\n            });\n          }\n        });\n\n        await Promise.all(notificationPromises);\n      }\n\n      // Create notification for session owner (if not commenting on own session)\n      if (!data.parentId) {\n        const sessionDoc = await getDoc(sessionRef);\n        const sessionData = sessionDoc.data();\n\n        if (sessionData && sessionData.userId !== userId) {\n          await addDoc(collection(db, 'notifications'), {\n            userId: sessionData.userId,\n            type: 'comment',\n            title: 'New comment',\n            message: `${userData?.name} commented on your session`,\n            linkUrl: `/sessions/${data.sessionId}`,\n            actorId: userId,\n            actorName: userData?.name,\n            actorUsername: userData?.username,\n            actorProfilePicture: userData?.profilePicture,\n            sessionId: data.sessionId,\n            commentId: docRef.id,\n            isRead: false,\n            createdAt: serverTimestamp(),\n          });\n        }\n      } else {\n        // Create notification for parent comment owner (if replying to someone else)\n        const parentCommentDoc = await getDoc(\n          doc(db, 'comments', data.parentId)\n        );\n        const parentCommentData = parentCommentDoc.data();\n\n        if (parentCommentData && parentCommentData.userId !== userId) {\n          await addDoc(collection(db, 'notifications'), {\n            userId: parentCommentData.userId,\n            type: 'reply',\n            title: 'New reply',\n            message: `${userData?.name} replied to your comment`,\n            linkUrl: `/sessions/${data.sessionId}`,\n            actorId: userId,\n            actorName: userData?.name,\n            actorUsername: userData?.username,\n            actorProfilePicture: userData?.profilePicture,\n            sessionId: data.sessionId,\n            commentId: docRef.id,\n            isRead: false,\n            createdAt: serverTimestamp(),\n          });\n        }\n      }\n\n      return {\n        id: docRef.id,\n        sessionId: data.sessionId,\n        userId,\n        parentId: data.parentId,\n        content: data.content,\n        likeCount: 0,\n        replyCount: 0,\n        isLiked: false,\n        isEdited: false,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        user: buildCommentUserDetails(userId, userData || null),\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Create comment', {\n        defaultMessage: ERROR_MESSAGES.COMMENT_POST_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Update an existing comment's content\n   *\n   * @param commentId - The ID of the comment to update\n   * @param data - The updated comment data (content)\n   * @returns Promise resolving to the updated comment\n   * @throws Error if user is not authenticated, comment not found, or not authorized\n   */\n  updateComment: async (\n    commentId: string,\n    data: UpdateCommentData\n  ): Promise<Comment> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const commentRef = doc(db, 'comments', commentId);\n      const commentDoc = await getDoc(commentRef);\n\n      if (!commentDoc.exists()) {\n        throw new Error('Comment not found');\n      }\n\n      const commentData = commentDoc.data();\n\n      if (commentData.userId !== auth.currentUser.uid) {\n        throw new Error('Not authorized to edit this comment');\n      }\n\n      await updateDoc(commentRef, {\n        content: data.content,\n        isEdited: true,\n        updatedAt: serverTimestamp(),\n      });\n\n      return {\n        id: commentId,\n        ...commentData,\n        content: data.content,\n        isEdited: true,\n        createdAt: convertTimestamp(commentData.createdAt),\n        updatedAt: new Date(),\n      } as Comment;\n    } catch (error) {\n      const apiError = handleError(error, 'Update comment', {\n        defaultMessage: ERROR_MESSAGES.COMMENT_POST_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Delete a comment and all its replies\n   *\n   * @param commentId - The ID of the comment to delete\n   * @returns Promise that resolves when the comment and replies are deleted\n   * @throws Error if user is not authenticated, comment not found, or not authorized\n   */\n  deleteComment: async (commentId: string): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const commentRef = doc(db, 'comments', commentId);\n      const commentDoc = await getDoc(commentRef);\n\n      if (!commentDoc.exists()) {\n        throw new Error('Comment not found');\n      }\n\n      const commentData = commentDoc.data();\n\n      if (commentData.userId !== auth.currentUser.uid) {\n        throw new Error('Not authorized to delete this comment');\n      }\n\n      // Delete all replies to this comment\n      const repliesQuery = query(\n        collection(db, 'comments'),\n        where('parentId', '==', commentId)\n      );\n      const repliesSnapshot = await getDocs(repliesQuery);\n\n      const batch = writeBatch(db);\n\n      repliesSnapshot.docs.forEach(doc => {\n        batch.delete(doc.ref);\n      });\n\n      batch.delete(commentRef);\n\n      await batch.commit();\n\n      // Decrement comment count on session\n      const sessionRef = doc(db, 'sessions', commentData.sessionId);\n      await updateDoc(sessionRef, {\n        commentCount: increment(-1 - repliesSnapshot.size), // -1 for the comment itself, and -repliesSnapshot.size for replies\n      });\n\n      // If this is a reply, decrement reply count on parent comment\n      if (commentData.parentId) {\n        const parentCommentRef = doc(db, 'comments', commentData.parentId);\n        await updateDoc(parentCommentRef, {\n          replyCount: increment(-1),\n        });\n      }\n    } catch (error) {\n      const apiError = handleError(error, 'Delete comment', {\n        defaultMessage: ERROR_MESSAGES.COMMENT_DELETE_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Like a comment\n   *\n   * @param commentId - The ID of the comment to like\n   * @returns Promise that resolves when the like is added\n   * @throws Error if user is not authenticated, comment already liked, or like fails\n   */\n  likeComment: async (commentId: string): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const userId = auth.currentUser.uid;\n      const likeId = `${userId}_${commentId}`;\n      const likeRef = doc(db, 'commentLikes', likeId);\n\n      const likeDoc = await getDoc(likeRef);\n\n      if (likeDoc.exists()) {\n        throw new Error('Already liked this comment');\n      }\n\n      await setDoc(likeRef, {\n        commentId,\n        userId,\n        createdAt: serverTimestamp(),\n      });\n\n      // Increment like count on comment\n      const commentRef = doc(db, 'comments', commentId);\n      await updateDoc(commentRef, {\n        likeCount: increment(1),\n      });\n    } catch (error) {\n      const apiError = handleError(error, 'Like comment', {\n        defaultMessage: 'Failed to like comment',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Unlike a comment (remove like)\n   *\n   * @param commentId - The ID of the comment to unlike\n   * @returns Promise that resolves when the like is removed\n   * @throws Error if user is not authenticated, comment not liked, or unlike fails\n   */\n  unlikeComment: async (commentId: string): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const userId = auth.currentUser.uid;\n      const likeId = `${userId}_${commentId}`;\n      const likeRef = doc(db, 'commentLikes', likeId);\n\n      const likeDoc = await getDoc(likeRef);\n\n      if (!likeDoc.exists()) {\n        throw new Error('Comment not liked');\n      }\n\n      await deleteDoc(likeRef);\n\n      // Decrement like count on comment\n      const commentRef = doc(db, 'comments', commentId);\n      await updateDoc(commentRef, {\n        likeCount: increment(-1),\n      });\n    } catch (error) {\n      const apiError = handleError(error, 'Unlike comment', {\n        defaultMessage: 'Failed to unlike comment',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get top-level comments for a session with pagination\n   * Returns only parent comments (no replies) - use getReplies for nested comments\n   *\n   * @param sessionId - The session ID whose comments to retrieve\n   * @param limitCount - Maximum number of comments to return (default: 20)\n   * @param lastDoc - Optional Firestore document snapshot for pagination\n   * @returns Promise resolving to comments with hasMore flag (returns empty on permission errors)\n   */\n  getSessionComments: async (\n    sessionId: string,\n    limitCount: number = 20,\n    lastDoc?: DocumentSnapshot\n  ): Promise<CommentsResponse> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const userId = auth.currentUser.uid;\n\n      // Get top-level comments (no parentId)\n      let q;\n\n      if (lastDoc) {\n        q = query(\n          collection(db, 'comments'),\n          where('sessionId', '==', sessionId),\n          orderBy('createdAt', 'desc'),\n          startAfter(lastDoc),\n          limitFn(limitCount + 1)\n        );\n      } else {\n        q = query(\n          collection(db, 'comments'),\n          where('sessionId', '==', sessionId),\n          orderBy('createdAt', 'desc'),\n          limitFn(limitCount + 1)\n        );\n      }\n\n      const snapshot: QuerySnapshot<DocumentData> = await getDocs(q);\n\n      // Filter for top-level comments only (no parentId)\n      const topLevelDocs: QueryDocumentSnapshot<DocumentData>[] =\n        snapshot.docs.filter(\n          (doc: QueryDocumentSnapshot<DocumentData>) => !doc.data().parentId\n        );\n\n      const hasMore: boolean = topLevelDocs.length > limitCount;\n      const docs: QueryDocumentSnapshot<DocumentData>[] = hasMore\n        ? topLevelDocs.slice(0, -1)\n        : topLevelDocs;\n\n      // Get all comment likes for current user in one query\n      const commentIds: string[] = docs.map(\n        (d: QueryDocumentSnapshot<DocumentData>) => d.id\n      );\n      let likedCommentIds = new Set<string>();\n      if (commentIds.length > 0) {\n        const likesQuery = query(\n          collection(db, 'commentLikes'),\n          where('userId', '==', userId),\n          where('commentId', 'in', commentIds)\n        );\n        const likesSnapshot = await getDocs(likesQuery);\n        likedCommentIds = new Set(\n          likesSnapshot.docs.map(d => d.data().commentId)\n        );\n      }\n\n      // Build comments with user details\n      const comments: CommentWithDetails[] = await Promise.all(\n        docs.map(async (docSnapshot: QueryDocumentSnapshot<DocumentData>) => {\n          const data = docSnapshot.data();\n\n          const userData = await fetchUserDataForSocialContext(data.userId);\n\n          return {\n            id: docSnapshot.id,\n            sessionId: data.sessionId,\n            userId: data.userId,\n            parentId: data.parentId,\n            content: data.content,\n            likeCount: data.likeCount || 0,\n            replyCount: data.replyCount || 0,\n            isLiked: likedCommentIds.has(docSnapshot.id),\n            isEdited: data.isEdited || false,\n            createdAt: convertTimestamp(data.createdAt),\n            updatedAt: convertTimestamp(data.updatedAt),\n            user: buildCommentUserDetails(data.userId, userData),\n          };\n        })\n      );\n\n      return {\n        comments,\n        hasMore,\n      };\n    } catch (error) {\n      // Handle permission errors gracefully - return empty comments\n      if (isPermissionError(error)) {\n        // Don't log permission errors - they're expected for restricted sessions\n        return {\n          comments: [],\n          hasMore: false,\n        };\n      }\n\n      // For other errors, log and throw with appropriate message\n      const apiError = handleError(error, 'Get session comments', {\n        defaultMessage: ERROR_MESSAGES.COMMENT_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Legacy alias for getSessionComments - get top-level comments for a session\n   * Kept for backward compatibility with older code\n   *\n   * @param sessionId - The session ID whose comments to retrieve\n   * @param limitCount - Maximum number of comments to return (default: 20)\n   * @param lastDoc - Optional Firestore document snapshot for pagination\n   * @returns Promise resolving to comments with hasMore flag and nextCursor\n   * @throws Error if user is not authenticated or fetch fails\n   */\n  getPostComments: async (\n    sessionId: string,\n    limitCount: number = 20,\n    lastDoc?: DocumentSnapshot\n  ): Promise<CommentsResponse> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const userId = auth.currentUser.uid;\n\n      // Get top-level comments (no parentId)\n      // Note: Firestore doesn't support querying for undefined, so we check for both null and absence\n      let q;\n\n      if (lastDoc) {\n        q = query(\n          collection(db, 'comments'),\n          where('sessionId', '==', sessionId),\n          orderBy('createdAt', 'desc'),\n          startAfter(lastDoc),\n          limitFn(limitCount + 1)\n        );\n      } else {\n        q = query(\n          collection(db, 'comments'),\n          where('sessionId', '==', sessionId),\n          orderBy('createdAt', 'desc'),\n          limitFn(limitCount + 1)\n        );\n      }\n\n      const snapshot: QuerySnapshot<DocumentData> = await getDocs(q);\n\n      // Filter for top-level comments only (no parentId)\n      const topLevelDocs: QueryDocumentSnapshot<DocumentData>[] =\n        snapshot.docs.filter(\n          (doc: QueryDocumentSnapshot<DocumentData>) => !doc.data().parentId\n        );\n\n      const hasMore: boolean = topLevelDocs.length > limitCount;\n      const docs: QueryDocumentSnapshot<DocumentData>[] = hasMore\n        ? topLevelDocs.slice(0, -1)\n        : topLevelDocs;\n\n      // Get all comment likes for current user in one query\n      const commentIds: string[] = docs.map(\n        (d: QueryDocumentSnapshot<DocumentData>) => d.id\n      );\n      let likedCommentIds = new Set<string>();\n      if (commentIds.length > 0) {\n        const likesQuery = query(\n          collection(db, 'commentLikes'),\n          where('userId', '==', userId),\n          where('commentId', 'in', commentIds)\n        );\n        const likesSnapshot = await getDocs(likesQuery);\n        likedCommentIds = new Set(\n          likesSnapshot.docs.map(d => d.data().commentId)\n        );\n      }\n\n      // Build comments with user details\n      const comments: CommentWithDetails[] = await Promise.all(\n        docs.map(async (docSnapshot: QueryDocumentSnapshot<DocumentData>) => {\n          const data = docSnapshot.data();\n\n          const userData = await fetchUserDataForSocialContext(data.userId);\n\n          return {\n            id: docSnapshot.id,\n            sessionId: data.sessionId,\n            userId: data.userId,\n            parentId: data.parentId,\n            content: data.content,\n            likeCount: data.likeCount || 0,\n            replyCount: data.replyCount || 0,\n            isLiked: likedCommentIds.has(docSnapshot.id),\n            isEdited: data.isEdited || false,\n            createdAt: convertTimestamp(data.createdAt),\n            updatedAt: convertTimestamp(data.updatedAt),\n            user: buildCommentUserDetails(data.userId, userData),\n          };\n        })\n      );\n\n      const lastDocInResult: QueryDocumentSnapshot<DocumentData> | undefined =\n        docs[docs.length - 1];\n      return {\n        comments,\n        hasMore,\n        nextCursor: hasMore && lastDocInResult ? lastDocInResult.id : undefined,\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Get comments', {\n        defaultMessage: ERROR_MESSAGES.COMMENT_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get all replies for a specific comment\n   *\n   * @param commentId - The ID of the parent comment\n   * @returns Promise resolving to array of reply comments with user details\n   * @throws Error if user is not authenticated or fetch fails\n   */\n  getReplies: async (commentId: string): Promise<CommentWithDetails[]> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const userId = auth.currentUser.uid;\n\n      const q = query(\n        collection(db, 'comments'),\n        where('parentId', '==', commentId),\n        orderBy('createdAt', 'asc')\n      );\n\n      const snapshot = await getDocs(q);\n\n      // Get all comment likes for current user in one query\n      const commentIds = snapshot.docs.map(d => d.id);\n      let likedCommentIds = new Set<string>();\n      if (commentIds.length > 0) {\n        const likesQuery = query(\n          collection(db, 'commentLikes'),\n          where('userId', '==', userId),\n          where('commentId', 'in', commentIds)\n        );\n        const likesSnapshot = await getDocs(likesQuery);\n        likedCommentIds = new Set(\n          likesSnapshot.docs.map(d => d.data().commentId)\n        );\n      }\n\n      const replies: CommentWithDetails[] = await Promise.all(\n        snapshot.docs.map(async docSnapshot => {\n          const data = docSnapshot.data();\n\n          const userData = await fetchUserDataForSocialContext(data.userId);\n\n          return {\n            id: docSnapshot.id,\n            sessionId: data.sessionId,\n            userId: data.userId,\n            parentId: data.parentId,\n            content: data.content,\n            likeCount: data.likeCount || 0,\n            replyCount: data.replyCount || 0,\n            isLiked: likedCommentIds.has(docSnapshot.id),\n            isEdited: data.isEdited || false,\n            createdAt: convertTimestamp(data.createdAt),\n            updatedAt: convertTimestamp(data.updatedAt),\n            user: buildCommentUserDetails(data.userId, userData),\n          };\n        })\n      );\n\n      return replies;\n    } catch (error) {\n      const apiError = handleError(error, 'Get replies', {\n        defaultMessage: ERROR_MESSAGES.COMMENT_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get top comments for a session sorted by like count\n   * Useful for showing popular comments in previews\n   *\n   * @param sessionId - The session ID whose top comments to retrieve\n   * @param limitCount - Maximum number of top comments to return (default: 2)\n   * @returns Promise resolving to array of top comments (empty array on permission errors)\n   */\n  getTopComments: async (\n    sessionId: string,\n    limitCount: number = 2\n  ): Promise<CommentWithDetails[]> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const userId = auth.currentUser.uid;\n\n      // Get top-level comments sorted by likeCount\n      const q = query(\n        collection(db, 'comments'),\n        where('sessionId', '==', sessionId),\n        orderBy('likeCount', 'desc'),\n        limitFn(limitCount)\n      );\n\n      const snapshot = await getDocs(q);\n\n      // Filter for top-level comments only (no parentId)\n      const topLevelDocs = snapshot.docs.filter(doc => !doc.data().parentId);\n\n      // Get all comment likes for current user in one query\n      const commentIds = topLevelDocs.map(d => d.id);\n      let likedCommentIds = new Set<string>();\n      if (commentIds.length > 0) {\n        const likesQuery = query(\n          collection(db, 'commentLikes'),\n          where('userId', '==', userId),\n          where('commentId', 'in', commentIds)\n        );\n        const likesSnapshot = await getDocs(likesQuery);\n        likedCommentIds = new Set(\n          likesSnapshot.docs.map(d => d.data().commentId)\n        );\n      }\n\n      // Build comments with user details\n      const comments: CommentWithDetails[] = await Promise.all(\n        topLevelDocs.map(async docSnapshot => {\n          const data = docSnapshot.data();\n\n          const userData = await fetchUserDataForSocialContext(data.userId);\n\n          return {\n            id: docSnapshot.id,\n            sessionId: data.sessionId,\n            userId: data.userId,\n            parentId: data.parentId,\n            content: data.content,\n            likeCount: data.likeCount || 0,\n            replyCount: data.replyCount || 0,\n            isLiked: likedCommentIds.has(docSnapshot.id),\n            isEdited: data.isEdited || false,\n            createdAt: convertTimestamp(data.createdAt),\n            updatedAt: convertTimestamp(data.updatedAt),\n            user: buildCommentUserDetails(data.userId, userData),\n          };\n        })\n      );\n\n      return comments;\n    } catch (error) {\n      // Handle permission errors gracefully - return empty array\n      if (isPermissionError(error)) {\n        return [];\n      }\n\n      // For other errors, throw with appropriate message\n      const apiError = handleError(error, 'Get top comments', {\n        defaultMessage: ERROR_MESSAGES.COMMENT_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n};\n\n// ==================== GROUP API ====================\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/social/helpers.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'auth' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 16,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 18
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Social module helper functions\n * Shared utilities for social features (follows, supports, comments)\n */\n\nimport {\n  collection,\n  doc,\n  getDoc,\n  addDoc,\n  runTransaction,\n  increment,\n  serverTimestamp,\n  DocumentData,\n} from 'firebase/firestore';\nimport { db, auth } from '@/lib/firebase';\nimport {\n  handleError,\n  isPermissionError,\n  isNotFoundError,\n  ErrorSeverity,\n} from '@/lib/errorHandler';\nimport {\n  PRIVATE_USER_FALLBACK_NAME,\n  PRIVATE_USER_USERNAME_PREFIX,\n  convertTimestamp,\n} from '../shared/utils';\nimport type { User } from '@/types';\n\n/**\n * Manage social graph and friendship counts transactionally\n * Handles follow/unfollow actions with proper count management\n */\nexport const updateSocialGraph = async (\n  currentUserId: string,\n  targetUserId: string,\n  action: 'follow' | 'unfollow'\n): Promise<void> => {\n  const currentUserRef = doc(db, 'users', currentUserId);\n  const targetUserRef = doc(db, 'users', targetUserId);\n\n  const currentUserSocialGraphRef = doc(\n    db,\n    `social_graph/${currentUserId}/outbound`,\n    targetUserId\n  );\n  const targetUserSocialGraphRef = doc(\n    db,\n    `social_graph/${targetUserId}/inbound`,\n    currentUserId\n  );\n\n  try {\n    await runTransaction(db, async transaction => {\n      // ALL READS MUST HAPPEN FIRST before any writes\n      const currentUserDoc = await transaction.get(currentUserRef);\n      const targetUserDoc = await transaction.get(targetUserRef);\n      const isFollowing = (\n        await transaction.get(currentUserSocialGraphRef)\n      ).exists();\n      const mutualCheckRef = doc(\n        db,\n        `social_graph/${targetUserId}/outbound`,\n        currentUserId\n      );\n      const isMutualOrWasMutual = (\n        await transaction.get(mutualCheckRef)\n      ).exists();\n\n      if (!currentUserDoc.exists() || !targetUserDoc.exists()) {\n        throw new Error('One or both users not found.');\n      }\n\n      const currentUserData = currentUserDoc.data();\n      const targetUserData = targetUserDoc.data();\n\n      if (action === 'follow' && isFollowing) return;\n      if (action === 'unfollow' && !isFollowing) return;\n\n      const now = new Date();\n      const currentUserUpdate: Record<string, unknown> = { updatedAt: now };\n      const targetUserUpdate: Record<string, unknown> = { updatedAt: now };\n\n      // NOW DO ALL WRITES\n      if (action === 'follow') {\n        transaction.set(currentUserSocialGraphRef, {\n          id: targetUserId,\n          type: 'outbound',\n          user: targetUserData,\n          createdAt: now,\n        });\n        transaction.set(targetUserSocialGraphRef, {\n          id: currentUserId,\n          type: 'inbound',\n          user: currentUserData,\n          createdAt: now,\n        });\n\n        currentUserUpdate.outboundFriendshipCount = increment(1);\n        currentUserUpdate.followingCount = increment(1);\n        targetUserUpdate.inboundFriendshipCount = increment(1);\n        targetUserUpdate.followersCount = increment(1);\n\n        // Check for mutual friendship (using pre-read value)\n        if (isMutualOrWasMutual) {\n          currentUserUpdate.mutualFriendshipCount = increment(1);\n          targetUserUpdate.mutualFriendshipCount = increment(1);\n        }\n      } else {\n        // unfollow\n        transaction.delete(currentUserSocialGraphRef);\n        transaction.delete(targetUserSocialGraphRef);\n\n        currentUserUpdate.outboundFriendshipCount = increment(-1);\n        currentUserUpdate.followingCount = increment(-1);\n        targetUserUpdate.inboundFriendshipCount = increment(-1);\n        targetUserUpdate.followersCount = increment(-1);\n\n        // Check for mutual friendship (using pre-read value)\n        if (isMutualOrWasMutual) {\n          currentUserUpdate.mutualFriendshipCount = increment(-1);\n          targetUserUpdate.mutualFriendshipCount = increment(-1);\n        }\n      }\n\n      transaction.update(currentUserRef, currentUserUpdate);\n      transaction.update(targetUserRef, targetUserUpdate);\n    });\n\n    // Create notification for follow action (outside transaction)\n    if (action === 'follow') {\n      try {\n        const currentUserData = await getDoc(currentUserRef);\n        const userData = currentUserData.data();\n\n        await addDoc(collection(db, 'notifications'), {\n          userId: targetUserId,\n          type: 'follow',\n          title: 'New follower',\n          message: `${userData?.name || 'Someone'} started following you`,\n          linkUrl: `/profile/${userData?.username}`,\n          actorId: currentUserId,\n          actorName: userData?.name,\n          actorUsername: userData?.username,\n          actorProfilePicture: userData?.profilePicture,\n          isRead: false,\n          createdAt: serverTimestamp(),\n        });\n      } catch (notifError) {\n        // Log error but don't fail the follow action\n        handleError(notifError, 'create follow notification', {\n          severity: ErrorSeverity.ERROR,\n          silent: true,\n        });\n      }\n    }\n  } catch (error) {\n    const apiError = handleError(\n      error,\n      `${action.charAt(0).toUpperCase() + action.slice(1)} user`\n    );\n    throw new Error(apiError.userMessage);\n  }\n};\n\n/**\n * Fetch user data for social contexts, handling permissions and privacy\n */\nexport const fetchUserDataForSocialContext = async (\n  userId: string\n): Promise<DocumentData | null> => {\n  try {\n    const userDoc = await getDoc(doc(db, 'users', userId));\n    if (!userDoc.exists()) {\n      return null;\n    }\n    return userDoc.data();\n  } catch (error) {\n    if (isPermissionError(error) || isNotFoundError(error)) {\n      return null;\n    }\n    const apiError = handleError(error, 'Fetch user data');\n    throw new Error(apiError.userMessage);\n  }\n};\n\n/**\n * Build user details for comment display, handling private/inaccessible users\n */\nexport const buildCommentUserDetails = (\n  userId: string,\n  userData: DocumentData | null\n): User => {\n  const fallbackUsername = `${PRIVATE_USER_USERNAME_PREFIX}-${userId.slice(0, 6)}`;\n  const createdAt = userData?.createdAt\n    ? convertTimestamp(userData.createdAt)\n    : new Date();\n  const updatedAt = userData?.updatedAt\n    ? convertTimestamp(userData.updatedAt)\n    : new Date();\n\n  return {\n    id: userId,\n    email: userData?.email || '',\n    name: userData?.name || PRIVATE_USER_FALLBACK_NAME,\n    username: userData?.username || fallbackUsername,\n    bio: userData?.bio,\n    location: userData?.location,\n    profilePicture: userData?.profilePicture,\n    createdAt,\n    updatedAt,\n  };\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/streaks/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'deleteDoc' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 18,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'serverTimestamp' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 19,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 19,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'addDoc' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 21,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'User' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 38,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 38,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'index' is defined but never used. Allowed unused args must match /^_/u.",
        "line": 191,
        "column": 35,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 191,
        "endColumn": 40
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Streaks API Module\n * Handles streak tracking and calculations\n */\n\n// ============================================================================\n// IMPORTS\n// ============================================================================\n\n// Firebase imports\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  setDoc,\n  updateDoc,\n  deleteDoc,\n  serverTimestamp,\n  Timestamp,\n  addDoc,\n  query,\n  where,\n  orderBy,\n  limit as limitFn,\n} from 'firebase/firestore';\n\n// Local Firebase config\nimport { db, auth } from '@/lib/firebase';\n\n// Error handling\nimport { handleError, isPermissionError } from '@/lib/errorHandler';\n\n// Shared utilities\nimport { convertTimestamp } from '../shared/utils';\n\n// Types\nimport type { User, StreakData, StreakStats } from '@/types';\n\n// ============================================================================\n// PUBLIC API\n// ============================================================================\n\nexport const firebaseStreakApi = {\n  /**\n   * Get streak data for a user, initializing if it doesn't exist\n   *\n   * @param userId - The user ID whose streak data to retrieve\n   * @returns Promise resolving to the user's streak data (returns empty streak on permission errors)\n   */\n  getStreakData: async (userId: string): Promise<StreakData> => {\n    try {\n      const streakDoc = await getDoc(doc(db, 'streaks', userId));\n\n      if (!streakDoc.exists()) {\n        // Initialize streak data if it doesn't exist\n        const initialStreak: StreakData = {\n          userId,\n          currentStreak: 0,\n          longestStreak: 0,\n          lastActivityDate: new Date(0),\n          totalStreakDays: 0,\n          streakHistory: [],\n          isPublic: true,\n        };\n\n        // Try to create the document, but if permission is denied (viewing another user's profile),\n        // just return the initial streak without creating it\n        try {\n          await setDoc(doc(db, 'streaks', userId), {\n            ...initialStreak,\n            lastActivityDate: Timestamp.fromDate(\n              initialStreak.lastActivityDate\n            ),\n          });\n        } catch (createError) {\n          // If we can't create (permission denied), just return the empty streak\n          if (isPermissionError(createError)) {\n            return initialStreak;\n          }\n          throw createError;\n        }\n\n        return initialStreak;\n      }\n\n      const data = streakDoc.data();\n      return {\n        userId: data.userId,\n        currentStreak: data.currentStreak || 0,\n        longestStreak: data.longestStreak || 0,\n        lastActivityDate: convertTimestamp(data.lastActivityDate),\n        totalStreakDays: data.totalStreakDays || 0,\n        streakHistory: data.streakHistory || [],\n        isPublic: data.isPublic !== false,\n      };\n    } catch (error) {\n      // Handle permission errors gracefully - return empty streak\n      if (isPermissionError(error)) {\n        return {\n          userId,\n          currentStreak: 0,\n          longestStreak: 0,\n          lastActivityDate: new Date(0),\n          totalStreakDays: 0,\n          streakHistory: [],\n          isPublic: true,\n        };\n      }\n\n      const apiError = handleError(error, 'Get streak data', {\n        defaultMessage: 'Failed to get streak data',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Calculate real-time streak statistics from actual session data\n   * Computes current streak, longest streak, and risk status\n   *\n   * @param userId - The user ID whose streak stats to calculate\n   * @returns Promise resolving to calculated streak statistics\n   * @throws Error if fetch or calculation fails\n   */\n  getStreakStats: async (userId: string): Promise<StreakStats> => {\n    try {\n      // Fetch sessions to calculate actual streak from data\n      const sessionsQuery = query(\n        collection(db, 'sessions'),\n        where('userId', '==', userId),\n        orderBy('startTime', 'desc'),\n        limitFn(365) // Get last year of sessions\n      );\n      const sessionsSnapshot = await getDocs(sessionsQuery);\n      const sessions = sessionsSnapshot.docs.map(doc => ({\n        ...doc.data(),\n        startTime: convertTimestamp(doc.data().startTime),\n      }));\n\n      // Group sessions by day (YYYY-MM-DD)\n      const sessionsByDay = new Map<string, boolean>();\n      sessions.forEach(session => {\n        const date = new Date(session.startTime);\n        const dayKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;\n        sessionsByDay.set(dayKey, true);\n      });\n\n      // Calculate current streak by going backwards from today\n      const now = new Date();\n      const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n      let currentStreak = 0;\n      const checkDate = new Date(today);\n      let lastActivityDate: Date | null = null;\n\n      // Start checking from today, going backwards\n      for (let i = 0; i < 365; i++) {\n        const dayKey = `${checkDate.getFullYear()}-${String(checkDate.getMonth() + 1).padStart(2, '0')}-${String(checkDate.getDate()).padStart(2, '0')}`;\n        const hasSession = sessionsByDay.has(dayKey);\n\n        if (i === 0) {\n          // Today - if no session, start checking from yesterday\n          if (hasSession) {\n            currentStreak = 1;\n            lastActivityDate = new Date(checkDate);\n          } else {\n          }\n        } else {\n          // Previous days\n          if (hasSession) {\n            currentStreak++;\n            if (!lastActivityDate) {\n              lastActivityDate = new Date(checkDate);\n            }\n          } else {\n            // Gap found - stop counting\n            break;\n          }\n        }\n\n        // Move to previous day\n        checkDate.setDate(checkDate.getDate() - 1);\n      }\n\n      // Calculate longest streak and total days\n      const sortedDays = Array.from(sessionsByDay.keys()).sort();\n      let longestStreak = 0;\n      let tempStreak = 0;\n      let prevDate: Date | null = null;\n\n      sortedDays.forEach((dayKey, index) => {\n        const [year, month, day] = dayKey.split('-').map(Number);\n        if (year === undefined || month === undefined || day === undefined) {\n          throw new Error(`Invalid date format in dayKey: ${dayKey}`);\n        }\n        const currentDate = new Date(year, month - 1, day);\n\n        if (!prevDate) {\n          // First day\n          tempStreak = 1;\n        } else {\n          const daysDiff = Math.floor(\n            (currentDate.getTime() - prevDate.getTime()) / (1000 * 60 * 60 * 24)\n          );\n          if (daysDiff === 1) {\n            // Consecutive day\n            tempStreak++;\n          } else {\n            // Gap - reset streak\n            tempStreak = 1;\n          }\n        }\n\n        longestStreak = Math.max(longestStreak, tempStreak);\n        prevDate = currentDate;\n      });\n\n      const totalStreakDays = sessionsByDay.size;\n\n      // Determine if streak is at risk\n      const daysSinceActivity = lastActivityDate\n        ? Math.floor(\n            (today.getTime() - lastActivityDate.getTime()) /\n              (1000 * 60 * 60 * 24)\n          )\n        : 999;\n      const streakAtRisk = currentStreak > 0 && daysSinceActivity >= 1;\n\n      // Calculate next milestone\n      const milestones = [7, 30, 100, 365, 500, 1000];\n      const nextMilestone =\n        milestones.find(m => m > currentStreak) ||\n        milestones[milestones.length - 1] ||\n        1000; // Fallback to 1000 if array is empty\n\n      const result: StreakStats = {\n        currentStreak,\n        longestStreak,\n        totalStreakDays,\n        lastActivityDate,\n        streakAtRisk,\n        nextMilestone,\n      };\n\n      return result;\n    } catch (error) {\n      console.error('=== FIREBASE API: Error in getStreakStats ===', error);\n      const apiError = handleError(error, 'Get streak stats', {\n        defaultMessage: 'Failed to get streak stats',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Update streak data after a session is completed\n   * Handles consecutive days, streak breaks, and history tracking\n   *\n   * @param userId - The user ID whose streak to update\n   * @param sessionDate - The date of the completed session\n   * @returns Promise resolving to the updated streak data\n   * @throws Error if update fails\n   */\n  updateStreak: async (\n    userId: string,\n    sessionDate: Date\n  ): Promise<StreakData> => {\n    try {\n      const streakData = await firebaseStreakApi.getStreakData(userId);\n\n      const sessionDay = new Date(\n        sessionDate.getFullYear(),\n        sessionDate.getMonth(),\n        sessionDate.getDate()\n      );\n      const lastActivityDay = new Date(\n        streakData.lastActivityDate.getFullYear(),\n        streakData.lastActivityDate.getMonth(),\n        streakData.lastActivityDate.getDate()\n      );\n\n      const daysDiff = Math.floor(\n        (sessionDay.getTime() - lastActivityDay.getTime()) /\n          (1000 * 60 * 60 * 24)\n      );\n\n      let newCurrentStreak = streakData.currentStreak;\n      let newLongestStreak = streakData.longestStreak;\n      let newTotalStreakDays = streakData.totalStreakDays;\n\n      // Special case: If current streak is 0 (first session ever or after long break)\n      // Check if this is truly the first session or if we're restarting\n      const isFirstEverSession =\n        streakData.currentStreak === 0 && streakData.totalStreakDays === 0;\n      const isRestartingStreak =\n        streakData.currentStreak === 0 && streakData.totalStreakDays > 0;\n\n      if (isFirstEverSession || isRestartingStreak) {\n        // First session or restarting - start streak at 1\n        if (isFirstEverSession) {\n          newTotalStreakDays = 1;\n        } else {\n          newTotalStreakDays += 1;\n        }\n        newCurrentStreak = 1;\n        newLongestStreak = Math.max(1, newLongestStreak);\n      } else if (daysDiff === 0) {\n        // Same day, no change to streak\n      } else if (daysDiff === 1) {\n        // Consecutive day, increment streak\n        newCurrentStreak += 1;\n        newTotalStreakDays += 1;\n        if (newCurrentStreak > newLongestStreak) {\n          newLongestStreak = newCurrentStreak;\n        }\n      } else if (daysDiff > 1) {\n        // Streak broken, reset to 1\n        newCurrentStreak = 1;\n        newTotalStreakDays += 1;\n      } else if (daysDiff < 0) {\n        // Session is in the past before last activity\n      }\n\n      // Update streak history (keep last 365 days)\n      const dateStr = sessionDay.toISOString().split('T')[0];\n      if (!dateStr) {\n        throw new Error('Invalid date format');\n      }\n      const existingDayIndex = streakData.streakHistory.findIndex(\n        d => d.date === dateStr\n      );\n\n      let newHistory = [...streakData.streakHistory];\n      if (existingDayIndex >= 0) {\n        const existingDay = newHistory[existingDayIndex];\n        if (existingDay) {\n          existingDay.sessionCount += 1;\n        }\n      } else {\n        newHistory.push({\n          date: dateStr,\n          hasActivity: true,\n          sessionCount: 1,\n          totalMinutes: 0,\n        });\n      }\n\n      // Keep only last 365 days\n      newHistory = newHistory.slice(-365);\n\n      const updatedStreak: StreakData = {\n        ...streakData,\n        currentStreak: newCurrentStreak,\n        longestStreak: newLongestStreak,\n        lastActivityDate: sessionDate,\n        totalStreakDays: newTotalStreakDays,\n        streakHistory: newHistory,\n      };\n\n      await setDoc(doc(db, 'streaks', userId), {\n        ...updatedStreak,\n        lastActivityDate: Timestamp.fromDate(sessionDate),\n      });\n\n      return updatedStreak;\n    } catch (error) {\n      const apiError = handleError(error, 'Update streak', {\n        defaultMessage: 'Failed to update streak',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Toggle the visibility of a user's streak (public/private)\n   *\n   * @param userId - The user ID whose streak visibility to toggle\n   * @returns Promise resolving to the new visibility state (true = public, false = private)\n   * @throws Error if user is not authorized or toggle fails\n   */\n  toggleStreakVisibility: async (userId: string): Promise<boolean> => {\n    try {\n      if (!auth.currentUser || auth.currentUser.uid !== userId) {\n        throw new Error('Unauthorized');\n      }\n\n      const streakData = await firebaseStreakApi.getStreakData(userId);\n      const newVisibility = !streakData.isPublic;\n\n      await updateDoc(doc(db, 'streaks', userId), {\n        isPublic: newVisibility,\n      });\n\n      return newVisibility;\n    } catch (error) {\n      const apiError = handleError(error, 'Toggle streak visibility', {\n        defaultMessage: 'Failed to toggle streak visibility',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Update the visibility of a user's streak to a specific value\n   *\n   * @param userId - The user ID whose streak visibility to update\n   * @param isPublic - Whether the streak should be public\n   * @returns Promise that resolves when visibility is updated\n   * @throws Error if user is not authorized or update fails\n   */\n  updateStreakVisibility: async (\n    userId: string,\n    isPublic: boolean\n  ): Promise<void> => {\n    try {\n      if (!auth.currentUser || auth.currentUser.uid !== userId) {\n        throw new Error('Unauthorized');\n      }\n\n      await updateDoc(doc(db, 'streaks', userId), {\n        isPublic,\n      });\n    } catch (error) {\n      const apiError = handleError(error, 'Update streak visibility', {\n        defaultMessage: 'Failed to update streak visibility',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Admin function: Restore a user's streak to a specific value\n   * TODO: Add admin permission check\n   *\n   * @param userId - The user ID whose streak to restore\n   * @param streakValue - The streak value to restore to\n   * @returns Promise that resolves when the streak is restored\n   * @throws Error if user is not authenticated or restore fails\n   */\n  restoreStreak: async (userId: string, streakValue: number): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('Unauthorized');\n      }\n\n      // TODO: Add admin check\n\n      await updateDoc(doc(db, 'streaks', userId), {\n        currentStreak: streakValue,\n        lastActivityDate: Timestamp.fromDate(new Date()),\n      });\n    } catch (error) {\n      const apiError = handleError(error, 'Restore streak', {\n        defaultMessage: 'Failed to restore streak',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/users/getFollowingIds.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'socialGraphError' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 29,
        "column": 14,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 30
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Fast Following IDs Fetcher\n *\n * Optimized function to fetch ONLY the IDs of users you're following.\n * This is much faster than fetching full user objects since we only need\n * to check if someone is in the following list, not display their info.\n */\n\nimport { db } from '@/lib/firebase';\nimport { collection, getDocs, query, where } from 'firebase/firestore';\n\n/**\n * Get just the IDs of users that this user is following\n * Returns a Set for O(1) lookup performance\n */\nexport async function getFollowingIds(userId: string): Promise<Set<string>> {\n  try {\n    const followingIds: string[] = [];\n\n    // Try new social_graph structure first (faster)\n    try {\n      const outboundRef = collection(db, `social_graph/${userId}/outbound`);\n      const outboundSnapshot = await getDocs(outboundRef);\n\n      if (!outboundSnapshot.empty) {\n        // Just get the document IDs - no need to read data\n        return new Set(outboundSnapshot.docs.map(doc => doc.id));\n      }\n    } catch (socialGraphError) {\n      // If social_graph doesn't exist, continue to fallback\n    }\n\n    // Fallback to old follows collection\n    const followingQuery = query(\n      collection(db, 'follows'),\n      where('followerId', '==', userId)\n    );\n    const followingSnapshot = await getDocs(followingQuery);\n\n    followingSnapshot.forEach(doc => {\n      const data = doc.data();\n      if (data.followingId) {\n        followingIds.push(data.followingId);\n      }\n    });\n\n    return new Set(followingIds);\n  } catch (error) {\n    console.error('Error fetching following IDs:', error);\n    return new Set(); // Return empty set on error\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/api/users/index.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'setDoc' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 24,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'socialGraphError' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 845,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 845,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'socialGraphError' is defined but never used. Allowed unused caught errors must match /^_/u.",
        "line": 924,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 924,
        "endColumn": 32
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'page' is assigned a value but never used. Allowed unused args must match /^_/u.",
        "line": 1038,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1038,
        "endColumn": 9
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * User API Module\n * Handles user profile operations: CRUD, stats, privacy, search, social graph\n */\n\n// ============================================================================\n// IMPORTS\n// ============================================================================\n\n// Firebase imports\nimport {\n  collection,\n  doc,\n  getDoc,\n  getDocs,\n  updateDoc,\n  deleteDoc,\n  query,\n  where,\n  orderBy,\n  limit as limitFn,\n  serverTimestamp,\n  Timestamp,\n  setDoc,\n} from 'firebase/firestore';\n\nimport {\n  ref,\n  uploadBytes,\n  getDownloadURL,\n  deleteObject,\n} from 'firebase/storage';\n\n// Local Firebase config\nimport { db, auth, storage } from '@/lib/firebase';\n\n// Error handling\nimport {\n  handleError,\n  isPermissionError,\n  isNotFoundError,\n  ErrorSeverity,\n} from '@/lib/errorHandler';\n\n// Rate limiting\nimport { checkRateLimit } from '@/lib/rateLimit';\n\n// Error messages\nimport { ERROR_MESSAGES } from '@/config/errorMessages';\n\n// Shared utilities\nimport { convertTimestamp } from '../shared/utils';\nimport { safeNumber } from '@/lib/utils';\n\n// Social helpers\nimport { updateSocialGraph } from '../social/helpers';\n\n// Types\nimport type {\n  User,\n  UserProfile,\n  UserStats,\n  ActivityData,\n  WeeklyActivity,\n  ProjectBreakdown,\n  PrivacySettings,\n  UserSearchResult,\n  SuggestedUser,\n} from '@/types';\n\nexport const firebaseUserApi = {\n  /**\n   * Get user profile by username with privacy checks and follower count recalculation\n   *\n   * @param username - The username of the user to retrieve\n   * @returns Promise resolving to the user profile with social stats\n   * @throws Error if user not found, profile is private, or access is denied\n   */\n  getUserProfile: async (username: string): Promise<UserProfile> => {\n    try {\n      const usersQuery = query(\n        collection(db, 'users'),\n        where('username', '==', username)\n      );\n      const querySnapshot = await getDocs(usersQuery);\n\n      if (querySnapshot.empty) {\n        // Don't log \"not found\" as an error - it's expected user behavior\n        throw new Error('User not found');\n      }\n\n      const userDoc = querySnapshot.docs[0];\n      if (!userDoc) {\n        throw new Error('User not found');\n      }\n      const userData = userDoc.data();\n      const isOwnProfile = auth.currentUser?.uid === userDoc.id;\n\n      // Check privacy settings\n      const profileVisibility = userData.profileVisibility || 'everyone';\n\n      // If profile is private and not the owner, deny access\n      if (!isOwnProfile && profileVisibility === 'private') {\n        throw new Error('This profile is private');\n      }\n\n      // Check if current user is following this user\n      let isFollowing = false;\n      if (auth.currentUser && !isOwnProfile) {\n        const socialGraphDoc = await getDoc(\n          doc(db, `social_graph/${auth.currentUser.uid}/outbound`, userDoc.id)\n        );\n        isFollowing = socialGraphDoc.exists();\n      }\n\n      // If profile is followers-only, check if current user is a follower\n      if (!isOwnProfile && profileVisibility === 'followers' && !isFollowing) {\n        throw new Error('This profile is only visible to followers');\n      }\n\n      // Ensure follower/following counts are accurate\n      // For OWN profile, always recalc from follows to avoid stale zeros across ports/domains\n      // For others' profiles, recalc only if missing to reduce reads\n      let followersCount = userData.followersCount || 0;\n      let followingCount = userData.followingCount || 0;\n\n      const shouldRecalculate =\n        isOwnProfile ||\n        userData.followersCount === undefined ||\n        userData.followingCount === undefined;\n      if (shouldRecalculate) {\n        try {\n          // Count followers (people who follow this user) using social_graph\n          const inboundRef = collection(\n            db,\n            `social_graph/${userDoc.id}/inbound`\n          );\n          const inboundSnapshot = await getDocs(inboundRef);\n          followersCount = inboundSnapshot.size;\n\n          // Count following (people this user follows) using social_graph\n          const outboundRef = collection(\n            db,\n            `social_graph/${userDoc.id}/outbound`\n          );\n          const outboundSnapshot = await getDocs(outboundRef);\n          followingCount = outboundSnapshot.size;\n\n          // Update the user document with correct counts\n          // For own profile, always update to keep counts fresh\n          // For others, update if they were missing\n          if (\n            isOwnProfile ||\n            userData.followersCount === undefined ||\n            userData.followingCount === undefined\n          ) {\n            await updateDoc(doc(db, 'users', userDoc.id), {\n              followersCount,\n              followingCount,\n              updatedAt: serverTimestamp(),\n            });\n          }\n        } catch (error) {\n          // Handle permission errors silently - this is expected for privacy-protected data\n          if (!isPermissionError(error)) {\n            handleError(error, 'Recalculate follower counts', {\n              severity: ErrorSeverity.WARNING,\n            });\n          }\n          // Keep the default values if recalculation fails\n        }\n      }\n\n      return {\n        id: userDoc.id,\n        username: userData.username,\n        name: userData.name,\n        bio: userData.bio,\n        location: userData.location,\n        profilePicture: userData.profilePicture,\n        followersCount,\n        followingCount,\n        totalHours: userData.totalHours || 0,\n        isFollowing,\n        isPrivate: profileVisibility === 'private',\n        createdAt: convertTimestamp(userData.createdAt),\n        updatedAt: convertTimestamp(userData.updatedAt),\n      };\n    } catch (error) {\n      // Don't log \"not found\" and privacy errors - these are expected user flows\n      const errorMessage =\n        error instanceof Error ? error.message : 'Failed to get user profile';\n      const isExpectedError =\n        errorMessage === 'User not found' ||\n        errorMessage === 'This profile is private' ||\n        errorMessage === 'This profile is only visible to followers';\n\n      if (!isExpectedError) {\n        handleError(error, 'Get user profile', {\n          defaultMessage: ERROR_MESSAGES.PROFILE_LOAD_FAILED,\n        });\n      }\n\n      throw error;\n    }\n  },\n\n  /**\n   * Get user by ID for internal references (e.g., group admins, challenge participants)\n   *\n   * @param userId - The user ID to retrieve\n   * @returns Promise resolving to the user data\n   * @throws Error if user not found or permission denied\n   */\n  getUserById: async (userId: string): Promise<User> => {\n    try {\n      const userDoc = await getDoc(doc(db, 'users', userId));\n\n      if (!userDoc.exists()) {\n        throw new Error('User not found');\n      }\n\n      const userData = userDoc.data();\n\n      return {\n        id: userDoc.id,\n        username: userData.username || '',\n        name: userData.name || 'Unknown User',\n        email: userData.email || '',\n        bio: userData.bio,\n        location: userData.location,\n        profilePicture: userData.profilePicture,\n        createdAt: convertTimestamp(userData.createdAt),\n        updatedAt: convertTimestamp(userData.updatedAt),\n      };\n    } catch (error) {\n      // Handle permission errors for deleted users gracefully\n      if (isPermissionError(error)) {\n        throw new Error('User not found');\n      }\n      const apiError = handleError(error, 'Get user by ID', {\n        defaultMessage: 'Failed to get user',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get daily activity data for a user for a specific year\n   * Returns hours and session count for each day of the year\n   *\n   * @param userId - The user ID whose activity to retrieve\n   * @param year - The year to get activity for\n   * @returns Promise resolving to array of daily activity data (365/366 entries)\n   * @throws Error if fetch fails\n   */\n  getUserDailyActivity: async (\n    userId: string,\n    year: number\n  ): Promise<ActivityData[]> => {\n    try {\n      const startOfYear = new Date(year, 0, 1, 0, 0, 0, 0);\n      const endOfYear = new Date(year, 11, 31, 23, 59, 59, 999);\n\n      const sessionsQuery = query(\n        collection(db, 'sessions'),\n        where('userId', '==', userId),\n        where('startTime', '>=', Timestamp.fromDate(startOfYear)),\n        where('startTime', '<=', Timestamp.fromDate(endOfYear))\n      );\n\n      const snapshot = await getDocs(sessionsQuery);\n\n      const dayToTotals: Record<string, { seconds: number; sessions: number }> =\n        {};\n\n      snapshot.forEach(docSnap => {\n        const data = docSnap.data();\n        const start: Date = convertTimestamp(data.startTime);\n        const dateStr = start.toISOString().substring(0, 10);\n        const durationSeconds = safeNumber(data.duration, 0);\n\n        if (!dayToTotals[dateStr]) {\n          dayToTotals[dateStr] = { seconds: 0, sessions: 0 };\n        }\n        dayToTotals[dateStr].seconds += durationSeconds;\n        dayToTotals[dateStr].sessions += 1;\n      });\n\n      // Generate full year range with zeros where no data\n      const results: ActivityData[] = [];\n      for (\n        let d = new Date(startOfYear);\n        d <= endOfYear;\n        d.setDate(d.getDate() + 1)\n      ) {\n        const dateStr = d.toISOString().substring(0, 10);\n        const item = dayToTotals[dateStr];\n        results.push({\n          date: dateStr,\n          hours: item ? item.seconds / 3600 : 0,\n          sessions: item ? item.sessions : 0,\n        });\n      }\n\n      return results;\n    } catch (error) {\n      const apiError = handleError(error, 'Get daily activity', {\n        defaultMessage: 'Failed to get daily activity',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get weekly activity data for a user for the past N weeks\n   *\n   * @param userId - The user ID whose activity to retrieve\n   * @param numberOfWeeks - Number of weeks to retrieve (default: 12)\n   * @returns Promise resolving to array of weekly activity data\n   * @throws Error if fetch fails\n   */\n  getUserWeeklyActivity: async (\n    userId: string,\n    numberOfWeeks: number = 12\n  ): Promise<WeeklyActivity[]> => {\n    try {\n      const end = new Date();\n      const start = new Date();\n      start.setDate(end.getDate() - numberOfWeeks * 7);\n\n      const sessionsQuery = query(\n        collection(db, 'sessions'),\n        where('userId', '==', userId),\n        where('startTime', '>=', Timestamp.fromDate(start)),\n        where('startTime', '<=', Timestamp.fromDate(end))\n      );\n\n      const snapshot = await getDocs(sessionsQuery);\n\n      // Buckets keyed by ISO week number within the range\n      const weekToTotals: Record<\n        string,\n        { seconds: number; sessions: number }\n      > = {};\n\n      const getWeekKey = (date: Date): string => {\n        const d = new Date(\n          Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())\n        );\n        const dayNum = d.getUTCDay() || 7;\n        d.setUTCDate(d.getUTCDate() + 4 - dayNum);\n        const yearStart = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));\n        const weekNo = Math.ceil(\n          ((d.getTime() - yearStart.getTime()) / 86400000 + 1) / 7\n        );\n        return `${d.getUTCFullYear()}-W${weekNo}`;\n      };\n\n      snapshot.forEach(docSnap => {\n        const data = docSnap.data();\n        const startTime: Date = convertTimestamp(data.startTime);\n        const key = getWeekKey(startTime);\n        const durationSeconds = safeNumber(data.duration, 0);\n        if (!weekToTotals[key]) weekToTotals[key] = { seconds: 0, sessions: 0 };\n        weekToTotals[key].seconds += durationSeconds;\n        weekToTotals[key].sessions += 1;\n      });\n\n      // Generate continuous sequence of weeks\n      const results: WeeklyActivity[] = [];\n      const iter = new Date(start);\n      for (let i = 0; i < numberOfWeeks; i++) {\n        const key = getWeekKey(iter);\n        const item = weekToTotals[key];\n        results.push({\n          week: key,\n          hours: item ? item.seconds / 3600 : 0,\n          sessions: item ? item.sessions : 0,\n        });\n        iter.setDate(iter.getDate() + 7);\n      }\n\n      return results;\n    } catch (error) {\n      const apiError = handleError(error, 'Get weekly activity', {\n        defaultMessage: 'Failed to get weekly activity',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get project breakdown showing time distribution across projects\n   *\n   * @param userId - The user ID whose project breakdown to retrieve\n   * @param year - Optional year to filter by (omit for all-time)\n   * @returns Promise resolving to array of project breakdowns with hours and percentages\n   * @throws Error if fetch fails\n   */\n  getUserProjectBreakdown: async (\n    userId: string,\n    year?: number\n  ): Promise<ProjectBreakdown[]> => {\n    try {\n      let sessionsQueryBase = query(\n        collection(db, 'sessions'),\n        where('userId', '==', userId)\n      );\n\n      if (year) {\n        const startOfYear = new Date(year, 0, 1, 0, 0, 0, 0);\n        const endOfYear = new Date(year, 11, 31, 23, 59, 59, 999);\n        sessionsQueryBase = query(\n          collection(db, 'sessions'),\n          where('userId', '==', userId),\n          where('startTime', '>=', Timestamp.fromDate(startOfYear)),\n          where('startTime', '<=', Timestamp.fromDate(endOfYear))\n        );\n      }\n\n      const snapshot = await getDocs(sessionsQueryBase);\n\n      // Aggregate seconds per projectId\n      const projectToSeconds: Record<string, number> = {};\n      snapshot.forEach(docSnap => {\n        const data = docSnap.data();\n        const projectId = data.projectId || 'unknown';\n        const durationSeconds = safeNumber(data.duration, 0);\n        projectToSeconds[projectId] =\n          (projectToSeconds[projectId] || 0) + durationSeconds;\n      });\n\n      const totalSeconds =\n        Object.values(projectToSeconds).reduce((a, b) => a + b, 0) || 1;\n\n      const results: ProjectBreakdown[] = [];\n      // For each project, fetch project details for name/color\n      for (const [projectId, seconds] of Object.entries(projectToSeconds)) {\n        let name = 'Unknown Project';\n        let color = '#64748B';\n        try {\n          const projectDoc = await getDoc(\n            doc(db, 'projects', userId, 'userProjects', projectId)\n          );\n          const proj = projectDoc.data();\n          if (proj) {\n            name = proj.name || name;\n            color = proj.color || color;\n          }\n        } catch {}\n\n        const hours = seconds / 3600;\n        const percentage = (seconds / totalSeconds) * 100;\n        results.push({\n          projectId,\n          projectName: name,\n          hours,\n          percentage,\n          color,\n        });\n      }\n\n      // Sort by hours desc\n      results.sort((a, b) => b.hours - a.hours);\n      return results;\n    } catch (error) {\n      const apiError = handleError(error, 'Get project breakdown', {\n        defaultMessage: 'Failed to get project breakdown',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Upload a profile picture to Firebase Storage\n   *\n   * @param file - The image file to upload (JPEG, PNG, GIF, or WebP, max 5MB)\n   * @returns Promise resolving to the download URL of the uploaded image\n   * @throws Error if user is not authenticated, file is invalid, or upload fails\n   */\n  uploadProfilePicture: async (file: File): Promise<string> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      // Validate file type\n      const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\n      if (!validTypes.includes(file.type)) {\n        throw new Error(\n          'Invalid file type. Please upload a JPEG, PNG, GIF, or WebP image.'\n        );\n      }\n\n      // Validate file size (5MB max)\n      const maxSize = 5 * 1024 * 1024;\n      if (file.size > maxSize) {\n        throw new Error('File size too large. Maximum size is 5MB.');\n      }\n\n      // Create a unique filename with timestamp\n      const timestamp = Date.now();\n      const fileExtension = file.name.split('.').pop() || 'jpg';\n      const fileName = `profile_${timestamp}.${fileExtension}`;\n\n      // Create storage reference\n      const storageRef = ref(\n        storage,\n        `profile-pictures/${auth.currentUser.uid}/${fileName}`\n      );\n\n      // Upload file\n      const snapshot = await uploadBytes(storageRef, file, {\n        contentType: file.type,\n        customMetadata: {\n          uploadedBy: auth.currentUser.uid,\n          uploadedAt: new Date().toISOString(),\n        },\n      });\n\n      // Get download URL\n      const downloadURL = await getDownloadURL(snapshot.ref);\n\n      return downloadURL;\n    } catch (error) {\n      const apiError = handleError(error, 'Upload profile picture', {\n        defaultMessage: 'Failed to upload profile picture',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Delete a profile picture from Firebase Storage\n   * Only deletes Firebase Storage URLs, skips external URLs (e.g., Google profile photos)\n   *\n   * @param profilePictureUrl - The URL of the profile picture to delete\n   * @returns Promise that resolves when the picture is deleted (errors are handled gracefully)\n   */\n  deleteProfilePicture: async (profilePictureUrl: string): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      // Only delete if it's a Firebase Storage URL\n      if (!profilePictureUrl.includes('firebasestorage.googleapis.com')) {\n        return; // Skip deletion for external URLs (e.g., Google profile photos)\n      }\n\n      // Extract the storage path from the URL\n      const storageRef = ref(storage, profilePictureUrl);\n\n      // Delete the file (will fail silently if file doesn't exist)\n      try {\n        await deleteObject(storageRef);\n      } catch (error) {\n        // Ignore errors if file doesn't exist\n        if (!isNotFoundError(error)) {\n          handleError(error, 'Delete old profile picture', {\n            severity: ErrorSeverity.WARNING,\n          });\n        }\n      }\n    } catch (error) {\n      handleError(error, 'in deleteProfilePicture', {\n        severity: ErrorSeverity.WARNING,\n      });\n      // Don't throw error - this is a cleanup operation\n    }\n  },\n\n  /**\n   * Update the authenticated user's profile information\n   *\n   * @param data - Partial profile data with fields to update\n   * @returns Promise resolving to the updated user profile\n   * @throws Error if user is not authenticated or update fails\n   */\n  updateProfile: async (\n    data: Partial<{\n      name: string;\n      bio: string;\n      tagline: string;\n      pronouns: string;\n      location: string;\n      website: string;\n      profilePicture: string;\n      socialLinks: {\n        twitter?: string;\n        github?: string;\n        linkedin?: string;\n      };\n      profileVisibility: 'everyone' | 'followers' | 'private';\n      activityVisibility: 'everyone' | 'followers' | 'private';\n      projectVisibility: 'everyone' | 'followers' | 'private';\n    }>\n  ): Promise<UserProfile> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      // Strip undefined values to avoid Firestore errors\n      const cleanData: Record<string, unknown> = {};\n      Object.entries(data).forEach(([key, value]) => {\n        if (value !== undefined) {\n          cleanData[key] = value;\n        }\n      });\n\n      // Add lowercase fields for searchability\n      if (cleanData.name && typeof cleanData.name === 'string') {\n        cleanData.nameLower = cleanData.name.toLowerCase();\n      }\n\n      const updateData = {\n        ...cleanData,\n        updatedAt: serverTimestamp(),\n      };\n\n      await updateDoc(doc(db, 'users', auth.currentUser.uid), updateData);\n\n      // Get updated profile\n      const userDoc = await getDoc(doc(db, 'users', auth.currentUser.uid));\n      const userData = userDoc.data()!;\n\n      return {\n        id: auth.currentUser.uid,\n        username: userData.username,\n        name: userData.name,\n        bio: userData.bio,\n        location: userData.location,\n        profilePicture: userData.profilePicture,\n        followersCount: userData.followersCount || 0,\n        followingCount: userData.followingCount || 0,\n        totalHours: userData.totalHours || 0,\n        isFollowing: false,\n        isPrivate: userData.profileVisibility === 'private',\n        createdAt: convertTimestamp(userData.createdAt),\n        updatedAt: convertTimestamp(userData.updatedAt),\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Update profile', {\n        defaultMessage: ERROR_MESSAGES.PROFILE_UPDATE_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get comprehensive statistics for a user including hours, streaks, and productivity metrics\n   *\n   * @param userId - The user ID whose stats to retrieve\n   * @returns Promise resolving to user stats (returns default stats on error)\n   */\n  getUserStats: async (userId: string): Promise<UserStats> => {\n    try {\n      // Compute stats from sessions collection\n      const sessionsQuery = query(\n        collection(db, 'sessions'),\n        where('userId', '==', userId)\n      );\n      const sessionsSnapshot = await getDocs(sessionsQuery);\n\n      let totalSeconds = 0;\n      let weeklySeconds = 0;\n      let monthlySeconds = 0;\n      let sessionsThisWeek = 0;\n      let sessionsThisMonth = 0;\n      const sessionDurations: number[] = [];\n      const hourBuckets: Record<number, number> = {};\n\n      const now = new Date();\n      const weekStart = new Date(now);\n      weekStart.setDate(now.getDate() - now.getDay()); // Sunday start\n      weekStart.setHours(0, 0, 0, 0);\n\n      const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);\n\n      sessionsSnapshot.forEach(docSnap => {\n        const data = docSnap.data();\n        const duration = Number(data.duration) || 0; // seconds\n        const start = convertTimestamp(data.startTime);\n        totalSeconds += duration;\n        sessionDurations.push(duration);\n\n        // Most productive hour (by count)\n        const h = new Date(start).getHours();\n        hourBuckets[h] = (hourBuckets[h] || 0) + 1;\n\n        if (start >= weekStart) {\n          weeklySeconds += duration;\n          sessionsThisWeek += 1;\n        }\n        if (start >= monthStart) {\n          monthlySeconds += duration;\n          sessionsThisMonth += 1;\n        }\n      });\n\n      // Streaks: simple placeholder based on recent days with activity\n      // Count consecutive days from today with at least one session\n      const daysWithActivity = new Set<string>();\n      sessionsSnapshot.forEach(docSnap => {\n        const start = convertTimestamp(docSnap.data().startTime);\n        daysWithActivity.add(start.toISOString().substring(0, 10));\n      });\n      let currentStreak = 0;\n      const cursor = new Date();\n      cursor.setHours(0, 0, 0, 0);\n      while (daysWithActivity.has(cursor.toISOString().substring(0, 10))) {\n        currentStreak += 1;\n        cursor.setDate(cursor.getDate() - 1);\n      }\n      const longestStreak = Math.max(currentStreak, 0);\n\n      // Average session duration (in minutes)\n      const averageSessionDuration = sessionDurations.length\n        ? Math.round(\n            sessionDurations.reduce((a, b) => a + b, 0) /\n              sessionDurations.length /\n              60\n          )\n        : 0;\n\n      // Most productive hour (0-23)\n      let mostProductiveHour = 0;\n      let maxCount = -1;\n      Object.entries(hourBuckets).forEach(([hourStr, count]) => {\n        const hour = Number(hourStr);\n        if (count > maxCount) {\n          maxCount = count as number;\n          mostProductiveHour = hour;\n        }\n      });\n\n      return {\n        totalHours: totalSeconds / 3600,\n        weeklyHours: weeklySeconds / 3600,\n        monthlyHours: monthlySeconds / 3600,\n        currentStreak,\n        longestStreak,\n        sessionsThisWeek,\n        sessionsThisMonth,\n        averageSessionDuration,\n        mostProductiveHour,\n        favoriteProject: undefined,\n      };\n    } catch (error) {\n      handleError(error, 'get user stats', { severity: ErrorSeverity.ERROR });\n      // Return default stats instead of throwing error\n      return {\n        totalHours: 0,\n        weeklyHours: 0,\n        monthlyHours: 0,\n        sessionsThisWeek: 0,\n        sessionsThisMonth: 0,\n        currentStreak: 0,\n        longestStreak: 0,\n        averageSessionDuration: 0,\n        mostProductiveHour: 0,\n        favoriteProject: undefined,\n      };\n    }\n  },\n\n  /**\n   * Follow a user and update the social graph\n   *\n   * @param userId - The ID of the user to follow\n   * @returns Promise that resolves when the follow is complete\n   * @throws Error if user is not authenticated, rate limit exceeded, or follow fails\n   */\n  followUser: async (userId: string): Promise<void> => {\n    if (!auth.currentUser) {\n      throw new Error('User not authenticated');\n    }\n    // Rate limitFn follow actions\n    checkRateLimit(auth.currentUser.uid, 'FOLLOW');\n    await updateSocialGraph(auth.currentUser.uid, userId, 'follow');\n  },\n\n  /**\n   * Unfollow a user and update the social graph\n   *\n   * @param userId - The ID of the user to unfollow\n   * @returns Promise that resolves when the unfollow is complete\n   * @throws Error if user is not authenticated, rate limit exceeded, or unfollow fails\n   */\n  unfollowUser: async (userId: string): Promise<void> => {\n    if (!auth.currentUser) {\n      throw new Error('User not authenticated');\n    }\n    // Rate limitFn unfollow actions (uses same limitFn as follow)\n    checkRateLimit(auth.currentUser.uid, 'FOLLOW');\n    await updateSocialGraph(auth.currentUser.uid, userId, 'unfollow');\n  },\n\n  /**\n   * Check if the current user is following a target user\n   *\n   * @param currentUserId - The ID of the current user\n   * @param targetUserId - The ID of the target user to check\n   * @returns Promise resolving to true if following, false otherwise\n   */\n  isFollowing: async (\n    currentUserId: string,\n    targetUserId: string\n  ): Promise<boolean> => {\n    try {\n      const socialGraphDoc = await getDoc(\n        doc(db, `social_graph/${currentUserId}/outbound`, targetUserId)\n      );\n      return socialGraphDoc.exists();\n    } catch (error) {\n      handleError(error, 'checking follow status', {\n        severity: ErrorSeverity.ERROR,\n      });\n      return false;\n    }\n  },\n\n  /**\n   * Get all followers for a user (people who follow this user)\n   * Supports both new social_graph structure and legacy follows collection\n   *\n   * @param userId - The user ID whose followers to retrieve\n   * @returns Promise resolving to array of follower users (empty array on error)\n   * @throws Error if fetch fails (except permission errors which return empty array)\n   */\n  getFollowers: async (userId: string): Promise<User[]> => {\n    try {\n      let followerIds: string[] = [];\n\n      // Try new social_graph structure first\n      try {\n        const inboundRef = collection(db, `social_graph/${userId}/inbound`);\n        const inboundSnapshot = await getDocs(inboundRef);\n\n        if (!inboundSnapshot.empty) {\n          followerIds = inboundSnapshot.docs.map(doc => doc.id);\n        }\n      } catch (socialGraphError) {\n        // If social_graph doesn't exist or has permission issues, continue to fallback\n      }\n\n      // Fallback to old follows collection if no followers found via social_graph\n      if (followerIds.length === 0) {\n        const followersQuery = query(\n          collection(db, 'follows'),\n          where('followingId', '==', userId)\n        );\n        const followersSnapshot = await getDocs(followersQuery);\n\n        followerIds = followersSnapshot.docs.map(doc => {\n          const data = doc.data();\n          return data.followerId;\n        });\n      }\n\n      if (followerIds.length === 0) {\n        return [];\n      }\n\n      // Get user details for all followers\n      const followers: User[] = [];\n\n      for (const followerId of followerIds) {\n        const userDoc = await getDoc(doc(db, 'users', followerId));\n        if (userDoc.exists()) {\n          const userData = userDoc.data();\n          followers.push({\n            id: userDoc.id,\n            username: userData.username,\n            email: userData.email,\n            name: userData.name,\n            bio: userData.bio || '',\n            profilePicture: userData.profilePicture,\n            followersCount: userData.followersCount || 0,\n            followingCount: userData.followingCount || 0,\n            createdAt: userData.createdAt?.toDate() || new Date(),\n            updatedAt: userData.updatedAt?.toDate() || new Date(),\n          });\n        } else {\n        }\n      }\n\n      return followers;\n    } catch (error) {\n      // Handle permission errors silently for privacy-protected data\n      if (isPermissionError(error)) {\n        return [];\n      }\n      console.error('[getFollowers] Error:', error);\n      const apiError = handleError(error, 'Fetch followers', {\n        defaultMessage: ERROR_MESSAGES.PROFILE_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get all users that a user is following\n   * Supports both new social_graph structure and legacy follows collection\n   *\n   * @param userId - The user ID whose following list to retrieve\n   * @returns Promise resolving to array of following users (empty array on error)\n   * @throws Error if fetch fails (except permission errors which return empty array)\n   */\n  getFollowing: async (userId: string): Promise<User[]> => {\n    try {\n      let followingIds: string[] = [];\n\n      // Try new social_graph structure first\n      try {\n        const outboundRef = collection(db, `social_graph/${userId}/outbound`);\n        const outboundSnapshot = await getDocs(outboundRef);\n\n        if (!outboundSnapshot.empty) {\n          followingIds = outboundSnapshot.docs.map(doc => doc.id);\n        }\n      } catch (socialGraphError) {\n        // If social_graph doesn't exist or has permission issues, continue to fallback\n      }\n\n      // Fallback to old follows collection if no following found via social_graph\n      if (followingIds.length === 0) {\n        const followingQuery = query(\n          collection(db, 'follows'),\n          where('followerId', '==', userId)\n        );\n        const followingSnapshot = await getDocs(followingQuery);\n\n        followingIds = followingSnapshot.docs.map(doc => {\n          const data = doc.data();\n          return data.followingId;\n        });\n      }\n\n      if (followingIds.length === 0) {\n        return [];\n      }\n\n      // Get user details for all following\n      const following: User[] = [];\n\n      for (const followingId of followingIds) {\n        const userDoc = await getDoc(doc(db, 'users', followingId));\n        if (userDoc.exists()) {\n          const userData = userDoc.data();\n          following.push({\n            id: userDoc.id,\n            username: userData.username,\n            email: userData.email,\n            name: userData.name,\n            bio: userData.bio || '',\n            profilePicture: userData.profilePicture,\n            followersCount: userData.followersCount || 0,\n            followingCount: userData.followingCount || 0,\n            createdAt: userData.createdAt?.toDate() || new Date(),\n            updatedAt: userData.updatedAt?.toDate() || new Date(),\n          });\n        } else {\n        }\n      }\n\n      return following;\n    } catch (error) {\n      // Handle permission errors silently for privacy-protected data\n      if (isPermissionError(error)) {\n        return [];\n      }\n      console.error('[getFollowing] Error:', error);\n      const apiError = handleError(error, 'Fetch following', {\n        defaultMessage: ERROR_MESSAGES.PROFILE_LOAD_FAILED,\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Recalculate and sync follower/following counts from the follows collection\n   * Useful for fixing stale or incorrect counts\n   *\n   * @param userId - The user ID whose counts to sync\n   * @returns Promise resolving to the updated follower and following counts\n   * @throws Error if sync fails\n   */\n  syncFollowerCounts: async (\n    userId: string\n  ): Promise<{ followersCount: number; followingCount: number }> => {\n    try {\n      // Count followers (people who follow this user)\n      const followersQuery = query(\n        collection(db, 'follows'),\n        where('followingId', '==', userId)\n      );\n      const followersSnapshot = await getDocs(followersQuery);\n      const followersCount = followersSnapshot.size;\n\n      // Count following (people this user follows)\n      const followingQuery = query(\n        collection(db, 'follows'),\n        where('followerId', '==', userId)\n      );\n      const followingSnapshot = await getDocs(followingQuery);\n      const followingCount = followingSnapshot.size;\n\n      // Update the user document with correct counts\n      await updateDoc(doc(db, 'users', userId), {\n        followersCount,\n        followingCount,\n        updatedAt: serverTimestamp(),\n      });\n\n      return { followersCount, followingCount };\n    } catch (error) {\n      const apiError = handleError(error, 'Sync follower counts', {\n        defaultMessage: 'Failed to sync follower counts',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Search for users by username or name (case-insensitive prefix matching)\n   *\n   * @param searchTerm - The search term to match against username/name\n   * @param page - Page number for pagination (default: 1)\n   * @param limitCount - Maximum number of results to return (default: 20)\n   * @returns Promise resolving to search results with pagination metadata\n   * @throws Error if rate limit exceeded or search fails\n   */\n  searchUsers: async (\n    searchTerm: string,\n    page: number = 1,\n    limitCount: number = 20\n  ): Promise<{\n    users: UserSearchResult[];\n    totalCount: number;\n    hasMore: boolean;\n  }> => {\n    try {\n      // Rate limitFn search operations\n      if (auth.currentUser) {\n        checkRateLimit(auth.currentUser.uid, 'SEARCH');\n      }\n\n      const term = (searchTerm || '').trim();\n      if (!term) {\n        return { users: [], totalCount: 0, hasMore: false };\n      }\n\n      // Convert search term to lowercase for case-insensitive search\n      const termLower = term.toLowerCase();\n\n      // 1) Search by username prefix (case-insensitive)\n      const usernameQ = query(\n        collection(db, 'users'),\n        orderBy('usernameLower'),\n        where('usernameLower', '>=', termLower),\n        where('usernameLower', '<=', termLower + '\\uf8ff'),\n        limitFn(limitCount)\n      );\n\n      // 2) Search by name prefix (case-insensitive)\n      const nameQ = query(\n        collection(db, 'users'),\n        orderBy('nameLower'),\n        where('nameLower', '>=', termLower),\n        where('nameLower', '<=', termLower + '\\uf8ff'),\n        limitFn(limitCount)\n      );\n\n      const [usernameSnap, nameSnap] = await Promise.all([\n        getDocs(usernameQ),\n        getDocs(nameQ),\n      ]);\n\n      // Merge and de-duplicate results, prefer username matches first\n      const byId: Record<string, UserSearchResult> = {};\n      const pushDoc = (\n        docSnap: QueryDocumentSnapshot<DocumentData>\n      ): void => {\n        const userData = docSnap.data();\n        byId[docSnap.id] = {\n          id: docSnap.id,\n          username: userData.username,\n          name: userData.name,\n          bio: userData.bio,\n          profilePicture: userData.profilePicture,\n          followersCount:\n            userData.inboundFriendshipCount || userData.followersCount || 0,\n          isFollowing: false,\n        } as UserSearchResult;\n      };\n\n      usernameSnap.forEach(pushDoc);\n      nameSnap.forEach(d => {\n        if (!byId[d.id]) pushDoc(d);\n      });\n\n      // Convert to array and apply a basic relevance sort: exact prefix on username > name > others\n      let users = Object.values(byId)\n        .sort((a, b) => {\n          const t = term.toLowerCase();\n          const aUser = a.username?.toLowerCase() || '';\n          const bUser = b.username?.toLowerCase() || '';\n          const aName = a.name?.toLowerCase() || '';\n          const bName = b.name?.toLowerCase() || '';\n\n          const aScore =\n            (aUser.startsWith(t) ? 2 : 0) + (aName.startsWith(t) ? 1 : 0);\n          const bScore =\n            (bUser.startsWith(t) ? 2 : 0) + (bName.startsWith(t) ? 1 : 0);\n          return bScore - aScore;\n        })\n        .slice(0, limitCount);\n\n      // Check if current user is following each user\n      if (auth.currentUser) {\n        const followingChecks = await Promise.all(\n          users.map(async user => {\n            if (user.id === auth.currentUser!.uid) {\n              return { ...user, isFollowing: false }; // Don't check for own profile\n            }\n            const socialGraphDoc = await getDoc(\n              doc(db, `social_graph/${auth.currentUser!.uid}/outbound`, user.id)\n            );\n            return { ...user, isFollowing: socialGraphDoc.exists() };\n          })\n        );\n        users = followingChecks;\n      }\n\n      return {\n        users,\n        totalCount: users.length,\n        hasMore: users.length === limitCount,\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Search users', {\n        defaultMessage: 'Failed to search users',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get suggested users to follow based on popularity\n   * Filters out current user and users already being followed\n   *\n   * @param limitCount - Maximum number of suggestions to return (default: 10)\n   * @returns Promise resolving to array of suggested users with follow reasons\n   * @throws Error if fetch fails (returns empty array on error)\n   */\n  getSuggestedUsers: async (\n    limitCount: number = 10\n  ): Promise<SuggestedUser[]> => {\n    try {\n      if (!auth.currentUser) {\n        return [];\n      }\n\n      // Get list of users we're already following directly from social_graph\n      const outboundRef = collection(\n        db,\n        `social_graph/${auth.currentUser.uid}/outbound`\n      );\n      const outboundSnapshot = await getDocs(outboundRef);\n      const followingIds = new Set(outboundSnapshot.docs.map(doc => doc.id));\n      followingIds.add(auth.currentUser.uid); // Also exclude current user\n\n      // Also check old follows collection for backward compatibility if social_graph is empty\n      if (followingIds.size === 1) {\n        // Only current user in set\n        const followingQuery = query(\n          collection(db, 'follows'),\n          where('followerId', '==', auth.currentUser.uid)\n        );\n        const followingSnapshot = await getDocs(followingQuery);\n        followingSnapshot.docs.forEach(doc => {\n          const data = doc.data();\n          if (data.followingId) {\n            followingIds.add(data.followingId);\n          }\n        });\n      }\n\n      // Query users ordered by popularity (follower count descending)\n      // Fetch a reasonable buffer to account for already-followed users\n      // If we need 5 suggestions and user follows ~20 people, fetching 30 should be sufficient\n      const fetchLimit = Math.min(limitCount * 5, 50); // 5x multiplier, max 50\n      const usersQuery = query(\n        collection(db, 'users'),\n        where('profileVisibility', '==', 'everyone'),\n        orderBy('followersCount', 'desc'),\n        limitFn(fetchLimit)\n      );\n\n      const querySnapshot = await getDocs(usersQuery);\n      const suggestions: SuggestedUser[] = [];\n\n      // Filter and collect until we have enough suggestions\n      for (const doc of querySnapshot.docs) {\n        if (suggestions.length >= limitCount) {\n          break;\n        }\n\n        // Skip users we're already following or current user\n        if (followingIds.has(doc.id)) {\n          continue;\n        }\n\n        const userData = doc.data();\n        suggestions.push({\n          id: doc.id,\n          username: userData.username,\n          name: userData.name,\n          bio: userData.bio,\n          profilePicture: userData.profilePicture,\n          followersCount: userData.followersCount || 0,\n          reason:\n            (userData.followersCount || 0) > 10\n              ? 'popular_user'\n              : 'similar_interests',\n          isFollowing: false,\n        });\n      }\n\n      return suggestions;\n    } catch (error) {\n      handleError(error, 'getting suggested users', {\n        severity: ErrorSeverity.ERROR,\n      });\n      const apiError = handleError(error, 'Get suggested users', {\n        defaultMessage: 'Failed to get suggested users',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Get privacy settings for the authenticated user\n   *\n   * @returns Promise resolving to the user's privacy settings\n   * @throws Error if user is not authenticated or fetch fails\n   */\n  getPrivacySettings: async (): Promise<PrivacySettings> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const userDoc = await getDoc(doc(db, 'users', auth.currentUser.uid));\n      const userData = userDoc.data();\n\n      return {\n        profileVisibility: userData?.profileVisibility || 'everyone',\n        activityVisibility: userData?.activityVisibility || 'everyone',\n        projectVisibility: userData?.projectVisibility || 'everyone',\n        blockedUsers: userData?.blockedUsers || [],\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Get privacy settings', {\n        defaultMessage: 'Failed to get privacy settings',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Update privacy settings for the authenticated user\n   *\n   * @param settings - Partial privacy settings with fields to update\n   * @returns Promise resolving to the updated privacy settings\n   * @throws Error if user is not authenticated or update fails\n   */\n  updatePrivacySettings: async (\n    settings: Partial<PrivacySettings>\n  ): Promise<PrivacySettings> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const updateData = {\n        ...settings,\n        updatedAt: serverTimestamp(),\n      };\n\n      await updateDoc(doc(db, 'users', auth.currentUser.uid), updateData);\n\n      return {\n        profileVisibility: settings.profileVisibility || 'everyone',\n        activityVisibility: settings.activityVisibility || 'everyone',\n        projectVisibility: settings.projectVisibility || 'everyone',\n        blockedUsers: settings.blockedUsers || [],\n      };\n    } catch (error) {\n      const apiError = handleError(error, 'Update privacy settings', {\n        defaultMessage: 'Failed to update privacy settings',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Check if a username is available (not already taken)\n   *\n   * @param username - The username to check\n   * @returns Promise resolving to true if available, false if taken\n   * @throws Error if check fails\n   */\n  checkUsernameAvailability: async (username: string): Promise<boolean> => {\n    try {\n      const usersQuery = query(\n        collection(db, 'users'),\n        where('username', '==', username),\n        limitFn(1)\n      );\n      const querySnapshot = await getDocs(usersQuery);\n      return querySnapshot.empty;\n    } catch (error) {\n      // Handle Firebase permission errors gracefully\n      if (isPermissionError(error)) {\n        handleError(error, 'Check username availability', {\n          severity: ErrorSeverity.WARNING,\n        });\n        // In case of permission error, assume username is available to allow registration to proceed\n        // The actual uniqueness will be enforced by Firebase Auth and server-side validation\n        return true;\n      }\n      const apiError = handleError(error, 'Check username availability');\n      throw new Error(\n        apiError.userMessage ||\n          'Unable to verify username availability. Please try again.'\n      );\n    }\n  },\n\n  /**\n   * Migration utility: Add lowercase username and name fields for search functionality\n   * Should only be run once as a data migration\n   *\n   * @returns Promise resolving to migration statistics (success, failed, total counts)\n   * @throws Error if user is not authenticated or migration fails\n   */\n  migrateUsersToLowercase: async (): Promise<{\n    success: number;\n    failed: number;\n    total: number;\n  }> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('User not authenticated');\n      }\n\n      const usersQuery = query(collection(db, 'users'), limitFn(500));\n      const querySnapshot = await getDocs(usersQuery);\n\n      let success = 0;\n      let failed = 0;\n      const total = querySnapshot.size;\n\n      for (const userDoc of querySnapshot.docs) {\n        try {\n          const userData = userDoc.data();\n          const updates: Record<string, unknown> = {\n            updatedAt: serverTimestamp(),\n          };\n\n          if (userData.username && !userData.usernameLower) {\n            updates.usernameLower = userData.username.toLowerCase();\n          }\n\n          if (userData.name && !userData.nameLower) {\n            updates.nameLower = userData.name.toLowerCase();\n          }\n\n          // Only update if there are new fields to add\n          if (Object.keys(updates).length > 1) {\n            await updateDoc(doc(db, 'users', userDoc.id), updates);\n            success++;\n          }\n        } catch (error) {\n          failed++;\n          console.error(`Failed to migrate user ${userDoc.id}:`, error);\n        }\n      }\n\n      const result = { success, failed, total };\n      return result;\n    } catch (error) {\n      const apiError = handleError(error, 'Migrate users to lowercase', {\n        defaultMessage: 'Failed to migrate users',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n\n  /**\n   * Delete user account and all associated data permanently\n   * Includes sessions, comments, follows, projects, tasks, streaks, and profile picture\n   *\n   * @returns Promise that resolves when account is completely deleted\n   * @throws Error if user is not authenticated or deletion fails\n   */\n  deleteAccount: async (): Promise<void> => {\n    try {\n      if (!auth.currentUser) {\n        throw new Error('No authenticated user');\n      }\n\n      const userId = auth.currentUser.uid;\n\n      // 1. Delete all user's sessions\n      const sessionsQuery = query(\n        collection(db, 'sessions'),\n        where('userId', '==', userId)\n      );\n      const sessionsSnapshot = await getDocs(sessionsQuery);\n      const sessionDeletes = sessionsSnapshot.docs.map(doc =>\n        deleteDoc(doc.ref)\n      );\n      await Promise.all(sessionDeletes);\n\n      // 2. Delete all user's comments\n      const commentsQuery = query(\n        collection(db, 'comments'),\n        where('userId', '==', userId)\n      );\n      const commentsSnapshot = await getDocs(commentsQuery);\n      const commentDeletes = commentsSnapshot.docs.map(doc =>\n        deleteDoc(doc.ref)\n      );\n      await Promise.all(commentDeletes);\n\n      // 3. Delete all follow relationships where user is follower or following\n      const followsAsFollowerQuery = query(\n        collection(db, 'follows'),\n        where('followerId', '==', userId)\n      );\n      const followsAsFollowingQuery = query(\n        collection(db, 'follows'),\n        where('followingId', '==', userId)\n      );\n      const [followsAsFollowerSnapshot, followsAsFollowingSnapshot] =\n        await Promise.all([\n          getDocs(followsAsFollowerQuery),\n          getDocs(followsAsFollowingQuery),\n        ]);\n      const followDeletes = [\n        ...followsAsFollowerSnapshot.docs.map(doc => deleteDoc(doc.ref)),\n        ...followsAsFollowingSnapshot.docs.map(doc => deleteDoc(doc.ref)),\n      ];\n      await Promise.all(followDeletes);\n\n      // 4. Delete user's projects and their tasks\n      const projectsRef = collection(db, 'projects', userId, 'userProjects');\n      const projectsSnapshot = await getDocs(projectsRef);\n\n      for (const projectDoc of projectsSnapshot.docs) {\n        // Delete tasks in each project\n        const tasksRef = collection(\n          db,\n          'projects',\n          userId,\n          'userProjects',\n          projectDoc.id,\n          'tasks'\n        );\n        const tasksSnapshot = await getDocs(tasksRef);\n        const taskDeletes = tasksSnapshot.docs.map(doc => deleteDoc(doc.ref));\n        await Promise.all(taskDeletes);\n\n        // Delete the project\n        await deleteDoc(projectDoc.ref);\n      }\n\n      // 5. Delete user's streak data\n      try {\n        const streakRef = doc(db, 'streaks', userId);\n        await deleteDoc(streakRef);\n      } catch (_error) {}\n\n      // 6. Delete user's active session data\n      try {\n        const activeSessionRef = doc(\n          db,\n          'users',\n          userId,\n          'activeSession',\n          'current'\n        );\n        await deleteDoc(activeSessionRef);\n      } catch (_error) {}\n\n      // 7. Delete profile picture from storage if it exists\n      try {\n        const userDoc = await getDoc(doc(db, 'users', userId));\n        const userData = userDoc.data();\n        if (userData?.profilePicture) {\n          const storageRef = ref(storage, `profile-pictures/${userId}`);\n          await deleteObject(storageRef);\n        }\n      } catch (_error) {}\n\n      // 8. Delete the user document from Firestore\n      await deleteDoc(doc(db, 'users', userId));\n\n      // 9. Finally, delete the Firebase Auth user\n      await auth.currentUser.delete();\n    } catch (error) {\n      const apiError = handleError(error, 'Delete account', {\n        defaultMessage:\n          'Failed to delete account. Please try logging out and back in, then try again.',\n      });\n      throw new Error(apiError.userMessage);\n    }\n  },\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/cache.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/challengeScheduler.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/debug.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/errorHandler.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/firebase.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/firestoreCache.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/formatters.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/imageUpload.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/onboarding/sampleProjects.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/projectStats.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/queryClient.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/rateLimit.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/react-query/auth.queries.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/react-query/helpers.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/react-query/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/react-query/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/sentry-config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/useSessionCompletion.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/userUtils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/validation/__tests__/comment.schemas.test.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 262,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 262,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7063, 7066], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7063, 7066], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 481,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 481,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12897, 12900], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12897, 12900], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 496,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 496,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13295, 13298], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13295, 13298], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Tests for comment validation schemas\n */\n\nimport { validate } from '../utils/validate';\nimport {\n  CreateCommentSchema,\n  UpdateCommentSchema,\n  CommentLikeSchema,\n  CommentFiltersSchema,\n  CommentSortSchema,\n} from '../schemas/comment.schemas';\n\ndescribe('Comment Schemas', () => {\n  describe('CreateCommentSchema', () => {\n    it('should validate valid comment data', () => {\n      const input = {\n        sessionId: '550e8400-e29b-41d4-a716-446655440000',\n        content: 'Great session! Keep up the good work.',\n      };\n\n      const result = validate(CreateCommentSchema, input);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.sessionId).toBe(input.sessionId);\n        expect(result.data.content).toBe(input.content);\n      }\n    });\n\n    it('should validate comment with parentCommentId for replies', () => {\n      const input = {\n        sessionId: '550e8400-e29b-41d4-a716-446655440000',\n        content: 'Thanks for the reply!',\n        parentCommentId: '660e8400-e29b-41d4-a716-446655440001',\n      };\n\n      const result = validate(CreateCommentSchema, input);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.parentCommentId).toBe(input.parentCommentId);\n      }\n    });\n\n    it('should fail for missing sessionId', () => {\n      const input = {\n        content: 'Great session!',\n      };\n\n      const result = validate(CreateCommentSchema, input);\n\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        const paths = result.errors.map((e) => e.path);\n        expect(paths).toContain('sessionId');\n      }\n    });\n\n    it('should fail for missing content', () => {\n      const input = {\n        sessionId: '550e8400-e29b-41d4-a716-446655440000',\n      };\n\n      const result = validate(CreateCommentSchema, input);\n\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        const paths = result.errors.map((e) => e.path);\n        expect(paths).toContain('content');\n      }\n    });\n\n    it('should fail for empty content', () => {\n      const input = {\n        sessionId: '550e8400-e29b-41d4-a716-446655440000',\n        content: '',\n      };\n\n      const result = validate(CreateCommentSchema, input);\n\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        expect(result.errors[0].path).toBe('content');\n      }\n    });\n\n    it('should fail for content exceeding 2000 characters', () => {\n      const input = {\n        sessionId: '550e8400-e29b-41d4-a716-446655440000',\n        content: 'A'.repeat(2001), // Max is 2000\n      };\n\n      const result = validate(CreateCommentSchema, input);\n\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        expect(result.errors[0].path).toBe('content');\n      }\n    });\n\n    it('should allow content at exactly 2000 characters', () => {\n      const input = {\n        sessionId: '550e8400-e29b-41d4-a716-446655440000',\n        content: 'A'.repeat(2000), // Exactly max\n      };\n\n      const result = validate(CreateCommentSchema, input);\n\n      expect(result.success).toBe(true);\n    });\n\n    it('should fail for invalid sessionId format', () => {\n      const input = {\n        sessionId: 'not-a-uuid',\n        content: 'Great work!',\n      };\n\n      const result = validate(CreateCommentSchema, input);\n\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        expect(result.errors[0].path).toBe('sessionId');\n      }\n    });\n\n    it('should fail for invalid parentCommentId format', () => {\n      const input = {\n        sessionId: '550e8400-e29b-41d4-a716-446655440000',\n        content: 'Reply to comment',\n        parentCommentId: 'invalid-uuid',\n      };\n\n      const result = validate(CreateCommentSchema, input);\n\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        expect(result.errors[0].path).toBe('parentCommentId');\n      }\n    });\n\n    it('should trim content whitespace', () => {\n      const input = {\n        sessionId: '550e8400-e29b-41d4-a716-446655440000',\n        content: '  Great session!  ',\n      };\n\n      const result = validate(CreateCommentSchema, input);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.content).toBe('Great session!');\n      }\n    });\n\n    it('should fail when content is only whitespace', () => {\n      const input = {\n        sessionId: '550e8400-e29b-41d4-a716-446655440000',\n        content: '   ',\n      };\n\n      const result = validate(CreateCommentSchema, input);\n\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        expect(result.errors[0].path).toBe('content');\n      }\n    });\n  });\n\n  describe('UpdateCommentSchema', () => {\n    it('should validate content update', () => {\n      const input = {\n        content: 'Updated comment text',\n      };\n\n      const result = validate(UpdateCommentSchema, input);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.content).toBe(input.content);\n      }\n    });\n\n    it('should validate isEdited flag update', () => {\n      const input = {\n        isEdited: true,\n      };\n\n      const result = validate(UpdateCommentSchema, input);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.isEdited).toBe(true);\n      }\n    });\n\n    it('should validate both content and isEdited together', () => {\n      const input = {\n        content: 'Edited comment',\n        isEdited: true,\n      };\n\n      const result = validate(UpdateCommentSchema, input);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.content).toBe('Edited comment');\n        expect(result.data.isEdited).toBe(true);\n      }\n    });\n\n    it('should validate empty update object', () => {\n      const input = {};\n\n      const result = validate(UpdateCommentSchema, input);\n\n      expect(result.success).toBe(true);\n    });\n\n    it('should fail for empty content', () => {\n      const input = {\n        content: '',\n      };\n\n      const result = validate(UpdateCommentSchema, input);\n\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        expect(result.errors[0].path).toBe('content');\n      }\n    });\n\n    it('should fail for content exceeding 2000 characters', () => {\n      const input = {\n        content: 'B'.repeat(2001),\n      };\n\n      const result = validate(UpdateCommentSchema, input);\n\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        expect(result.errors[0].path).toBe('content');\n      }\n    });\n\n    it('should trim content whitespace', () => {\n      const input = {\n        content: '  Updated text  ',\n      };\n\n      const result = validate(UpdateCommentSchema, input);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.content).toBe('Updated text');\n      }\n    });\n\n    it('should fail for invalid isEdited type', () => {\n      const input = {\n        isEdited: 'yes' as any,\n      };\n\n      const result = validate(UpdateCommentSchema, input);\n\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        expect(result.errors[0].path).toBe('isEdited');\n      }\n    });\n  });\n\n  describe('CommentLikeSchema', () => {\n    it('should validate valid commentId', () => {\n      const input = {\n        commentId: '550e8400-e29b-41d4-a716-446655440000',\n      };\n\n      const result = validate(CommentLikeSchema, input);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.commentId).toBe(input.commentId);\n      }\n    });\n\n    it('should fail for missing commentId', () => {\n      const input = {};\n\n      const result = validate(CommentLikeSchema, input);\n\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        const paths = result.errors.map((e) => e.path);\n        expect(paths).toContain('commentId');\n      }\n    });\n\n    it('should fail for invalid commentId format', () => {\n      const input = {\n        commentId: 'not-a-uuid',\n      };\n\n      const result = validate(CommentLikeSchema, input);\n\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        expect(result.errors[0].path).toBe('commentId');\n      }\n    });\n  });\n\n  describe('CommentFiltersSchema', () => {\n    it('should validate empty filters', () => {\n      const input = {};\n\n      const result = validate(CommentFiltersSchema, input);\n\n      expect(result.success).toBe(true);\n    });\n\n    it('should validate sessionId filter', () => {\n      const input = {\n        sessionId: '550e8400-e29b-41d4-a716-446655440000',\n      };\n\n      const result = validate(CommentFiltersSchema, input);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.sessionId).toBe(input.sessionId);\n      }\n    });\n\n    it('should validate userId filter', () => {\n      const input = {\n        userId: '660e8400-e29b-41d4-a716-446655440001',\n      };\n\n      const result = validate(CommentFiltersSchema, input);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.userId).toBe(input.userId);\n      }\n    });\n\n    it('should validate parentCommentId filter', () => {\n      const input = {\n        parentCommentId: '770e8400-e29b-41d4-a716-446655440002',\n      };\n\n      const result = validate(CommentFiltersSchema, input);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.parentCommentId).toBe(input.parentCommentId);\n      }\n    });\n\n    it('should validate includeReplies filter', () => {\n      const input = {\n        includeReplies: true,\n      };\n\n      const result = validate(CommentFiltersSchema, input);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.includeReplies).toBe(true);\n      }\n    });\n\n    it('should validate multiple filters together', () => {\n      const input = {\n        sessionId: '550e8400-e29b-41d4-a716-446655440000',\n        userId: '660e8400-e29b-41d4-a716-446655440001',\n        includeReplies: false,\n      };\n\n      const result = validate(CommentFiltersSchema, input);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.sessionId).toBe(input.sessionId);\n        expect(result.data.userId).toBe(input.userId);\n        expect(result.data.includeReplies).toBe(false);\n      }\n    });\n\n    it('should fail for invalid UUID formats', () => {\n      const input = {\n        sessionId: 'invalid-uuid',\n      };\n\n      const result = validate(CommentFiltersSchema, input);\n\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        expect(result.errors[0].path).toBe('sessionId');\n      }\n    });\n  });\n\n  describe('CommentSortSchema', () => {\n    it('should validate sort by createdAt ascending', () => {\n      const input = {\n        field: 'createdAt' as const,\n        direction: 'asc' as const,\n      };\n\n      const result = validate(CommentSortSchema, input);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.field).toBe('createdAt');\n        expect(result.data.direction).toBe('asc');\n      }\n    });\n\n    it('should validate sort by likeCount descending', () => {\n      const input = {\n        field: 'likeCount' as const,\n        direction: 'desc' as const,\n      };\n\n      const result = validate(CommentSortSchema, input);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.field).toBe('likeCount');\n        expect(result.data.direction).toBe('desc');\n      }\n    });\n\n    it('should validate sort by replyCount', () => {\n      const input = {\n        field: 'replyCount' as const,\n        direction: 'desc' as const,\n      };\n\n      const result = validate(CommentSortSchema, input);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.field).toBe('replyCount');\n      }\n    });\n\n    it('should fail for missing field', () => {\n      const input = {\n        direction: 'asc' as const,\n      };\n\n      const result = validate(CommentSortSchema, input);\n\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        const paths = result.errors.map((e) => e.path);\n        expect(paths).toContain('field');\n      }\n    });\n\n    it('should fail for missing direction', () => {\n      const input = {\n        field: 'createdAt' as const,\n      };\n\n      const result = validate(CommentSortSchema, input);\n\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        const paths = result.errors.map((e) => e.path);\n        expect(paths).toContain('direction');\n      }\n    });\n\n    it('should fail for invalid field value', () => {\n      const input = {\n        field: 'invalidField' as any,\n        direction: 'asc' as const,\n      };\n\n      const result = validate(CommentSortSchema, input);\n\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        expect(result.errors[0].path).toBe('field');\n      }\n    });\n\n    it('should fail for invalid direction value', () => {\n      const input = {\n        field: 'createdAt' as const,\n        direction: 'invalid' as any,\n      };\n\n      const result = validate(CommentSortSchema, input);\n\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        expect(result.errors[0].path).toBe('direction');\n      }\n    });\n  });\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/validation/__tests__/session.schemas.test.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 121,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 121,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3452, 3455], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3452, 3455], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Tests for session validation schemas\n */\n\nimport { validate } from '../utils/validate';\nimport { CreateSessionSchema, UpdateSessionSchema, SessionFormSchema } from '../schemas/session.schemas';\n\ndescribe('Session Schemas', () => {\n  describe('CreateSessionSchema', () => {\n    it('should validate valid session data', () => {\n      const input = {\n        activityId: '550e8400-e29b-41d4-a716-446655440000',\n        title: 'Deep Work Session',\n        duration: 3600,\n        startTime: new Date('2025-01-15T10:00:00Z'),\n        visibility: 'everyone' as const,\n      };\n\n      const result = validate(CreateSessionSchema, input);\n\n      expect(result.success).toBe(true);\n    });\n\n    it('should accept optional fields', () => {\n      const input = {\n        activityId: '550e8400-e29b-41d4-a716-446655440000',\n        title: 'Study Session',\n        duration: 1800,\n        startTime: new Date(),\n        description: 'Studying algorithms',\n        tags: ['coding', 'algorithms'],\n        images: ['https://example.com/image1.jpg'],\n        howFelt: 4,\n        privateNotes: 'Great session!',\n        allowComments: true,\n      };\n\n      const result = validate(CreateSessionSchema, input);\n\n      expect(result.success).toBe(true);\n    });\n\n    it('should fail for missing required fields', () => {\n      const input = {\n        title: 'Test Session',\n        duration: 3600,\n      };\n\n      const result = validate(CreateSessionSchema, input);\n\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        const paths = result.errors.map((e) => e.path);\n        expect(paths).toContain('activityId');\n        expect(paths).toContain('startTime');\n      }\n    });\n\n    it('should fail for invalid activity ID', () => {\n      const input = {\n        activityId: 'not-a-uuid',\n        title: 'Test',\n        duration: 3600,\n        startTime: new Date(),\n      };\n\n      const result = validate(CreateSessionSchema, input);\n\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        expect(result.errors[0].path).toBe('activityId');\n      }\n    });\n\n    it('should fail for invalid duration', () => {\n      const inputs = [\n        { duration: 0 }, // Too short\n        { duration: -100 }, // Negative\n        { duration: 90000 }, // Too long (> 24 hours)\n      ];\n\n      inputs.forEach((durationInput) => {\n        const input = {\n          activityId: '550e8400-e29b-41d4-a716-446655440000',\n          title: 'Test',\n          startTime: new Date(),\n          ...durationInput,\n        };\n\n        const result = validate(CreateSessionSchema, input);\n\n        expect(result.success).toBe(false);\n        if (!result.success) {\n          expect(result.errors[0].path).toBe('duration');\n        }\n      });\n    });\n\n    it('should fail for title too long', () => {\n      const input = {\n        activityId: '550e8400-e29b-41d4-a716-446655440000',\n        title: 'A'.repeat(201), // Max is 200\n        duration: 3600,\n        startTime: new Date(),\n      };\n\n      const result = validate(CreateSessionSchema, input);\n\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        expect(result.errors[0].path).toBe('title');\n      }\n    });\n\n    it('should fail for invalid visibility', () => {\n      const input = {\n        activityId: '550e8400-e29b-41d4-a716-446655440000',\n        title: 'Test',\n        duration: 3600,\n        startTime: new Date(),\n        visibility: 'invalid' as any,\n      };\n\n      const result = validate(CreateSessionSchema, input);\n\n      expect(result.success).toBe(false);\n      if (!result.success) {\n        expect(result.errors[0].path).toBe('visibility');\n      }\n    });\n\n    it('should fail for invalid howFelt rating', () => {\n      const inputs = [{ howFelt: 0 }, { howFelt: 6 }, { howFelt: -1 }];\n\n      inputs.forEach((ratingInput) => {\n        const input = {\n          activityId: '550e8400-e29b-41d4-a716-446655440000',\n          title: 'Test',\n          duration: 3600,\n          startTime: new Date(),\n          ...ratingInput,\n        };\n\n        const result = validate(CreateSessionSchema, input);\n\n        expect(result.success).toBe(false);\n        if (!result.success) {\n          expect(result.errors[0].path).toBe('howFelt');\n        }\n      });\n    });\n\n    it('should trim title and description', () => {\n      const input = {\n        activityId: '550e8400-e29b-41d4-a716-446655440000',\n        title: '  Spaced Title  ',\n        description: '  Spaced Description  ',\n        duration: 3600,\n        startTime: new Date(),\n      };\n\n      const result = validate(CreateSessionSchema, input);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.title).toBe('Spaced Title');\n        expect(result.data.description).toBe('Spaced Description');\n      }\n    });\n  });\n\n  describe('UpdateSessionSchema', () => {\n    it('should validate partial updates', () => {\n      const input = {\n        title: 'Updated Title',\n        visibility: 'private' as const,\n      };\n\n      const result = validate(UpdateSessionSchema, input);\n\n      expect(result.success).toBe(true);\n    });\n\n    it('should allow updating isArchived', () => {\n      const input = {\n        isArchived: true,\n      };\n\n      const result = validate(UpdateSessionSchema, input);\n\n      expect(result.success).toBe(true);\n    });\n\n    it('should validate all fields when provided', () => {\n      const input = {\n        title: 'Complete Update',\n        description: 'Updated description',\n        visibility: 'followers' as const,\n        tags: ['updated'],\n        howFelt: 3,\n        privateNotes: 'Updated notes',\n        allowComments: false,\n        isArchived: false,\n      };\n\n      const result = validate(UpdateSessionSchema, input);\n\n      expect(result.success).toBe(true);\n    });\n\n    it('should fail for invalid values', () => {\n      const input = {\n        howFelt: 10, // Invalid rating\n      };\n\n      const result = validate(UpdateSessionSchema, input);\n\n      expect(result.success).toBe(false);\n    });\n  });\n\n  describe('SessionFormSchema', () => {\n    it('should transform string duration to number', () => {\n      const input = {\n        activityId: '550e8400-e29b-41d4-a716-446655440000',\n        title: 'Test',\n        duration: '3600', // String duration\n        startTime: new Date(),\n      };\n\n      const result = validate(SessionFormSchema, input);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.duration).toBe(3600);\n        expect(typeof result.data.duration).toBe('number');\n      }\n    });\n\n    it('should transform comma-separated tags to array', () => {\n      const input = {\n        activityId: '550e8400-e29b-41d4-a716-446655440000',\n        title: 'Test',\n        duration: 3600,\n        startTime: new Date(),\n        tags: 'coding, algorithms, practice', // String tags\n      };\n\n      const result = validate(SessionFormSchema, input);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.tags).toEqual(['coding', 'algorithms', 'practice']);\n      }\n    });\n\n    it('should transform string boolean to boolean', () => {\n      const input = {\n        activityId: '550e8400-e29b-41d4-a716-446655440000',\n        title: 'Test',\n        duration: 3600,\n        startTime: new Date(),\n        showStartTime: 'true', // String boolean\n        allowComments: 'false', // String boolean\n      };\n\n      const result = validate(SessionFormSchema, input);\n\n      expect(result.success).toBe(true);\n      if (result.success) {\n        expect(result.data.showStartTime).toBe(true);\n        expect(result.data.allowComments).toBe(false);\n      }\n    });\n  });\n});\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/validation/__tests__/validate.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/validation/examples/SessionFormExample.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'SessionFormInput' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 17,
        "column": 44,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 60
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Session Form Example\n *\n * Demonstrates how to use SessionFormSchema for validating session creation forms\n * with proper error handling and user-friendly error messages.\n *\n * Key patterns:\n * - Controlled form with useState\n * - Real-time validation clearing\n * - Structured error display\n * - Type-safe form submission\n */\n\n'use client';\n\nimport { useState } from 'react';\nimport { validate, SessionFormSchema, type SessionFormInput } from '@/lib/validation';\n\ninterface SessionFormData {\n  activityId: string;\n  title: string;\n  duration: string;\n  startTime: string;\n  description?: string;\n  visibility?: 'everyone' | 'followers' | 'private';\n  tags?: string;\n  howFelt?: string;\n  privateNotes?: string;\n  allowComments?: boolean;\n}\n\ninterface SessionFormErrors {\n  activityId?: string;\n  title?: string;\n  duration?: string;\n  startTime?: string;\n  description?: string;\n  visibility?: string;\n  tags?: string;\n  howFelt?: string;\n  privateNotes?: string;\n  allowComments?: string;\n}\n\nexport function SessionFormExample() {\n  const [formData, setFormData] = useState<SessionFormData>({\n    activityId: '',\n    title: '',\n    duration: '',\n    startTime: new Date().toISOString().slice(0, 16), // datetime-local format\n    visibility: 'everyone',\n    allowComments: true,\n  });\n\n  const [errors, setErrors] = useState<SessionFormErrors>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submitError, setSubmitError] = useState<string>('');\n  const [submitSuccess, setSubmitSuccess] = useState(false);\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>\n  ) => {\n    const { name, value, type } = e.target;\n    const checked = (e.target as HTMLInputElement).checked;\n\n    setFormData((prev) => ({\n      ...prev,\n      [name]: type === 'checkbox' ? checked : value,\n    }));\n\n    // Clear field-specific error when user starts typing\n    if (errors[name as keyof SessionFormErrors]) {\n      setErrors((prev) => ({ ...prev, [name]: undefined }));\n    }\n\n    // Clear submit error\n    if (submitError) {\n      setSubmitError('');\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setErrors({});\n    setSubmitError('');\n    setSubmitSuccess(false);\n\n    // Validate form data with SessionFormSchema\n    const result = validate(SessionFormSchema, formData);\n\n    if (!result.success) {\n      // Map validation errors to form fields\n      const newErrors: SessionFormErrors = {};\n      result.errors.forEach((error) => {\n        if (error.path) {\n          newErrors[error.path as keyof SessionFormErrors] = error.message;\n        } else {\n          // Generic errors go to submit error\n          setSubmitError(error.message);\n        }\n      });\n      setErrors(newErrors);\n      return;\n    }\n\n    // Type-safe validated data\n    const validatedData = result.data;\n\n    setIsSubmitting(true);\n\n    try {\n      // Submit to API\n      const response = await fetch('/api/sessions', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(validatedData),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create session');\n      }\n\n      setSubmitSuccess(true);\n      // Reset form\n      setFormData({\n        activityId: '',\n        title: '',\n        duration: '',\n        startTime: new Date().toISOString().slice(0, 16),\n        visibility: 'everyone',\n        allowComments: true,\n      });\n    } catch (error) {\n      setSubmitError(error instanceof Error ? error.message : 'Failed to create session');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6 max-w-2xl\">\n      {/* Success Message */}\n      {submitSuccess && (\n        <div className=\"bg-green-50 border border-green-200 text-green-800 px-4 py-3 rounded-md\">\n          Session created successfully!\n        </div>\n      )}\n\n      {/* Error Message */}\n      {submitError && (\n        <div className=\"bg-destructive/10 border border-destructive/20 text-destructive px-4 py-3 rounded-md\">\n          {submitError}\n        </div>\n      )}\n\n      {/* Activity ID */}\n      <div>\n        <label htmlFor=\"activityId\" className=\"block text-sm font-medium text-foreground mb-2\">\n          Project/Activity <span className=\"text-destructive\">*</span>\n        </label>\n        <input\n          id=\"activityId\"\n          name=\"activityId\"\n          type=\"text\"\n          value={formData.activityId}\n          onChange={handleChange}\n          className={`w-full px-4 py-3 border rounded-md ${\n            errors.activityId ? 'border-destructive' : 'border-border'\n          }`}\n          placeholder=\"Select project...\"\n        />\n        {errors.activityId && <p className=\"mt-2 text-sm text-destructive\">{errors.activityId}</p>}\n      </div>\n\n      {/* Title */}\n      <div>\n        <label htmlFor=\"title\" className=\"block text-sm font-medium text-foreground mb-2\">\n          Session Title <span className=\"text-destructive\">*</span>\n        </label>\n        <input\n          id=\"title\"\n          name=\"title\"\n          type=\"text\"\n          value={formData.title}\n          onChange={handleChange}\n          className={`w-full px-4 py-3 border rounded-md ${\n            errors.title ? 'border-destructive' : 'border-border'\n          }`}\n          placeholder=\"What did you work on?\"\n          maxLength={200}\n        />\n        {errors.title && <p className=\"mt-2 text-sm text-destructive\">{errors.title}</p>}\n      </div>\n\n      {/* Duration & Start Time */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <label htmlFor=\"duration\" className=\"block text-sm font-medium text-foreground mb-2\">\n            Duration (minutes) <span className=\"text-destructive\">*</span>\n          </label>\n          <input\n            id=\"duration\"\n            name=\"duration\"\n            type=\"number\"\n            min=\"1\"\n            value={formData.duration}\n            onChange={handleChange}\n            className={`w-full px-4 py-3 border rounded-md ${\n              errors.duration ? 'border-destructive' : 'border-border'\n            }`}\n            placeholder=\"60\"\n          />\n          {errors.duration && <p className=\"mt-2 text-sm text-destructive\">{errors.duration}</p>}\n        </div>\n\n        <div>\n          <label htmlFor=\"startTime\" className=\"block text-sm font-medium text-foreground mb-2\">\n            Start Time <span className=\"text-destructive\">*</span>\n          </label>\n          <input\n            id=\"startTime\"\n            name=\"startTime\"\n            type=\"datetime-local\"\n            value={formData.startTime}\n            onChange={handleChange}\n            className={`w-full px-4 py-3 border rounded-md ${\n              errors.startTime ? 'border-destructive' : 'border-border'\n            }`}\n          />\n          {errors.startTime && <p className=\"mt-2 text-sm text-destructive\">{errors.startTime}</p>}\n        </div>\n      </div>\n\n      {/* Description */}\n      <div>\n        <label htmlFor=\"description\" className=\"block text-sm font-medium text-foreground mb-2\">\n          Description\n        </label>\n        <textarea\n          id=\"description\"\n          name=\"description\"\n          value={formData.description || ''}\n          onChange={handleChange}\n          rows={4}\n          className={`w-full px-4 py-3 border rounded-md ${\n            errors.description ? 'border-destructive' : 'border-border'\n          }`}\n          placeholder=\"Add details about your session...\"\n          maxLength={5000}\n        />\n        {errors.description && <p className=\"mt-2 text-sm text-destructive\">{errors.description}</p>}\n      </div>\n\n      {/* Visibility */}\n      <div>\n        <label htmlFor=\"visibility\" className=\"block text-sm font-medium text-foreground mb-2\">\n          Visibility\n        </label>\n        <select\n          id=\"visibility\"\n          name=\"visibility\"\n          value={formData.visibility}\n          onChange={handleChange}\n          className={`w-full px-4 py-3 border rounded-md ${\n            errors.visibility ? 'border-destructive' : 'border-border'\n          }`}\n        >\n          <option value=\"everyone\">Everyone</option>\n          <option value=\"followers\">Followers only</option>\n          <option value=\"private\">Private</option>\n        </select>\n        {errors.visibility && <p className=\"mt-2 text-sm text-destructive\">{errors.visibility}</p>}\n      </div>\n\n      {/* Tags */}\n      <div>\n        <label htmlFor=\"tags\" className=\"block text-sm font-medium text-foreground mb-2\">\n          Tags (comma-separated)\n        </label>\n        <input\n          id=\"tags\"\n          name=\"tags\"\n          type=\"text\"\n          value={formData.tags || ''}\n          onChange={handleChange}\n          className={`w-full px-4 py-3 border rounded-md ${\n            errors.tags ? 'border-destructive' : 'border-border'\n          }`}\n          placeholder=\"coding, learning, project\"\n        />\n        {errors.tags && <p className=\"mt-2 text-sm text-destructive\">{errors.tags}</p>}\n      </div>\n\n      {/* How Felt */}\n      <div>\n        <label htmlFor=\"howFelt\" className=\"block text-sm font-medium text-foreground mb-2\">\n          How did you feel? (1-5)\n        </label>\n        <input\n          id=\"howFelt\"\n          name=\"howFelt\"\n          type=\"number\"\n          min=\"1\"\n          max=\"5\"\n          value={formData.howFelt || ''}\n          onChange={handleChange}\n          className={`w-full px-4 py-3 border rounded-md ${\n            errors.howFelt ? 'border-destructive' : 'border-border'\n          }`}\n          placeholder=\"1-5\"\n        />\n        {errors.howFelt && <p className=\"mt-2 text-sm text-destructive\">{errors.howFelt}</p>}\n      </div>\n\n      {/* Private Notes */}\n      <div>\n        <label htmlFor=\"privateNotes\" className=\"block text-sm font-medium text-foreground mb-2\">\n          Private Notes (only visible to you)\n        </label>\n        <textarea\n          id=\"privateNotes\"\n          name=\"privateNotes\"\n          value={formData.privateNotes || ''}\n          onChange={handleChange}\n          rows={3}\n          className={`w-full px-4 py-3 border rounded-md ${\n            errors.privateNotes ? 'border-destructive' : 'border-border'\n          }`}\n          placeholder=\"Personal notes about this session...\"\n          maxLength={10000}\n        />\n        {errors.privateNotes && (\n          <p className=\"mt-2 text-sm text-destructive\">{errors.privateNotes}</p>\n        )}\n      </div>\n\n      {/* Allow Comments */}\n      <div className=\"flex items-center\">\n        <input\n          id=\"allowComments\"\n          name=\"allowComments\"\n          type=\"checkbox\"\n          checked={formData.allowComments}\n          onChange={handleChange}\n          className=\"h-4 w-4 text-primary focus:ring-primary border-border rounded\"\n        />\n        <label htmlFor=\"allowComments\" className=\"ml-2 text-sm text-foreground\">\n          Allow comments on this session\n        </label>\n      </div>\n\n      {/* Submit Button */}\n      <button\n        type=\"submit\"\n        disabled={isSubmitting}\n        className=\"w-full py-3 px-4 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n      >\n        {isSubmitting ? 'Creating...' : 'Create Session'}\n      </button>\n    </form>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/validation/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/validation/schemas/comment.schemas.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/validation/schemas/group.schemas.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/validation/schemas/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/validation/schemas/project.schemas.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 1,
        "message": "'OptionalStringSchema' is defined but never used. Allowed unused vars must match /^_/u.",
        "line": 9,
        "column": 44,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 64
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Project/Activity validation schemas\n *\n * Validates project creation and updates with proper type safety\n * and input sanitization.\n */\n\nimport * as v from 'valibot';\nimport { UuidSchema, NonEmptyStringSchema, OptionalStringSchema } from '../utils/common-schemas';\n\n/**\n * Schema for creating a new project/activity\n */\nexport const CreateProjectSchema = v.object({\n  // Required fields\n  name: v.pipe(\n    v.string('Project name is required'),\n    v.nonEmpty('Project name cannot be empty'),\n    v.maxLength(100, 'Project name cannot exceed 100 characters'),\n    v.transform((str) => str.trim())\n  ),\n  description: v.pipe(\n    v.string('Description is required'),\n    v.nonEmpty('Description cannot be empty'),\n    v.maxLength(500, 'Description cannot exceed 500 characters'),\n    v.transform((str) => str.trim())\n  ),\n  icon: NonEmptyStringSchema,\n  color: v.pipe(\n    v.string('Color is required'),\n    v.regex(/^#[0-9A-F]{6}$/i, 'Color must be a valid hex code (e.g., #007AFF)')\n  ),\n\n  // Optional fields\n  weeklyTarget: v.optional(\n    v.pipe(v.number('Weekly target must be a number'), v.minValue(0, 'Weekly target cannot be negative'), v.maxValue(168, 'Weekly target cannot exceed 168 hours'))\n  ),\n  totalTarget: v.optional(\n    v.pipe(v.number('Total target must be a number'), v.minValue(0, 'Total target cannot be negative'), v.maxValue(10000, 'Total target cannot exceed 10000 hours'))\n  ),\n  status: v.optional(v.picklist(['active', 'completed', 'archived'], 'Invalid status')),\n});\n\n/**\n * Schema for updating an existing project/activity\n */\nexport const UpdateProjectSchema = v.object({\n  name: v.optional(\n    v.pipe(\n      v.string(),\n      v.nonEmpty('Project name cannot be empty'),\n      v.maxLength(100, 'Project name cannot exceed 100 characters'),\n      v.transform((str) => str.trim())\n    )\n  ),\n  description: v.optional(\n    v.pipe(\n      v.string(),\n      v.nonEmpty('Description cannot be empty'),\n      v.maxLength(500, 'Description cannot exceed 500 characters'),\n      v.transform((str) => str.trim())\n    )\n  ),\n  icon: v.optional(NonEmptyStringSchema),\n  color: v.optional(v.pipe(v.string(), v.regex(/^#[0-9A-F]{6}$/i, 'Color must be a valid hex code'))),\n  weeklyTarget: v.optional(v.pipe(v.number(), v.minValue(0), v.maxValue(168))),\n  totalTarget: v.optional(v.pipe(v.number(), v.minValue(0), v.maxValue(10000))),\n  status: v.optional(v.picklist(['active', 'completed', 'archived'])),\n});\n\n/**\n * Schema for project filters\n */\nexport const ProjectFiltersSchema = v.object({\n  userId: v.optional(UuidSchema),\n  status: v.optional(v.picklist(['active', 'completed', 'archived'])),\n  search: v.optional(v.string()),\n});\n\n/**\n * Schema for project sort options\n */\nexport const ProjectSortSchema = v.object({\n  field: v.picklist(['name', 'createdAt', 'updatedAt']),\n  direction: v.picklist(['asc', 'desc']),\n});\n\n// Type exports\nexport type CreateProjectInput = v.InferInput<typeof CreateProjectSchema>;\nexport type CreateProjectData = v.InferOutput<typeof CreateProjectSchema>;\n\nexport type UpdateProjectInput = v.InferInput<typeof UpdateProjectSchema>;\nexport type UpdateProjectData = v.InferOutput<typeof UpdateProjectSchema>;\n\nexport type ProjectFiltersInput = v.InferInput<typeof ProjectFiltersSchema>;\nexport type ProjectFilters = v.InferOutput<typeof ProjectFiltersSchema>;\n\nexport type ProjectSortInput = v.InferInput<typeof ProjectSortSchema>;\nexport type ProjectSort = v.InferOutput<typeof ProjectSortSchema>;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/validation/schemas/session.schemas.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/validation/schemas/user.schemas.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/validation/utils/common-schemas.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/validation/utils/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/lib/validation/utils/validate.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/providers/QueryProvider.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/styles/staticPages.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/types/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/hughgramelspacher/repos/ambira-main/ambira-web/src/types/jest-dom.d.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  }
]
