name: CI

on:
  pull_request:
    branches:
      - '**'
    types:
      - opened
      - reopened
      - closed
  push:
    branches:
      - '**'
  release:
    types:
      - created
      - published
      - edited
  workflow_dispatch: # run the following from the root: gh workflow run ci.yml --ref <branch_name> --field reason="Hotfix deploy"
    inputs:
      reason:
        description: 'Hotfix deploy'
        required: false

jobs:
  # Install dependencies once and cache for all jobs
  install:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

  # Run lint in parallel
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Run linting
        run: npm run lint

  # Run type-check in parallel
  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Run type check
        run: npm run type-check

  # Run unit tests in parallel
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Restore node_modules cache
        id: restore-unit-node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies (fallback)
        if: steps.restore-unit-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run unit tests with coverage
        run: npm test -- tests/unit -- --coverage --coverageDirectory=docs/test-coverage/unit

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: docs/test-coverage/unit
          retention-days: 7
  
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest    
    needs: install
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Restore node_modules cache
        id: restore-integration-node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies (fallback)
        if: steps.restore-integration-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run integration tests with coverage
        run: npm test -- tests/integration -- --coverage --coverageDirectory=docs/test-coverage/integration

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: docs/test-coverage/integration
          retention-days: 7


  # Run Playwright smoke tests in parallel (conditional on tests existing)
  playwright-tests:
    name: Playwright Smoke Tests
    runs-on: ubuntu-latest
    needs: install
    # Only run if playwright.config.ts exists
    # if: hashFiles('playwright.config.ts') != ''
    # timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Restore node_modules cache
        id: restore-playwright-node-modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies (fallback)
        if: steps.restore-playwright-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(node -p "require('./package.json').devDependencies['@playwright/test']")" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        id: cache-playwright
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright browsers
        if: steps.cache-playwright.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps chromium

      - name: Install Playwright dependencies only
        if: steps.cache-playwright.outputs.cache-hit == 'true'
        run: npx playwright install-deps chromium

      - name: Restore Next.js build cache
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: ${{ runner.os }}-next-${{ hashFiles('package-lock.json', 'next.config.ts', 'tsconfig.json') }}-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-next-${{ hashFiles('package-lock.json', 'next.config.ts', 'tsconfig.json') }}-
          save-always: true

      - name: Build application
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true

      - name: Start application server
        run: npm run start &
        env:
          PORT: 3000

      - name: Wait for server to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 2; done'

      - name: Run Playwright smoke tests
        run: npx playwright test tests/e2e/smoke --project=chromium
        env:
          CI: true

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: docs/playwright-artifacts/report
          retention-days: 7

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-results
          path: docs/playwright-artifacts/test-results
          retention-days: 7

  # Build job runs after all checks pass
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, type-check, unit-tests, integration-tests, playwright-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Restore node_modules cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Restore Next.js build cache
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: ${{ runner.os }}-next-${{ hashFiles('package-lock.json', 'next.config.ts', 'tsconfig.json') }}-${{ github.ref_name }}
          restore-keys: |
            ${{ runner.os }}-next-${{ hashFiles('package-lock.json', 'next.config.ts', 'tsconfig.json') }}-
          save-always: true

      - name: Build application
        run: npm run build

      - name: Stage build artifacts
        run: |
          rm -rf docs/artifacts/next
          mkdir -p docs/artifacts
          cp -R .next docs/artifacts/next

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: docs/artifacts/next
          retention-days: 7
