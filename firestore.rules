rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function canAdjustFollowersOnly() {
      return request.resource.data.diff(resource.data).changedKeys().hasOnly(['followersCount', 'updatedAt'])
        && (
          request.resource.data.followersCount == resource.data.followersCount + 1 ||
          request.resource.data.followersCount == resource.data.followersCount - 1
        );
    }
    // Users collection and activeSession subcollection
    match /users/{userId} {
      // Owner can read/write own profile
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Allow authenticated users to atomically adjust another user's followersCount by Â±1
      allow update: if request.auth != null && canAdjustFollowersOnly();

      // Authenticated users can read others based on visibility
      allow read: if request.auth != null &&
        (resource.data.profileVisibility == 'everyone' ||
         !('profileVisibility' in resource.data));
      allow read: if request.auth != null &&
        resource.data.profileVisibility == 'followers' &&
        exists(/databases/$(database)/documents/follows/$(request.auth.uid + '_' + userId));

      // Allow listing users for discovery when authenticated
      allow list: if request.auth != null;

      // Active session subcollection - user can read/write their own active timer
      match /activeSession/{docId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Follow relationships
    match /follows/{followId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == followId.split('_')[0] || request.auth.uid == followId.split('_')[1]);
    }
    
    // User activities
    match /activities/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow followers to read activities if visibility allows (with fallback)
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(userId)) &&
        (get(/databases/$(database)/documents/users/$(userId)).data.activityVisibility == 'followers' ||
         !('activityVisibility' in get(/databases/$(database)/documents/users/$(userId)).data)) &&
        exists(/databases/$(database)/documents/follows/$(request.auth.uid + '_' + userId));
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(userId)) &&
        (get(/databases/$(database)/documents/users/$(userId)).data.activityVisibility == 'everyone' ||
         !('activityVisibility' in get(/databases/$(database)/documents/users/$(userId)).data));
    }
    
    // User activities subcollections (daily, weekly, etc.)
    match /activities/{userId}/{subcollection} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow followers to read activities if visibility allows (with fallback)
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(userId)) &&
        (get(/databases/$(database)/documents/users/$(userId)).data.activityVisibility == 'followers' ||
         !('activityVisibility' in get(/databases/$(database)/documents/users/$(userId)).data)) &&
        exists(/databases/$(database)/documents/follows/$(request.auth.uid + '_' + userId));
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(userId)) &&
        (get(/databases/$(database)/documents/users/$(userId)).data.activityVisibility == 'everyone' ||
         !('activityVisibility' in get(/databases/$(database)/documents/users/$(userId)).data));
    }
    
    // User projects - using subcollection structure
    match /projects/{userId}/userProjects/{projectId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow followers to read projects if visibility allows (with fallback)
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(userId)) &&
        (get(/databases/$(database)/documents/users/$(userId)).data.projectVisibility == 'followers' ||
         !('projectVisibility' in get(/databases/$(database)/documents/users/$(userId)).data)) &&
        exists(/databases/$(database)/documents/follows/$(request.auth.uid + '_' + userId));
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(userId)) &&
        (get(/databases/$(database)/documents/users/$(userId)).data.projectVisibility == 'everyone' ||
         !('projectVisibility' in get(/databases/$(database)/documents/users/$(userId)).data));
    }
    
    // User project tasks - subcollection of projects
    match /projects/{userId}/userProjects/{projectId}/tasks/{taskId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow followers to read tasks if project visibility allows (with fallback)
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(userId)) &&
        (get(/databases/$(database)/documents/users/$(userId)).data.projectVisibility == 'followers' ||
         !('projectVisibility' in get(/databases/$(database)/documents/users/$(userId)).data)) &&
        exists(/databases/$(database)/documents/follows/$(request.auth.uid + '_' + userId));
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/users/$(userId)) &&
        (get(/databases/$(database)/documents/users/$(userId)).data.projectVisibility == 'everyone' ||
         !('projectVisibility' in get(/databases/$(database)/documents/users/$(userId)).data));
    }
    
    // Sessions
    match /sessions/{sessionId} {
      // Create: validate userId on the incoming document
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Read/Update/Delete: validate against stored document
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      // Allow reading sessions for stats calculation (authenticated users can read any session)
      allow read: if request.auth != null;
    }
    
    // Posts
    match /posts/{postId} {
      // Create: validate userId on the incoming document
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Read: allow authenticated users to read posts
      allow read: if request.auth != null;
      // Update/Delete: only post owner can modify
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Post supports
    match /postSupports/{supportId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == supportId.split('_')[0] || request.auth.uid == supportId.split('_')[1]);
    }
    
    // Unassigned tasks (user's personal tasks)
    match /users/{userId}/tasks/{taskId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Follows
    match /follows/{followId} {
      // Create: validate followerId matches authenticated user
      allow create: if request.auth != null && request.resource.data.followerId == request.auth.uid;
      // Read: allow authenticated users to read follows for stats calculation
      allow read: if request.auth != null;
      // Delete: only the follower can delete their own follow
      allow delete: if request.auth != null && resource.data.followerId == request.auth.uid;
    }
    
    // Groups
    match /groups/{groupId} {
      allow read: if resource.data.privacySetting == 'public';
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.memberIds;
    }
    
    // (users match consolidated above)
  }
}
